{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Plasma Engine Docs! New to Plasma? Start Here! Download the engine here Docs Overview","title":"Home"},{"location":"#welcome-to-the-plasma-engine-docs","text":"New to Plasma? Start Here! Download the engine here","title":"Welcome to the Plasma Engine Docs!"},{"location":"#docs-overview","text":"","title":"Docs Overview"},{"location":"getting_started/features/","text":"Ten Exciting Features of the Plasma Engine (and also Spaces) Events Plasma Engine\u2019s Event system takes component-based design to new levels of freedom and flexibility. A Plasma Engine Event mimics its real-world counterpart: a situation that arises. How your game handles that situation is up to you. When your hero takes damage, the camera following her can shake. When a cannonball reaches the apex of its flight, an audio filter can be applied to the level\u2019s music. Every game object is a potential event dispatcher, and every object\u2019s events are up for grabs. When you work with events from the beginning of a project, you allow yourself greater freedom to rapidly explore new features and ideas with minimal refactoring of your existing code. Nested Archetypes An archetype defines a game object, its child objects, and even other nested archetypes within the hierarchy. Need to make changes to an Archetype that is nested under multiple of other Archetypes? We've got you covered. Every Archetype will automatically receive updates made to nested Archetypes. Did all those Archetypes have local modifications made to the nested one? We've still got you covered. Plasma Engine preserves local modifications when updates are made to an Archetype. Lightning Lightning is a high-level programming language developed by us to solve some of the most interesting problems in game development. Use Lightning to program and customize game scripts, editor tools and commands, and even your shaders. All of that, done in an integrated text editor equipped with full code completion and inline tooltips from documentation. Lightning features extremely fast compilation and patching/hot loading for live game editing. C++ Plugins Scripts are awesome, but at the end of the day they can't do everything that life has to offer. Whether it's a library that you want to use or you need to do some heavy lifting for performance reasons, C++ can always get the job done. With a C++ plugin you have all the power you need, wrapped up and ready to use in your game. There\u2019s no complicated setup, just create a new plugin resource and it will make you a Visual Studio solution, pre-hooked with a new component. Changes to your plugin are automatically detected by Plasma Engine, and your project updates itself on the spot. Lightweight Game Objects Plasma Engine\u2019s game objects are lightweight and versatile. We call them cogs because they\u2019re 'Game Object Compositions' (and \u201cgocs\u201d doesn\u2019t sound as cool). Cogs can house as many components and child objects as needed, and the engine is incredibly good at making and destroying them, so you never have to worry about object pooling. Shader Compositing Plasma Engine's Materials are a component based way to write shaders. Write individual shader fragments to encapsulate a desired behavior, and add the fragments you want to your Materials, just like components, to create the desired effects. The shader compositor does all the work of putting the components together to create a complete shader program for graphics hardware. It also controls the flow of inputs and outputs between fragments, so that a single fragment can modify data, like UV coordinates, before it is used as input to a following fragment. Scriptable Rendering Pipeline We're in the business of rapid iteration, and the rendering pipeline is no exception. Plasma Engine offers unparalleled control over the aesthetics of your game with the ability for scripts to define a series of tasks for the renderer. Written in script, your rendering pipeline becomes anything you can imagine, make your pipeline change dynamically with a simple condition, or even in response to an Event. Add any rendering technique to your game, including the ones that haven't been invented yet. But there\u2019s no need start from scratch: Plasma Engine comes pre-loaded with all the scripts and shaders needed for a modern physically based rendering pipeline. If that\u2019s what you\u2019re looking for, you\u2019re done. If you want more, you can use it as a starting point for customization. Scriptable Sound Nodes Plasma Engine features a powerful custom audio system. At its core is the sound node graph, a flexible, fully scriptable structure that controls the flow of audio through your game. Sound nodes can play or generate audio, apply effects, control parameters, and more, and they can be added, removed, and swapped at any time. When the sound node graph is used together with Plasma Engine\u2019s built-in event system, it\u2019s easy to apply DSP effects to just the right sounds, just when you need them. In-House Physics Like most things in the Plasma Engine, our physics system is developed by us. That may seem like an unnecessary amount of work, but we want features that pair well with the design and vision for Plasma Engine as a whole and we don't want to be held back. Plasma Engine\u2019s physics system includes features like collision groups that allow detection without resolution, regions that can apply force effects, and even scriptable joint definitions that run through our constraint solver. One-Click Network Replication Networking is easy! ... Okay we're kidding, but the road to easier networking is full of innovation, and what's easier than one mouse click? Plasma Engine continues to use component based design to every advantage we can come up with. Just add the NetObject component and now any property from your object can be replicated over the network with a single click of a button in the UI. Start from our networked project template to get a head start with some of the harder stuff. Spaces The concept of the space is quite unique: a space is a collection of game objects that interact normally with one another, but not with objects in other spaces. Physics is simulated in each space separately, so objects in two spaces running simultaneously could experience completely different gravity, force effects, and collision rules. Separate spaces can be paused independently, so your game can be frozen in one space while the animations keep going in another, such as in a menu. The output of cameras from separate spaces can be overlaid, split screened, or embedded in objects in a level, so an in-world TV screen could be used to play a game-within-a-game. A space can even be created with no cameras in it at all, serving instead as a storage repository for data that should persist between levels or even networked game sessions.","title":"Ten Exciting Features of the Plasma Engine (and also Spaces)"},{"location":"getting_started/features/#ten-exciting-features-of-the-plasma-engine-and-also-spaces","text":"","title":"Ten Exciting Features of the Plasma Engine (and also Spaces)"},{"location":"getting_started/features/#events","text":"Plasma Engine\u2019s Event system takes component-based design to new levels of freedom and flexibility. A Plasma Engine Event mimics its real-world counterpart: a situation that arises. How your game handles that situation is up to you. When your hero takes damage, the camera following her can shake. When a cannonball reaches the apex of its flight, an audio filter can be applied to the level\u2019s music. Every game object is a potential event dispatcher, and every object\u2019s events are up for grabs. When you work with events from the beginning of a project, you allow yourself greater freedom to rapidly explore new features and ideas with minimal refactoring of your existing code.","title":"Events"},{"location":"getting_started/features/#nested-archetypes","text":"An archetype defines a game object, its child objects, and even other nested archetypes within the hierarchy. Need to make changes to an Archetype that is nested under multiple of other Archetypes? We've got you covered. Every Archetype will automatically receive updates made to nested Archetypes. Did all those Archetypes have local modifications made to the nested one? We've still got you covered. Plasma Engine preserves local modifications when updates are made to an Archetype.","title":"Nested Archetypes"},{"location":"getting_started/features/#lightning","text":"Lightning is a high-level programming language developed by us to solve some of the most interesting problems in game development. Use Lightning to program and customize game scripts, editor tools and commands, and even your shaders. All of that, done in an integrated text editor equipped with full code completion and inline tooltips from documentation. Lightning features extremely fast compilation and patching/hot loading for live game editing.","title":"Lightning"},{"location":"getting_started/features/#c-plugins","text":"Scripts are awesome, but at the end of the day they can't do everything that life has to offer. Whether it's a library that you want to use or you need to do some heavy lifting for performance reasons, C++ can always get the job done. With a C++ plugin you have all the power you need, wrapped up and ready to use in your game. There\u2019s no complicated setup, just create a new plugin resource and it will make you a Visual Studio solution, pre-hooked with a new component. Changes to your plugin are automatically detected by Plasma Engine, and your project updates itself on the spot.","title":"C++ Plugins"},{"location":"getting_started/features/#lightweight-game-objects","text":"Plasma Engine\u2019s game objects are lightweight and versatile. We call them cogs because they\u2019re 'Game Object Compositions' (and \u201cgocs\u201d doesn\u2019t sound as cool). Cogs can house as many components and child objects as needed, and the engine is incredibly good at making and destroying them, so you never have to worry about object pooling.","title":"Lightweight Game Objects"},{"location":"getting_started/features/#shader-compositing","text":"Plasma Engine's Materials are a component based way to write shaders. Write individual shader fragments to encapsulate a desired behavior, and add the fragments you want to your Materials, just like components, to create the desired effects. The shader compositor does all the work of putting the components together to create a complete shader program for graphics hardware. It also controls the flow of inputs and outputs between fragments, so that a single fragment can modify data, like UV coordinates, before it is used as input to a following fragment.","title":"Shader Compositing"},{"location":"getting_started/features/#scriptable-rendering-pipeline","text":"We're in the business of rapid iteration, and the rendering pipeline is no exception. Plasma Engine offers unparalleled control over the aesthetics of your game with the ability for scripts to define a series of tasks for the renderer. Written in script, your rendering pipeline becomes anything you can imagine, make your pipeline change dynamically with a simple condition, or even in response to an Event. Add any rendering technique to your game, including the ones that haven't been invented yet. But there\u2019s no need start from scratch: Plasma Engine comes pre-loaded with all the scripts and shaders needed for a modern physically based rendering pipeline. If that\u2019s what you\u2019re looking for, you\u2019re done. If you want more, you can use it as a starting point for customization.","title":"Scriptable Rendering Pipeline"},{"location":"getting_started/features/#scriptable-sound-nodes","text":"Plasma Engine features a powerful custom audio system. At its core is the sound node graph, a flexible, fully scriptable structure that controls the flow of audio through your game. Sound nodes can play or generate audio, apply effects, control parameters, and more, and they can be added, removed, and swapped at any time. When the sound node graph is used together with Plasma Engine\u2019s built-in event system, it\u2019s easy to apply DSP effects to just the right sounds, just when you need them.","title":"Scriptable Sound Nodes"},{"location":"getting_started/features/#in-house-physics","text":"Like most things in the Plasma Engine, our physics system is developed by us. That may seem like an unnecessary amount of work, but we want features that pair well with the design and vision for Plasma Engine as a whole and we don't want to be held back. Plasma Engine\u2019s physics system includes features like collision groups that allow detection without resolution, regions that can apply force effects, and even scriptable joint definitions that run through our constraint solver.","title":"In-House Physics"},{"location":"getting_started/features/#one-click-network-replication","text":"Networking is easy! ... Okay we're kidding, but the road to easier networking is full of innovation, and what's easier than one mouse click? Plasma Engine continues to use component based design to every advantage we can come up with. Just add the NetObject component and now any property from your object can be replicated over the network with a single click of a button in the UI. Start from our networked project template to get a head start with some of the harder stuff.","title":"One-Click Network Replication"},{"location":"getting_started/features/#spaces","text":"The concept of the space is quite unique: a space is a collection of game objects that interact normally with one another, but not with objects in other spaces. Physics is simulated in each space separately, so objects in two spaces running simultaneously could experience completely different gravity, force effects, and collision rules. Separate spaces can be paused independently, so your game can be frozen in one space while the animations keep going in another, such as in a menu. The output of cameras from separate spaces can be overlaid, split screened, or embedded in objects in a level, so an in-world TV screen could be used to play a game-within-a-game. A space can even be created with no cameras in it at all, serving instead as a storage repository for data that should persist between levels or even networked game sessions.","title":"Spaces"},{"location":"getting_started/min_specs/","text":"Plasma Launcher & Editor Operating System : Windows 7 64-bit or later Processor : Quad-core 2.5 GHz or faster Graphics Card : NVIDIA GeForce 470 GTX or better Memory : 4 GB RAM or more Hard Disk : At least 2 GB available C++ Plugin Development Plugin development has the same requirements as the launcher and editor with the addition of: - IDE : Visual Studio 2017+","title":"Plasma Launcher & Editor"},{"location":"getting_started/min_specs/#plasma-launcher-editor","text":"Operating System : Windows 7 64-bit or later Processor : Quad-core 2.5 GHz or faster Graphics Card : NVIDIA GeForce 470 GTX or better Memory : 4 GB RAM or more Hard Disk : At least 2 GB available","title":"Plasma Launcher &amp; Editor"},{"location":"getting_started/min_specs/#c-plugin-development","text":"Plugin development has the same requirements as the launcher and editor with the addition of: - IDE : Visual Studio 2017+","title":"C++ Plugin Development"},{"location":"manual/","text":"Plasma Manual The Plasma Engine Manual is designed to be a comprehensive reference guide for all engine functionality. It offers descriptions of engine systems and components for those who are already developing their own projects in the engine. Getting Started New to the Plasma or the manual? Get started here. Editor How to use the tabs, windows, and commands of the Plasma Editor. Scripting Scripting using Lightning in the Plasma Engine. Architecture Explore the Plasma Engine's architecture and learn how to build your games better. Graphics Learn how to use cameras, lights, renderers, and other graphical features in the Plasma Engine. Physics Learn how to work with RigidBodies, Joints, Forces, and other properties of the physics engine. Audio Placing sound emitters, microphones, and importing sound assets. Gameplay The parts of the engine usually used for gameplay scripting Lightning Learn the basic of how to use Lightning (our proprietary scripting language) in the Plasma Engine Animation Learn how to use the animation tool in Plasma. Networking Networking in Plasma Coming Soon!","title":"Manual"},{"location":"manual/#plasma-manual","text":"The Plasma Engine Manual is designed to be a comprehensive reference guide for all engine functionality. It offers descriptions of engine systems and components for those who are already developing their own projects in the engine.","title":"Plasma Manual"},{"location":"manual/#getting-started","text":"New to the Plasma or the manual? Get started here.","title":"Getting Started"},{"location":"manual/#editor","text":"How to use the tabs, windows, and commands of the Plasma Editor.","title":"Editor"},{"location":"manual/#scripting","text":"Scripting using Lightning in the Plasma Engine.","title":"Scripting"},{"location":"manual/#architecture","text":"Explore the Plasma Engine's architecture and learn how to build your games better.","title":"Architecture"},{"location":"manual/#graphics","text":"Learn how to use cameras, lights, renderers, and other graphical features in the Plasma Engine.","title":"Graphics"},{"location":"manual/#physics","text":"Learn how to work with RigidBodies, Joints, Forces, and other properties of the physics engine.","title":"Physics"},{"location":"manual/#audio","text":"Placing sound emitters, microphones, and importing sound assets.","title":"Audio"},{"location":"manual/#gameplay","text":"The parts of the engine usually used for gameplay scripting","title":"Gameplay"},{"location":"manual/#lightning","text":"Learn the basic of how to use Lightning (our proprietary scripting language) in the Plasma Engine","title":"Lightning"},{"location":"manual/#animation","text":"Learn how to use the animation tool in Plasma.","title":"Animation"},{"location":"manual/#networking","text":"Networking in Plasma Coming Soon!","title":"Networking"},{"location":"manual/plasmamanual/ai/","text":"Artificial Intelligence In game development artificial intelligence (AI) is a very broad field. We use the term AI to refer to everything from navigation and pathfinding, to to basic enemy behavior and procedural content generation. Simple AI Examples The simple AI tutorial has been moved here here","title":"AI"},{"location":"manual/plasmamanual/ai/#artificial-intelligence","text":"In game development artificial intelligence (AI) is a very broad field. We use the term AI to refer to everything from navigation and pathfinding, to to basic enemy behavior and procedural content generation.","title":"Artificial Intelligence"},{"location":"manual/plasmamanual/ai/#simple-ai-examples","text":"The simple AI tutorial has been moved here here","title":"Simple AI Examples"},{"location":"manual/plasmamanual/audio/","text":"# Sound A Sound resource is created for every imported audio file. Sounds can be attached to any number of SoundCues, allowing the user to play the same sound multiple ways while only storing the file once. # SoundCue SoundCues are a fundamental part of playing audio in the Plasma Engine, allowing the user to modify various properties without affecting the original Sound resource. # SimpleSound The SimpleSound component, like its name suggests, is a simple way to play a sound, requiring only a SoundEmitter component and a SoundCue. # SoundAttenuator The SoundAttenuator resource controls how a sound played through a SoundEmitter on an object decreases in volume as the object gets further away from a SoundListener. # SoundEmitter The SoundEmitter component handles the 3D positioning of sounds in a level. # SoundInstance SoundInstances are created at runtime whenever a SoundCue is played, and can then be controlled by the user in scripts. # SoundListener The SoundListener component \ufffdhears\ufffd all positional audio in a SoundSpace. # SoundSpace The SoundSpace keeps sounds separate from other Spaces and allows the user to control overall settings for all audio in the SoundSpace. # SoundTag SoundTags are resources that allow users to pause, resume, and stop a group of SoundInstances; control their volume, EQ, and compression; and get a list of tagged SoundInstances to change other properties in LightningScripts. # Volume Meter The Volume Meter tool allows the user to monitor and change the audio system volume. # SoundNode SoundNodes are the underlying objects which create and modify all audio in the Plasma Engine. Many types of SoundNodes can only be created and added to the node graph in LightningScripts. # SoundNode Graph The SoundNode Graph tool displays the connections between all SoundNodes that are currently attached to the output of a SoundSpace. # MIDI If a MIDI device is connected when the Plasma Engine starts up it will listen for messages from that device and send corresponding MidiEvents. # AudioSettings The AudioSettings component can be added to Plasma Engine's project settings to control project-wide audio settings.","title":"Audio"},{"location":"manual/plasmamanual/gameplay/","text":"While gameplay is not inherently part of the engine, there are parts of the engine that are usually only used for gameplay scripting. Here we'll cover the tools and features you need to make some gameplay of your own. # Randomness Need to add randomness to your game? # Input Learn how to detect various forms of input here. # VectorMath Understanding vector math is key to writing good game logic. # Quitting the Game At some point your player will want to quit your game, learn how to let them do so here. # Interpolation Learn about two important math functions used frequently in gameplay scripting: Lerp (or linear interpolation) and Slerp (or spherical linear interpolation)","title":"Gameplay"},{"location":"manual/plasmamanual/graphics/","text":"# PBR Overview The #plasma_engine uses physically based rendering techniques (PBR). The PBR overview offers a high level PBR description and resources for learning more about the details of PBR and its implementation in the #plasma_engine. Components tracked by the graphics engine to represent visual objects, each with different benefits for their intended usage. ## graphical ## Models General way of rendering meshes, such as characters or environment. ## Sprites & Text Efficient rendering for a large amount of 2D art, frame-based animations, UI, and text display. ## Particles Creation and animation for a large amount of 2D images for visual effects, without the overhead of each particle being an independent game object. # Scene Setup How to add graphical assets and configure a scene to look the way you want. ## Adding Assets Importing textures, meshes, and animations and configuring how these resources are built. ## Materials Describe the surface attributes of an object or, more generally, define a shader program for any Graphical. ## RenderGroups Categories for Materials that Renderers use to specify a group of objects to be rendered. ## Cameras and CameraViewports Control how and from what perspective all rendering is done. ## Lighting Adding and configuring lighting in a scene for the default Renderers provided in Plasma. ## Renderer Lightning script components that define the entire rendering pipeline of a scene.","title":"[ PBR Overview](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/graphics/physically_based_rendering.markdown)"},{"location":"manual/plasmamanual/lightning_in_plasma/","text":"This guide is meant for those who are already familiar with another programming language and Object Orientation Programming principles. Its main purpose is to help orient new users to its syntactic structure. As this language is made to be embedded in C++, the differences between Lightning and C++ will be highlighted, although users of ActionScript 3.0 may find it has a familiar syntax. # Variables and Types - variables_and_data_types.markdown - strings.markdown - Enums - Flags - Get-Sets - Property Delegates - Swizzle # Containers - Arrays - HashMap # Operators - Comparison Operators - boolean_operators.markdown # Control Structures - Conditionals - Looping - Functions # Objects - Classes and Structs - Inheritance - Casting - Delegates - Reflection # Memory - Memory Management - Construct By-Value Vs By-Ref (Local Vs New) # Misc - Attributes # Reference - Operators Precedence Chart - Keywords lightning_base_types","title":"Lightning in plasma"},{"location":"manual/plasmamanual/networking/","text":"stuffs","title":"Networking"},{"location":"manual/plasmamanual/physics/","text":"The physics system allows collision and inertia to be defined on objects. This is primarily achieved by the Collider and RigidBody components. Additional manipulation of object movement can be achieved though PhysicsEffects and Joints. # PhysicsSpace The PhysicsSpace is where all physics components live and interact together. The PhysicsSpace contains data to describe how objects should interact together. It also contains helper functions to query information about a space, such as cast operations. # RigidBody RigidBody defines the inertia properties (e.g. mass, velocity) of an object. This helps to define how an object moves in a scene and how it interacts with other objects. # Collider Colliders define the shape of an object. This tells the PhysicsEngine how to compute collisions and, in conjunction with RigidBody, how to resolve them. # Collision Overview A high-level overview of the rules that physics uses to detect and resolve collisions. # PhysicsEffects and Regions Effects contain pre-defined methods of applying forces to objects. These effects can be applied per object, per region, and even per space. # Casting Casting allows custom user queries to check for collision in certain regions or directions. This helps facilitate common game-logic queries. # PhysicsMaterial PhysicsMaterials describe surface properties for a Collider such as density and restitution. # MassOverride Override or take a screenshot of an objects mass. # Joints Joints are an advanced topic to define constrained movement of objects. This can range from simple movement restrictions to defining larger articulate bodies. # Hierarchies Complicated physics objects can be built from how hierarchies are arranged with Colliders and RigidBodies. # Troubleshooting Common issues the user might run into when working with physics. # PhysicsSolverConfig The PhysicsSolverConfig resource allows customization of constraint solving (advanced).","title":"Physics"},{"location":"manual/plasmamanual/scripting/","text":"# lightning_in_plasma Scripting is the basis of making gameplay as it is how you define rules for your game and players to follow. If you feel like you need more practice, in depth explanation, or you are not very familiar with programming visit the lightning_in_plasma section. # Events & Connections Component based design depends heavily on a simple and flexible way to pass information between components. This section covers how to use events in plasma to allow components to speak to each other. # Debug Drawing There are multiple ways to debug your game in Plasma aside from the standard Console.Writeline function. # The WYSIWYG (What-You-See-Is-What-You-Get) Approach to Configurable Properties There are several things you can do to change the experience of using the editor, by creating your own RunInEditor scripts.","title":"[lightning_in_plasma](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma.markdown)"},{"location":"manual/plasmamanual/architecture/architecture/","text":"The Plasma Engine uses a component based architecture that makes it easy to extend both the functionality of your game and the editor. In this section you can find explanations of the concepts that are core to our overall philosophy when constructing the engine and projects within it. If you feel you need more practice with architecture concepts check out the architecture tutorials section here . # Cogs Cog is a reverse acronym for Game Object Composition. In component based architecture game objects are simply a collection of components. # archetypes.markdown An Archetype Resource is the serialized definition of a Cog which can be used as a template from which to create new cogs from. # Significant Objects The objects found in this section provide access to settings that can have an effect on a game-wide, space-wide, and level-wide scale. Every user should be aware of these objects and their respective properties. # Resources Resources are serialized pieces of data that fuel your game. There are many types of resources ranging from imported Textures to SoundCues generated in engine. # Components Read more about the concept of component based design here.","title":"Architecture"},{"location":"manual/plasmamanual/architecture/components/","text":"# Component Based Design When building in the Plasma Engine your Workflow can be optimized by building things in a component based manner. What this means is that instead of attaching a single script component to a single archetype and using it to drive all the functionality of that object, your workflow can be sped up by building specific smaller actions to specific components. When choosing how to construct a set of script components for a project it's helpful to play several games in the chosen genre and look at what commonalities they have. Using what you find you can generate a set of components you will need. For instance, the shooter could have used an \"input component\" for mouse and keyboard input, a \"shoot component\" to handle how shooting is done in the world, a \"movement component\" to handle movement through the world, a \"sound component\" to handle the various sounds the player will create and other varied game logic components to handle things such as health (e.g. \"health component\"), power ups, collisions, etc. Enemies in a shooter would probably also need a \"damage on collision component\" and a \"special shooting component\" and a \"behavior component\". As with all design the correct way depends on the project. No single set of script components that will give you all your required functionality for all projects.","title":"Component Based Design"},{"location":"manual/plasmamanual/architecture/archetypes/archetype_basics/","text":"An Archetype Resource is the serialized definition of a Cog (Game Object Composition) which can be used as a template from which to create new cogs from. The core benefit of Archetypes is that any changes made to the Archetype affect each object created from the Archetype. These objects are called instances of the Archetype. # Advantages of Archetypes Often in games we find reasons to have several copies of the same object in the game at once. The game could take place in a forest with thousands of trees and rocks with subtle differences. It could be an arcade shooter with hundreds of identical enemies swarming towards the player. In any case where there is duplicate object creation Archetypes can save us both development time, and performance at runtime. If a level has hundreds of instances of the same character Archetype, all those characters can be modified at the same time by modifying the Archetype. Where as if each chracter was not Archetyped, they would have to be individually modified which is slow. One could also group select and modify which may not be practical depending on the placement of objects in the level. While making full use of the Archetype system takes forethought, it increases development efficiency over the course of a project. Take the example of a game with an army of identical characters which are made out of instances of just 1 or 2 Archetypes the engine can load it much faster than if each character was its own unique Cog with no shared Archetype. This is because after the Archetype is loaded by the engine, it can be used by the engine to create/render the instances of it in the army. As opposed to the engine having to load a copy of the object data for each non-Archetyped tree object. # Creating Archetypes Creating an Archetype is fairly simple. Just enter the name in the Archetype box and press enter. This will creatre the new Archetype resource from the selected object causing it to appear under the Archetype tag in the Resource Window. # Creating Objects from Archetypes Creating a new instance of an existing Archetype is simple and can be done through multiple approaches. ## Instance from the Resource Library By clicking and dragging an Archetype resource from the resource library into the Level Window we can create a new instance of that Archetype. ## Copying an Instance Objects which are an instance of an Archetype can be duplicated via copy & paste to create a new instance of the same Archetype. ctrl + c ctrl + v Here ctrl + +c and ctrl + v are used then ctrl + click + drag ## Instances at Runtime Archetypes are essential for creating objects at runtime. Here is a short example of how one might create instances of an Archetype at runtime. class ObjectSpawner : LightningComponent { [Property] var ObjectArchetype : Archetype = Archetype.MyArchetype; [Property] var SpawnRate : Real = 1.0; var Timer : Real = 0.0; function Initialize(init : CogInitializer) { Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : LogicUpdate) { this.Timer += event.Dt; if(this.Timer > this.SpawnRate) { this.Timer = 0.0; this.Space.Create(this.ObjectArchetype); } } } As you can see the function Space.Create() is how you instantiate Archetypes at runtime from script. There is also Space.CreateAtPosition() which allows you to specify a position for the object to spawn at as opposed to the Space origin. # Basic Archetype Modifications When an Archetype instance is modified it turns orange. Below the behaviors various types of modifications are described. ## Property Modifications When a property field of an an Archetype instance is edited it is turned orange to mark it as modified. This is a common theme as other items will turn orange when modified. ### Local Modification Override It should be noted that modifications to Transform will not mark the Archetype as modified. This is because the properties such as Transform.Translation , Transform.Rotation , Transform.Scale , and Area.Size have the LocalModificationOverride attribute which prevents that property from normally interacting with archetype updates and reversion. A property with the LocalModificationOverride attribute will not be uploaded with other modifications when a modified instance is uploaded to the archetype. Overrridden properties will also not be modified when an instance is reverted to archetype. The LocalModificationOverride attribute can be applied to properties in custom Lightning components as well. ## Component Modifications Adding, removing, or reordering a component to an Archetype instance modifies it from Archetype. Component added Component removed ## Child Modifications Adding, removing, reordering a child object from an Archetype instance will also mark the Archetype as modified. Child added Child removed It is important to note that neither component nor child modifications have functionality equivalent to LocalModificationOverride available. Property modifications usually adjust some factor of a piece of functionality. However, component and child object operations have the potential change the fundamental functionality of the Archetype. In the case where a certain component or child object modification becomes common place it should be add to the original archetype (and have the originally unmodified instances use LocalModificationOverride) or create a new archetype with the modifications. # Upload To Archetype Above we discussed the various modification types you can make to an Archetype. It is very common for a developer to create many instances of an Archetype then modify some paticular instance. However, sometimes we want to go the opposite direction and apply modifications we have made to an individual instance to the Archetype. Thinking about the army of characters we used as an example earlier. Imagine we had been changing hat colors for awhile and we decide we like a paticular color for the default. By clicking the upload button we can turn appply this change to all unmodified instances of the Archetype. This is called uploading to Archetype. Whereas if we give it a new Archetype name and click the upload button it will create a new archetype Here we modify right two of the three Archetype instances. The middle instance, which is modified, is then uploaded to the Archetype causing the modification to be applied to the unmodified instance on the left. Notice that the other modified instance on the right does not turn Red. This is due to the right instance being already modified from the orginal Archetype (meaning it is modified from the newly uploaded version as well). # Revert To Archetype ## Reverting Cogs Often developers make accidental or undesireable changes to an Archetype instance and have legitamate reasons to not want to undo everything to revert the instances back to their original state. This is one of the many reasons Archetype instances can be reverted to the current state of the Archetype resource using the restore button next the Archetype field in the property window. Here you can see the middle sprite reverted to match the orginal Archetype. //TODO : get image ## Reverting Properties Often it is necessary to revert individual properties on an Archetype instance. This is a simple operation: //TODO : get image By using RightClick on the property grid one can open the context menu allowing the property to be reverted without affecting the rest of the instance. This is important and simply setting the modified field to the same value will not make the field appear un-modified to the engine. ## Reverting Locally Removed Child By using RightClick on the greyed out representation of objects which have been removed from the child hierarchy of an Archetype one can Restore an object back into the heirarchy. //TODO : get image ## Reverting Child Order If children in an Archetype hierarchy are reordered, their order can be reverted to match the current Archetype by using RightClick on the Archetype instance root object and selecting Restore Child Order . //TODO : get image Reverting child modifications are important as for reasons of reverting # Marking as Modified There are time where an Archetype is about to be upload, but it is realized there is a single unmodified instance of the Archetype which should not be updated to the new Archetype. In this case it is possible to manually mark a property as modified even if its value matches that of the original Archetype. This allows the Archetype to be updated without having the changes affecting the instance which has a locally overridden property. //TODO : get image Once again let's think back to the army of characters all created from the same Archetype, specifically the example where we have been experiementing and have just settled in on the hat color we would like to be the default for the whole army. Now imagine we want the leader to keep the original hat color. By marking the leader's hat color as modified, when we upload the new color to the Archetype the leader will not be affected. # Related Materials ## Manual - Resource","title":"Archetype basics"},{"location":"manual/plasmamanual/architecture/cogs/cogs/","text":"Cog is a reverse acronym for Game Object Composition as in component based architecture game objects are simply a collection of components. Game objects can be unique or have several instances of a game object archetype. The following sections cover how we approach the Architecture of game objects. # GameObjectsConcept Pieces of interactive content used throughout the Plasma Engine # ObjectStore Saves an object to a persistent local store","title":"Cogs"},{"location":"manual/plasmamanual/architecture/cogs/gameobjectsconcept/","text":"Game objects in the Plasma Engine (game object compositions, or COGs) are not defined using classes. Instead they are collections of components, each of which provide a certain functionality to the object. A component can be data, behavior, and/or a link to a system. For example, an Cog called \"Ball\" might be a composition that includes the Transform (position, rotation, etc.), Model (geometry, textures, etc.), RigidBody (movement), and Collider (shape, collision, etc.) components, while a \"Main Camera\" object would include Transform, Controller (mouse or keyboard input, etc.), and Camera (field of view, zoom, etc.). Or you could create a \"Ball Camera,\" with Transform, Model, Rigid Body, Collider, Controller, and Camera. One of the keys to working with a component based engine is to think of objects in terms of what they do, not what they are. If you have a hospital, a soldier, and a medic, the hospital and the medic have a healing component, while the soldier and the medic have a mobility component, but you don't need to group one as a building and the other two as infantry. All the game engine cares about is what the object can do. You might see a ball and a car as different types of things, but to the game engine they are both objects composed of Transform, Model, Rigid Body and Collider. They have the same functionality: the only difference is their data. # Creating a Cog The easiest way to start creating your own cog is to start with a command that generates one for you, e.g. CreateSprite , CreateCube , CreateTransform , etc. These create cogs that you can then customize by adding or removing components and setting their properties in the Properties Window. ## Copy & Paste When creating a new object, you can always copy and paste other objects and alter their properties from there. The copy and paste functionality places the same information on the clipboard that it does when saving. Here is what we see when copy our Sprite generated from CreateSprite into a text editor: Selection selection = { Cog = { LinkId = { uint Id = 1, }, Named = { string Name = \"Sprite\", }, Transform = { Vec3 Translation = [1.97043, 6.45429, 0], Vec3 Scale = [1, 1, 1], Quat Rotation = [0, 0, 0, 1], }, Sprite = { string SpriteSource = \"5275aa4d802dd6dc:Square\", bool FlipX = false, bool FlipY = false, Vec4 Color = [1, 1, 1, 1], bool Visible = true, bool OnTop = false, bool AnimationActive = true, float AnimationSpeed = 1, uint StartFrame = 0, BlendMode BlendMode = Alpha, SpriteGeometryMode GeometryMode = ZPlane, }, }, }, This code can be copy and pasted into other projects. This works because, unless you manually remove them, you have all the default Resources necessary to create this object. In many cases this won't work with your cogs because the copied object references resources that differ between your destination project and the source project. # Related Materials ## Code Reference - Transform - CreateSprite - CreateCube - CreateTransform ## Manual - Model - RigidBody","title":"Game Objects"},{"location":"manual/plasmamanual/architecture/cogs/objectstore/","text":"objectstore saves an object to a persistent local store. All properties that are normally saved on the object are saved with ObjectStore. The data is stored on the local computer and will be saved between runs of the game. Can be used for progress, game saving, or preferences. When used with Lightning, make sure you mark the data to be saved with either [Serialized] or [Property] attributes. ```lang=csharp class ObjectStoreTest : LightningComponent { [Property] var SomeArchetype : Archetype = null function Initialize(init : CogInitializer) { //just some simple stuff here to cause compilation to work var someObject : Cog = null; //Restore an object called \"Name\" and if it does not exist use SomeArchetype to create it. //Also takes the space to create the object in. var object = Plasma.ObjectStore.RestoreOrArchetype(\"Name\", \"Archetype\", this.Space); //Store the object on local computer Plasma.ObjectStore.Store(\"Name\", someObject); //Restore an object. Null object if not found. Plasma.ObjectStore.Restore(\"Name\", this.Space); } } ``` To clear all stored objects on a computer you can use the ClearStore command. # Related Materials ## Code Reference - ClearStore ## Tutorial - Loading and Saving Data","title":"Object Store"},{"location":"manual/plasmamanual/architecture/objects/gamesession/","text":"GameSession manages the running of the game, both upon pressing the play button and dealing with the exported version. It is an object that represents one instance of the game. Being an object, it is possible to create more than one game session per executable. # Common Uses - Setting the starting level - Redirecting the use of Esc key in game # Using the GameSession The GameSession object may be accessed from the scripts that are running via any Cog : // Within a script, those ``this`` variables referring to a Cog can get the GameSession // Note: Even though they are not Cogs, all Components (to include derived LightningComponents) // are equipped with a getter to GameSession var myGame = this.GameSession; // Here is an example of pulling it from a dynamically created cog. var cube = this.Space.Create(Archetype.Cube); var alsoMyGame = cube.GameSession; In Lightning, a GameSession object cannot be created using the a normal constructor. In order to create a GameSession one must use a function bound from C++: // Here, a C++ function bound to Lightning is used to create a GameSession var myGame = Plasma.Engine.CreateGameSession(); IMPORTANT: This is primarily intended for having a project to launch a dedicated server; therefore, calling this puts the game in the background while still using resources. It must be managed by the user : this includes destroying the game, ensuring resources do not leak, and checking references of objects belonging to other GameSessions before using them to avoid exceptions or other corruption of data. Being that all Plasma Projects run a game, it can be edited within the editor. The hotkey Shift + g accesses the Game Archetype that is used to spawn the game. By default it comes with the DefaultGameSetup component, which can be used to set the starting level or load a custom space archetype. From here one can also add custom-made components, just like any other object. ## Events of GameSession The user connects to these events when dispatched on the GameSession], e.g.: Plasma.Connect(this.GameSession, Events.GameLoad, this.OnGameLoad); Event Name Type Description GameSetup gameevent This event fires after the creation of the GameSession. Only GameSession will be to respond to this event due to the timing of the dispatch during normal circumstances. GameLoad gameevent This event fires after the creation of the Space Archetype. Only GameSession and spaces will be able to respond to this event due to the timing of the dispatch in normal circumstances. GameStarted gameevent This event fires after the starting level is fully loaded. All cogs present at the start of level are able respond to this event. Dynamically created objects may or may not respond depending on when they were created. (e.g. those created during initialize of those objects loaded with the level will still receive this event, but those created in response to the LogicUpdate event will not. GameFocusIn gameevent This event fires once the game window has regained focus (having been out of focus.) This event is not sent when testing in the editor. In order to test this logic, run the game using the ExportAndPlayGame command. GameFocusOut gameevent This event fires after the game window has lost focus, for instance when clicking on another application. This event is not sent when testing in the editor. In order to test this logic, run the game using the ExportAndPlayGame command. GameRequestQuit gameevent This event fires after the pressing the Esc key. This allows a script to hook the key in order to override this behavior. See HandlingQuitMessage for more on this. # Related Materials ## Manual - HandlingQuitMessage - level - Cog ## Reference - GameSession - gameevent","title":"Gamesession"},{"location":"manual/plasmamanual/architecture/objects/levelsettings/","text":"The LevelSettings object is a Cog of which there is one unique instance per Level. It serves as a globally accessible object from a variety of object types such as Components or other Cog. Unlike any other Cog there is no way to instantiate a LevelSettings object. # Common Uses - Adding level specific physics effects . - Adding custom components which need to be globally accessible in a level by any other components that exist in the level. # Using the LevelSettings Object ## Accessing the LevelSettings Object In Editor NOTE: Initialization Order Notice that because the LevelSettings object is always the first object in the Object Window (and cannot be reordered) it will always be the first object to be created and initialized when the level is loaded into the Space. This can be very useful when implementing logic which depends on being initialized before related components on other objects in the level. The LevelSettings object will always be the first object in the Object Window making it easy to find in editor. Since the LevelSettings object lacks any Graphics or Physics based representation in the level, the only way to select and modify its components in the editor is through the Object Window. NOTE: LevelSettings & Hierarchies While parenting can often be useful with objects that do not have transforms, in the case of the LevelSettings object, parenting has been deactivated. ## Accessing the LevelSettings Object In Script The LevelSettings object may be accessed from scripts via any component or Cog: ```name=LevelSettings Access Example, lang=csharp class ExampleComponent : LightningComponent { function Initialize(init : CogInitializer) { // Accessing the LevelSettings object through the component var thisLevelSettings = this.LevelSettings; // Accessing the LevelSettings object through the component's object var ownerLevelSettings = this.Owner.LevelSettings; // Accessing the LevelSettings object through the Space object var spaceLevelSettings = this.Space.LevelSettings; // If we compare the values of the properties which access the LevelSettings // object through different objects (component, component's object, and // space), we can prove that they are accessing the same LevelSettings object. if(thisLevelSettings == ownerLevelSettings && ownerLevelSettings == spaceLevelSettings) { Console.WriteLine(\"These variables reference the same LevelSettings object.\"); } } } ``` ## Default Components of LevelSettings ### GravityEffect & DragEffect Physics Effects are built in components that implement a piece of common physics-based functionality such as the GravityEffect or the DragEffect components that are attached to the LevelSettings by default. Each physics effect component may perform the logic on different spatial scopes depending on which object is attached to. When a physics effect component is attached to the LevelSettings object it is applied to all objects in that level. This allows one to implement level wide effects with any of the built in physics effects as is done by default with GravityEffect and DragEffect. ### GridDraw The griddraw component is a simple debug drawing component. It uses Plasma's buit in GridDraw component is a simple debug drawing component. It uses Plasma's buit in debugdrawing to create a customizable unit grid in the Level Window. ## Custom Components The LevelSettings object is often a very convenient object on which to attach certain custom Lightning components. Imagine a scenario in which a function is implemented for a friendly AI which needs to return an enemy to attack. If all the enemies exist independent of any other object or component, there may be no immediate path from which to access all enemies from the AI. A common technique is to add an EnemyManager component to the LevelSettings object which has a member of type Array[Cog] called EnemyList . By attaching this component to the LevelSettings object all objects, including the enemies, are given access to the EnemyManager component. If the enemies are implemented so that they add themselves to the EnemyList when they are initialized and remove themselves when they are destroyed, there now exists a reliable way of accessing a complete list of all existing enemies. While the above example may not be applicable to all games, it demonstrates the usefulness and flexibility that the LevelSettings object may grant. ## Events Dispatched On The LevelSettings Object Event Name Type Description EnterView graphicalevent Dispatched if cameraviewport is attached to the LevelSettings object. ExitView graphicalevent Dispatched if cameraviewport is attached to the # Related Materials ## Manual Pages - Cog - Editor UI - Debug Drawing - physics effects ## Code Reference - GravityEffect - DragEffect - GridDraw","title":"Levelsettings"},{"location":"manual/plasmamanual/architecture/objects/objects/","text":"Some objects in Plasma model a concept as opposed to something actually has a physical representation in the scene. Objects like GameSession , Space , and LevelSettings are key to maintaining a flexible and efficient code base. They also provide access to settings that can makes changes on a game-wide, space-wide, and level-wide scale. # The Level Settings Object Provides access to level-wide settings like gravity and drag. # The Space Object Provides access to the default Space components such as GraphicsSpace and PhysicsSpace. # The Game Session Object Provides access to the DefaultGameSetup component where the starting space and level may be set.","title":"Objects"},{"location":"manual/plasmamanual/architecture/objects/spaces/","text":"Space is the infinite three-dimensional extent in which objects and events have relative position and direction. It consists of 3 dimensional axes and time. Spaces in the Plasma Engine are containers for game objects. When a level is loaded, all the game objects from that level are put into a space. Also, when you create a game object in code, you must put it into a space, usually the same one that the level was loaded into. In a simple game you only have one space, which is where all your game objects go. Each space has its own instances of the core systems of the engine: graphics, physics, etc. Because of this, game objects in two different spaces will not collide or otherwise physically interact. Game objects in different spaces are rendered separately, but can be layered, such as when using one space for level game objects and another for UI game objects. Creating a separate space for UI game objects is one of the most common uses of multiple spaces in a game. # Using the Space ## Creating a Space You can create a space through the GameSession object. class SpaceCreator : LightningComponent { [Property] var MySpaceArchetype : Archetype; [Property] var MySpaceName : String = \"MyNamedSpace\"; var MyNewSpace : Space; var MyNewNamedSpace : Space; function Initialize(init : CogInitializer) { //Here we create an unnamed Space object this.MyNewSpace = this.GameSession.CreateSpace(this.MySpaceArchetype); //Here we create a Space object named \"MyNamedspace\" this.MyNewNamedSpace = this.GameSession.CreateNamedSpace(this.MySpaceName, this.MySpaceArchetype); } } Naming a space is not absolutely necessary, if you have a good system keeping track of the spaces you are creating. However, naming your space is a good general practice as you'll find when trying to access Spaces you have created. ## Accessing a the Space You can access the Space object from scripts via any component or Cog: class ExampleComponent : LightningComponent { // Accessing the Space object through the component var CurrentSpace : Cog { get { return this.Space; } } // Accessing the Space object through the component's object var AlsoCurrentSpace : Cog { get { return this.Owner.Space; } } function Initialize(init : CogInitializer) { // If we compare the values of the to properties which access the // Space object through different objects we can prove that they // are accessing the same Space object. if(this.CurrentSpace == this.AlsoCurrentSpace) { Console.WriteLine(\"These properties reference the same Space object.\"); } } } Accessing the Space this way will give you a reference to the Space that the object ExampleComponent is attached to exists in. n some games you may have multiple spaces in order to implement certain features such as an in game HUD. In situations such as this you must store a reference to the HUDSpace on creation in order to access it later. # Space Components Spaces have special space components that can not be removed. These are core engine components for containing different aspects of the game objects like physics, graphics, and sound. Spaces are stored as Archetypes and can be modified to change the properties of a space. To access the space of the current level Press: In the name=Level Window, icon=window-restore Press shift + s Or In Select drop down Click Select Space By default a space has four components TimeSpace, GraphicsSpace, PhysicsSpace, and SoundSpace, but if needed you may add more by creating a new space archetype and adding the desired components. In each component of the space properties can be found that will affect the entire space. NOTE: The ReactiveSpace component is deprecated and changes made to it will have no effect on the Space or how using the Reactive component works. # Events Dispatched On The Space Object Event Name Type Description PhysicsUpdateFinished objectevent Dispatched immediately after physics has finished updating. LogicUpdate updateevent Dispatched after the major systems's updates (doesn't run in editor) FrameUpdate updateevent Dispatched after the engine update. Runs in editor. # Related Materials ## Manual - Archetypes - GameSession object ## Code Reference - timespace - graphicsspace - physicsspace - soundspace - objectevent - updateevent","title":"Spaces"},{"location":"manual/plasmamanual/architecture/resources/colorgradient/","text":"ColorGradiant is a resources that allows the user to make a custom color gradient. The gradient may then be sampled from and applied as a color to any object that has a component with a color property. # Using ColorGradient ## Creating a ColorGradient A new ColorGradient may be created through the Add a Resource window. Once the new ColorGradient has been named and created, an editor window will pop up. The editor currently shows a gradient from black to white. The user may add keypoints on the gradient, however, to add in new colors by left-clicking anywhere on the gradient bar. These colors are selected via the common color selection window. As the common color selection window is used, any value within it may be changed as well, including the alpha value. ## Applying the ColorGradient Sampling from ColorGradient is done through a ColorGradient variable within LightningScript. The value passed into Sample() must be between 0 and 1: class GradDemo : LightningComponent { // ColorGradient to use [Property] var ColorGrad : ColorGradient = null; function Initialize(init : CogInitializer) { // Set color to the value sampled halfway through the gradient this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(0.5); } } Attaching this code as a component onto a basic sprite (and selecting the ColorGradient made above for the ColorGrad property), the sprite will show a solid color based on the sample point selected. One can also use code to interpolate through the ColorGraident, changing the color of the sprite over time. class GradDemo : LightningComponent { // ColorGradient to use [Property] var ColorGrad : ColorGradient = null; // Value to pass into ColorGradient's Sample() function var Value : Real = 0.0; function Initialize(init : CogInitializer) { // Set color to color found at start of the gradient this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(this.Value); // Call function to interpolate this.Value from 0 - 1 this.InterpolateValue(); Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // Update Sprite's VertexColor property with current sample from ColorGrad this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(this.Value); } function InterpolateValue() { // Action to interpolate this.Value from 0 - 1 over three seconds Action.Property(this.Owner.Actions, @this.Value, 1.0, 3.0, Ease.Linear); } } The above code-block accomplishes the following things: Initially, it sets the color of the Sprite to the value sampled at 0 on the ColorGradient. It then calls a function-- InterpolateValue() --that uses an Action to interpolate the Real variable Value from 0 - 1 over the course of three seconds. Finally, the VertexColor property on the Sprite component is updated every frame by the value sampled from ColorGrad using Value # Related Materials ## Manual Pages - resources - resourceadding ## Reference Pages - colorgradient - Sprite - Material","title":"Colorgradient"},{"location":"manual/plasmamanual/architecture/resources/font/","text":"Fonts are used to give a visual flair to any text in a project. They can make text unique, memorable and fit into the visual style of the project all at the same time. Plasma can accept either OpenType font (OTF) and TrueType font (TTF). Importing New Fonts New font resources can be added in one of two ways: the file can be either dragged and dropped into the editor window, or the Add command can be used by using Command : Add . This will open a new window where the user may select the font or fonts to import. Once a font has been imported any SpriteText can change its Font drop-down menu property to the newly imported font. # Related Materials ## Manual - SpriteText - resourceadding - Commands ## Reference - Font","title":"Font"},{"location":"manual/plasmamanual/architecture/resources/font/#importing-new-fonts","text":"New font resources can be added in one of two ways: the file can be either dragged and dropped into the editor window, or the Add command can be used by using Command : Add . This will open a new window where the user may select the font or fonts to import. Once a font has been imported any SpriteText can change its Font drop-down menu property to the newly imported font. # Related Materials ## Manual - SpriteText - resourceadding - Commands ## Reference - Font","title":"Importing New Fonts"},{"location":"manual/plasmamanual/architecture/resources/level/","text":"A level is resource that stores a set of objects which will then be created later when the level is loaded. Levels can be loaded into a space in order to create all objects saved to the resource. Levels can be edited using several tools, especially those found via the Editor UI . # Using Levels ## Creating a Level A new level can be added by using the Add command ( Command : Add or clicking on the Add button button) followed by selecting Level drop-down menu. The newly-created level will open in the Level Window and allow for the manipulation of objects to build game levels. At creation the level will only have the default objects inside it: LevelSettings and a few other object from the level template you select. The LevelSettings object is a cog that has a single unique instance per level that cannot be deleted or duplicated. It has several components attached in order to run various effects in the level, such as gravity. The background grid will also be turned on. The grid is there to help place objects within the level editor but will not be visible during gameplay, and can be turned on and off by using the toolbar in the top left corner of the Level Window. The collapsible toolbar has a few buttons for altering the view. Buttons Purpose Toggles between 2D & 3D camera controls. Toggles the editor camera's rendering mode between Orthographic and Perspective Projection. Toggles the grid line visuals in the editor. With the debug views option you can preview diffrent rendering buffers, this is useful for debugging issues with materials. With the camera options you can either reset the editor camera to its default settings, or align a selected camera with the editor's camera. This option allows you to change the speed of the editor movement. # Levels vs. Spaces While levels are resources that store object data to later be loaded, spaces are where those objects are placed upon creation. This allows multiple spaces to load multiple levels at once, which is used to create HUD or UI elements, or to pause the main game while still allowing pause menus to function properly. // The level made with all the Pause Menu UI elements [Property] var PauseLevel : Level; // A property to hold a Space archetype used to create the Pause level [Property] var PauseSpaceArchetype : Archetype; // A variable used as a reference for the Space holding the pause menu var PauseSpace : Space = null; function Initialize(init : CogInitializer) { } function Pause() { // Create a new named Space for the Pause Menu this.PauseSpace = this.GameSession.CreateNamedSpace(\"PauseSpace\", this.PauseSpaceArchetype); // Load the Pause Menu level in the newly created Space this.PauseSpace.LoadLevel(this.PauseLevel); } function UnPause() { // If the PauseSpace exists, destroy it along with the Pause level if (this.PauseSpace != null) this.PauseSpace.Destroy(); } This code snippet gives an example of having two levels exist at once. By giving it a Space archetype and level to load and then calling the Pause() function in a LightningScript, it will create a new Space and load the new level without destroying the currently existing one. The Unpause() function will do the reverse, and destroy the level and Space. # Related Materials ## Manual - Editor UI - Spaces - CamerasViewportsRenderers - Level Settings","title":"Levels"},{"location":"manual/plasmamanual/architecture/resources/resources/","text":"Resources are where most data comes from in a game. While Cogs allow us to model any scene we want, the model will often lack context or depth with out resources such as visual and audio assets. While many resources are imported into a project from outside the engine some such as Levels and Archetypes are created within the engine. Resources ResourceAdding # Independent Resources While most resources are directly tied to larger systems within the engine and are therefore included in the documentation for the respective system (e.g., the page for sound can be found in the audio index), there are a few that are independent of any one system. As a matter of convenience, these particular resources are collected here: ColorGradient Level SampleCurve TextBlock ResourceTable archetypes # Types of Resources Resources vary greatly in type, ranging from audio and visual assets to physics materials and meshes to different types of Lightning files. ## Code Resources - LightningScript - LightningFragment (Shaders) ## Graphics Resources - Font - Materials - Mesh - RenderGroup - SpriteSource - textures ## Physics Resources - CollisionGroup - CollisionTable - ConvexMesh - MultiConvexMesh - PhysicsMaterial - PhysicsMesh - PhysicsSolverConfig ## Sound Resources - sound - SoundAttenuator - soundcue - soundtag","title":"Resources"},{"location":"manual/plasmamanual/architecture/resources/resourcetable/","text":"ResourceTable is a resource that stores a collection of entries of a certain resource type for sampling during run-time. Sampling can be performed through three different interfaces: array, hashmap, and a weighted table . ResourceTables store a homogeneous collection of entries. Pictured above is a table of Archetypes . This can be switched to any other resource type or to strings. ResourceTable entries are composed of three items: - Name : A name used for hashmap queries. This is sometimes used as a display name for the entry. Note: This name does not have to Value. - Value : The actual resource/string of the entry. - Weight : The weight to use when randomly sampling the table. See the WeightedTable Interface section below for details. All sampling functions for a ResourceTable return a ResourceTableEntry . In addition to the above listed properties, the stored resource can also be looked up via the Resource property. Note: This must be casted to the correct resource type. # Array Interface ResourceTables can be accessed as an array at run-time. This is useful for a list of objects where order is important (e.g. generating UI). Given below is a simple example of using the array interface to spawn archetypes: ```lang=csharp // Spawn each archtype one below another for(var i = 0; i < this.Table.Count; ++i) { var entry = this.Table[i]; // The table can only return Resources. We have to cast to Archetype var archetype = entry.Resource as Archetype; // Arbitrary spawn position var pos = Real3(0, i * -10, 0); this.Space.CreateAtPosition(archetype, pos); } # HashMap Interface ResourceTable can also be used as a hashmap where the entry's name is the key. ![ResourceTable4](https://raw.githubusercontent.com/PlasmaEngine/PlasmaDocs/master/media/HashMap.png) One such example is mapping button names to a resource. Pictured above is a table of Levels. A menu in a game could use the `Name` properties to populate the text on buttons. When a button is clicked, the easiest way to get the Level to load is to use the HashMap interface to look up the entry by name. ```lang=csharp function GetLevelByName(name : String) : Level { var entry = this.Table.GetOrNull(name); if(entry == null) throw new Exception(\"Level '`name`' didn't exist\"); return entry.Resource as Level; } # WeightedTable Interface The more interesting use of a ResourceTable is as a weighted probability table. A weighted probability table is used to sample items with a non-uniform distribution which can be thought of as rolling loaded dice. The weighted table view should be used to more easily edit and visualize the weights. This can be done by pressing the \"Swap View\" button in the UI. ## Weight vs. Probability Each entry in a table has a weight used to determine how likely it is to be randomly sampled. The weight is not to be confused with the actual probability of rolling an item though. An entry's probability is computed as its weight divided by the sum of all the weights in the table. In the above picture the \"Can\" has a weight of 0.66. The total weights in the table sum to 2.18. This means the \"Can\" has a probability of 0.66 / 2.18 = 0.30275 or approximately 31%. ## Sampling the Table ResourceTable can be sampled at run-time through the Sample function: lang=csharp function SpawnDropAt(pos : Real3) { // Sampling the weighted table requires two random numbers in the range of [0, 1) var entry = this.Table.Sample(this.RandomContext.Real(), this.RandomContext.Real()); var archetype = entry.Resource as Archetype; this.Space.CreateAtPosition(archetype, pos); } One of the most common uses of the weighted table is for a drop table. In the above example the table is randomly sampled to Spawn an Archetype at a given position. Note that the sample function requires two random numbers in the range of 0 to 1. Additionally, ResourceTable exposes the SampleIndex function which returns the index into the table instead of the entry itself. # Related Materials ## Reference ResourceTable ResourceTableEntry Archetype RandomContext","title":"Resourcetable"},{"location":"manual/plasmamanual/audio/audio_error/","text":"# Audio Error: Audio is too loud and is being clipped. Reduce volume or number of sounds to avoid audio problems. ## Why does this happen? All digital audio is represented by oscillating waves that can range in value from -1.0 to 1.0. If some of the waves are very loud, or if too many get added together, mathematically that can result in values outside of this range. Those results must be clamped to 1.0 or -1.0, which means that some of the audio data is lost. This can cause clicks, pops, or static in the audio. There are a few different reasons why this might be happening, but the most common reasons are: - Too many sounds playing - Volume is too high somewhere (a SoundInstance, a SoundEmitter, a SoundSpace, etc.) - Remember that volume adjustments by different objects are multiplied together. If a SoundInstance's Volume is 1.2 and the SoundEmitter's Volume is 1.2 the volume applied to the audio file will be 1.44. ## How can this be fixed? This is highly dependent on what is happening in the project, but in general there are two solutions; manage the number of active sounds or reduce the volume somewhere. If the problem is too many sound effects playing at once, the InstanceLimit property on a SoundTag can be used to limit how many effects can play at once. The SoundTag's Compressor settings can be used to reduce the volume of the sound effects when they are too loud. SoundNodes such as the VolumeNode or CompressorNode can be used to control the overall volume of a SoundSpace or collection of SoundInstances . The best plan, however, is to investigate what is happening with the audio in the project and fix the underlying issues instead of papering over the problem with a quick fix.","title":"Audio Error: Audio is too loud and is being clipped. Reduce volume or number of sounds to avoid audio problems."},{"location":"manual/plasmamanual/audio/audiosettings/","text":"The AudioSettings component can be added to Plasma Engine's project settings to control project-wide audio settings. Some of these settings are advanced and must be used with caution. # Using the AudioSettings Component ## Volume SystemVolume is used to change the volume of audio produced by the Plasma Engine. This volume modifier will be applied to all audio, both in the editor and during gameplay. This value can also be changed in the Volume Meter window or by using the Audio.SetSystemVolume and Audio.GetSystemVolume methods at runtime. ## Audio Channels The MixType enum property allows the user to choose how many audio channels will be used when creating audio. The default setting, AutoDetect , will produce audio using the same number of channels as the user's default audio output device. Choosing any other setting will create audio using the specified number of channels which will then be automatically translated to match the number of channels needed by the audio output device. In most situations it is best to leave this setting on AutoDetect . ## Volume Threshold The MinVolumeThreshold property should also usually be left alone. Any sounds at a volume lower than this value will skip a significant portion of their processing. The sounds will continue to track their position and other relevant data, but will not output any audio data until their volume rises above this threshold. Raising this value can improve audio performance in some situations, but raising it too high will cause audible problems. ## Audio Latency If the user is experiencing audio problems such as clicks, static, or other audible glitches, changing the LatencySetting enum to High could help. This will likely cause some perceptible audio lag, so it should only be used when necessary. This property can also be set by using the Audio.SetUseHighLatency method at runtime. # Related Materials ## Reference AudioSettings","title":"Audiosettings"},{"location":"manual/plasmamanual/audio/midi/","text":"If a MIDI device is connected when the Plasma Engine starts up it will listen for messages from that device and send corresponding MidiEvents . It does not keep track of device changes, so if a MIDI keyboard is plugged in after the editor or the game is running it won't respond to that device. # Common Uses Using a synthesizer created with the AdditiveSynthNode Alternate game input and control # Using the MIDI Events Each MidiEvent has three properties, though not all of them apply to every event. See the table below for the property meanings on each type of event. - The Channel property is the MIDI channel received from the device. - The MIDINumber property is the MIDI note number associated with the message. This value will be 0 on event types where it is not applicable. - The Value property contains the value, if any, that was associated with the MIDI message. Most of these values will be integers from 0 to 127 and will need to be translated before they are used. This value will be 0 on event types where it is not applicable. The following events will be sent whenever a corresponding MIDI message is received from the connected device: MIDINoteOn: sent whenever a note should start playing, i.e. when a key is pressed on a keyboard. MIDINoteOff: sent when a note should stop playing, i.e. when a key is released on a keyboard. (Some MIDI devices will send a NoteOn message with a volume of 0 instead of a NoteOff message.) MIDIVolume: sent when an overall volume control is changed on the MIDI device. MIDIPitchWheel: sent when the pitch control is changed on the MIDI device. MIDIModWheel: sent when the modulation control is changed on the MIDI device. MIDIOtherControl: sent for all other control change messages received from the MIDI device. Event Type Channel MIDINumber Value MIDINoteOn Channel# Note# Volume of the note in the range 0 - 127. Should be translated to 0.0 - 1.0. MIDINoteOff Channel# Note# N/A MIDIVolume Channel# N/A Volume set by the device in the range 0 - 127. Should be translated to 0.0 - 1.0. MIDIPitchWheel Channel# N/A Pitch set by the device in the range -1.0 - 1.0. MIDIModWheel Channel# N/A Modulation value in the range 0 - 127. MIDIOtherControl Channel# Control# Control value in the range 0 - 127. # Related Materials ## Manual AdditiveSynthNode ## Reference MIDIEvent","title":"Midi"},{"location":"manual/plasmamanual/audio/simplesound/","text":"The SimpleSound component, like its name suggests, is a simple way to play a sound. Choose a SoundCue , set the StartPlaying checkBox property to true, and the sound will play as soon as its object is created in an active level. # Common Uses Looping background music Sound effects that play whenever an object is created An object with a single sound effect # Using SimpleSound Components SimpleSound components are dependent on the SoundEmitter component, so a SoundEmitter will need to be added first before the SimpleSound component. When the StartPlaying checkBox property is checked the SoundCue will be played immediately after the object is created. It can also be played by calling the Play method in a LightningScript. This method returns the SoundInstance which can then be used to further control the audio as it's playing. ## Positional Sound Effects If the Positional checkBox property is checked the selected SoundCue will play through the SoundEmitter with the appropriate SoundAttenuator , and will be heard at that position by any SoundListeners in the level. In other words, if the object with the SoundEmitter is located to the left of the SoundListener on the screen, the user will hear the SoundCue more loudly from the left speaker. ## Background Audio When the Positional checkBox property is not checked the SoundCue will play directly through the SoundSpace , bypassing the SoundListeners. This is a good way to play background music or ambiance that should only be heard as long as its parent object is alive. # Related Materials ## Manual SoundCue SoundEmitter SoundInstance SoundAttenuator SoundListener SoundSpace ## Reference SimpleSound","title":"Simplesound"},{"location":"manual/plasmamanual/audio/sound/","text":"A Sound resource is created for every imported audio file. Sounds can be attached to any number of SoundCues , allowing the user to play the same sound multiple ways while only storing the file once. # Using Sounds ## Supported Audio Formats The Plasma Engine supports audio files in both PCM WAV format (16 or 24 bit) and Ogg format, with up to eight audio channels, at almost any sample rate. (Note that audio output is usually at a sample rate of 44100 Hz or 48000 Hz, depending on the computer's output device, so it is best to use audio files with similar sample rates.) ## Importing Audio Files The easiest way to import audio files is to drag them directly onto a level. The Add window can also be used to choose the audio file. Both of these methods will then open a window with options for creating a SoundCue that will contain this Sound resource. Once files are imported, they will be resampled to 48000 Hz and stored in a custom format using the Opus codec. Opus is a high-quality, low-latency compression format which can be quickly decoded at runtime. Using this format has little to no effect on what the user hears and significantly reduces the size of the project's audio. # SoundBuilder Options When a Sound resource is selected, the SoundBuilder properties will be shown in the Property window. NOTE: When changing these properties for an existing resource the user must click on the Reload button before the settings will take effect. ## Streaming Files When the Streamed checkBox property is un-checked the entire audio file is loaded into memory as soon as the resource is loaded. This simplifies the audio decoding, as all the data is stored and only decoded once. If Streamed checkBox is checked only a small piece of the file will be held in memory at any one time; these pieces will be repeatedly read from the disk as needed to play the file. This means that audio decoding will be happening continuously and repeatedly. Streaming files can negatively affect performance in some cases since they are repeatedly reading from disk while playing. In general the only audio that should be streamed are long files, such as background music, and only when worried about memory usage. NOTE: Streaming files can\ufffdt be played multiple times simultaneously, can\ufffdt have their playback position set directly, and can\ufffdt use the LoopTailLength property on SoundEntries . ## Normalizing If the Normalize checkBox property is checked the MaxVolume property will be shown and the volume of the audio file will be adjusted when it is processed and encoded. The volume of the entire audio file will be changed equally so that the highest volume peak will match the MaxVolume property value. This can be used to either raise or lower the volume of an audio file. # Related Materials ## Manual SoundCue SoundEntry ## Reference - Sound - SoundBuilder","title":"Sound"},{"location":"manual/plasmamanual/audio/soundattenuator/","text":"The SoundAttenuator resource controls how a sound played through a SoundEmitter on an object decreases in volume as the object gets further away from a SoundListener . # Using SoundAttenuators SoundAttenuators can be added to both SoundCues and SoundEmitters. If a SoundCue has a SoundAttenuator other than the DefaultNoAttenuation resource attenuator, its settings will be used when the SoundCue is played through any SoundEmitter. Otherwise the settings from the SoundAttenuator on the SoundEmitter will be used. If the SoundEmitter also has DefaultNoAttenuation resource selected, the sound will be heard spatially by SoundListeners (panned to left or right depending on the location of the object), but will not change its volume with distance. ## Attenuation The volume of sounds are reduced, or attenuated, according to their distance from a relevant SoundListener, using a specified curve. In the real world, as sounds get further away their volume drops off quickly at first, and then slowly. This logarithmic curve is the default setting for SoundAttenuators, but other types of curves can be chosen for custom behaviors. ## Low Pass Filter Another thing that happens in the real world with distance is that high frequencies are attenuated more quickly than low frequencies. This can be imitated by applying a low-pass filter to the audio. The low-pass filter on SoundAttenuators can be turned off and on depending on the desired sound. # Related Materials ## Manual SoundEmitter SoundListener SoundCue ## Reference SoundAttenuator","title":"Soundattenuator"},{"location":"manual/plasmamanual/audio/soundcue/","text":"SoundCues are a fundamental part of playing audio in the Plasma Engine. However the user chooses to play a sound, they will need to use a SoundCue to play it. SoundCues allow the user to modify various properties without affecting the original Sound resource: the same Sound can be applied to different SoundCues, have different property values on the SoundCue, and end up sounding completely different. # Common Uses Playing sounds with a SimpleSound component Playing sounds at runtime using methods on SoundEmitters or SoundSpaces Playing sounds directly on a SoundNode # Using SoundCues If a SoundCue has multiple Sounds attached it can either randomly select which Sound to use each time it is played or it can play them sequentially. Each time a SoundCue is played it creates a new SoundInstance , which can then be accessed in LightningScripts to control the sound as it's playing. Changing properties on the SoundInstance does not affect the properties on the SoundCue. ## Volume Settings The Volume and Decibels properties set the volume adjustment that is applied to a sound when the SoundCue is played. The Volume property uses floating point values, while the Decibels property uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. If UseDecibelVariation checkBox is checked, the DecibelVariation property will be shown in the Property Window and will be used when randomizing the volume of a new SoundInstance. If not checked, the VolumeVariation property will be shown and used for randomization. These properties set how much the volume of SoundInstances will be randomized each time the SoundCue plays. For instance, if the Volume value is 1 and VolumeVariation is 0.5 the volume of the SoundInstance will be chosen randomly from between 0.5 and 1.5 . Note that these volume changes will be multiplied together with any other volume modifications applied by objects such as SoundTags , SoundEmitters, and SoundSpaces. If a SoundCue's volume is set to 0.5 and it is played on a SoundEmitter which also has a volume of 0.5 , this effectively sets the resulting SoundInstance's volume to 0.25 . ## Pitch Settings The Pitch and Semitones properties set the pitch adjustment that is applied to the SoundInstance whenever the SoundCue is played. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. The Pitch property uses floating point values, while the Semitones property uses semitones, or half-steps. These properties are linked, so changing one will also change the value of the other. If UseSemitoneVariation checkBox is checked, the SemitoneVariation property will be shown in the Property Window and will be used when randomizing the pitch of a new SoundInstance. If not checked, the PitchVariation property will be shown and used for randomization. These properties set how much the pitch of SoundInstances will be randomized every time the SoundCue plays. For instance, if the Pitch value is 0 and PitchVariation is 0.3 the pitch of the SoundInstance will be chosen randomly from between -0.3 and 0.3 . Note that these changes will be combined with any other pitch modifications applied by objects such as SoundEmitters and SoundSpaces. If a SoundInstance's Semitones is set to 12 and it is played on a SoundEmitter with a Semitones value of -6 , this effectively raises the SoundInstance's pitch by 6 semitones. ## Attenuation If a SoundAttenuator resource other than DefaultNoAttenuation is selected its settings will be used when the SoundCue is played on a SoundEmitter to change the sound's volume depending on the distance to a SoundListener . Otherwise, either the attenuation settings on the SoundEmitter will be used, or if the SoundEmitter has no settings, the sound will not be attenuated. ## Music Notification Settings If the ShowMusicOptions checkBox box is checked, fields will be shown for setting the speed and time signature of a music file. The two numbers in the time signature tell how many beats are in each measure of music and what type of note has the beat. For instance, a time signature of 4/4 has four quarter note beats per measure, and 3/8 has three eighth note beats. If all three of the fields are set to values other than plasma, whenever the SoundCue is played the resulting SoundInstance will send Lightning events for every bar, beat, whole note, half note, quarter note, and eighth note (see the SoundInstance page for more details). ## SoundEntries Each SoundEntry holds a Sound which can be played by the SoundCue. SoundEntries have properties to control when the audio file starts and stops, when it starts looping and stops looping, and whether it should cross-fade audio after it loops. ## SoundTagEntries Every SoundTag in the list of SoundTagEntries will be applied to the resulting SoundInstance whenever a SoundCue is played. SoundTags allow the user to control SoundInstances as a group. See the SoundTag page for more information. ## Lightning Events The SoundCuePrePlay SoundInstanceEvent is sent just before a SoundInstance is played. The SoundCuePostPlay SoundInstanceEvent is sent immediately afterward. The following code block shows how to connect to the SoundCuePrePlay event and change the SoundInstance's volume before it plays. ```lang=csharp [Property] var Cue : SoundCue; function Initialize(init : CogInitializer) { Plasma.Connect(this.Cue, Events.SoundCuePrePlay, this.OnCuePlay); } function OnCuePlay(event : SoundInstanceEvent) { event.SoundInstance.Volume = 0.5; } ``` # Related Materials ## Manual Sound SimpleSound SoundEmitter SoundSpace SoundNode SoundInstance SoundTag SoundAttenuator SoundListener ## Reference SoundCue SoundEntry SoundTag SoundInstanceEvent","title":"Soundcue"},{"location":"manual/plasmamanual/audio/soundemitter/","text":"The SoundEmitter component handles the 3D positioning of sounds in a level. For instance, if the SoundEmitter's object is to the left of a SoundListener , it will reduce the amount of sound going to the right speaker, so that the player hears the sound to their left. # Using SoundEmitters ## Volume and Pitch Settings The Volume and Decibels properties set the volume adjustment that is applied to any SoundInstances played through the SoundEmitter. The Volume property uses floating point values, while the Decibels property uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. The Pitch and Semitones properties set the pitch adjustment that is applied to SoundInstances. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. The Pitch property uses floating point values, while the Semitones property uses semitones, or half-steps. These properties are also linked. The InterpolateVolume , InterpolateDecibels , InterpolatePitch , and InterpolateSemitones methods can be used at runtime to smoothly change the SoundEmitter's volume or pitch over time. Using these interpolation methods is preferable to using Actions to set the properties: changing a property every frame with an Action can result in audible jumps in volume or pitch, while the interpolation method causes the volume change to be handled smoothly by the audio engine. Note that these volume and pitch changes will be combined with any other volume modifications applied by objects such as SoundTags , SoundCues , and SoundSpaces . If a SoundCue's volume is set to 0.5 and it is played on a SoundEmitter which also has a volume of 0.5 , this effectively sets the resulting SoundInstance's volume to 0.25 . If a SoundInstance's Semitones is set to 12 and it is played on a SoundEmitter with a Semitones value of -6 , this effectively raises the SoundInstance's pitch by 6 semitones or half an octave. ## Directional SoundEmitters When the Directional checkBox property is checked the audio output of the SoundEmitter will be limited by the EmitAngle so that sound in front of the object will be louder than sound behind it. Within the EmitAngle the sound will be at full volume. Outside the angle, the volume will interpolate using a logarithmic curve until it reaches the RearVolume value directly behind the object. This is useful for sounds on objects such as loudspeakers or objects with a wall behind them that the sound shouldn't be heard through. ## Attenuation If a SoundAttenuator resource other than DefaultNoAttenuation resource is selected, its settings will be used for any SoundCues played through the SoundEmitter that have DefaultNoAttenuation resource selected on their Attenuator resource property. ## SoundNodes Unlike other objects, SoundEmitters are a collection of multiple SoundNodes . This allows them to have settings for volume and pitch as well as handling spatialization. Because of this, instead of one SoundNode property, SoundEmitters have two separate properties for the first and last SoundNodes in their chain. The InputNode property should be used for attaching other SoundNodes to the input of the SoundEmitter, while the OutputNode should be used for attaching to its output. Users cannot insert other SoundNodes before or after the InputNode , and cannot insert SoundNodes before the OutputNode . Neither of these nodes can be replaced or removed from the graph. ## Lightning Events The SoundInstancePlayed SoundInstanceEvent will be sent when a SoundCue is played using either the PlayCue or PlayCuePaused methods. The AudioInterpolationDone SoundEvent is sent whenever a volume or pitch interpolation has finished. # Related Materials ## Manual SoundListener SoundInstance SoundTag SoundCue SoundSpace SoundAttenuator SoundNode ## Reference SoundEmitter SoundInstanceEvent SoundEvent","title":"Soundemitter"},{"location":"manual/plasmamanual/audio/soundinstance/","text":"SoundInstances are created at runtime whenever a SoundCue is played. Their properties are initially set by the SoundCue, but the user can then manipulate the SoundInstance's properties without affecting the SoundCue or any other SoundInstances created by it. # Using SoundInstances A SoundInstance is returned by the PlayCue and PlayCuePaused methods on SoundEmitters and SoundSpaces , the Play method on SimpleSounds , and the PlayCueOnNode method on SoundCues. If a PlayCuePaused method is used, the SoundInstance must have its Paused checkBox property set to False before it will begin playing. SoundInstance objects are reference counted: they will stay alive as long as a variable is stored with the SoundInstance assigned to it, so the SoundInstance can still be accessed even after it finishes playing. If the user does not store a variable, the SoundInstance will continue playing audio, but cannot be accessed in LightningScripts. ## Controlling Playback When a SoundInstance is paused it stops playing all audio, then can be resumed and will continue playing where it left off, with no change to its settings or behavior. SoundInstances have a single Boolean property, Paused checkBox, which controls whether they are playing or paused. If Paused checkBox is set to true when the SoundInstance is already paused, or set to false when it is not paused, nothing will happen. When a SoundInstance is stopped using the Stop method it immediately stops playing audio and cannot be restarted. The Time property tells the user the current playback position of a SoundInstance, in seconds, from the beginning of the audio file used for the sound. It also allows the user to tell the SoundInstance to jump to a different position. Note that when reading the Time property, the time given will not be precisely accurate. It will never be ahead of the exact position, but, due to the multi-threaded nature of the audio system, it may be very slightly behind. ## Controlling Volume and Pitch The Volume and Decibels properties set the volume adjustment that is applied to the SoundInstance. Volume uses floating point values, while Decibels uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. The Pitch and Semitones properties set the pitch adjustment that is applied to the SoundInstance. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. Pitch uses floating point values, while the Semitones uses semitones, or half-steps. These properties are also linked. The InterpolateVolume , InterpolateDecibels , InterpolatePitch , and InterpolateSemitones methods can be used at runtime to smoothly change the SoundInstance's volume or pitch over time. Using these interpolation methods is preferable to using Actions to set the properties: changing a property every frame with an Action can result in audible jumps in volume or pitch, while the interpolation method causes the volume change to be handled smoothly by the audio engine. Note that these volume changes will be combined with any other volume modifications applied by objects such as SoundTags , SoundEmitters, and SoundSpaces. If a SoundInstance's Volume is set to 0.5 and it is played on a SoundEmitter which also has a Volume of 0.5 , this effectively sets the SoundInstance's Volume to 0.25 . If it's Semitones is set to 12 and it is played on a SoundEmitter with a Semitones value of -6 , this effectively raises the SoundInstance's pitch by half an octave. ## Looping A SoundInstance's Looping checkBox property is initially set by the corresponding property on the SoundCue. When this property is true , the SoundInstance will repeat indefinitely, using the LoopStartTime and LoopEndTime properties on the SoundEntry that the SoundCue used to create the SoundInstance. If a SoundInstance is looping and the property is changed to false as it is playing it will continue playing to its EndTime and then stop. The following code block shows you how to make a SoundInstance finish naturally after it has looped three times, using the SoundLooped event. ```lang=csharp // A property to be set to the SoundCue desired [Property] var MySoundCue : SoundCue; // A variable that will later be set to an instance of MySoundCue var MySoundInstance : SoundInstance; // A variable that will count how many times MySoundInstance has looped var Counter : Integer = 0; function Initialize(init : CogInitializer) { // Create a SoundInstance by playing MySoundCue on the object's SoundSpace this.MySoundInstance = this.Space.SoundSpace.PlayCue(this.MySoundCue); // Connect to the SoundLooped event that will be sent by MySoundInstance Plasma.Connect(this.MySoundInstance, Events.SoundLooped, this.OnSoundLoop); } function OnSoundLoop(event : SoundInstanceEvent) { // Increase the counter ++this.Counter; if (this.Counter == 3) { // Tell the SoundInstance to stop looping, play until it reaches its end, and stop this.MySoundInstance.Looping = false; } } ``` ## Events The following SoundInstanceEvents will be sent out by all SoundInstance objects: SoundLooped is sent by looping SoundInstances each time they reach their LoopEndTime and jump back to their LoopStartTime . SoundStopped is sent when a SoundInstance has completely finished playing audio. AudioInterpolationDone will be sent whenever a volume or pitch interpolation has finished. ## Music Events If the music options were set on the SoundCue before the SoundInstance was created (all three of the BeatsPerMinute , TimeSigBeats , and TimeSigValue properties must be set) then the SoundInstance will also send the following SoundInstanceEvents: MusicBeat is sent on every beat of the music (the beat value set in the time signature). MusicBar is sent at the beginning of every measure. MusicEighthNote is sent for every eighth note beat of the music. (If the music's time signature is 4/4, you will receive eight MusicEighthNote events during every measure.) MusicQuarterNote is sent for every quarter note beat of the music. (If the music's time signature is 4/4, you will receive four MusicQuarterNote events during every measure.) MusicHalfNote is sent for every half note beat of the music. (If the music's time signature is 4/4, you will receive two MusicHalfNote events during every measure.) MusicWholeNote is sent for every whole note beat of the music. (If the music's time signature is 4/4, you will receive one MusicWholeNote event for every measure.) If the CustomEventTime checkBox property is set, the SoundInstance will also send the MusicCustomTime event when it reaches that many seconds from the beginning of the audio file. # Related Materials ## Manual SoundCue SoundEmitter SoundSpace SimpleSound SoundTag ## Reference SoundInstance SoundInstanceEvents","title":"Soundinstance"},{"location":"manual/plasmamanual/audio/soundlistener/","text":"SoundListeners , along with SoundEmitters , are responsible for all positional audio in the Plasma Engine. # Using SoundListeners The SoundListener component \ufffdhears\ufffd all positional audio in a SoundSpace , using the orientation of the object it\ufffds attached to, as if it added a set of ears to that object. For example, if there is a SoundListener component on the Player object, and an object with a SoundEmitter playing a constant sound moves past the player from left to right, the sound will initially play primarily from the user\ufffds left speaker and will move to the right speaker as the object moves across the screen. If the SoundEmitter or SoundCue is also using a SoundAttenuator resource, the sound will start quietly and become louder as the object approaches the player, then become quiet again as it moves away. It would sound exactly the same if the player moved past the object instead of the object moving past the player. The SoundListener component is traditionally placed on the player object (or the camera if the camera uses a first-person POV), as this the allows the player of the game to control the source from which all sounds in the level are heard. It is unusual to have multiple SoundListeners in a single SoundSpace, but if there are the audio that they hear will be combined. WARNING: New levels have a SoundListener component automatically attached to the GameCamera. If a SoundListener is added to another object the one on the GameCamera must be removed (unless the user is deliberately using two listeners). If the SoundListener's Active checkBox property is set to false in a LightningScript, the SoundListener will not produce any sound. All audio in the SoundSpace will continue to be processed, even if there are no active SoundListeners, so this is not the same as pausing the sounds. # Related Materials ## Manual SoundEmitter SoundSpace SoundCue SoundAttenuator ## Reference SoundListener","title":"Soundlistener"},{"location":"manual/plasmamanual/audio/soundnode/","text":"SoundNodes are the objects which create and modify all audio in the Plasma Engine. If you are new to SoundNodes and the SoundNode graph, be sure to read the overview page first. SoundNode Overview SoundNode Graph Tool # Generating Audio ## GeneratedWaveNode Creates audio at a specified pitch using generated audio waves. ## AdditiveSynthNode Plays notes at specified pitches using additive synthesis. ## CustomAudioNode Allows the user to pass buffers of audio data directly to the audio engine for output. # Volume and Pitch Modifications ## VolumeNode Changes the volume of the audio provided by its inputs. ## Panning Node Changes the volume of the left and right channels of the audio provided by its inputs separately. ## PitchNode Changes the pitch of the audio provided by its inputs. ## EqualizerNode Changes the volume of the audio provided by its inputs in certain frequency ranges. ## CompressorNode Applies a compressor filter to the audio provided by its inputs. ## ExpanderNode Applies an expander filter to the audio provided by its inputs. # Audio Effect Filters ## ReverbNode Applies a simple reverb filter to the audio provided by its inputs. ## LowPassNode Applies a low pass filter to the audio provided by its inputs (removes high frequencies). ## HighPassNode Applies a high pass filter to the audio provided by its inputs (removes low frequencies). ## BandPassNode Applies a band pass filter to the audio provided by its inputs (removes frequencies higher and lower than the band). ## DelayNode Applies a delay filter to the audio provided by its inputs. ## ChorusNode Applies a chorus filter to the audio provided by its inputs. ## FlangerNode Applies a flanger filter to the audio provided by its inputs. ## AddNoiseNode Adds white noise to the audio provided by its inputs. ## ModulationNode Applies either ring modulation or amplitude modulation to the audio provided by its inputs. # Recording Audio ## RecordingNode Saves all audio produced by its inputs to a WAV file.","title":"Soundnode"},{"location":"manual/plasmamanual/audio/soundnode_graph/","text":"The SoundNode Graph tool displays the connections between all SoundNodes that are currently attached to the output of a SoundSpace. The nodes are color-coded and labeled according to their type. Orange lines connecting nodes indicate a connection which is currently producing audio, while gray lines indicate connections with no audio.","title":"Soundnode graph"},{"location":"manual/plasmamanual/audio/soundspace/","text":"The SoundSpace is one of the default components of a Space. Its basic purpose is to separate sound areas, which means that a SoundListener in one SoundSpace can\ufffdt hear sounds in a different SoundSpace. It also allows the user to control properties like pitch and volume for all sounds in the Space. # Using SoundSpaces ## Playing SoundCues SoundCues can be played through SoundSpaces for non-positional audio that does not go through the SoundListeners. The PlayCue method will start playing the SoundCue immediately, while the PlayCuePaused method will create a paused SoundInstance , which allows the user to change its settings before un-pausing it. lang=csharp this.MySoundInstance = this.Space.SoundSpace.PlayCuePaused(this.MySoundCue); this.MySoundInstance.Volume = 0.5; this.MySoundInstance.Paused = false; ## Controlling Volume and Pitch The Volume and Decibels properties set the volume adjustment applied to all sound in the SoundSpace. Volume uses floating point values, while Decibels uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. The Pitch and Semitones properties set the pitch adjustment applied to all sounds. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. Pitch uses floating point values, while Semitones uses semitones, or half-steps. These properties are also linked. The InterpolateVolume , InterpolateDecibels , InterpolatePitch , and InterpolateSemitones methods can be used at runtime to smoothly change the SoundSpace's volume or pitch over time. Using these interpolation methods is preferable to using Actions to set the properties: changing a property every frame with an Action can result in audible jumps in volume or pitch, while the interpolation method causes the volume change to be handled smoothly by the audio engine. Note that these volume changes will be combined with any other volume modifications applied by objects such as SoundTags , SoundEmitters , and SoundCues. If a SoundCue's {Volume is set to 0.5 and it is played on a SoundSpace which also has a volume of 0.5 , this effectively sets the SoundInstance's volume to 0.25 . If the SoundCue's Semitones is set to 12 and it is played on a SoundSpace with a Semitones value of -6 , this effectively raises the SoundInstance's pitch by half an octave. When the PitchWithTimeSpace checkBox property is true , which is the default, the audio of the SoundSpace will be pitched according to the TimeScale of the Space. In other words, if time slows down the audio will slow down and lower in pitch, and if time is sped up the audio will speed up and raise in pitch. ## Controlling Playback SoundSpaces can be paused by setting their Paused checkBox property to true . This will stop all audio processing for SoundInstances in that SoundSpace. When the Paused checkBox property is set to false the SoundInstances will resume playing with no changes. If the icon-check-square-o, name=PauseWithTimeSpace property is true , which is the default, the SoundSpace will be paused when the Space is paused. ## SoundNodes Each SoundSpace has a single SoundNode that all audio in the Space is connected to, the InputNode . SoundListeners are connected directly to this node, as well as SoundInstances that are not played through a SoundEmitter. Since the SoundSpace uses additional SoundNodes to modify pitch and volume, it also has an OutputNode property which you can use to attach to the output of the SoundSpace. SoundNodes that the user creates to affect all audio in the SoundSpace should be inserted after the OutputNode . NOTE: SoundNodes that are inserted after the SoundSpace's OutputNode must be removed by the user, as these will not be automatically removed when the SoundSpace is destroyed. SoundNodes cannot be inserted after the InputNode or before the OutputNode , and neither of these nodes can be replaced or removed from the graph. # Related Materials ## Manual SoundListener SoundCue SoundInstance SoundTag SoundEmitter SoundNode ## Reference SoundSpace","title":"Soundspace"},{"location":"manual/plasmamanual/audio/soundtag/","text":"SoundTags are resources that allow users to pause, resume, and stop a group of SoundInstances ; control their volume, EQ, and compression; and get a list of tagged SoundInstances to change other properties in LightningScripts. # Common Uses Controlling the volume or EQ of certain types of sounds (such as setting volume for music separately from sound effects) Using the TagForDucking and compressor properties to reduce the volume of one group of sounds when another group is playing (for instance, making sound effects quieter when dialog is playing) Using the compressor settings to keep a type of sound effect from getting too loud # Using SoundTags SoundTags can be added to SoundCues using SoundTagEntries . When a SoundCue is played, the resulting SoundInstance will be automatically added to all SoundTags that are on the SoundCue. Users can also add and remove SoundInstances from SoundTags in scripts at runtime. Unlike other audio objects, SoundTags exist across all Spaces, so the same SoundTag can be used for SoundInstances in different SoundSpaces . ## Volume The Volume and Decibels properties set the volume adjustment that is applied to all tagged SoundInstances. Volume uses floating point values, while Decibels uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. Note that these volume changes will be combined with any other volume modifications applied by objects such as SoundEmitters , SoundCues, and SoundSpaces. If a SoundCue's Volume is set to 0.5 and it is played with a SoundTag which also has a volume of 0.5 , this effectively sets the resulting SoundInstance's volume to 0.25 . Volume can be interpolated over time using either floating point or decibel values with the InterpolateVolume and InterpolateDecibels methods. Using these methods ensures that the volume changes are applied smoothly by the audio engine. ## Equalizer If the UseEqualizer property is set to true , the EQ properties will be applied to all tagged SoundInstances. These settings control the volume of the audio at different frequency ranges. SoundTags have properties for EQLowPassGain , EQBand1Gain , EQBand2Gain , EQBand3Gain , and EQHighPassGain . See the EqualizerNode for explanations of how these properties work. ## Compressor If the UseCompressor property is set to true , the Compressor properties will be applied to all tagged SoundInstances. A compressor reduces the volume of the sound if it goes above a specified decibel level, or threshold. SoundTags have properties for CompressorThreshold , CompressorAttack , CompressorRelease , CompressorRatio , and CompressorKneeWidth . See the CompressorNode for explanations of how these properties work. If the TagForDucking property is set to another SoundTag that tag's volume level will be used to trigger the compressor settings of this SoundTag. ## Lightning Events The AddedInstanceToTag SoundEvent is sent when a new SoundInstance is added to the SoundTag. The TagHasNoInstances SoundEvent is sent when all SoundInstances have been removed from the SoundTag. # Resources ## Manual SoundInstance SoundCue SoundTagEntries SoundSpace SoundEmitter EqualizerNode CompressorNode ## Reference SoundTag SoundEvent","title":"Soundtag"},{"location":"manual/plasmamanual/audio/volume_meter/","text":"The Volume Meter tool allows the user to monitor and change the audio system volume. The slider sets the volume adjustment, in decibels, which will be applied to all audio in Plasma. The colored bars indicate the RMS volume of all the audio currently playing. Roughly speaking, this is the average volume of the recent audio. The red line on top of the volume bars indicates the recent peak volume of the audio. This shows you the highest level that the audio data has reached. If this reaches the top of the meter, there may be clicks or static in the audio, since audio data is lost of the volume becomes too loud.","title":"Volume meter"},{"location":"manual/plasmamanual/audio/soundnode/additivesynthnode/","text":"AdditiveSynthNodes are basic synthesizers, generating notes using a combination of sound waves. ## Common Uses A custom synthesizer using MIDI events sent by a keyboard or other device Creating music or sound effects with no audio files Dynamic or procedural music ## Using the AdditiveSynthNode The AdditiveSynthNode generates audio at specified pitches using additive synthesis, where multiple sound waves at different frequencies are added together to make one sound. Each of these separate waves is called a harmonic. All harmonics have their own volume envelope which controls how quickly the sine wave goes from silence to full volume and back to silence: varying the envelopes for different harmonics will affect how the generated sound changes over time. Online tools such as this waveform generator are useful for experimenting with different sounds, though the envelope values and types of sound waves will have a large effect. (This particular tool uses harmonics which are integer multiples of the base frequency, resulting in sounds that always have a distinct pitch.) The code block below showing how to use the AddHarmonic method contains a simple example that can be used as a starting point. ## Adding Harmonics The AddHarmonic method adds a new harmonic which will be used for all notes played. The first parameter is the base frequency multiplier to use for this sine wave's frequency (i.e. if you play a note at 200 Hz and the multiplier is 2 this sine wave will be at 400 Hz); the second is the volume adjustment applied to this harmonic ( 1.0 is full volume); the third is an AdsrEnvelope object containing the envelope-related values (see the AdsrEnvelope section below); and the fourth is the type of sound wave to use. The valid SynthWaveTypes to use are SineWave , SquareWave , SawWave , and TriangleWave . If you do not fill out the AdsrEnvelope parameters before calling AddHarmonic default values will be used. The following code block shows you how to create a simple instrument with two harmonics. ```lang=csharp var Synth : AdditiveSynthNode = Audio.AdditiveSynthNode(); function Initialize(init : CogInitializer) { // Adds the AdditiveSynthNode to the SoundSpace's SoundNode for output this.Space.SoundSpace.InputNode.AddInputNode(this.Synth); // Create a variable for the AdsrEnvelope var envelope = AdsrEnvelope(); // Set the envelope values for the first harmonic envelope.AttackTime = 0.09; envelope.DecayTime = 0.5; envelope.SustainTime = 0.07; envelope.SustainLevel = 0.5; envelope.ReleaseTime = 1.0; // Add the first harmonic to the synth at the base frequency and half volume, using a sine wave this.Synth.AddHarmonic(1.0, 0.5, envelope, SynthWaveType.SineWave); // Set the envelope values for the second harmonic envelope.AttackTime = 0.02; envelope.DecayTime = 0; envelope.SustainTime = 0.02; envelope.SustainLevel = 1.0; envelope.ReleaseTime = 0.5; // Add the second harmonic at triple the base frequency and quarter volume, using a sine wave this.Synth.AddHarmonic(3.0, 0.25, envelope, SynthWaveType.SineWave); } ``` ## Playing Notes The NoteOn method plays a note at a specific frequency, using MIDI key numbers. The Plasma Engine uses the MIDI convention where middle C is considered to be C3 and has the number 60 . (MIDI key number charts such as this one can be used to translate between notes at different octaves and their corresponding key numbers.) The NoteOff method stops any currently playing notes with the specified MIDI key number. The notes will jump to their Release phase but the release tail will not be cut off. ## AdsrEnvelope An ADSR envelope controls the Attack, Decay, Sustain, and Release portions of a sound's volume. The Attack period is first, where the sound goes from silence to full volume. The Decay period is next, where the sound goes from full volume to its sustain volume. The Sustain period controls how long it stays at the sustain volume, and the Release period is where it goes from the sustain volume back to silence. The AdsrEnvelope object used by the Plasma Engine also has a parameter for delaying when the sound starts. NOTE: Setting the SustainTime property to 0 will make the harmonic play indefinitely until the NoteOff method is called. # Related Materials ## Manual - soudnode_overview - MIDI ## Code Reference - AdditiveSynthNode - AdsrEnvelope","title":"Additivesynthnode"},{"location":"manual/plasmamanual/audio/soundnode/addnoisenode/","text":"The AddNoiseNode collects audio data from all of its inputs and adds white noise (with a low pass filter) to the audio before passing it along to its outputs. # Common Uses Simulating effects such as a crackling speaker # Using the AddNoiseNode The AddNoiseNode inserts noise into the audio using both addition and multiplication; the additive noise will sound similar to having a separate white noise generator playing, while the multiplicative noise alters the audio directly. The combination can mimic what you might hear from something like an old-fashioned radio speaker. # Related Materials ## Reference AddNoiseNode","title":"Addnoisenode"},{"location":"manual/plasmamanual/audio/soundnode/bandpassnode/","text":"The BandPassNode collects audio data from all of its inputs and applies a band pass filter to it before passing it along to its outputs. # Using the BandPassNode Band pass filters are a combination of low pass and high pass filtering which allows only a select band of frequencies through. The CentralFrequency property sets the frequency at which the band is centered, while the width of the band is controlled by the QualityFactor property. # Related Materials ## Manual - soudnode_overview - lowpassnode - highpassnode ## Code Reference - BandPassNode","title":"Bandpassnode"},{"location":"manual/plasmamanual/audio/soundnode/chorusnode/","text":"The ChorusNode collects audio data from all of its inputs and applies a chorus filter before passing it along to its outputs. # Common Uses Combining with other audio filters to create sound effects or environmental effects # Using the ChorusNode Chorus filters use an oscillating delay filter to add a chorus-like effect to the audio. The ModulationFrequency property controls the speed of the oscillation, while the MinDelayMillisec and MaxDelayMillisec properties set the delay values that the filter oscillates between. # Related Materials ## Manual - soudnode_overview ## Code Reference - ChorusNode","title":"Chorusnode"},{"location":"manual/plasmamanual/audio/soundnode/compressornode/","text":"The CompressorNode collects audio data from all of its inputs and applies a compressor filter before passing the data along to its outputs. # Common Uses Preventing a sound (or group of sounds) from becoming too loud # Using the CompressorNode Compressor filters reduce the volume of sounds that go above a certain threshold, according to a specified ratio. The volume is calculated according to this formula: (NOTE) VolumeAdjustmentDecibels = (1.0 - (1.0 / Ratio)) * (ThresholdDecibels - CurrentVolume) In other words, if the Ratio is 4.0 , the ThresholdDecibels is -2 dB, and the current volume of the sound is +2 db, a volume adjustment of -3 dB will be applied and the volume of the sound will be reduced to -1 dB. If the Ratio property is set to 0.0 , the 1.0 - (1.0 / Ratio) value will be set to 1.0 , so the volume will never go above the ThresholdDecibels value: this creates a Limiter filter. The AttackMillisec and ReleaseMillisec properties control how quickly the filter eases in and out as the sound goes above the ThresholdDecibels then goes back below. The AttackMillisec should generally be short and the ReleaseMillisec should be longer, but this will depend on the desired effect. The KneeWidth property sets the number of decibels, centered at the ThresholdDecibels , over which the volume compression eases in. # Related Materials ## Manual - soudnode_overview - expandernode ## Code Reference - CompressorNode","title":"Compressornode"},{"location":"manual/plasmamanual/audio/soundnode/customaudionode/","text":"The CustomAudioNode allows the user to provide buffers of custom audio data to the system for output, using a SoundBuffer object. # Common Uses Playing user-generated pre-computed audio # Using the CustomAudioNode NOTE: This is a fairly limited and high-latency way to output audio. The audio data must be in floating-point numbers between -1.0 and 1.0 , and it must match the sample rate of the audio engine, which is provided via the SystemSampleRate property. To output audio using a CustomAudioNode the user must connect to the CustomAudioNode's NeedMoreSamples event and send a buffer of audio samples when the event is received which is at least as large as the MinimumBufferSize . The CustomAudioNode will work best when the audio data is pre-computed and as little as possible is done when the event is received. If the data is not received quickly enough by the audio engine there may be clicks or gaps in the audio. The following code block illustrates how to use a CustomAudioNode and a SoundBuffer to generate a single audio channel with a constant Sine tone. ```lang=csharp // Create and store the CustomAudioNode object var CustomNode : CustomAudioNode = Audio.CustomAudioNode(); // Create and store the SoundBuffer object var Buffer : SoundBuffer = Audio.SoundBuffer(); function Initialize(init : CogInitializer) { // Connect to the NeedMoreSamples event of the CustomAudioNode Plasma.Connect(this.CustomNode, Events.NeedMoreSamples, this.OnSoundEvent); // Get the minimum buffer size from the CustomAudioNode var bufferSize = this.CustomNode.MinimumBufferSize; var twoPi = 2.0 * Math.Pi; var volume = 0.25; var buffersPerSecond = this.CustomNode.SystemSampleRate / bufferSize; // Fill the SoundBuffer with Sine wave values at a frequency that fits evenly into the buffer for (var i = 0; i < bufferSize; ++i) { this.Buffer.AddSampleToBuffer(Math.Sin(twoPi * buffersPerSecond * i / bufferSize) * volume); } // Add the CustomAudioNode to the SoundSpace's SoundNode this.Space.SoundSpace.InputNode.AddInputNode(this.CustomNode); } function OnSoundEvent(event : SoundEvent) { // Send the buffer of Sine wave samples this.CustomNode.SendBuffer(this.Buffer); } ``` # Related Materials ## Manual - soudnode_overview ## Code Reference - CustomAudioNode - SoundBuffer","title":"Customaudionode"},{"location":"manual/plasmamanual/audio/soundnode/delaynode/","text":"The DelayNode collects audio data from all of its inputs and applies a delay filter before passing it off to its outputs. # Common Uses Using the FeedbackPercent property to create echo effects Combining with other audio filters to create sound effects # Using the DelayNode The delay filter plays a second copy of the audio which is delayed by the number of seconds set by the Delay parameter. The FeedbackPercent property sets a percentage of the filter output which is fed back into the filter as input. If the FeedbackPercent is 0 , the user will only hear one repeat of the sound. If it was 100 , the sound would keep repeating indefinitely. Values in between will make each echo quieter than the last. The WetPercent property controls the loudness of the delayed echo. At 100 the echo will sound just as loud as the original sound. Lower values will make the echo quieter than the sound. # Related Materials ## Manual - soudnode_overview ## Code Reference - DelayNode","title":"Delaynode"},{"location":"manual/plasmamanual/audio/soundnode/equalizernode/","text":"The EqualizerNode collects audio data from all of its inputs and applies several filters to it before passing it along to its outputs, allowing the user to control the loudness of frequencies in specific ranges. # Common Uses Controlling volume of specific frequencies for either a single sound or several sounds at once # Using the EqualizerNode The EqualizerNode controls volume for five separate frequency ranges. The LowPassGain value adjusts the volume of frequencies below 80 Hz; HighPassGain adjusts volume above 5000 Hz; Band1Gain adjusts the volume of frequencies in a band centered at 150 Hz; Band2Gain adjusts the band centered at 600 Hz; and Band3Gain adjusts the band centered at 2500 Hz. All five properties can be smoothly changed over time using the InterpolateAllBands method. # Related Materials ## Manual - soudnode_overview ## Code Reference - EqualizerNode","title":"Equalizernode"},{"location":"manual/plasmamanual/audio/soundnode/expandernode/","text":"The ExpanderNode collects audio data from all of its inputs and applies an expander filter before passing the data along to its outputs. # Common Uses Increasing the contrast between the soft and loud parts of the audio Removing quiet sounds from the audio # Using the ExpanderNode Expander filters reduce the volume of sounds that drop below the threshold, according to a specified ratio. The volume is calculated according to this formula: (NOTE) VolumeAdjustmentDecibels = ((1.0 / Ratio) - 1.0) * (ThresholdDecibels - CurrentVolume) In other words, if the Ratio is 2 , the ThresholdDecibels is -10 dB, and the current volume of the sound is -14 db, the volume adjustment will be -2 dB and the sound will be reduced to -16 db. If the Ratio is set to 0.0 , the (1.0 / Ratio) - 1.0 value will be set to 0.0 , so audio that goes below the ThresholdDecibels value will have their volume reduced by the same number of decibels that they are below the threshold. This will create an effect like a Gate filter. The AttackMillisec and ReleaseMillisec properties control how quickly the filter eases in and out as the sound goes below the ThresholdDecibels then goes back above it. The AttackMillisec should generally be short and the ReleaseMillisec should be longer, but this will depend on the desired effect. The KneeWidth property sets the number of decibels, centered at the ThresholdDecibels , over which the volume change eases in. # Related Materials ## Manual - soudnode_overview - compressornode ## Code Reference - ExpanderNode","title":"Expandernode"},{"location":"manual/plasmamanual/audio/soundnode/flangernode/","text":"The FlangerNode collects audio data from all of its inputs and applies a flanger filter before passing it along to its outputs. # Common Uses Combining with other audio filters to create sound effects or environmental effects # Using the FlangerNode Flanger filters apply an oscillating delay filter to the audio. The delay will interpolate from 0 milliseconds to the MaxDelayMillisec value at the rate set by the ModulationFrequency property. # Related Materials ## Manual - soudnode_overview ## Code Reference - FlangerNode","title":"Flangernode"},{"location":"manual/plasmamanual/audio/soundnode/generatedwavenode/","text":"The GeneratedWaveNode will generate audio using a specified wave type and frequency. Since it is a generating node, it will ignore any input connections. # Common Uses Creating synthesized sound effects Combining white noise with audio filters to generate wind or other sound effects # Using the GeneratedWaveNode GeneratedWaveNodes create audio using either a sine wave, square wave, saw wave, triangle wave, or white noise. The WaveFrequency property controls the pitch of the audio, and can be smoothly changed over time using the InterpolateWaveFrequency method. Like other objects, its volume can be controlled using either the Volume or the Decibels property, and interpolated with the InterpolateVolume and InterpolateDecibels methods. The following code block illustrates how to use a GeneratedWaveNode to make a simple alarm-siren noise. ```lang=csharp class SimpleSiren : LightningComponent { // Make sure this object has a SoundEmitter component [Dependency] var Emitter : SoundEmitter; // Store the GeneratedWaveNode so its properties can be edited later var WaveNode : GeneratedWaveNode = Audio.GeneratedWaveNode(); // Keep track of whether we are interpolating up or down var GoingUp : Boolean = true; function Initialize(init : CogInitializer) { // Attach the GeneratedWaveNode to the SoundEmitter this.Emitter.InputNode.AddInputNode(this.WaveNode); // Set the node's starting properties this.WaveNode.WaveFrequency = 200.0; this.WaveNode.WaveType = SynthWaveType.SawWave; this.WaveNode.Volume = 0.2; // Start playing the generated wave this.WaveNode.Play(); // Start interpolating the frequency this.ChangeFrequency(); } function ChangeFrequency() { // Check if we should interpolate the frequency up or down if (this.GoingUp == true) { // Interpolate the wave's frequency to 700Hz over 1 second this.WaveNode.InterpolateWaveFrequency(700.0, 1.0); // Reset the variable to go down next time this.GoingUp = false; } else { // Interpolate the wave's frequency to 500Hz over 1 second this.WaveNode.InterpolateWaveFrequency(500.0, 1.0); // Reset the variable to go up next time this.GoingUp = true; } // Call this function again in 1.1 seconds var sequence = Actions.Sequence(this.Owner.Actions); Actions.Delay(sequence, 1.1); Actions.Call(sequence, this.ChangeFrequency); } } ``` # Related Materials ## Manual - soudnode_overview ## Code Reference - GeneratedWaveNode","title":"Generatedwavenode"},{"location":"manual/plasmamanual/audio/soundnode/highpassnode/","text":"The HighPassNode collects audio data from all of its inputs and applies a high pass filter to it before passing it along to its outputs. # Common Uses Removing excessive low frequencies Combining with white noise and other audio filters to create wind or other sound effects # Using the HighPassNode High pass filters leave high frequencies untouched while silencing low frequencies below their cutoff frequency. The only property on the HighPassNode is the CutoffFrequency , which sets the frequency at which the filter starts to take effect. # Related Materials ## Manual - soudnode_overview - bandpassnode - lowpassnode ## Code Reference - HighPassNode","title":"Highpassnode"},{"location":"manual/plasmamanual/audio/soundnode/lowpassnode/","text":"The LowPassNode collects audio data from all of its inputs and applies a low pass filter to it before passing it along to its outputs. # Common Uses Making audio sound muffled Combining with white noise and other audio filters to create wind or other sound effects # Using the LowPassNode Low pass filters leave low frequencies untouched while silencing high frequencies above their cutoff frequency. The only property on the LowPassNode is the CutoffFrequency , which sets the frequency at which the filter starts to take effect. # Related Materials ## Manual - soudnode_overview - bandpassnode - highpassnode ## Code Reference - LowPassNode","title":"Lowpassnode"},{"location":"manual/plasmamanual/audio/soundnode/modulationnode/","text":"The ModulationNode collects audio data from all of its inputs and applies either amplitude or ring modulation to the audio before passing it along to its outputs. # Common Uses Using amplitude modulation to regularly vary the volume of a sound Using ring modulation to create sound effects or synthesizers # Using the ModulationNode Amplitude modulation will oscillate the volume of the audio at a rate set by the Frequency property. The volume changes from 0 to 1.0 . If the user does not want the volume to go to silence, setting the WetPercent to values below 100 will reduce the strength of the modulation. Ring modulation will directly alter the frequencies of the sound, with stronger effects as the Frequency value gets larger. # Related Materials ## Manual - soudnode_overview ## Code Reference - ModulationNode","title":"Modulationnode"},{"location":"manual/plasmamanual/audio/soundnode/panningnode/","text":"The PanningNode collects audio data from all of its inputs and applies a volume modification to the left and right channels separately. # Common Uses Moving sounds from left to right and right to left (such as an ambient wind sound) Positioning sounds without using a SoundEmitter # Using the PanningNode PanningNodes will always process audio in two channels regardless of how many channels are used by their inputs or outputs. If the audio input has more than two channels it will be translated into only two before being processed. ## SumToMono If the SumToMono property is set to true , all channels of audio input will be combined before being spread to the left and right channels with the appropriate volume modification. This can be useful if you want the entire sound to be heard as if it is coming from a single position (this is how audio is handled by SoundEmitters). If it is false , the volume modifications will be applied to the existing channels. ## Events The AudioInterpolationDone event will be sent when a volume interpolation has finished. ## Example The following code block illustrates how to make white noise sound like it's moving back and forth. ```lang=csharp class MovingNoise : LightningComponent { // Create and store the PanningNode to change its properties later var Panning : PanningNode = Audio.PanningNode(); // Create and store the GeneratedWaveNode var Noise : GeneratedWaveNode = Audio.GeneratedWaveNode(); function Initialize(init : CogInitializer) { // Set the GeneratedWaveNode properties this.Noise.WaveType = SynthWaveType.Noise; this.Noise.Volume = 0.2; // Start playing the generated sound wave this.Noise.Play(); // Reduce the PanningNode's left volume this.Panning.LeftVolume = 0.3; // Add the GeneratedWaveNode to the inputs of the PanningNode this.Panning.AddInputNode(this.Noise); // Attach the PanningNode to the output node of the SoundSpace this.Space.SoundSpace.SoundNode.AddInputNode(this.Panning); // Start panning this.ChangePanning(); } function ChangePanning() { var time = 3.0; // Are we now panning from left to right? if (this.Panning.LeftVolume < this.Panning.RightVolume) { // Interpolate the left volume back to 1.0 and the right volume to 0.2 this.Panning.InterpolateVolumes(1.0, 0.2, time); } // If not, we are panning from right to left else { // Interpolate the right volume back to 1.0 and the left volume to 0.2 this.Panning.InterpolateVolumes(0.2, 1.0, time); } // Delay the next call of this function by the time var sequence = Actions.Sequence(this.Owner.Actions); Actions.Delay(sequence, time); Actions.Call(sequence, this.ChangePanning); } } ``` # Related Materials ## Manual - soudnode_overview ## Code Reference - PanningNode","title":"Panningnode"},{"location":"manual/plasmamanual/audio/soundnode/pitchnode/","text":"The PitchNode collects audio data from all of its inputs and applies a pitch modification to the samples before passing them off to its output nodes. # Common Uses Controlling the pitch of several sounds at once # Using the PitchNode WARNING: When using PitchNodes, if a generating node has multiple output connections the user must make sure all of them are at the same pitch. If SoundNodes request data from the generating node at different pitch settings there will be an error and the nodes will be disconnected. ## Pitch and Semitones PitchNodes have two linked properties for setting their pitch change: changing one will also change the value of the other. Raising the pitch also speeds up the sound, while lowering the pitch slows it down. Large pitch changes will likely affect the quality of the sound. The Pitch property is a floating point value where 0.0 does not affect the pitch, 1.0 raises the pitch by an octave (doubles the pitch), 2.0 raises it by two octaves, -1.0 lowers it by an octave, etc. The Semitones property uses semitone (or half-step) values to set the pitch. There are twelve semitones in an octave, so a value of 12 would double the pitch while -12 would halve it. The pitch can be interpolated over time using either floating point or semitone values with the InterpolatePitch and InterpolateSemitones methods. In both methods, the first value is the pitch to interpolate to, and the second is the length of time (in seconds) for the interpolation. Using these methods ensures that the pitch change is applied smoothly by the audio engine. ## Events The AudioInterpolationDone event will be sent when a pitch interpolation has finished. # Related Materials ## Manual - soudnode_overview ## Code Reference - PitchNode","title":"Pitchnode"},{"location":"manual/plasmamanual/audio/soundnode/recordingnode/","text":"The RecordingNode collects audio data from its inputs and writes that data to a file. The audio data is then passed along to its outputs with no changes. # Common Uses Allowing the player to record game audio Saving sound effects or music created in the Plasma Engine # Using the RecordingNode The file created by the RecordingNode will be in WAV format. By default the node will constantly write small amounts of data to the file (when StreamToDisk is True). The disk access will not affect the audio, but it could possibly affect the game performance. The RecordingNode can also save all data into a buffer and write it all at once when recording is stopped. Unless the recording is very short, writing this much data to disk at once will take a noticeable amount of time. Which method to choose depends on usage and performance needs. IMPORTANT: The FileName must contain the full path of the location where the file should be opened and all folders in the path must already exist. Do NOT include a file extension. This property must be set before calling StartRecording . The following code shows how to create a file named \"RecordingTest.wav\" inside the Example folder in the user's Documents folder. lang=csharp this.MyRecorder.FileName = FilePath.CombineDirectoriesAndFile(FilePath.UserDocumentsDirectory, \"Example\\\\\", \"RecordingTest\"); # Related Materials ## Manual - soudnode_overview ## Code Reference - RecordingNode","title":"Recordingnode"},{"location":"manual/plasmamanual/audio/soundnode/reverbnode/","text":"The ReverbNode collects audio data from all its inputs and applies a simple reverb filter before passing it off to its outputs. # Common Uses Creating an echoing ambience for areas such as large rooms or caves # Using the ReverbNode Although ReverbNodes use relatively straightforward calculations, they do take computation time. It is best to use as few ReverbNodes as possible. Reverb calculations will not affect game performance, but if they take too long, it will result in audio glitches. Any reverb that is not dependent on factors that change during gameplay should be applied to the audio files themselves using higher-quality reverb in audio software. The Length property sets the length of the reverb tail (the number of seconds it will take for a sound to completely die away after it finishes playing). The WetPercent property controls the percentage of the audio which is affected by the reverb filter. This can be smoothly changed over time using the InterpolateWetPercent method. # Related Materials ## Manual - soudnode_overview ## Code Reference - ReverbNode","title":"Reverbnode"},{"location":"manual/plasmamanual/audio/soundnode/soudnode_overview/","text":"SoundNodes are the building blocks behind all audio in the Plasma Engine. A SoundNode receives audio data from other SoundNodes through its input connections, modifies that data in some way (or simply collects it), then passes it along to more SoundNodes through its output connections. Some SoundNodes only generate audio data, like SoundInstances . Those nodes do not collect anything from their input connections and attaching nodes to their input would have no effect. All sound objects in the Plasma Engine use some type of SoundNode. These nodes are connected together into a tree-like graph, with generating nodes as the topmost branches, and the output node of the SoundSpace as the root node at the bottom. The SoundNode graph processes audio by starting at the root node and requesting data from its input nodes. These nodes then request data from their inputs, and so on, until the request reaches a generating node which returns audio data that then follows the chain back down the graph. There are many types of SoundNodes that can only be created and added to the node graph in LightningScripts. These SoundNodes are reference counted: they will stay alive as long as the user stores a variable with the SoundNode assigned to it. If it is not stored, the node will be alive as long as it is connected to the graph, but users can no longer access it. The SoundNodes of built-in objects are also exposed in Lightning, and users can freely edit most of the graph connections, giving them a great deal of flexibility in creating audio. When building connections it is important to remember that nodes closer to the generating node modify the audio before nodes that are further away. For example, to change the pitch of a sound before applying reverb, the PitchNode must be between the SoundInstance and the ReverbNode. The SoundNode Graph tool can be extremely helpful when editing the graph directly. WARNING: SoundNodes can be connected in many complicated ways, but users must be careful not to create a loop. If loops are created, the user will receive an error, and the SoundNodes will be automatically disconnected. In most cases, nodes can be connected in any order and to any number of other nodes. The exception is the PitchNode . The PitchNode changes the pitch of a sound by essentially stretching or squishing the sound waves, which means that it needs a different amount of data than other nodes. This causes a problem when a PitchNode and a node that was not pitch-shifted request data from the same SoundInstance. WARNING: When using PitchNodes, if a generating node has multiple output connections the user must make sure all of them are at the same pitch. If SoundNodes request data from the generating node at different pitch settings there will be an error and the nodes will be disconnected. # Using SoundNodes In LightningScripts, all SoundNodes are created using the appropriate method on the Audio object. The following code block shows how you would create a PitchNode. ```lang=csharp var myPitchNode = Audio.PitchNode(); There are multiple places in the SoundNode Graph that sound nodes can be attached. Here is an example of a component that creates and controls a PitchNode for its neighboring [SoundEmitter](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/audio/soundemitter.markdown): ```lang=csharp class EmitterPitch : LightningComponent { [Dependency] var SoundEmitter : SoundEmitter; var PitchNode : PitchNode = Audio.PitchNode(); [Property] var Pitch : Real { get { return this.PitchNode.Pitch; } set { this.PitchNode.Pitch = value; } } function Initialize(init : CogInitializer) { this.SoundEmitter.OutputNode.InsertNodeAfter(this.PitchNode); } } The functionality described below is available on all SoundNodes. See the individual Manual pages for details about each SoundNode type. ## Adding and Removing SoundNodes To add a SoundNode as input on another SoundNode, call the AddInputNode method on the SoundNode that should receive the input, passing in the input SoundNode as the parameter. There are two ways to insert a SoundNode into the existing graph, InsertNodeAfter and InsertNodeBefore . As expected, InsertNodeAfter will insert a SoundNode into the graph after the SoundNode the method is called on (placing it between that SoundNode and all its output nodes), and InsertNodeBefore will insert a SoundNode before the SoundNode the method is called on (placing it between that SoundNode and all its input nodes). NOTE: Some built-in objects do not allow insertion and will give a warning if the user calls this method. To disconnect a SoundNode's input, the RemoveAllInputs method can be used to remove all input connections from the SoundNode. Removing a single input can be done using the RemoveInputNode method, which will remove the SoundNode passed in as the parameter from the inputs of the SoundNode the method is called on. The RemoveAllOutputs method will remove all output connections from the SoundNode, disconnecting it from the node graph. There are two ways to remove a SoundNode from the graph while keeping the rest of the graph intact. The RemoveAndAttachInputsToOutputs method will remove the SoundNode from the graph but will also connect all of the SoundNode's input SoundNodes to all of its output SoundNodes. The ReplaceWith method will replace the SoundNode the method is called on with the SoundNode passed in as the parameter; all inputs and outputs of the SoundNode the method is called on will be switched to the new SoundNode. NOTE: Built in objects that do not allow insertion before their SoundNode also do not allow you to remove all of their inputs. Built in objects such as SoundSpaces will not allow you to remove them from the graph. ## Bypassing SoundNodes The BypassPercent property sets a percentage of a SoundNode's input that will be sent directly to its outputs, without any processing. In other words, if the BypassPercent is set to 30.0, seventy percent of the sound will be processed by the SoundNode while thirty percent will not. This can be a useful way to turn nodes on and off without removing them from the graph, or to reduce the strength of an audio effect. NOTE: On some types of SoundNodes changing this value by large amounts at runtime could result in clicks or other problems with the audio. ## Collapsing Unused SoundNodes If the AutoCollapse property is set to True, the SoundNode will automatically remove itself from the graph when its last input node is removed. This property is set to False by default. ## Lightning Events The SoundNodeDisconnected SoundEvent is sent by all SoundNodes when they are is completely disconnected from the graph (when the node has no more inputs or outputs). # Related Materials ## Manual SoundInstance SoundSpace SoundNode Graph ## Reference SoundNode","title":"Soudnode overview"},{"location":"manual/plasmamanual/audio/soundnode/volumenode/","text":"The VolumeNode collects audio data from all of its inputs and applies a volume modification to the samples before passing them off to its output nodes. # Common Uses Collecting several sounds together and changing their volume all at once # Using the VolumeNode There are two linked properties that can be used to set the value of the volume modification: changing one of them will also change the value of the other. The Volume property is a floating point multiplier applied to the audio signal: a value of 1.0 does not affect the sound, 2.0 will double the volume, 0.5 will halve it, and 0.0 will make the sound inaudible. The Decibels property allows you to set the volume using the logarithmic decibel scale. A value of 0 dB does not affect the sound, 6 dB will double the sound\ufffds volume, -6 dB will halve it, and -100 dB is effectively the same as setting Volume to 0 . The volume can be interpolated over time using either floating point or decibel values with the InterpolateVolume and InterpolateDecibels methods. In both methods, the first value is the volume you want to interpolate to, and the second is the length of time (in seconds) for the interpolation. Using these methods ensures that the volume change is applied smoothly by the audio engine. NOTE: If a VolumeNode has an output connection, setting the volume directly using the Volume or Decibels property is not actually instantaneous, so setting the volume and then calling InterpolateVolume immediately afterward may have unexpected results. ## Events The AudioInterpolationDone event will be sent when a volume interpolation has finished. # Related Materials ## Manual - soudnode_overview ## Code Reference - VolumeNode","title":"Volumenode"},{"location":"manual/plasmamanual/editor/","text":"# Editor User Interface Initially the amount of buttons and the breadth of actions that can be taken in Plasma can be a bit complex. Start here to get yourself oriented in the engine. - Tags","title":"Editor"},{"location":"manual/plasmamanual/editor/tags/","text":"This explains what and how tags are used in the Plasma Engine. # Conceptually Tags are an alternate form of organization to the hierarchical folders. Properties of Tags: Tags represent ideas or categories that are associated with an object. Multiple tags can be associated with a single object. Objects are found by filtering all available objects by their tags, thus each object would at least need one tag to be found. Each additional tag used while searching would further restrict the results; however, the order in which the filtering is applied would not change the final result. # Tags in Plasma ## Adding and Removing Tags Right-clicking on an object in the Library Window will give you the option to Edit Tags Here you can add tags and remove them using the x button. ## Automatically Generated Tags There are a few automatically generated tags, such as Archetype , Level , Texture , etc. These arise from the need to have a tag for every object so that they can show up when you search. They are added when you add the resource and cannot be removed. This prevents a user from losing the ability to access a resource they created.","title":"Tags"},{"location":"manual/plasmamanual/gameplay/handlingquitmessage/","text":"Quit Messages are sent by the engine to quit out of a game by closing Game window. This happens by default when the esc (escape) key is pressed in game. Using the GameRequestQuit event, however, gives the user control over the esc key press (which is otherwise inaccessible by Keyboard events). When connecting to the GameRequestQuit event, the user may assign any activity to the esc key that they wish. # Common Uses - Using the esc key to pause the game - Using the esc key to pause the game and bring up a confirmation-of-destructive-action window - Using the esc key to to exit out of the current level # How to Use the GameRequestQuit Event This section will cover connecting to the event and setting up the response function. ## Connecting to the GameRequestQuit Event When connecting to the GameRequestQuit, it must be listening for the Events.GameRequestQuit dispatch (which is done by pressing the esc key) onto this.GameSession , as follows: ```lang=csharp //Listening for Events.GameRequestQuit dispatch onto this.GameSession Plasma.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit); ## The GameRequestQuit Response Function The `GameRequestQuit` event is of type [GameEvent](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/code_reference/class_reference/gameevent.markdown) that includes a few properties that can be used inside the response function. The most notable of these, for the purposes of removing the game-exiting functionality, is `event.Handled`. `Handled` is a boolean that if set to `true`, tells the engine that the behavior for the `esc` key will now **be handled** by the code inside the response function. If `event.Handled` is left `false`, the event would persist to be handled by the engine (once again performing the default behavior of closing the `Game Window` *after* your response function completed). The following will code-block will show how the response function can create alternate behavior for the `esc` key while still allowing for game-quitting functionality: class GameQuitTest : LightningComponent { // Boolean variable that when set to true, Esc key will keep game-quitting functionality [Property] var ApplyQuit : Boolean = false; function Initialize(init : CogInitializer) { // Listening for Events.GameRequestQuit dispatch onto this.GameSession Plasma.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit); } function OnGameRequestQuit(event : GameEvent) { // Let the engine know that this function will handle behavior for the Esc key event.Handled = true; // If this.ApplyQuit is set to true... if(this.ApplyQuit) { // Call function to quit game from the GameSession object event.Game.Quit(); } // If this.ApplyQuit is set to false... else { // Supply alternate behavior (pausing/unpausing the game) for Esc key var spaces = this.GameSession.AllSpaces; foreach (var space in spaces) { space.TimeSpace.TogglePause(); } } } } ``` # Related Materials ## Manual Pages - Events and Connections ## Code Reference - GameEvent - GameRequestQuit","title":"Handlingquitmessage"},{"location":"manual/plasmamanual/gameplay/input/","text":"Input With out a system to detect and interpret input data any game will be very boring and non interactive. Plasma supports mouse, keyboard, and gamepads. With these peripherals we can make most games. - Mouse Input - Using Custom Cursors - Keyboard Input - Gamepad Input","title":"Input"},{"location":"manual/plasmamanual/gameplay/input/#input","text":"With out a system to detect and interpret input data any game will be very boring and non interactive. Plasma supports mouse, keyboard, and gamepads. With these peripherals we can make most games. - Mouse Input - Using Custom Cursors - Keyboard Input - Gamepad Input","title":"Input"},{"location":"manual/plasmamanual/gameplay/interpolation/","text":"# Linear Interpolation # Spherical Linear Interpolation","title":"Linear Interpolation"},{"location":"manual/plasmamanual/gameplay/random/","text":"Randomness is an important part of most games, without randomness a game will be deterministic meaning the same outcome will always happen given the same set of player inputs. # Creating a Random Number Generator Object There are two ways you can create a Random Number Generator Object in Plasma Engine: randomcontext random (only available through Lightning Scripts) RandomContext is a component that can be added to an object while Random is a type (such as Real2 or Quaternion). While they both offer slightly different methods, they both can be used to accomplish the same goals and are often interchangeable. # RandomContext component The RandomContext component can be added to a game object just like every other component. # Random class object The Random class object can be created much like every other object in the game. class RandomScript : LightningComponent { ... var RandomGenerator : Random = Random(); ... } or if you want to where exactly when the object is created function Initialize(init : CogInitializer) { ... this.RandomGenerator = Random(); ... } # Using the Random Number Generator Object Below are some examples on how to use the functions offered by the Random Number Generator object. ## DieRoll DieRoll is a function that takes an integer that determines the number of sides of a die and returns a random number between 1 and Sides . Here's an example: function GenerateRandomNumber () { Console.WriteLine(this.RandomGenerator.DieRoll(20)); } ## Range Real Range (Real Min, Real Max) The Range function can be used when you need to generate a random number between two numbers. We can call this function by function GenerateRandomRange () { Console.WriteLine(this.RandomGenerator.Range(0, 100)); } ## Linear vs Non-Linear Up untill now we are only generating random numbers linearly. This means that all possible numbers in a specified range has an equal chance to be generated. There are functions that the generator offer that generates random numbers in a non-linear manner where all possible numbers in a specified range does not have an equal chance to be generated. Functions like BellCurve generate numbers in a non-linear manner so in a range of 0 to 1 , numbers in the middle of the range has a higher chance of being generated than the numbers on the edges. ## Deterministic Random Number Generator In some situations, deterministic random number might be needed in order for a feature to work correctly. This can normally be found in a Replay feature or networked games. In a Replay feature, game sessions are recorded and replayed for people to see and evaluate. This means that we will have to record all randomness in the game as well. Or in a networked game where randomness are involved, we need to make sure that all the connected players are playing the same game which means we have to somehow make sure that random number generator generates the same number between the different players. ### Seeding a Random Number Generator When we seed a random number generator, we make sure that the random number generator will generate the same sequence of number when it is called. function Initialize(init : CogInitializer) { ... this.RandomGenerator.Seed(0); ... } When the following function is called multiple times, the same sequence of number will be generated every time. function GenerateRandomNumber () { Console.WriteLine(this.RandomGenerator.DieRoll(20)); } So in a Replay feature, we simply save the current seed of the random number generator and then seed the random number generator with the seed to get the same sequence of random number every time we run the replay. Also, in a networked game, we can simply share the seed between all connected players to make sure that everyone shares the same gameplay experience between multiple random number generator. # Related Material ## Reference - randomcontext - random","title":"Random"},{"location":"manual/plasmamanual/gameplay/input/customcursor/","text":"Custom Cursors are a great way to add a level of professionalism and polish to any project. A Cursor created specifically for a project can be used for player feedback and fits into the project universe better than the normal Mouse icon in most situations. There are several methods that can be used to add this functionality, all of which come with their own strengths and weaknesses. NOTE: Recommended Reading This section covers topics that may not have been encountered yet. To learn or review those topics, please see: Mouse Input and {icon university}[[plasma_engine_documentation/plasma_editor_documentation/plasmamanual/Graphics/CamerasViewportsRenderers/|Cameras, Viewports and Renderers]] # Using a Custom Cursor ## Hiding the Mouse Pros Cons Quick to implement Mouse Icon can leave window bounds Retains all mouse functionality Will become visible if it does The first option involves making the Mouse Cursor invisible while not affecting any of its functionality. This has two easy-to-see benefits: it's quick to implement and all functionality is retained. class HiddenMouseExample : LightningComponent { [Dependency] var Transform : Transform; function Initialize(init : CogInitializer) { // Set the Mouse to invisible Plasma.Mouse.Cursor = Cursor.Invisible; // Connect to MouseMove Event Plasma.Connect(this.Space, Events.MouseMove, this.OnMouseMove); } // Code continued below This would be the start of a component attached to the object that will act as the Custom Cursor. After making sure the object has a transform Component using the Dependency - Component using the Dependency attributes , it then sets the Mouse Cursor to be invisible. The final part of the code-block connects to the MouseMove event, which is fleshed out in the following code-block: // continued from above function OnMouseMove(event : ViewportMouseEvent) { // Get mouse WorldPosition on the Z-Plane at depth 0 var mousePosition = event.ToWorldZPlane(0); // Set the MouseCursor Objects position to the Mouse position this.Transform.Translation = mousePosition; } } The OnMouseMove function will fire every time the Mouse is moved, keeping the custom cursor in the same location as the invisible Mouse. It could also connect to other Mouse Events, such as MouseDown or MouseUp, in order to interact with these events visually (e.g., by changing the SpriteSource of the object). All other working functionality can then be given to the Mouse itself, so that it can react with objects that have the Reactive Component attached the them. A large drawback to using this method is the fact that it allows the Mouse icon to leave the boundaries of the Game window, which will make the Mouse visible and not hide it again even if the Game is brought back into focus. It would also be possible to set the Mouse invisible from the LogicUpdate event, keeping the cursor invisible in within the editor even when leaving the game window. ## Locking the Mouse Pros Cons Mouse stays within widow bounds Loses most mouse functionality Allows use of multiple Spaces More complex the hiding the mouse A second option, rather than hiding the Mouse, is to lock it to the center of the screen. It helps to solve the issue of the the Mouse staying within the the Game boundaries but also comes with its own set of problems. class LockedMouseExample : LightningComponent { // An Archetype of the Custom Cursor Object [Property] var CursorArchetype : Archetype; // An Archetype of the Space to be built [Property] var CursorSpaceArchetype : Archetype; // An Archetype of the GameCamera to use in the Cursor Level [Property] var CameraArchetype : Archetype; // Reference to the CameraViewport of the created Cursor Space var CurViewport : CameraViewport = null; // An empty Level used to create the Custom Cursor in [Property] var CursorLevel : Level; // Reference to the Custom Cursor Object once it's created var CursorObj : Cog = null; // The Space the Custom Cursor will inhabit var CursorSpace : Space = null; // Reference to the Translation of the Custom Cursor var CursorTranslation : Real3 { get { return this.CursorObj.Transform.Translation; } } // Calls a function to give the Cursor Position in Screen Space var CursorScreenSpacePosition : Real2 { get { return this.CurViewport.WorldToScreen(this.CursorTranslation); } } // Calls a function to give the Cursor Position in the Viewport var CursorViewportPosition : Real2 { get { return this.CurViewport.ScreenToViewport(this.CursorScreenSpacePosition); } } // Code continued below Just from the initial setup it becomes obvious that this method is much more complex than simply making the Mouse invisible and having an Object follow it, but it also offers benefits. NOTE: Get-Sets In order to reduce the amount of repetitive typing, a number of getters have been used to hold references to other functions. For further explanation of get-sets, see Get-Sets . When this component is attached to the current level's LevelSettings object, it will create an Object in a new Space that is built on top of the GameSpace. This object allows it to function properly in a 3D game. As the getters have defined most of the variables, much of the script is ready to be used. ... function Initialize(init : CogInitializer) { // Traps the Mouse, locking it and making it invisible Plasma.Mouse.Trapped = true; // Creates a new Space for the Cursor to inhabit this.CursorSpace = this.GameSession.CreateNamedSpace(\"CursorSpace\", this.CursorSpaceArchetype); // Loads the CursorLevel inside the newly made space this.CursorSpace.LoadLevel(this.CursorLevel); // Create the GameCamera var cam = this.CursorSpace.Create(this.CameraArchetype); // Set the viewport based on the GameCamera this.CurViewport = cam.CameraViewport; // Creates the Custom Cursor at (0,0,0) in the new Level this.CursorObj = this.CursorSpace.CreateAtPosition(this.CursorArchetype, Real3()); // Connects to the MouseMove Event In the Cursor Space, NOT the Game Space Plasma.Connect(this.CursorSpace, Events.MouseMove, this.OnMouseMove); } ... The Initialize function creates the required Space, Level and Object for the Custom Cursor. It's important to make sure that the objects are being made in the CursorSpace, not the main GameSpace. ... function OnMouseMove(event : ViewportMouseEvent) { // Get a new position by adding the distance of the MoveEvent to the Cursors current position var newPos = this.CursorViewportPosition + event.Movement; // Create a new position within the Viewport for the Cursor while also Clamping the range var newCurViewportPos = Math.Clamp(newPos, Real2(), this.CurViewport.ViewportResolution); // Adjust the Viewport position to the proper Screen position var newCurScreenPos = this.CurViewport.ViewportToScreen(newCurViewportPos); // Set the Cursor Objects position to the newly determined position in World Space this.CursorObj.Transform.Translation = this.CurViewport.ScreenToWorldZPlane(newCurScreenPos, 0.0); } } Similar to hiding the mouse, the code-block above uses MouseMove Events to control the movement of the Custom Cursor object. This time, however, a few more steps are needed: - The intended new cursor position is found by adding the current viewport position of the Cursor and the Mouse Movement vector given in the MouseMove Event. - The new cursor viewport position must be clamped within the boundaries of the viewport. - The viewport position must be converted to screen position as there is no way to directly convert from viewport space coordinates directly to worldspace. - The cursor screenspace position must be converted to worldspace so the custom cursor can be moved. The biggest problem with using this method is the fact that most Mouse functionality is lost, as it becomes locked to the center of the screen. All Cursor functionality will have to be determined using either collision events or Cursor position, which can become taxing on the system as it has to either check the position every frame or resolve various collisions. Below is an example of this script attached to the LevelSettings object of an empty level, with the blue sprite given as the CursorArchetype and the white sprite following the same script as the hidden cursor example, to show how the mouse is attempting to move from the world origin. # Related Materials ## Manual - Mouse Input - Getters and Setters - ## Code Reference - Mouse - Transform - Sprite - Reactive - Space","title":"Customcursor"},{"location":"manual/plasmamanual/gameplay/input/gamepadinput/","text":"Gamepads are very useful tools for any game project. They often offer a more comfortable method of controlling a game, especially if two or more players are intended to play at the same time. As well as being an alternate method of control, Gamepads can also make use of vibration as a method of feedback. # Common Uses - Provides a alternative method of control to Keyboard and Mouse inputs - Lets multiple players comfortably play a game on the same screen - Gives access to vibration for tactile feedback to players ## Before Using Gamepads Before starting to use Gamepads in a project, take the time to check that they are properly working. What may be thought to be an error in code may, in fact, be that the Gamepad is not plugged in properly, has outdated drivers, etc. Most wired Gamepads should work without issue; however, some wireless Gamepads may need to have drivers updated. This page was written using wired XBox 360 controllers. If using an XBox One Gamepad, drivers may be found here . # Using Gamepads ## Initial Setup Unlike most things in Plasma, it's not possible to make a simple reference to Plasma.Gamepads and have the Engine understand what is meant, even if only a single Gamepad is connected. Rather, whenever any number of Gamepads are detected, Plasma will store them in a list that must be accessed to select the desired Gamepad. class GamepadLogic : LightningComponent { // Create a variable to later use as reference to the Gamepad var Controller : Gamepad = null; // Set a Speed property to be used to adjust the movement speed [Property] var Speed : Real = 0.0; function Initialize(init : CogInitializer) { // Assign the first Gamepad detected as the Gamepad this object will use this.Controller = Plasma.Gamepads.GetGamePad(0); } } Plasma.Gamepads is a reference to the PlasmaObject Gamepads , which keeps track of all detected Gamepads. The GetGamePad function will return a reference to whichever Gamepad corresponds to the ID passed to the function. In the case above, the Gamepad in the first element (at index 0 in the list) is accessed. Plasma.Gamepads is a helpful reference to remember for the future, as it can be used to affect all Gamepads at once. ## Reading from Thumbsticks Thumbsticks on a Gamepad are typically used for moving the player or aiming. When accessed, they return a normalized 2D vector that is stored in corresponding LeftStick and RightStick Real2 variables on each Gamepad object. function OnLogicUpdate(event : UpdateEvent) { // Create a local variable to be used for movement var movement = local Real3(0.0, 0.0, 0.0); // Check to make sure that the Gamepad exists if (this.Controller.IsActive) { // Assign the current direction of the Left thumbstick to the movement variable movement.X += this.Controller.LeftStick.X; movement.Y += this.Controller.LeftStick.Y; } // Apply this movement to the Velocity of the Game Objects RigidBody, multiplied by the Speed this.Owner.RigidBody.Velocity = movement * event.Dt * this.Speed; } Since the thumbsticks return a Real2 at a range from -1 to 1 , this can easily be translated into creating movement on a 2D plane. Keep in mind this example does not use the RightStick , only the LeftStick . ## Button Input Similar to Mouse Input, assigning logic to the various buttons on the Gamepad can be Frame Based or Event Based. Both have their strengths and weaknesses; determining which approach is better for a specific project should be decided on a case by case basis. ## Frame Based Button Input The example given above is Frame Based, and the reason for that is simple: Frame Based Input from a Gamepad works best when there will be sustained action, such as when a thumbstick is held down to move a player character. This same logic applies to buttons as well. function OnLogicUpdate(event : UpdateEvent) { if (this.Controller.IsButtonDown(Buttons.A)) { // Insert code here } } (NOTE) Using Buttons in Plasma Engine : Plasma Engine has an enum set up to be used to call a desired button, which can be accessed in a LightningScript with Buttons followed by a period (e.g., Buttons.X ). It should be noted however that the list of buttons specifically refers to the button layout of an Xbox 360 Gamepad, and may not be accurate for other Gamepads. This particular line of code will simply trigger whatever is placed inside the if statement whenever the A button on the Gampad is held down. Buttons can be changed to refer to any button on the Gamepad. Buttons.AnyButton can also be used if it doesn't matter which button is pressed, such as at a title screen. ## Event Based Button Input When looking for a single press or release of a button to trigger a function, Event Based Input is a better choice. In this approach, the component listens for a gamepad event dispatch, rather than checking every frame to see if a change has occurred. function Initialize(init : CogInitializer) { Plasma.Connect(this.Controller, Events.ButtonDown, this.OnButtonDown); Plasma.Connect(this.Controller, Events.ButtonUp, this.OnButtonUp); } function OnButtonDown(event : GamepadEvent) { if (event.Button == Buttons.B) { // Insert code here } } function OnButtonUp(event : GamepadEvent) { if (event.Button == Buttons.B) { // Insert code here } } This block of code first connects to two different events: ButtonDown and ButtonUp . These events will be sent whenever a button on the Gamepad has been either pressed or let go, respectively. If it is the B button, OnButtonDown or OnButtonUp will run. A short example of this functionality: an attack charges as long as a button is held down; the attack is then used when the button is released. NOTE: Using Triggers in Plasma Engine By looking at the options that come up by typing Buttons. into a LightningScript, one may notice that neither of the Xbox 360 Triggers are options. This is because they return a Real instead of a boolean . While this excludes them from sending any Events, it also allows them to be used as pressure sensitive buttons, as can be seen below in the Vibration section. ### Flicking Flicking is a Gamepad event that is sent whenever a thumbstick moves further than 0.5 is any direction. Because of how the event associated with flicking is dispatched--immediately and automatically once the stick goes past the \"halfway point\"--it should usually be used on whichever thumbstick is not being used for movement. function Initialize(init : CogInitializer) { Plasma.Connect(this.Controller, Events.GamepadStickFlicked, this.OnGamepadStickFlicked); } function OnGamepadStickFlicked(event : GamepadEvent) { // Left thumbstick if(event.FlickedStick == 1) { // Insert code here } // Right thumbstick if(event.FlickedStick == 2) { // Insert code here } } This event is useful for something like a dodging mechanic, as it can be called side by side with an UpdateEvent (e.g., LogicUpdate), allowing for normal movement to continue at the same time. ## Vibration Provided that the Gamepad being used has a Vibration feature, Plasma simply needs a function call to access it. As it is a physical reaction, however, an example works best to explain. function OnLogicUpdate(event : UpdateEvent) { // Amount of time to spend vibrating var vibrationTime = 1; this.Controller.Vibrate(vibrationTime, // Time to vibrate for this.Controller.LeftTrigger, // Left-Side Vibration this.Controller.RightTrigger); // Right-Side Vibration } This will cause the controller to vibrate whenever either the left or right triggers are depressed on the Gamepad. The second and third parameters for Vibrate() are Reals that define the intensity of the vibration. In the example abovea, as the triggers are pressed in further, the value they return slowly rises from 0 (not pressed) to 1 (fully depressed). As the value rises, the vibration will become stronger as the value moves towards 1 , with each trigger controlling the vibration on their respective sides. Most Gamepads that have vibration functionality will create it by utilizing two motors housed in the casing, oftentimes with one side slightly heavier than the other (typically the left side). This allows for numerous different combinations of tactile feedback to be created, such as if the player is hit: function OnCollisionStarted(event : CollisionEvent) { this.Controller.Vibrate(0.25, // Time to vibrate for 1, // Left-Side Vibration 0.5); // Right-Side Vibration } which will cause the controller to vibrate for a quarter of a second, with the left side vibrating at full power and the right side vibrating at half. ## Using Multiple Gamepads When using multiple Gamepads, Plasma will need to keep a reference of which object is associated with which Gamepad. This is easily done with the addition of a Property. // Which Gamepad is meant to control this object [Property] var PlayerIndex : Integer = 0; var Controller : Gamepad = null; function Initialize(init : CogInitializer) { this.Controller = Plasma.Gamepads.GetGamePad(this.PlayerIndex); } Simply change the PlayerIndex of an object to assign it to Gamepad One, Gamepad Two, etc. Keep in mind, however, that the GamePad index starts at 0 , so the index for GamePad One would be 0 , GamePad Two would be 1 , Three 2 , and so on. # Properties of Gamepad and Object Events All of the events associated with the Gamepad are GamepadEvents, with the exception of GamepadUpdated, which is an ObjectEvent. As all the others are the same type of event, they all share the same properties that can be accessed when the event is dispatched. ObjectEvents themselves can access the Gamepad that dispatched the event by using ObjectEvent , which GamepadEvents likewise has access to with GamepadEvent.Gamepad . IMPORTANT: As of the time of the creation of this page, ObjectEvent.Source returns a null pointer rather than the Gamepad that dispatched the event. Both of these can be used to trigger the same functions, the main difference being GamepadEvent.Gamepad would need to be triggered by the specific Gamepad, while ObjectEvent.Source could be used for a general script that runs the logic for multiple Gamepads during a GameSession. GamepadEvents can also reference the button used to dispatch the event with GamepadEvent.Button , which returns an int referring to the triggering button. The last two references all GamepadEvents have can only be used by the GamepadStickFlicked event: FlickDirection , which returns a Real2 of the direction the thumbstick moved in; and FlickedStick , which returns a reference to the thumbstick that dispatched the event. These can be used together to create movement mechanics very easily. function OnGamepadStickFlicked(event : GamepadEvent) { var movement = local Real3(0.0, 0.0, 0.0); // Assign the X and Y values of the moved thumbstick to the local movement variable movement.X += event.FlickDirection.X; movement.Y += event.FlickDirection.Y; //This uses the right thumbstick, while the left is 1 if(event.FlickedStick == 2) { // \"Teleport\" to a further away location // note no Dt, so it'll be approx 60x further than normal this.Owner.RigidBody.Velocity = movement * this.Speed; } } ## Gamepad Events * GamepadUpdated : ObjectEvent * An event dispatched to an object whenever the Gamepad updates. Runs every frame. ButtonDown : GamepadEvent An event dispatched when any button is pressed on the connected Gamepad. ButtonUp : GamepadEvent An event dispatched when any button is released on the connected Gamepad. GamepadStickFlicked : GamepadEvent An event dispatched when either thumbstick on the connected Gamepad is pushed forward more than halfway to its max.","title":"Gamepadinput"},{"location":"manual/plasmamanual/gameplay/input/keyboardinput/","text":"The keyboard is a common channel of providing user input to a Plasma project. Keyboard controls are quick and easy to set up, but there are a few details that are important to bear in mind. # Polling-Based Input vs. Event-Based Input There are two ways of checking keyboard input in the Plasma Engine: by polling the state of the keyboard (typically in an Update function), known as polling-based input, and by connecting to keyboard events, known as event-based input. Each has its advantages. ## Polling-Based Input Polling-based input typically occurs in a callback for an Update event such as LogicUpdate : ```lang=csharp, name=Update Connection Example function Initialize(init : CogInitializer) { Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } The keyboard may be polled using a handful of functions on `Plasma.Keyboard`. ### KeyIsDown The [ KeyIsDown](https://github.com/dragonCASTjosh/PlasmaDocs/blob/master/code_reference/class_reference/keyboard.markdown#keyisdown-plasma-engine-do) function returns whether the given keyboard key is down on the current frame. It is often used for movement and other actions that are performed over the course of many consecutive frames: ```lang=csharp, name=KeyIsDown Example if (Plasma.Keyboard.KeyIsDown(Keys.Up)) { this.MoveForward(); } ### KeyIsUp The KeyIsUp function returns whether the given keyboard key is not down on the current frame. It is sometimes used in combination with KeyIsDown in movement code: ```lang=csharp, name=KeyIsUp Example if (Plasma.Keyboard.KeyIsDown(Keys.Right) && Plasma.Keyboard.KeyIsUp(Keys.Left)) { this.TurnCounterClockwise(); } if (Plasma.Keyboard.KeyIsDown(Keys.Left) && Plasma.Keyboard.KeyIsUp(Keys.Right)) { this.TurnClockwise(); } ### KeyIsPressed The [ KeyIsPressed](https://github.com/dragonCASTjosh/PlasmaDocs/blob/master/code_reference/class_reference/keyboard.markdown#keyispressed-plasma-engine) function returns whether the given keyboard key is down on the current frame *and* was up on the previous frame. It is often used for discrete actions, like activating character abilities and interacting with menus: ```lang=csharp, name=KeyIsPressed Example if (Plasma.Keyboard.KeyIsPressed(Keys.Space)) { this.Jump(); } ### KeyIsReleased The KeyIsReleased function returns whether the given keyboard key is up on the current frame, but was down on the previous frame. It is often used to end actions or processes that were started by the same key in a KeyIsPressed check: ```lang=csharp, name=KeyIsReleased Example if (Plasma.Keyboard.KeyIsReleased(Keys.Space)) { this.EndJump(); } Such queries are usually performed in a function that is called every frame, once per frame, such as an Update function; polling for input in this way is also called **frame-based input**. However, the keyboard can be polled at any time. For instance, one might check whether a certain key is held in a [ CollisionStarted](https://github.com/dragonCASTjosh/PlasmaDocs/blob/master/code_reference/event_reference.markdown#collisionstarted) callback, to determine whether some special action should occur: ```lang=csharp, name=Collision Polling Example function OnCollisionStarted(event : CollisionEvent) { if (Plasma.Keyboard.KeyIsDown(Keys.Z)) this.AttemptDealDamage(event.OtherObject); } NOTE: Beware that the LogicUpdate event is not dispatched on a paused TimeSpace. If input polling is performed in a LogicUpdate callback, it won't happen while the game is paused. This may result in a scenario where LogicUpdate is used to pause the game, and then it becomes impossible to unpause. For this reason, it is usually best to pause the game using event-based input, or by polling the keyboard via another event, such as FrameUpdate , or in the LogicUpdate of another Space. ## Event-Based Input The keyboard dispatches a set of handy events that can be used for keyboard input: ```lang=csharp, name=Keyboard Connection Example function Initialize(init : CogInitializer) { Plasma.Connect(Plasma.Keyboard, Events.KeyDown, this.OnKeyDown); Plasma.Connect(Plasma.Keyboard, Events.KeyUp, this.OnKeyUp); Plasma.Connect(Plasma.Keyboard, Events.KeyRepeated, this.OnKeyRepeated); } The [ KeyboardEvent](https://github.com/dragonCASTjosh/PlasmaDocs/blob/master/code_reference/class_reference/keyboardevent.markdown) object that gets sent with these events specifies which key triggered the event, along with other relevant information, such as whether any of various modifier keys was held when the event was dispatched, etc. ### KeyDown When any key on the keyboard is pressed, the [ KeyDown](https://github.com/dragonCASTjosh/PlasmaDocs/blob/master/code_reference/event_reference.markdown#keydown) event is dispatched that frame: ```lang=csharp, name=KeyDown Example function OnKeyDown(event : KeyboardEvent) { if (event.Key == Keys.R && event.CtrlPressed) this.RestartLevel(); } ### KeyUp When any key on the keyboard is released, the KeyUp event is dispatched that frame: ```lang=csharp, name=KeyUpExample function OnKeyUp(event : KeyboardEvent) { if (event.Key == Keys.Shift) this.EndChargingWeapon(); } ### KeyRepeated When any key on the keyboard is held long enough for the operating system to send its \"repeated\" event, the [ KeyRepeated](https://github.com/dragonCASTjosh/PlasmaDocs/blob/master/code_reference/event_reference.markdown#keyrepeated) event begins being dispatched. The delays before this begins and between dispatches are determined by the operating system: ```lang=csharp, name=KeyRepeated Example function OnKeyRepeated(event : KeyboardEvent) { if (event.Key == Keys.Back) this.Backspace(); } # Timing Every frame, all keyboard events are dispatched at the beginning of the frame before any update events are dispatched. If it is desired that any code that is called from an Update function be run before the effects of some keypress are considered, then either polling-based input should be used instead of event-based input, or the keypress should be cached, and the cached data should be used later. # What to Use First and foremost, in many cases, there will be no noticeable performance difference between using polling-based input and using event-based input. For example, when creating a simple prototype or adding a quick debugging feature, it is often best to use whichever method is easiest for the developer implementing it. However, when performance does become an issue, or when scalability is a concern, knowing which input method to use is important. To decide whether to use polling-based or event-based input, begin by answering these guideline questions: Is this component already connected to an update event? - Yes : polling may be better - No : consider events Some of the performance impact in frame-based input comes from the act of polling, but some of it comes from the mere fact of being connected to an update event. If a component's update event connection overhead is already considered acceptable, then the added overhead of input polling may not be a problem. How many instances of this component are likely to be alive at once? - A lot : events may be better - Not many : consider polling Performance can suffer noticeably if a large number of objects are simultaneously connected to update events, especially if they're running complex logic. If there will be more than about a few hundred instances of a component all running at once, it may be wise to consider using event-based input instead of frame-based input. Of course, this number will vary greatly with factors such as the complexity of the logic being run and the capabilities of the user's computer. How much time is likely to elapse between relevant inputs? - A long time : events may be better - Not long : consider polling Update events are generally dispatched every frame. Keyboard events, on the other hand, are only dispatched when the keyboard is used. For this reason, event-based input has the potential to be more efficient than frame-based input, especially when checking for an input that is expected to occur only rarely or sporadically. How hard will it be to do this logic using events? - Very hard : polling may be better - Not very hard : consider events Some input tasks don't lend themselves to being done with event-based input. For example, it can be awkward to make keyboard events, which are dispatched only on keyboard state changes, work with character movement code, which generally should apply its changes every frame. # Related Materials ## Manual - Events & Connections - Components ## Code Reference - Keyboard - KeyboardEvent","title":"Keyboardinput"},{"location":"manual/plasmamanual/gameplay/input/mouseinput/","text":"Along with the keyboard and gamepads, the mouse is a common channel of providing user input to a Plasma project. Mouse controls are easy to set up, but there are a few different input styles to consider. # Using the Mouse The mouse can either be used as a cursor controller, for tracking a specific position and pointing at and clicking on objects and buttons, etc., or it can be used as a direct input device, just like a keyboard or a gamepad. ## Cursor Control Cursor control , also known as point-and-click control, is usually what is used for mouse-driven GUIs. It is mostly focused on the use of the mouse to manipulate the position of a cursor in a 2D plane. Cursor control typically makes heavy use of the Reactive component to receive mouse events sent directly to interactive objects, such as buttons. ## Direct Mouse Control Direct mouse control is commonly used for first-person camera controls, and anything else that is concerned with the frame-to-frame movement deltas of the mouse, and the state changes of its buttons and scroll wheel, rather than with the position of a cursor. When using direct mouse control, mouse event connections should be made on the Space or the camera viewport (rather than on individual interactive objects, as with cursor control). # Event-Based Input vs. Polling-Based Input Whether the mouse is used for cursor control or direct control, in any case, there are two ways of using mouse input in the Plasma Engine: by connecting to mouse events, known as event-based input, by polling the state of the mouse (typically in an Update function), known as polling-based input. Each has its advantages. ## Events Mouse events are dispatched as the mouse is used, and the position of the mouse cursor determines the targets of these events. When the cursor is positioned over an cog with the Reactive component, that cog receives mouse events. In addition, mouse events are also sent to viewports. When a mouse event occurs in a viewport, it is dispatched to the cog with the Camera component and the cog with the CameraViewport component that represent that viewport. (Events are not dispatched doubly if both components are on the same cog, as is commonly the case.) NOTE: A mouse event target is anything that can receive a mouse event. Mouse event targets are spaces, cogs with the Camera component, cogs with the CameraViewport component, and cogs with the Reactive component. Here is an example of the use of mouse events, showing two different event connections, one to the space and one to the Reactive object itself: ```lang=csharp, name=\"Mouse Event Demonstration\" class MouseEventDemonstration : LightningComponent { [Dependency] var Transform : Transform; [Dependency] var Reactive : Reactive; function Initialize(init : CogInitializer) { Plasma.Connect(this.Space, Events.LeftMouseDown, this.OnLeftMouseDown); Plasma.Connect(this.Owner, Events.RightMouseDown, this.OnRightMouseDown); } function OnLeftMouseDown(event : ViewportMouseEvent) { // when the left mouse button is pressed anywhere, // make a cube at the mouse's world position var mousePosition = event.ToWorldZPlane(0); var cube = this.Space.CreateAtPosition(Archetype.Cube, mousePosition); // delay five seconds and then destroy the cube var destroySeq = Action.Sequence(cube.Actions); Action.Delay(destroySeq, 5); Action.Call(destroySeq, cube.Destroy); } function OnRightMouseDown(event : ViewportMouseEvent) { // when the right mouse button is pressed on this object, // make it a little bigger this.Transform.Scale = this.Transform.Scale * 1.1; } } This component's dependency on **Reactive** requires that the object it is attached to has that component as well. Thus, whenever the left mouse button is pressed with the cursor over an object with this component, the `OnLeftMouseDown` function will be called. Additionally, whenever the right mouse button is pressed *anywhere* in the viewport showing this component's space, the `OnRightMouseButton` function will be called. ### List of Mouse Events There are a number of mouse events that are dispatched to mouse event targets: ```lang=csharp, name=\"Mouse Event Connections\" function Initialize(init : CogInitializer) { Plasma.Connect(this.Owner, Events.MouseUpdate, this.OnMouseUpdate); Plasma.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter); Plasma.Connect(this.Owner, Events.MouseExit, this.OnMouseExit); Plasma.Connect(this.Owner, Events.MouseEnterPreview, this.OnMouseEnterPreview); Plasma.Connect(this.Owner, Events.MouseMove, this.OnMouseMove); Plasma.Connect(this.Owner, Events.MouseScroll, this.OnMouseScroll); Plasma.Connect(this.Owner, Events.MouseDown, this.OnMouseDown); Plasma.Connect(this.Owner, Events.MouseUp, this.OnMouseUp); Plasma.Connect(this.Owner, Events.LeftMouseDown, this.OnLeftMouseDown); Plasma.Connect(this.Owner, Events.LeftMouseUp, this.OnLeftMouseUp); Plasma.Connect(this.Owner, Events.RightMouseDown, this.OnRightMouseDown); Plasma.Connect(this.Owner, Events.RightMouseUp, this.OnRightMouseUp); Plasma.Connect(this.Owner, Events.MiddleMouseDown, this.OnMiddleMouseDown); Plasma.Connect(this.Owner, Events.MiddleMouseUp, this.OnMiddleMouseUp); Plasma.Connect(this.Owner, Events.LeftClick, this.OnLeftClick); Plasma.Connect(this.Owner, Events.RightClick, this.OnRightClick); Plasma.Connect(this.Owner, Events.MiddleClick, this.OnMiddleClick); Plasma.Connect(this.Owner, Events.DoubleClick, this.OnDoubleClick); } Each of these events is a ViewportMouseEvent . This event contains various relevant mouse data, such as the position of the cursor and the states of its buttons. #### MouseUpdate Every frame that the mouse is over a mouse event target, the MouseUpdate event is dispatched to that target: ```lang=csharp, name=\"MouseUpdate Example\" function OnMouseUpdate(event : ViewportMouseEvent) { // move this object to the mouse position this.Transform.Translation = event.ToWorldZPlane(0); } #### MouseEnter, MouseExit, and MouseEnterPreview When the mouse cursor \"enters\" a mouse event target (that is, when it goes from not being over the target to being over it from the perspective of the viewport showing it) the [ MouseEnter](https://github.dragonCASTjosh/PlasmaDocsocs/blob/master/code_reference/event_reference.markdown#mouseenter) event is dispatched to that target that frame. Likewise, when the cursor \"exits\" a target (it goes from over it to not over it) the [ MouseExit](https://gitdragonCASTjosh/PlasmaDocseroDocs/blob/master/code_reference/event_reference.markdown#mouseexit) event is dispatched to that target that frame. As the mouse cursor enters a mouse event target, if it is simultaneously exiting another one, the [ MouseEnterPreview](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#mouseenterpreview) event is dispatched that frame to the target being entered. This event is dispatched *immediately before* the **MouseExit** and subsequent **MouseEnter** events are dispatched, in the same frame. For example, this code snippet connects to two different cogs, `CogA` and `CogB` (declared elsewhere in the script), for these events: ```lang=csharp, name=\"MouseEnter, MouseExit, and MouseEnterPreview Examples\" function Initialize(init : CogInitializer) { Plasma.Connect(this.CogA, Events.MouseExit, this.OnMouseExit); Plasma.Connect(this.CogB, Events.MouseEnter, this.OnMouseEnter); Plasma.Connect(this.CogB, Events.MouseEnterPreview, this.OnMouseEnterPreview); } function OnMouseExit(event : ViewportMouseEvent) { Console.WriteLine(\"Exiting `this.CogA.Name`\"); } function OnMouseEnter(event : ViewportMouseEvent) { Console.WriteLine(\"Entering `this.CogB.Name`\"); } function OnMouseEnterPreview(event : ViewportMouseEvent) { Console.WriteLine(\"About to enter `this.CogB.Name`\"); } Here is the console output when the mouse moves from CogA to CogB : ```name=\"MouseEnter, MouseExit, and MouseEnterPreview Console Output\" About to enter CogB Exiting CogA Entering CogB MouseEnterPreview is useful when there is code that should be run before the MouseExit and MouseEnter callbacks are executed. #### MouseMove and MouseScroll Every frame that the mouse **moves** while the cursor is over a mouse event target, the [ MouseMove](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#mousemove) event is dispatched to that target. When the mouse is **scrolled** while the cursor is over a mouse event target, the [ MouseScroll](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#mousescroll) event is dispatched to that target: ```lang=csharp, name=\"MouseMove and MouseScroll Examples\" function OnMouseMove(event : ViewportMouseEvent) { // move the camera an amount equal to the // mouse's movement vector this.PanCamera(event.Movement); } function OnMouseScroll(event : ViewportMouseEvent) { // zoom the camera an amount equal to the // Y component of the scroll vector this.Zoom(event.Scroll.Y); } #### Down and Up Events When any mouse button is pressed while the cursor is over a mouse event target, the MouseDown event is dispatched to that target. Likewise, when any mouse button is released while the cursor is over a mouse event target, the MouseUp event is dispatched to that target. MouseDown and MouseUp are useful when writing controls that can be bound to any mouse button. To determine which mouse button was pressed or released, just check the Button field on the ViewportMouseEvent object that is sent with the event: ```lang=csharp, name=\"MouseDown and MouseUp Examples\" function OnMouseDown(event : ViewportMouseEvent) { if (event.Button == this.LaserButton) this.BeginChargingLaser(); else if (event.Button == this.ShieldButton) this.RaiseShields(); else if (event.Button == this.CameraPanningButton) Plasma.Connect(this.Space, Events.MouseMove, this.OnMouseMove); } function OnMouseUp(event : ViewportMouseEvent) { if (event.Button == this.LaserButton) this.FireLaser(); else if (event.Button == this.ShieldButton) this.LowerShields(); else if (event.Button == this.CameraPanningButton) Plasma.Disconnect(this.Space, Events.MouseMove, this); } Plasma also has specific events for [ LeftMouseDown](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#leftmousedown) and [ LeftMouseUp](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#leftmouseup), [ RightMouseDown](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#rightmousedown) and [ RightMouseUp](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#rightmouseup), and [ MiddleMouseDown](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#middlemousedown) and [ MiddleMouseUp](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#middlemouseup), which are dispatched only when the corresponding button is pressed or released: ```lang=csharp, name=\"Other Down and Up Examples\" function OnLeftMouseDown(event : ViewportMouseEvent) { this.BeginChargingLaser(); } function OnRightMouseUp(event : ViewportMouseEvent) { this.LowerShields(); } function OnMiddleMouseDown(event : ViewportMouseEvent) { Plasma.Connect(this.Space, Events.MouseMove, this); } #### Click Events When a mouse button is both pressed and released over the same object, that object is said to have been //clicked//. Click events are commonly used for UI elements, such as buttons. Plasma dispatches LeftClick , RightClick , and MiddleClick events: ```lang=csharp, name=\"Click Examples\" function OnLeftClick(event : ViewportMouseEvent) { // perform whatever effect this button does this.ExecuteButtonFunction(); } function OnRightClick(event : ViewportMouseEvent) { // open the context menu for this object this.OpenContextMenu(); } function OnMiddleClick(event : ViewportMouseEvent) { // close this window this.CloseWindow(); } #### DoubleClick When a mouse event target is double-clicked, the [ DoubleClick](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/event_reference.markdown#doubleclick) event is dispatched to that target: ```lang=csharp, name=\"DoubleClick Example\" function OnDoubleClick(event : ViewportMouseEvent) { if (event.Button == this.LaserButton) this.ReloadLaser(); else if (event.Button == this.ShieldButton) this.RebootShields(); } NOTE: The timing of the two clicks involved in a double click is defined by the user's operating system. ## Polling-Based Input Polling-based input typically occurs in a callback for an Update event such as LogicUpdate : ```lang=csharp, name=\"Update Connection Example\" function Initialize(init : CogInitializer) { Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // check for mouse input here } The mouse may be polled via the global [ Mouse](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/mouse.markdown) object, which can be found at `Plasma.Mouse`; of interest to mouse input are its `CursorMovement`, `RawMovement`, and `ClientPosition` properties and its `IsButtonDown` function. ### CursorMovement, RawMovement, and ClientPosition [ RawMovement](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/mouse.markdown#rawmovement-plasma-engine) represents the amount of movement detected this frame by the mousing device. [ ClientPosition](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/mouse.markdown#clientposition-plasma-engi) gives the screen-space cursor position in pixels, as computed by the OS. ClientPosition is relative to the upper left pixel of the Plasma client (application), which is (0, 0), with X and Y increasing to the right and down respectively. The [ CursorMovement](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/mouse.markdown#cursormovement-plasma-engi) property is computed by Plasma as the difference in the ClientPosition between the current frame and the previous frame. NOTE: CursorMovement and RawMovement often differ because the final position of the cursor depends on OS settings. The ClientPosition property is given in screen space, but it may be helpful to convert it to another coordinate basis, such as world space. The [ CameraViewport](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/cameraviewport.markdown) component has handy functions for performing such changes of basis: ```lang=csharp, name=\"ClientPosition to World Space Example\" function OnLogicUpdate(event : UpdateEvent) { // mouse position in screen space var clientPosition = Plasma.Mouse.ClientPosition; // mouse position in world space (at Z = 0) var mouseWorldPosition = this.CameraViewport.ScreenToWorldZPlane(clientPosition, 0); // move this object to the mouse's world position this.Transform.Translation = mouseWorldPosition; } ### IsButtonDown The IsButtonDown function returns whether the given mouse button is down on the current frame. It closely parallels the KeyIsDown function on the Keyboard object: lang=csharp, name=\"IsButtonDown Example\" function OnLogicUpdate(event : UpdateEvent) { // if the mouse look button is held, turn the camera with the mouse's movement if (Plasma.Mouse.IsButtonDown(this.MouseLookButton)) { this.RotateCamera(Plasma.Mouse.CursorMovement); } } # What to Use Whether direct control or cursor control is used, event-based input and polling-based input may have performance differences. As is the case with Keyboard Input , the difference will often be very small, so sometimes it is best to use whichever method is easiest for the developer, but knowing how to decide which input method to use is always important. To decide whether a component should use event-based mouse input or polling-based mouse input, begin by answering these guideline questions: Is the mouse being used for cursor control or direct mouse control? Cursor control : mouse events are probably better direct mouse control : either may work The nature of a cursor-driven interface is well-suited to being controlled by mouse events, and is often awkward and impractical to implement with polling. Is this component already connected to an update event? - Yes : polling may be better - No : consider events Some of the performance impact in frame-based input comes from the act of polling, but some of it comes from the mere fact of being connected to an update event. If a component's update event connection overhead is already considered acceptable, then the added overhead of input polling may not be a problem. How many instances of this component are likely to be alive at once? - A lot : events may be better - Not many : consider polling Performance can suffer noticeably if a large number of objects are simultaneously connected to update events, especially if they're running complex logic. If there will be more than about a few hundred instances of a component all running at once, it may be wise to consider using event-based input instead of frame-based input. Of course, this number will vary greatly with factors such as the complexity of the logic being run and the capabilities of the user's computer. How much time is likely to elapse between relevant inputs? - A long time : events may be better - Not long : consider polling Because mouse events are only dispatched when the mouse is used (other than MouseUpdate ), event-based input has the potential to be more efficient than frame-based input, especially when checking for an input that is expected to occur only rarely or sporadically. # Related Materials ## Manual - Keyboard Input ## Code Reference - Mouse - ViewportMouseEvent - Reactive - CameraViewport - Camera - Keyboard ## Development Task - {T404}","title":"Mouseinput"},{"location":"manual/plasmamanual/graphics/adding_assets/","text":"Assets such as textures and models comprise the majority of the graphical content in a game. 2D assets take the form of sprites and spritesheets (i.e. sprite animations) while 3D assets take the form of models, model animations, and textures (which are 2D art assets, but commonly applied to 3D objects through a {link university} Material ). The following pages discuss importing and the initial setup of these assets: # Adding 2D Assets Importing and setting the initial values for 2D assets such as sprites and spritesheets. # Adding 3D Assets Importing and setting the initial values for 3D assets such as meshes, model animations, and textures. ### Block Compression Choosing the right compression type for a Texture.","title":"Adding assets"},{"location":"manual/plasmamanual/graphics/camerasviewportsrenderers/","text":"A cameraviewport draws to an on-screen or off-screen texture. Whether it is visible to in the editor or game depends on whether RenderToViewport checkBox is set to true . It references both a camera component and a Renderer component from their respective cogs to render that scene from the perspective of the camera. As long as there are single instances of these components, it doesn't matter what cog they're on. If a game has a HUD, two renderers may be necessary and therefore two seperate renderer cogs. If a game supports splitscreen, both the CameraViewport and Camera should be duplicated onto another cog. A single CameraViewport can be used to reference multiple Camera objects at different times. A Camera, however, cannot generally be referenced by multiple CameraViewports. For example, if a script sets a CameraViewport's Camera reference to a Camera that is already being referenced by a CameraViewport, the one in the script will \"steal\" the reference, removing it from the CameraViewport that originally had it. By default the Camera and CameraViewport components are on the object called \"GameCamera\" where the DeferredRenderer is found on the Renderer object. This is useful for game scripting as a reference to the camera can be obtained through CameraViewport.Camera in order to change it. # CameraViewport CameraViewport Component (NOTE) Where does the CameraViewport render to? The camera can draw onto both the editor window and the game session window. By default, the EditorCamera has RenderInEditor checkBox set to true and RenderInGame checkBox set to false . As long as RenderToViewport checkBox is also set to true , it will render in the editor window and not the game session window. ## Viewport Placement The position and scale of each viewport is controlled with NormalizedSize , NormalizedOffset , ResolutionOrAspect , and ViewportScaling . When placing viewports, the dimentions of the game session window are in the normalized range [0,1] on both the x and y axes. (0,0) is then the top left corner and (1,1) is the bottom right corner. Below is an example of a camera viewport taking up the whole screen: Default Single CameraViewport ### Viewport Scaling ViewportScaling drop-down menu sets the method of fitting the viewport to the region defined by the viewport placement. Below is a brief description of what each mode does. Viewport Fitting Method Description Fill The viewport fills the entire window size LetterBox Viewport aspect ratio is always preserved and gaps are filled in with margins. Exact The viewport is not scaled LargestMultiple The viewport is the largest multiple of the resolution that fits in the window ### Render Order Render order sets the value by which the CameraViewport should be rendered relative to other CameraViewports (such as the one on a directional_light ), where the viewport with the lowest value is rendered first and the one with the highest value is rendered last. #### Viewport Layering The viewports exist in 2D, so there's no Z-axis to sort our viewports on. Instead, viewports are layered in the order they're drawn. The draw order is determined first by the integer value RenderOrder , where a high value is drawn later. If two viewports are on the same layer, the viewport with the cog earlier in the Objects window window draws first. When a mouse event is sent to the window, it's forwarded to the topmost viewport containing the cursor. If ForwardViewportEvents checkBox is on, the cursor will then be sent to viewports on underlying layers. For example, a first person shooter might have a hud map on a separate viewport, but the mouse tracking should work even when the mouse is over the hud. Mouse events should be sent through the hud viewport, and therefore its CameraViewport should have ForwardViewportEvents checkBox on. ## Camera The cog considered to be the Camera is whatever the CameraViewport references with CameraPath cogPath. The Camera cog should also have a Camera component, or else the viewport wont be rendered. Camera Component ### Perspective vs. Orthographic Changing the shape of the view frustum has a significant impact on how objects are viewed in the world. Usually in a 2D setting, PerspectiveMode is set to Orthographic while with 3D applications PerspectiveMode drop-down menu is set to Perspective . Objects in a Perspective view and the distances between them will appear smaller as they move away from the camera. 2D games often work with the assumption that everything is approximately the same distance from the camera, and so objects that move away from an Orthographic camera will appear the same. Perspective camera(left) vs. Orthographic camera(right) (NOTE) Parallaxing Even if the camera has an orthographic perspective, the illusion of depth is still possible. Instead of just one universal depth, the new assumption is that there are a set number of layers for an object, often refered to as foregrounds and backgrounds. For an example, try the Parallaxing Background tutorial. NOTE: The method of controlling the viewport size changes with different viewing frustums. When PerspectiveMode drop-down menu is set to Perspective , the FieldOfView parameter represents the vertical angle that the frustum makes from the camera eye outward. When PerspectiveMode drop-down menu is set to Orthographic , the Size parameter represents the height that the camera sees in world space. ## Related Materials ### Manual - Renderer ### Reference - cameraviewport - camera","title":"Camerasviewportsrenderers"},{"location":"manual/plasmamanual/graphics/graphical/","text":"All graphical components\ufffd2D and 3D alike\ufffdinherit from the Graphical base class. As a result there are a number of properties that all graphical components have in common. # ViewCulling By default, this property is set to true and the model will be culled if its bounding box goes outside of the view frustum (e.g. off-screen in the case of the game camera). Note that this only applies to the graphical component, so as to not alter any expected behavior. As a general rule, this property should be set to true unless there is a good reason not to (e.g. a particle system whose particles should still be visible even if they move outside of their bounding volume as a result of forces). If all Graphicals are drawn whether or not they are within the view frustum of the game camera, it will result in the performance taking a huge hit. # VisibilityEvents When set to true the object that owns this graphical component will receive events upon entering or exiting the view frustum of an active camera (such as the game camera). To put it another way, if set to false , when the object that owns this graphical component enters an active view frustum, it will not connect to view GraphicalEvents such as EnterView and ExitView . # OverrideBoundingBox All graphical objects generate an axis-aligned bounding box (i.e. aabb) according to that's object scale. If this auto-generated bounding box is not sufficient for whatever reason, it may be redefined manually by the user by setting OverrideBoundingBox checkBox to true . When set to true , two more properties will become visible that will define the new bounding box: LocalAabbCenter and LocalAabbHalfExtents . Initially, the values of these two properties will be such that they do not change the bounding box from it's originally generated size. LocalAabbCenter is set to [0, 0, 0] by default and any change in the value will offset the bounding box. For example, if the the value was changed to [2, 5, 0] , the bounding box would be offset 2 units in the positive x-axis and 5 units in the positive y-axis. LocalAabbHalfExtents sets the x-, y-, and z-half extents, in local space, that define the size of the box. By default, it is set to [1, 1, 1] , which effectively doubles the size of the generated bounding box. The resulting bounding box is a direct result of the scale of the object multiplied with the half-extents. For an object scaled to [3, 3, 3] and LocalAabbHalfExtents set to the [2, 2, 2] , the resulting bounding box will have a volume defined by the scale [12, 12, 12] , as each half-extent will be 6 . # GroupSortValue This property should only be used if using a RenderGroup that uses GraphicalSortValue as its GraphicalSortMethod enum. While GroupSortValue could be set on an object by object basis, if there is even a moderate amount of graphicals in a project, setting this value for all graphicals through a script\ufffdwhere graphicals can be filtered into discrete groups\ufffdis recommended. # Material Every graphical uses a Material, whether it is user-defined or built-in. Information on Materials can be found in the materials_overview . # RelatedMaterials ## Manual - RenderGroup - materials_overview ## Code Reference - graphical - graphicalevent","title":"Graphical"},{"location":"manual/plasmamanual/graphics/lighting/","text":"# Direct Lighting Direct lighting involves the creation and placement of light objects, such as a directional light or point light. # Indirect Lighting Indirect, or image-based, lighting comes primarily through the use of a skybox.","title":"[Direct Lighting](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/graphics/lighting/direct_lighting.markdown)"},{"location":"manual/plasmamanual/graphics/materials/","text":"Materials define the various texture mappings and shaders that will be applied to a model that has the material. # Materials Overview Material blocks represent various rendering models and shaders of a material. The deferred renderer in Plasma should be fed with PBR-based materials composed of specific components. - albedo.markdown - metallic.markdown - normal_map.markdown - roughness.markdown # Textures Textures are the external data that materials apply to a model. # Shaders Shaders are generally short linear math programs that modify texture data before they are rendered. # Physically Based Rendering Physically-based rendering (PBR) is a rendering technique that aims to represent how the surface of objects appear in real life.","title":"Materials"},{"location":"manual/plasmamanual/graphics/models/","text":"Models are how we represent 3D objects in a game visually. Models are rendered using meshes, materials, textures, shaders, and other graphical features. # Models and Skinned Models This page covers applying the Model and SkinnedModel components to objects as well as the Properties of those components. # Mesh","title":"Models"},{"location":"manual/plasmamanual/graphics/particles/","text":"Modelling a cloud of dust with individual game objects is prohibitively expensive. We use particle systems to simulate physics for effects such as dust, explosions, and fire. # Sprite Particle System This is the core of sprite based particle systems. # Emitters Emit Particles based on either standard or custom meshes. # Linear Particle Animator Apply forces to particles. # Particle Color Animator Color particles based on time and velocity","title":"Particles"},{"location":"manual/plasmamanual/graphics/physically_based_rendering/","text":"Physically-based rendering (PBR) is a relatively recent rendering technique and workflow that aims to better represent how the surface of objects appear as they do in real life. This is primarily achieved by taking a more nuanced approach to how light interacts with different types of surfaces, metals and non-metals in particular. If you are unfamiliar with PBR, check out one of the following links regarding basic theory, asset creation, or the actual physics and math behind the calculations. # PBR Introductions and Overviews ## Introduction for the Artist or Designer Basic Theory of Physically Based Rendering by Jeff Russell The Comprehensive PBR Guide - Volume I by allegorithmic The Theory of Physically Based Rendering ## Asset Creation Guides The Comprehensive PBR Guide - Volume II by allegorithmic Practical Guidelines for PBR Texturing Physically-Based Rendering and You Can Too by Joe \"Earthquake\" Wilson PBR Texture Conversion by Joe \"Earthquake\" Wilson ## Math and Physics for the Developer Real Shading in Unreal Engine 4 by Brian Karis Physics and Math of Shading by Naty Hoffman Physically Based Shading at Disney by Brent Burley # Implementation in Plasma The DeferredRenderer and ForwardRenderer follow a metallic-roughness workflow (as opposed to metallic-glossiness) and expects inputs for albedo (referred to as \"base color\" in other workflows), metallic, roughness, and specular in the form of texture maps or uniform values. These maps or values are set via LightningFragments and applied to a Material . # Related Materials ## Manual DeferredRenderer and ForwardRenderer Material","title":"Physically based rendering"},{"location":"manual/plasmamanual/graphics/adding_assets/adding_3d_assets/","text":"Importing 3D Assets & Textures 3D assets, such as models, model animations, and images to be used on a Material , are added as Resources in the form of meshes , animations , and textures . The preferred file format for 3D assets is .fbx for models and animations (though Plasma does accept a number of other formats such as .obj , .3ds , .blend , etc...) and .png for textures. See resourceadding for how to import data files into Plasma. # Models and Model Animations After the file has been imported, a new window will open GroupImportOptions window that will provide a number of options for how the data should converted into a Resource. ## Group Import Options This window allows the user to specify a number of properties such as whether to import meshes, animations, and textures, whether to convert the scale of the imported asset, and more. All available options are described below. NOTE: All options except for ImportMeshes checkBox, ImportAnimations checkBox, and ImportTextures checkBox may be modified in the Properties window window by selecting the Resource from the Library after the asset has been imported. ### GenerateSmoothNormals and SmoothingAngleDegreesThreshold GenerateSmoothNormals checkBox is a boolean property set to false by default. When set to true , it exposes SmoothingDegreesAngleThreshold . Together, they smooth the normals between the vertices of a mesh where the angle between the vertices falls below the value set in SmoothingDegreesAngleTheshold . On an object shaded with uniform colors, smoothing the normals will have the effect of making the mesh appear seamless. Normally, whether an object should appear seamless or have each polygon be discretely visible is up to the artist working on a project. If using outsourced or pre-made art assets, however, one might wish to smooth the normals on an object with visible seams between each polygon. ### InvertUvYaxis This boolean property should be set to true if the mesh being imported was authored and exported in a program where the default export options do not match Plasma's convention. When imported, the y-coordinate for each vertex will be inverted. Plasma's uv coordinate convention is for (0,0) to be at top-left and (1,1) at bottom right. Note this will only change the mesh being imported, not any textures that being imported along with it. Asset creation programs may export with a different convention where (0,0) is at bottom-left, causing the y-axis (or v-axis) to be inverted if imported to Plasma. If this happens, any Material applied to the object created from textures made for this mesh will not appear as expected. If working with an artist on a project, it is best to have them set the export options to match Plasma's convention. If using outsourced or pre-made art assets, however, one may need to invert the uv y-axis when importing scene assets. ### GenerateTangentSpace This boolean property is set to true by default and should remain that way unless an artist has specifically authored the tangent space in a specific way that is different from Plasma's conventions. In Plasma, the vertex tangent will always be in the increasing x (or u) direction, while the bi-tangent will always be in the increasing y (or v) direction. ### FlipWindingOrder This boolean property, when set to true , will flip the winding order of the vertices of a mesh. The winding order, described as either clockwise or counter-clockwise, is what determines whether a triangle within in the mesh is front-facing or back-facing (for more information on how winding order affects face culling, check out this page . If they are ordered clockwise when imported, setting FlipWindingOrder checkBox to true will change them to counterclockwise; if ordered counterclockwise when imported, they will be changed to clockwise. ### OriginOffset Setting this property will offset the mesh from it's origin by the value specified. As an example, imagine a model of a dragon is imported and OriginOffset is set to [10, 0, 0] . Now, an instance of the archetype generated when the model was imported is created within the level and it's Translation is set to [0, 0, 0]. Normally, the dragon would appear at [0, 0, 0] , but since its origin has been offset, it now appears at [10, 0, 0] even though the object's Translation remains at [0, 0, 0] . ### ScaleConversion and ScaleFactor ScaleConversion changes the mesh's scaling convention from one unit of measurement to another. For example, if a modeling program exported using centimeters as the unit of measurement, but the rest of the game has been using meters, choosing CentimetersToMeters would scale the mesh to match the units of measurement used throughout the game. The factor by which each option scales an incoming mesh are listed here: ScaleConversion Factor CentimetersToInches 0.39 CentimetersToMeters 0.01 InchesToCentimeters 2.54 InchesToMeters 0.0264 MetersToCentimeters 100.0 MetersToInches 39.3701 Custom allows the user to define the factor by which the mesh is scaled by using the value set in ScaleFactor . If a project is using a custom unit of measurement, all imported meshes could be scaled to this custom unit by using ScaleFactor in conjunction with setting ScaleConversion drop-down menu to Custom . ### ChangeBasis This boolean property, when set to true , exposes three more properties, allowing the user to change the X-, Y-, and Z-bases of the mesh. Any of the three bases may be changed to the positive or negative x-, y-, or z-axis. One example where this setting would be changed is if a project is created where the orientation (i.e. right, forward, and up directions) is different from the mesh being imported. # Textures When a file is imported as a texture, there are no options available to it directly after import as there are with models and model animations. There are, however, a number of options available through the texture Resource's ContentComponents, which are listed in the Properties window window and accessed by clicking on the texture Resource in the Library window window. ## Default Texture Settings Based on certain features of the file being imported, the default settings for a texture found in the ContentComponents will be changed. The following table lists the file feature, feature value, setting affected, and the value applied for each possible default setting: File Feature Value Affected Setting Setting Value File Extension .hdr Compression None Name Substring \"albedo\" Compression BC1 Name Substring \"normal\" Compression BC5 Name Substring \"metallic\"/\"metalness\" and \"roughness\" Compression BC5 Name Substring \"metallic\"/\"metalness\" Compression BC4 Name Substring \"roughness\" Compression BC4 Name Substring \"albedo\" GammaCorrection true ## ContentComponents Every texture has two ContentComponents: TextureBuilder and TextureInfo . TextureInfo provides basic information about the texture. These values will stay the same with the exception of Size , which will change if certain properties are modified in the TextureBuilder component, such as Compression or MipMapping. TextureBuilder, on the other hand, is comprised of a number of modifiable properties that address a few different questions: how should the texture be interpreted, compressed, addressed, sampled & filtered, and corrected. ### Interpretation Type sets whether a texture should be interpreted as a Texture2D or as a TextureCube . TextureCube is the TextureType that should be chosen when the image should be used as a skybox in the renderer . For any possible use, Texture2D should be chosen. ### Compression Compression sets the lossy, hardware-supported format to convert the texture to, if any. For a more detailed explanation, see compression.markdown . ### Addressing AddressingX and AddressingY set how to address the texture whose uv fall outside of the range [0, 1]. The choices available are described in the table below: Enum Value Description Clamp Uses the last pixel found at the border of the range Repeat Wraps to the other side and continues to sample the image Mirror The texture is mirrored at the range boundaries Compression , Anisotropy , and so on. Once imported, check these settings to make sure they have been set correctly. ### Sampling and Filtering Texture sampling is the process by which data is accessed from a texture. Given the near-infinite amount of positions, angles, and distance a texture may be viewed when placed on mesh within a level, as well as the computational limits of a real-time simulation, a number of different algorithms for how this data is accessed have been developed. These algorithms are the different methods of texture filtering. Filtering describes how pixels from the texture are sampled when viewing the texture from different sizes. Filtering enum sets the algorithm by which to sample the texture. The choices available are: - Nearest - Gets the closest pixel - Bilinear - Get the four closest pixels and linearly blends between them - Trilinear - The same as Bilinear, but with an additional linear blend between mip levels. anisotropy enum describes how pixels are sampled when the ratio of pixels viewed along its uv directions is not 1 : 1 (typically at an oblique angle). The settings available represent how large of a ratio will be accounted for when sampling the texture. For example, x1 corresponds to a 1 : 1 ratio, which means this is no anisotropy. x16 , which is also the highest quality available, corresponds to a 16 : 1 ratio. ### Correction GammaCorrection checkBox, when set to true , will correct the values of each individual texel of a texture to account from moving the texture from linear space to gamma space that is caused by almost all current monitors (HDR monitors are the exception). When a texture authored in linear space is displayed on a monitor, it loses a percentage of its intensity, causing it to appear more washed-out than than was originally intended by the artist who created it. Gamma correction will account for this loss in intensity and correct it back to the intended level. Generally speaking, textures should be gamma corrected unless they have been authored with gamma space in mind. For a more detailed explanation of gamma correction, go here . # Related Material ## Manual Models and Skinned Models ## Code Reference Mesh Model Skinned Model Simple Animation","title":"Importing 3D Assets & Textures"},{"location":"manual/plasmamanual/graphics/adding_assets/adding_3d_assets/#importing-3d-assets-textures","text":"3D assets, such as models, model animations, and images to be used on a Material , are added as Resources in the form of meshes , animations , and textures . The preferred file format for 3D assets is .fbx for models and animations (though Plasma does accept a number of other formats such as .obj , .3ds , .blend , etc...) and .png for textures. See resourceadding for how to import data files into Plasma. # Models and Model Animations After the file has been imported, a new window will open GroupImportOptions window that will provide a number of options for how the data should converted into a Resource. ## Group Import Options This window allows the user to specify a number of properties such as whether to import meshes, animations, and textures, whether to convert the scale of the imported asset, and more. All available options are described below. NOTE: All options except for ImportMeshes checkBox, ImportAnimations checkBox, and ImportTextures checkBox may be modified in the Properties window window by selecting the Resource from the Library after the asset has been imported. ### GenerateSmoothNormals and SmoothingAngleDegreesThreshold GenerateSmoothNormals checkBox is a boolean property set to false by default. When set to true , it exposes SmoothingDegreesAngleThreshold . Together, they smooth the normals between the vertices of a mesh where the angle between the vertices falls below the value set in SmoothingDegreesAngleTheshold . On an object shaded with uniform colors, smoothing the normals will have the effect of making the mesh appear seamless. Normally, whether an object should appear seamless or have each polygon be discretely visible is up to the artist working on a project. If using outsourced or pre-made art assets, however, one might wish to smooth the normals on an object with visible seams between each polygon. ### InvertUvYaxis This boolean property should be set to true if the mesh being imported was authored and exported in a program where the default export options do not match Plasma's convention. When imported, the y-coordinate for each vertex will be inverted. Plasma's uv coordinate convention is for (0,0) to be at top-left and (1,1) at bottom right. Note this will only change the mesh being imported, not any textures that being imported along with it. Asset creation programs may export with a different convention where (0,0) is at bottom-left, causing the y-axis (or v-axis) to be inverted if imported to Plasma. If this happens, any Material applied to the object created from textures made for this mesh will not appear as expected. If working with an artist on a project, it is best to have them set the export options to match Plasma's convention. If using outsourced or pre-made art assets, however, one may need to invert the uv y-axis when importing scene assets. ### GenerateTangentSpace This boolean property is set to true by default and should remain that way unless an artist has specifically authored the tangent space in a specific way that is different from Plasma's conventions. In Plasma, the vertex tangent will always be in the increasing x (or u) direction, while the bi-tangent will always be in the increasing y (or v) direction. ### FlipWindingOrder This boolean property, when set to true , will flip the winding order of the vertices of a mesh. The winding order, described as either clockwise or counter-clockwise, is what determines whether a triangle within in the mesh is front-facing or back-facing (for more information on how winding order affects face culling, check out this page . If they are ordered clockwise when imported, setting FlipWindingOrder checkBox to true will change them to counterclockwise; if ordered counterclockwise when imported, they will be changed to clockwise. ### OriginOffset Setting this property will offset the mesh from it's origin by the value specified. As an example, imagine a model of a dragon is imported and OriginOffset is set to [10, 0, 0] . Now, an instance of the archetype generated when the model was imported is created within the level and it's Translation is set to [0, 0, 0]. Normally, the dragon would appear at [0, 0, 0] , but since its origin has been offset, it now appears at [10, 0, 0] even though the object's Translation remains at [0, 0, 0] . ### ScaleConversion and ScaleFactor ScaleConversion changes the mesh's scaling convention from one unit of measurement to another. For example, if a modeling program exported using centimeters as the unit of measurement, but the rest of the game has been using meters, choosing CentimetersToMeters would scale the mesh to match the units of measurement used throughout the game. The factor by which each option scales an incoming mesh are listed here: ScaleConversion Factor CentimetersToInches 0.39 CentimetersToMeters 0.01 InchesToCentimeters 2.54 InchesToMeters 0.0264 MetersToCentimeters 100.0 MetersToInches 39.3701 Custom allows the user to define the factor by which the mesh is scaled by using the value set in ScaleFactor . If a project is using a custom unit of measurement, all imported meshes could be scaled to this custom unit by using ScaleFactor in conjunction with setting ScaleConversion drop-down menu to Custom . ### ChangeBasis This boolean property, when set to true , exposes three more properties, allowing the user to change the X-, Y-, and Z-bases of the mesh. Any of the three bases may be changed to the positive or negative x-, y-, or z-axis. One example where this setting would be changed is if a project is created where the orientation (i.e. right, forward, and up directions) is different from the mesh being imported. # Textures When a file is imported as a texture, there are no options available to it directly after import as there are with models and model animations. There are, however, a number of options available through the texture Resource's ContentComponents, which are listed in the Properties window window and accessed by clicking on the texture Resource in the Library window window. ## Default Texture Settings Based on certain features of the file being imported, the default settings for a texture found in the ContentComponents will be changed. The following table lists the file feature, feature value, setting affected, and the value applied for each possible default setting: File Feature Value Affected Setting Setting Value File Extension .hdr Compression None Name Substring \"albedo\" Compression BC1 Name Substring \"normal\" Compression BC5 Name Substring \"metallic\"/\"metalness\" and \"roughness\" Compression BC5 Name Substring \"metallic\"/\"metalness\" Compression BC4 Name Substring \"roughness\" Compression BC4 Name Substring \"albedo\" GammaCorrection true ## ContentComponents Every texture has two ContentComponents: TextureBuilder and TextureInfo . TextureInfo provides basic information about the texture. These values will stay the same with the exception of Size , which will change if certain properties are modified in the TextureBuilder component, such as Compression or MipMapping. TextureBuilder, on the other hand, is comprised of a number of modifiable properties that address a few different questions: how should the texture be interpreted, compressed, addressed, sampled & filtered, and corrected. ### Interpretation Type sets whether a texture should be interpreted as a Texture2D or as a TextureCube . TextureCube is the TextureType that should be chosen when the image should be used as a skybox in the renderer . For any possible use, Texture2D should be chosen. ### Compression Compression sets the lossy, hardware-supported format to convert the texture to, if any. For a more detailed explanation, see compression.markdown . ### Addressing AddressingX and AddressingY set how to address the texture whose uv fall outside of the range [0, 1]. The choices available are described in the table below: Enum Value Description Clamp Uses the last pixel found at the border of the range Repeat Wraps to the other side and continues to sample the image Mirror The texture is mirrored at the range boundaries Compression , Anisotropy , and so on. Once imported, check these settings to make sure they have been set correctly. ### Sampling and Filtering Texture sampling is the process by which data is accessed from a texture. Given the near-infinite amount of positions, angles, and distance a texture may be viewed when placed on mesh within a level, as well as the computational limits of a real-time simulation, a number of different algorithms for how this data is accessed have been developed. These algorithms are the different methods of texture filtering. Filtering describes how pixels from the texture are sampled when viewing the texture from different sizes. Filtering enum sets the algorithm by which to sample the texture. The choices available are: - Nearest - Gets the closest pixel - Bilinear - Get the four closest pixels and linearly blends between them - Trilinear - The same as Bilinear, but with an additional linear blend between mip levels. anisotropy enum describes how pixels are sampled when the ratio of pixels viewed along its uv directions is not 1 : 1 (typically at an oblique angle). The settings available represent how large of a ratio will be accounted for when sampling the texture. For example, x1 corresponds to a 1 : 1 ratio, which means this is no anisotropy. x16 , which is also the highest quality available, corresponds to a 16 : 1 ratio. ### Correction GammaCorrection checkBox, when set to true , will correct the values of each individual texel of a texture to account from moving the texture from linear space to gamma space that is caused by almost all current monitors (HDR monitors are the exception). When a texture authored in linear space is displayed on a monitor, it loses a percentage of its intensity, causing it to appear more washed-out than than was originally intended by the artist who created it. Gamma correction will account for this loss in intensity and correct it back to the intended level. Generally speaking, textures should be gamma corrected unless they have been authored with gamma space in mind. For a more detailed explanation of gamma correction, go here . # Related Material ## Manual Models and Skinned Models ## Code Reference Mesh Model Skinned Model Simple Animation","title":"Importing 3D Assets &amp; Textures"},{"location":"manual/plasmamanual/graphics/adding_assets/adding_textures_and_sprites/","text":"Importing Sprites SpriteSource is the Resource used to create Sprites , which represent all 2D graphical assets in Plasma. Sprites can take the form of a single 2D image or a SpriteSheet displaying all the Sprites needed for an animation in the same file. See resourceadding for how to import an image as a SpriteSource. NOTE: The only file format that may be imported to create a SpriteSource is .png . Other formats, such as .jpg , are lossy and can result in undesirable artifacts, especially when scaled. If the image only exists as a .jpg and it is absolutely necessary, there are a number of websites that offer free conversion from .jpg (and many other formats) to .png . # SpriteSource Setup To change the values applied to a SpriteSource when an image is imported, double-click the appropriate SpriteSource from the Library window window, which will open the Sprite Source Editor : There are many different properties that may be modified such as where to set the origin, the type of sampling, and the SpriteFill mode (to change from Fill to Nine Slice for example). If the SpriteSource is a sprite sheet created for Sprite animation , click on Convert to Animation to open the Sprite Importer window. # Related Material ## Manual BaseSprite Sprite Sprite Source Editor Block Compression ## Reference SpriteSource Sprite","title":"Importing Sprites"},{"location":"manual/plasmamanual/graphics/adding_assets/adding_textures_and_sprites/#importing-sprites","text":"SpriteSource is the Resource used to create Sprites , which represent all 2D graphical assets in Plasma. Sprites can take the form of a single 2D image or a SpriteSheet displaying all the Sprites needed for an animation in the same file. See resourceadding for how to import an image as a SpriteSource. NOTE: The only file format that may be imported to create a SpriteSource is .png . Other formats, such as .jpg , are lossy and can result in undesirable artifacts, especially when scaled. If the image only exists as a .jpg and it is absolutely necessary, there are a number of websites that offer free conversion from .jpg (and many other formats) to .png . # SpriteSource Setup To change the values applied to a SpriteSource when an image is imported, double-click the appropriate SpriteSource from the Library window window, which will open the Sprite Source Editor : There are many different properties that may be modified such as where to set the origin, the type of sampling, and the SpriteFill mode (to change from Fill to Nine Slice for example). If the SpriteSource is a sprite sheet created for Sprite animation , click on Convert to Animation to open the Sprite Importer window. # Related Material ## Manual BaseSprite Sprite Sprite Source Editor Block Compression ## Reference SpriteSource Sprite","title":"Importing Sprites"},{"location":"manual/plasmamanual/graphics/adding_assets/adding_3d_assets/compression/","text":"Compression Block Compression is a technique used on Textures in Plasma Engine to greatly reduce texture size. Compression takes advantage of common patterns found in an image to make assumptions, resulting in less explicit data storage. When these assumptions are false, artifacts will appear on the image. Whether or not the loss in quality is worth the size saved is up to the discretion of the user. By selecting the different block compression types in the Properties window window of a Texture , one can see the size difference and the resultant image. Simply select a block compression method from BC1 to BC6 (or NONE ) from the Compression drop-down menu dropdown and hit the Reload Content button. The table below can be used to choose the best compression technique for an image. For more information, visit this page on the Microsoft MSDN website. Compression Bytes Per Pixel Color Format Notes BC1 1/2 RGB no alpha BC2 1 RGBa low precision alpha BC3 1 RGBa has alpha BC4 1/2 R single channel BC5 1 RG two channels BC6 1 RGB floats for hdr images (NOTE) Compressions with the same BPP: When two or more compression types have the same bytes per pixel, one should choose the compression with the best fitting color format. For example, BC4 and BC1 have the same bpp. If the texture in question has RGB color, BC1 should be used since the color format is RGB. If the texture has only one color, such as a height map, then BC4 should be preferred. By choosing the best fitting compression type for the height map, precision is almost guaranteed to be better on that texture.","title":"Compression"},{"location":"manual/plasmamanual/graphics/adding_assets/adding_3d_assets/compression/#compression","text":"Block Compression is a technique used on Textures in Plasma Engine to greatly reduce texture size. Compression takes advantage of common patterns found in an image to make assumptions, resulting in less explicit data storage. When these assumptions are false, artifacts will appear on the image. Whether or not the loss in quality is worth the size saved is up to the discretion of the user. By selecting the different block compression types in the Properties window window of a Texture , one can see the size difference and the resultant image. Simply select a block compression method from BC1 to BC6 (or NONE ) from the Compression drop-down menu dropdown and hit the Reload Content button. The table below can be used to choose the best compression technique for an image. For more information, visit this page on the Microsoft MSDN website. Compression Bytes Per Pixel Color Format Notes BC1 1/2 RGB no alpha BC2 1 RGBa low precision alpha BC3 1 RGBa has alpha BC4 1/2 R single channel BC5 1 RG two channels BC6 1 RGB floats for hdr images (NOTE) Compressions with the same BPP: When two or more compression types have the same bytes per pixel, one should choose the compression with the best fitting color format. For example, BC4 and BC1 have the same bpp. If the texture in question has RGB color, BC1 should be used since the color format is RGB. If the texture has only one color, such as a height map, then BC4 should be preferred. By choosing the best fitting compression type for the height map, precision is almost guaranteed to be better on that texture.","title":"Compression"},{"location":"manual/plasmamanual/graphics/lighting/direct_lighting/","text":"Direct lighting comes from any lights that are created and setup by the user. This includes directional and point lights. While there may appear to be some surface-level similarities between the two, they make use of certain components and are implemented entirely differently. Please note that when using a forward renderer , the only direct lighting allowed is the DirectionalLight that is present by default in any new level. DirectionalLight cogPath on the ForwardRenderer component should be set to this DirectionalLight. If dynamic lighting is needed on a project that uses a forward renderer, it must implemented by the user. There is no single implementation for dynamic lighting with a forward renderer that may be applied as there with a deferred renderer , so any particular implementation must be based off the particular requirements of a project. # Directional Light A light that is applied over an entire scene, emitting light from a specific direction. # Point Light A light that has a defined shape, exists at particular point in space, and sends light out equally from all points on that shape.","title":"Direct lighting"},{"location":"manual/plasmamanual/graphics/lighting/indirect_lighting/","text":"Indirect lighting in Plasma takes the form of image-based lighting, where an image--primarily a skybox--provides environmental ambient lighting throughout a scene. Whether a skybox is artist-created or derived from HDR images, is often used to give a scene an ambient light associated with a certain time of day (e.g. dusk, noon, dawn) or certain types of weather (e.g. clear skies, threatening clouds). In the case of interior scenes, it may just provide a static ambient light so that no matter where in the scene a player is, objects maintain some level of visibility. When using a skybox, it may be either visible, providing a static background for a scene (e.g. clouds in a sky) or invisible, in which the skybox provides ambient light for an interior scene (e.g. a cave that needs to have a constant source of ambient light not provided by deferred or forward renderer . NOTE: If a skybox is used and is visible, MipMapping on the skybox TextureBuilder ContentComponent must be set to PreGenerated . When applying indirect lighting to scene, the math used is the same as is used when applying direct lighting . The only difference between the two is that much of the math is pre-calculated for indirect lighting.","title":"Indirect lighting"},{"location":"manual/plasmamanual/graphics/lighting/direct_lighting/directional_light/","text":"A directional light is a light that, as its name suggests, emits light from a specific direction. While the light has a direction, it has no single point from which it emits. Instead, it lights everything within a level from that particular direction. LightIntensity is an arbitrary scalar applied to the final lighting calculations that includes all lights. One very common use of a directional light is to simulate the sun (and/or moon). # Casting Shadows NOTE: As of now, DirectionalLight is the only type of light that can cast shadows. In the near future, PointLight and the soon-to-be-implemented SpotLight will also have the ability to cast shadows similarly to the way DirectionalLight does. Directional lights may be created either with or without the ability to cast shadows using either the CreateDirectionalLightShadows or CreateDirectionalLight commands, respectively. When created with the ability to cast shadows, the DirectionalLight object will have Camera , CameraViewport , and ShadowRenderer components on it. Changing the translation or rotation of the DirectionalLight object will cause the shadows of objects in the scene to change: DirectionalLight rotating around an object Shadows cast from a directional light are rendered separately than the other objects on a scene. Therefore, a different renderer, camera, and camera viewport are needed. ## CameraViewport The CameraViewport component on a directional light has different default settings than the one found on the EditorCamera or GameCamera. First, RenderInEditor checkBox and RenderInGame checkBox are set to true , while RenderToViewport checkBox is set to false . This setup ensures that shadows will be visible both in the editor and in the game, but that the camera viewport will not act as a renderer for the game itself. Second, RenderOrder is set to -1 . This setting ensures that shadows are always rendered before any other camera during runtime (unless, of course, this property on another CameraViewport component is set to a value less than -1 ). Third, ResolutionOrAspect (in this case, it's referring specifically to the aspect ratio) is set to [1, 1] . This setting not only makes the camera a square shape, but also ensures that the shadow map texture isn't squished or skewed. ## Camera and ShadowRenderer This component defines the blue, debug-drawn bounding box visible in the editor. This box, in turn, defines the the volume in which shadows are cast. That is, for an object to cast shadows some part of that object's bounding box must fall within the volume defined by the Camera component. The Size property's of 64 (which means that the width and height have a value of 64 ) is a default of the DirectionalLight archetype, which means that the volume in which shadows will appear within 64 world units defined by the camera. ### Shadow Acne Be wary when increasing the size of the camera as Resolution on the ShadowRenderer component is set to Low . In fact, at default values, setting Resolution enum to Low will cause shadow acne: This problem may be addressed by increasing the value of the NormalOffsetBias property on the DirectionalLight component. The default value is 0.1 , but when changed to 0.2 the shadow acne seen in the previous screenshot is gone: NormalOffsetBias biases depth in the direction of an object's surface normal, causing surfaces to \"pretend\" they're slightly ahead of themselves in regards to shadow mapping. To generalize the issue, there is direct correlation between the values of the NormalOffsetBias , Size , and Resolution enum properties and the presence of shadow acne: When Resolution enum is set Low , Size should be kept at the default value or smaller and NormalOffsetBias will probably need to be increased in small increments (e.g 0.05 or 0.1 increments) to remove shadow acne. When Resolution enum is set to Medium , Size may be increased to approximately 100 without the need to increase NormalOffsetBias . When Resolution enum is set to High , Size may be increased to approximately 200 without the need to increase NormalOffsetBias . If one or two directional lights are being used to represent the sun and/or moon, coupling the light object or its parent object's translation to the player character's translation can dramatically reduce the value of Size . If implementing a day/night cycle, the light object may even be parented to the player character itself. # Related Materials ## Manual Camera and CameraViewport ## Code Reference ShadowResolution","title":"Directional light"},{"location":"manual/plasmamanual/graphics/lighting/direct_lighting/point_light/","text":"A point light is a light that has a defined shape, exists at particular point in space, and sends light out equally from all points on that shape. It uses a sphere mesh to define its volume, as can be seen on the Model component . The light that is emitted will only be processed on geometry that the light overlaps, which is found using a special depth test unique to the point light. # LightIntensity and LightRadius LightIntensity falls off as the distance increases from the surface of the light as defined by the LightRadius . The fall off follows the inverse square law. The LightIntensity and FalloffRadius are independent from each other. LightRadius defines the size of the \"physical\" object that represents the object emitting the light. This \"physical\" object that can only be seen in the reflection of the PointLight (see screenshots below) As this radius approaches plasma, it comes to represent an infinitely small point. As the radius increases and the intensity stays the same, the light emitted will be spread out as the same intensity must now be spread across the surface of a larger object. When the value LightRadius increases, the size of the specular, or reflected, light grows. This is most obvious when looking at the reflection of the light source: the sphere reflected on the surface of the floor and wall objects gets larger. As the specular light increases, however, the intensity also dims, as the amount of energy emitted remains the same despite increasing the area from which it is emitted. # FalloffRadius FalloffRadius defines the size of the sphere mesh that acts as the volume in which emitted light may be processed. If the value defines a volume larger than what the emitted light would reach, increasing it any further will have no effect. If the value defines a volume below what the emitted light would reach, the intensity falloff is truncated. # Related Materials ## Manual - Model component ## Code Reference - Mesh","title":"Point light"},{"location":"manual/plasmamanual/graphics/materials/albedo/","text":"In Plasma, albedo refers to the color of a Material as defined by the reflected light an object should realistically reflect. In the case of non-metals, or dielectrics, the vast majority reflect almost all light as diffuse. In the case of metals, or conductors, almost all light is reflected, rendering a reflection of its surroundings if the metal is polished or smooth. The rougher the surface is, however, the more blurred the reflection will become. Metals also tint the light they reflect leading to the different colors of metals such as gold, copper, and silver. The albedo fragments in Plasma handle both of these cases depending on the values of other fragments, such as metallic, roughness, and specular. Other frameworks and engines may refer to this as the base color or diffuse map. When setting this property by map or by value, there are other considerations to take into account when visualizing how the final material will appear. For a quick example of this difference, compare the following three screenshots. They all have the same albedo value of R:255 G:226 R:155 , which should appear as gold when seen as a metal. The first image shows a sphere with only the AlbedoValue fragment on it. The second also has a SpecularValue fragment set to 1.0 . The third has a MetallicValue fragment set to 1.0 instead of specular. The following page will first cover the differences between the AlbedoValue fragment and AlbedoMap fragment, with demonstrations designed to show different albedo settings in conjunction with other material shader fragments as well as in different environments that have notably different indirect and direct lighting schemes. # Using the Albedo Fragment The albedo of a material may be set using either a map or by value. Setting albedo by value will apply a particular color uniformly across the material, while using an artist-produced albedo texture map allows the user to have precise control over the color at every point on the material. If there is no albedo map or value fragment on a material, the material will appear red by default. ## AlbedoValue When an AlbedoValue fragment is added to a material, the user may set a color value to be uniformly applied to the material. To add an AlbedoValue fragment to a material, click on the Add LightningFragment button in the Properties window: Before getting into how albedo is affected by material fragments, let's look at how a material appears with only an AlbedoValue fragment on it. The following screenshots show a range of albedo values applied to spheres with no other fragments applied to the material: Using the [ShaderInput] attribute to access the AlbedoValue fragment within a LightningScript, one may change the albedo value during runtime. The following gif shows this effect in engine (all other shader inputs are at default values): The following script used to achieve the above effect must be placed on an object that is using a material with at least an AlbedoValue LightningFragment. class ChangeAlbedo : LightningComponent { // The shader input for Albedo value (necessary to change value at run-time) [ShaderInput] var AlbedoValue : Real4 = Real4(0,0,0,0); // User-defined albedo values [Property] var AlbedoValue1 : Real4 = Real4(); [Property] var AlbedoValue2 : Real4 = Real4(); [Property] var AlbedoValue3 : Real4 = Real4(); [Property] var AlbedoValue4 : Real4 = Real4(); [Property] var AlbedoValue5 : Real4 = Real4(); // Time and Ease properties for Actions [Property] var Time : Real = 1.0; [Property] var Ease : Ease = Ease.QuadInOut; function Initialize(init : CogInitializer) { // Call the function that contains the action loop this.AlbedoOne(); } function AlbedoOne() { // Action sequence changing albedo value from one // user-defined value to the next var seq = Action.Sequence(this.Owner.Actions); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue1, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue2, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue3, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue4, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue5, this.Time, this.Ease); // Action call back to this function, creating an infinite loop Action.Call(seq, this.AlbedoOne); } } Note that in the previous two examples there were no other fragments on the material other than AlbedoValue, leaving the default values for roughness, specular, and metallic intact. Changing the values of the other default fragments can significantly alter how the albedo appears. To see some of these effects, the next set of screenshots will show one line of spheres that has roughness values increasing from 0 to 1 and another line that has metallic values increasing from 0 to 1 . Specular will remain constant at the default value of 0.5 . The albedo value will remain constant at R:244 G:162 B:137 , or Copper, so as to focus on the change brought by the roughness and metallic fragments: # AlbedoMap An albedo map is a texture provided by an artist for use on a Model . While most of these textures will be unique to the model for which they were made, others, such as tileable textures, may be applied to the materials on a number of geometric primitives and look completely natural. To apply an AlbedoMap fragment to a material, click on the Add LightningFragment button in the Properties window: ## Tileable Texture Before moving on to unique, artist-crafted models, let's take a look at how professionally-made tileable textures, complete with Normal, Metallic, Roughness, and Specular maps, appear when applied to some primitive shapes. The following screenshot shows the Properties window window of a material using a tileable, metal box texture: Using all of the maps made available by the artist, a simple cube becomes a PBR-ready object to use in a level environment: By changing the scale of the object slightly (e.g. [4, 1, 4] ), it's a quick jump to creating the floor for a level using only this object: As this particular material has maps for all of the default fragments included in a new Material, it presents an ideal case to see how the Material's appearance, specifically the albedo, changes when one or more of these maps is removed. ## Model-Specific Textures In a game with many artist-crafted, unique models, these will make up the majority of the texture maps. Just as was shown with the tileable textures directly above, even though it does provide the color of the object, it is only one part of a whole that is significantly altered when one or more of the other texture maps is removed. Let's take a look at how model-specific textures are applied to unique models. The albedo map that will be applied to the material before being imported into Plasma The albedo map after being imported into Plasma and gamma corrected The AlbedoMap fragment has been added to a Material and applied to the Model The finished object with all texture maps applied to the Material ### Lighting and Albedo As may have been obvious from the screenshots above, lighting has a direct effect on the Albedo of a Material. In all of the examples above, it is indirect lighting that bears the most influence on the apparent color of the Material. #### Indirect Lighting Indirect lighting, or image-based lighting, refers primarily to the skybox that encircles the scene. The following screenshots will show different angles of gold spheres that have a constant Metallic value of 1.0 and an increasing Roughness value in the range 0.0 - 0.6 : If you change the skybox, however, the overall color will change as a result of the indirect lighting the skybox provides. To demonstrate this, the following screenshots are of the exact same spheres but with a significantly brighter skybox: The difference may be subtle or pronounced depending on the degree of change between skyboxes. It should be apparent, however, how much of an influence indirect lighting, through the influence of the skybox, has on a PBR material. ## Reference Pages ### Manual - model_component - materials ### Code Reference - model - material","title":"Albedo"},{"location":"manual/plasmamanual/graphics/materials/materials_overview/","text":"Materials , and the parameters found in them, define the shader for drawing objects for any purpose, using any renderer. Their overarching, generalized purpose is to house shader code (pixel, vertex, and geometry) using individual LightningFragments. These LightningFragments added to a Material as MaterialBlocks. These shader fragments define how the surface of the object on which it is placed will react to its environment. PBR , which is provided for the user as the default DeferredRenderer , is just one instance of how Materials may be used to render objects. To add a new Material, see Adding a Resource . # Material Templates When creating a new material, there are six templates from which to choose: Template Description PlasmaMaterial PBR-based material defined by TextureMaps OpaqueFlat PBR-based material defined by uniform values EmptyMaterial Free of any default MaterialBlocks or references to RenderGroups AdditiveSprite Used for sprites that require additive blending AlphaCut Used for graphicals that should be alpha cut AlphaSprite Used for sprites that require alpha blending Each of these templates has MaterialBlocks and references to RenderGroups pre-added. The PlasmaMaterial, for example, has AlbedoMap , NormalMap , RoughnessMap , MetallicMap , and SpecularValue MaterialBlocks and references Opaque , and ShadowCasters RenderGroups. Albedo , Normal , Metallic , Roughness , and Specular are the parameters that define how light interacts with the material. Each of these parameters may be defined by a texture map or by a value, with the exception of the Normal parameter which may only be defined by a map. # Related Materials ## Manual - rendergroups - model_component - materials - Albedo - Normal - Metallic - Roughness - shaders ## Code Reference - rendergroup - model - material","title":"Materials overview"},{"location":"manual/plasmamanual/graphics/materials/metallic/","text":"The metallic fragment, in the form of either a map or value, describes whether a Material , or part of a material, should have the properties of a metal (or conductor) in relation to light. Metals have high specular and their color represents the visible spectrum of light that a particular metal reflects. This is in opposition for dielectrics, or non-metals, that--for the most part--have high diffuse reflectance. In fact, when authoring a new material for a PBR-based renderer, whether that material is a metal or not (or some combination of the two) is usually the first consideration one should make. As metals have very high specular and very low diffuse reflectance, their color comes from a \"tint\" to reflected light. Gold and copper are two metals associated with their unique colors, instead of the grays usually found with metals. A simplified explanation of why gold and copper have the tint that they do is because they do not reflect much of the blue part of the spectrum. Compare the following three spheres, each tinted to represent gold, copper, and silver respectively. Using either a map or a value fragment, one may assign a metallic value between 0.0 and 1.0 . While there may be an impulse to assign this value somewhere in the middle, it usually far more accurate to make a material or part of a material either completely 1.0 (metal) or completely 0.0 (non-metal). If the effect desired is a brushed or aged metal, this may best be achieved by using a RoughnessMap in conjunction with a MetallicMap. # The Metallic Fragment Metallic may be set using a Texture map or a value. If a value is used, it applied uniformly across the entire Material. If a map is used, the metallic value may be set to different levels across the Material. If there is neither a metallic map or value fragment, it would be as if a metallic value of 0.0 is applied to the entire Material. ## MetallicValue When a MetallicValue fragment is applied to a Material, the user may set a metallic value to applied uniformly across the Material in the from 0.0 to 1.0 . To add a MetallicValue fragment, click on the Add MaterialBlock button and select MetallicValue , as seen below: The following screenshots show the progression of the metallic value of a material from 0.0 to 1.0 with a constant roughness value ( 0.25 ) and albedo value (gold, copper, and silver, front to back): The spheres furthest to the left look have a matte look there as there is no metallic or specular reflectance added while the spheres furthest to the right looks like polished, completely reflective metals. The difference between the three sphere in the middle of each line are subtle and may not be terribly useful, but with a uniform metallic value that shouldn't be a problem. The vast majority of objects are either metals or non-metals so to have a uniform metallic value somewhere in between 0.0 and 1.0 , especially as the value approaches 0.5 , will not appear like the surface of anything in reality. ## MetallicMap A MetallicMap is a texture provided by an artist for use on a model. While most of these textures will be unique to the model for which they were made, others, such as tileable textures, may be applied to the materials on a number of geometric primitives while still appearing completely natural. To apply a MetallicMap fragment to a material, click on the Add LightningFragment button in the Properties window: A MetallicMap fragment is appropriate to use when the Material will have sections that are metallic and sections that are not. # Related Materials ## Manual - materials - adding_textures_and_sprites ## Code Reference - material - texture","title":"Metallic"},{"location":"manual/plasmamanual/graphics/materials/normal_map/","text":"Normal maps give texture to objects. The idea of normal maps isn't to necessarily deform the model (though that is certainly possible), but to change the way that light interacts with the model`s surface. Normal maps represent minor deformities on a surface, such as the notches on a wooden plank. The three colors that store the values in a normal map are red, green, and blue. Each color is interpreted as X, Y, and Z respectively, to makeup a vector. These vectors represent the direction that is normal to the surface, hence the name NormalMap. Normal map for decals Most of the color on a normal map ends up blue because most of the direction vectors on a normal map are in the Z direction. In the space of the normal map, otherwise known as tangent space, X and Y point in the U and V directions of the texture, while Z points away from the texture. Z can also be thought of as the direction away from the surface, and so the more blue a pixel is, the more outward a normal will be. It then follows that redder pixels represent horizontal normals, and greener pixels represent vertical normals, which would both be tangent to the surface. NOTE: If the normal map seems like a mix of green and yellow, it's probably because the textures been compressed with BC5 . For more on block compression, visit Block Compression . # NormalMap Material Block The NormalMap resource material block contains a few additional properties vs other mapping material blocks. RedLeft checkBox and GreenDown checkBox can be used to reorient the normal map to the desired direction. In addition, Bumpiness checkBox will change the amount a normal map will effect a surface. ## Related Materials ### Manual - Block Compression","title":"Normal map"},{"location":"manual/plasmamanual/graphics/materials/roughness/","text":"Roughness quite simply defines how rough--or conversely, how smooth--a particular material is. The greater the roughness of a surface, the greater the diffusion of light that hit that surface. Roughness can be defined either by value, which is uniformly applied across the surface of a Material , or by texture map, which defines the roughness value for each discrete part of the Material. Roughness as defined in the deferred renderer follow microfacet theory, in which surface irregularities on the Material cause reflected light to \"blur\". The higher the Roughness value, the greater the blurring effect will be. For a quick look at how increasing roughness corresponds to increased blur, the following screenshot shows spheres with constant albedo and metallic , but an increasing value of roughness from 0 to 1: Especially through the first five or six spheres, as the roughness goes up, the reflection gets progressively more pronounced until individual objects reflected from the skybox are no longer visible. # The Roughness Fragment Roughness may be set using a value or a texture map. If a value is used it is applied uniformly across the surface of the Material. If a texture map is used, the Roughness value may be set to different values ranging from 0 to 1 across the surface of the Material. ## Roughness Value When the RoughnessValue fragment is applied, the roughness value specified will be applied uniformly across the surface of the Material. To add a RoughnessValue fragment, click on the the Add LightningFragment button in the Material Properties window and select RoughnessValue , as seen below: ## Roughness Map When the RoughnessMap fragment is applied, different roughness values are applied to discrete sections of the Material, as dictated by the texture map. To add a RoughnessMap MaterialBlock, click on the Add MaterialBlock button in the Material Properties window and select RoughnessMap , as seen below: RoughnessMaps may be broken down into two broad categories: tileable roughness maps, which can be used on any model, and model-specific roughness maps, which are intended to be used with a specific model or set of models. # Related Materials ## Manual Material deferred_renderer","title":"Roughness"},{"location":"manual/plasmamanual/graphics/materials/shaders/","text":"Shaders may be added to Plasma in the form of LightningFragments, allowing the user to write shaders using the Lightning language. Zero currently supports the following types of shaders: Pixel - Operates on individual pixels, setting and changing their properties. Vertex - Operates on individual vertices, setting and changing their properties. Geometry - Operates on transformed primitives (e.g. point, lines, triangles), setting and changing their properties. PostProcess - Operates on the window of an entire scene, after that scene has been processed. When adding a new LightningFragment, there are multiple templates for each type of shader: Shader Template Description Pixel Pixel Annotated All of the built-in inputs that may be used have been commented. Pixel Pixel Empty No inputs or outputs pre-defined. Pixel Pixel Normal Map Uses a NormalMap to perturb the surface normal Vertex Vertex Annotated All of the built-in inputs that may be used have been commented. Vertex Vertex Empty No inputs or outputs pre-defined. Vertex Vertex Oscillate Demonstration of a vertex shader that applies a simple oscillation to all vertices. Geometry Point To Quad Demonstration of generating geometry, creating quads from points. Geometry Polygon Normals Demonstration of manipulating geometry, changing normals of a triangle. PostProcess Post Process Blur Applies a simple post-process blur effect. PostProcess Post Process Copy Copies a texture. # Shader Translation Debug Helper This tool translates Materials (rather, the LightningFragments that make up the Material) into different versions of the shader language GLSL. Command : DebugShaderTranslation will open the tool On the left hand side of the window are properties that set the parameters that define the shaders to be be translated: CoreVertex enum, Material enum, and RenderPass enum. Translation Language set the version of GLSL to translate to. These options set what exactly will be translated. Material enum, for example, sets the Material to be translated as its name would suggest. If not familiar with GLSL, these will become overwhelmingly complex very quickly. With at least an intermediate amount of experience in GLSL, however, this translator provides a valuable tool for debugging your LightningFragment shaders. Changing the other attributes to different settings will result in different outputs, so try to make sure that the attributes selected line up to the location on the render pipeline. # Related Materials ## Manual - normal_map - Material","title":"Shaders"},{"location":"manual/plasmamanual/graphics/materials/textures/","text":"Textures are a special type of image used to render 3D graphics. It's commonly mapped to meshes , particles and surfaces and it controls different aspects of rendering through colors, normals and masks and more. Textures are not a final picture of the object; they are inputs that, when combined with lighting and other visual effects, produce a variety of graphical results. One of the most important aspects of textures is the ability to be drawn at different sizes efficiently. This is accomplished through Mipmapping and anisotropic filtering. For information on importing textures, see adding_textures_and_sprites . NOTE: Plasma only supports images up to 4096 x 4096 pixels. If a larger image is imported, Plasma will clamp it down to its maximum size. Due to Mipmapping and compression, it is highly recommended to use images with powers of 2 proportions. They DO NOT need to be squares, however. Plasma supports the following image types: PNGs: Lossless and compressed. We highly recommend that you use it. TGAs: Lossless and compressed. TIFs: Lossless and compressed. PSDs: Lossless but large in file size. JPGs: Lossy. We do not recommend using it for final assets. # Texture Builder The Texture Builder is a collection of settings used to convert your image file into a texture that's suitable for the game. They can be accessed by clicking on the texture in the Library Window. ## Texture Types Texture 2D: Standard 2D texture. TextureCube: A cubemap consisting of six faces used for a SkyBox and Reflection. ## Compression By default, Plasma performs an operation called block_compression on all textures. While this can reduce image quality it greatly reduces memory usage allowing it to be rendered faster. This setting should not be disable unless color accuracy is extremely important. For more information on this topic we recommend this article . # Related Materials ## Manual - adding_textures_and_sprites - mesh - particles ## Code Reference - texture","title":"Textures"},{"location":"manual/plasmamanual/graphics/models/mesh/","text":"Imported meshes may be used to apply to a Model or SkinnedModel component as well as to create a PhysicsMesh for that object. This page focuses solely on using a mesh for a Model and SkinnedModel. Clicking on a particular mesh in the Library window will open up the ContentComponents of that mesh in the Properties window: # ContentComponents for a Sample Mesh The properties in the ContentComponents are the same as those found in the Group Import Options , along with a few additional properties. One can fix incorrect values set during import as well as add or remove automatic resource generation (e.g. importing textures and animations from the same .fbx that included the base mesh). WARNING: All meshes imported from a single .fbx or other scene asset file will have the same values in the properties of the ContentComponents. It is therefore recommended to only import one object per scene asset file. # MeshBuilder The MeshBuilder ContentComponent includes those properties specifically related to an imported mesh (instead of other resources imported in the same file that are associated with the mesh such as animations and textures). # AnimationBuilder and AnimationClips The AnimationBuilder ContentComponent defines clips of animation that have been imported. If importing a single animation, the AnimationClip will be automatically generated and there is nothing more to do. If using a workflow where all animations for a certain mesh are included in the same timeline or track in an asset file, different AnimationClips will need to added for each separate animation, defined by their start and end frames. If using such a workflow, the artist should provide the user with the frame specifications for each distinct animation. Every AnimationClip can be named, have its start and end frames defined, and its looping mode set ( Default , Once , or Looping ). Once an AnimationClip is added it is treated like an Animation Resource in Plasma and can be accessed in LightningScript like any other Animation. # TextureContent and GeneratedArchetype These components have no properties and are there only if ImportTextures and GenerateArchetype are set to true in the Group Import Options window when importing an asset. If a scene asset file has textures in it, but ImportTextures was set to false when imported, adding the TextureContent component and reloading the mesh will add the textures to the project Library. If no archetype was created on import, adding GenerateArchetype and reloading will create an archetype in the project Library. # Related Materials ## Manual - model_component - adding_scene_assets ## Reference - model - skinnedmodel - PhysicsMesh","title":"Mesh"},{"location":"manual/plasmamanual/graphics/models/model_component/","text":"The Model component allows the user to assign a Mesh and a Material to an object. # Material and Mesh These properties are where the Material and Mesh resources for the model are set. If a model has been imported using a scene asset file, the archetype for the object will have the Mesh associated with a specific object already set. By default, the Material will be set to the PlasmaMaterial until changed by the user. If using the SkinnedModel component, the Mesh resource should be a skinned mesh. # Skinned Model The only property the SkinnedModel component has that the Model component does not is SkeletonPath. When a skinned mesh is imported, SkeletonPath is automatically set to whatever object the animation takes as its first target (i.e. the root object of a skeleton of the generated hierarchy). The object that SkeletonPath points to should have the Skeleton component on it as well as being the root object of the entire skeleton (i.e. the parent object of all of the bone objects). If SkeletonPath is set incorrectly, the object will fail to animate as the SkinnedModel receives all of its transformation data from the skeleton. # Related Materials ## Reference - Model - SkinnedModel - Mesh - Material","title":"Model component"},{"location":"manual/plasmamanual/graphics/particles/emitters/","text":"Emitters are necessary components for a particle system that define the properties of a particle as it's created. One of those properties is the spawn position, which is in part defined by the component itself. The emitter types are BoxParticleEmitter , SphericalParticleEmitter , and MeshParticleEmitter , and each one defines a surface or curve that particles emit from. NOTE: By default the shape isn't apparent on the Box or Sphere particle emitter. This is because the EmitterSize is zeroed out by default. # Variance Some properties on an emitter have a variance property to match. Each particle inherits its properties from the emitter by adding a random value from variance to base value. For example, two common properties for emitters are Size and SizeVariance . If Size were set to 1 and the SizeVariance was 0.1 , the size of each particle would be a random value in the range [0.9,1.1] . The property StartVelocity also has the variance counterpart RandomVelocity . The velocity vector is computed similarly with a variance property, where the X, Y, and Z components of the vector are computed independently. # Fast Emitters When an object is moving fast, the fact that its motion is an illusion becomes more apparent. When the gaps between the small teleportations grow bigger, the illusion is lost. The illusion of motion is even harder to keep when a particle system is moving since the particles tend to trace the path of the object. One way to fix this is to use a high EmitRate and turn on FastMovingEmitter checkBox. This will emit some of the extra particles between the gaps of the current and previous positions. Two particle emitters in motion, where the right one is using FastMovingEmitter checkBox # Related Material ## Manual - Color Gradient ## Code Reference - SpriteParticleSystem - BoxParticleEmitter - SphericalParticleEmitter - MeshParticleEmitter","title":"Emitters"},{"location":"manual/plasmamanual/graphics/particles/linear_particle_animator/","text":"The linear particle animator give particles the ability to move. It adds an integration step which allows particles to have some physically based motion. The LinearParticleAnimator component is required to generate particles and and to move them. (NOTE) Where to set particle velocity? Properties relating to velocity are not found on the LinearParticleAnimator , but are instead on the emitter component. The reason for this property placement is that all properties on the emitter component are applied when a particle is created, whereas the properties from LinearParticleAnimator are applied every frame. # Forces Both Force and RandomForce are used to apply forces to a particle. The force will effect the velocity, which in turn effects the position of each particle. If the RandomForce defines the half-vector for a bounding box, then the random component of this frames Force is confined to this box. # Growth The Growth property can change the size of particles over time. Set Growth to a positive number to make it grow, and a negative number to make it shrink. # Related Material ## Manual - Physics Effects and Regions ## Code Reference - SpriteParticleSystem - LinearParticleAnimator","title":"Linear particle animator"},{"location":"manual/plasmamanual/graphics/particles/particle_color_animator/","text":"The particle animator uses ColorGradients to color each particle uniquely based on its current state. The final color of any given particle is calculated from an element-wise multiplication of three color vectors: Color = VertexColor * TimeGradientColor * VelocityGradientColor where VertexColor comes from VectexColor on the SpriteParticleSystem component. TimeGradientColor is then found from sampling the TimeGradient resource, while VelocityGradientColor is found from sampling the VelocityGradient resource. The TimeGradient resource is interpolated from black to white to black such that the color fades in and out. The VelocityGradient resource is interpolated from blue to red, such that slow particles are blue and fast particles are red. # Time and Velocity Gradients In order to use the gradients on the ParticleColorAnimator , one must understand how each gradient is sampled. The TimeGradient resource defines colors in the range of t[0,1] . When t=0 , the particle is created, and when t=1 , the particle dies. The range is important because we need to map time that the particle has lived to [0,1] . When sampling from TimeGradient resource, the ParticleColorAnimator uses the particle lifetime as the range. When sampling from VelocityGradient resource, the magnitude of the velocity is used. However, unlike with time, ParticleColorAnimator can't guess how to map velocity magnitudes to the [0,1] range. ParticleColorAnimator therefore includes MaxParticleSpeed as an upper limit. When t=0 the particle isn't moving, and when t=1 when the particle is moving at the speed of MaxParticleSpeed . # Related Material ## Manual - Color Gradient - Sprite Particle System ## Code Reference - SpriteParticleSystem","title":"Particle color animator"},{"location":"manual/plasmamanual/graphics/particles/sprite_particle_system/","text":"The SpriteParticleSystem is a graphical and a necessary component of a particle system. Particle systems not only provide a simple interface for applying visual effects to an object, but are more efficient than spawning the equivalent game objects under the same conditions. When editing particle systems, it is important to note that no one particle has unqiue logic in the same system. Every particle follows the same set of universal rules within the system to transform how they are rendered. # BoundingBoxSize Some objects have a bounding box to determine if they should be rendered or not. Either all particles in a particle system are renderered, or none of them are. It's up to the user to determine how far off the screen is far enough to stop rendering any given system. The BoundingBoxSize defines the width, length, and height of the bounding box. Once the bounding box leaves the screen, the particle system won't render. WARNING: Be careful of particles that leave the bounding box, because these are the particles that have potential to disappear. # Particle System Hierarchies When working with particle system hierarchies, the ChildSystem checkBox switch gives the ability to make a particle system of particle systems. This means that a child particle system will emit particles on each particle of a parent particle system. To force a particle system to generate particles in this way, ChildSystem checkBox should be checked. # Particle Spaces The SystemSpace is used to set the space for particles in the particle system. If SystemSpace enum is set to WorldSpace , then particles are created in world space and position is not longer affected by the Transform component. If SystemSpace enum is set to LocalSpace , then the space is the Transform, and will therefore follow the Transform. # Geometry Mode Particles made in the Sprite Particle System are 2D, so the way that particles are placed in a 3D environment needs to be determined. The GeometryMode parameter has the following modes: | Mode | Description | | -- | -- | | Billboarded | Each particle faces the camera | | Beam | Same as Billboarded , but each particle is stretched by its velocity vector | | Outward | Each particle faces the particle system origin | | Face Velocity | Each particle faces the direction of its velocity vector | | Flat | Each particle faces the SystemSpace enum Z-axis | # Related Material ## Reference - SpriteParticleSystem - graphical - LinearParticleAnimator","title":"Sprite particle system"},{"location":"manual/plasmamanual/lightning_in_plasma/arrays/","text":"Arrays Array is a templated Lightning type used to represent an ordered list. An array is a container class: it contains other objects. The type of object it contains is specified between square brackets when the array is declared: ```lang=csharp, name=Array Declaration Example var recentPositions = Array Real3 ; var currentTargets = Array Cog ; var inputBuffer = Array Array[Boolean] ; When an array is created, by default, it has no elements, but its initial size can be specified, and, optionally, the initial value of each element can be provided as well: ```lang=csharp, name=Array Initialization Example 1 var emptyArray = Array[Integer](); var eightDefaultIntegers = Array[Integer](8); var eightFives = Array[Integer](8, 5); Console.WriteLine(emptyArray); Console.WriteLine(eightDefaultIntegers); Console.WriteLine(eightFives); ```name=Console Window {} {0, 0, 0, 0, 0, 0, 0, 0} {5, 5, 5, 5, 5, 5, 5, 5} NOTE: When specifying the initial value for an array's elements in this manner, take note that one such element is constructed, and then it is duplicated as necessary to fill the array. If the type stored in the array is a value type, this will result in the construction of additional elements, but if it is a reference type, then each additional element will be a by-reference copy of the first. This may lead to unexpected behavior when modifying the array's contents later. If explicit copies of a reference type object are desired, they should be created and added after construction. Additionally, an array can be initialized with an initializer list: ```lang=csharp, name=Array Initialization Example 2 var a = Array[String]() { \"abc\", \"def\", \"ghi\", \"jkl\" }; Console.WriteLine(a); ```name=Console Window {abc, def, ghi, jkl} # Array Access Array elements can be accessed for reading or writing using the **indexing operator**, `[]`. Array indexing in Lightning is **plasma-based** (the very first element in an array has an index of 0): ```lang=csharp, name=Access Example var words = Array[String]() { \"the\", // element 0 \"quick\", // element 1 \"brown\", // element 2 \"fox\", // element 3 }; var chosenWord = words[1]; // reading element 1 Console.WriteLine(chosenWord); words[2] = \"polka-dotted\"; // writing element 2 Console.WriteLine(words); ```name=Console Window quick {the, quick, polka-dotted, fox} Attempting to access a negative index or an index that is greater than or equal to the array's [Count](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/arrays/.markdown#array-size) will throw a Lightning exception. # Adding to and Removing from Arrays Lightning arrays are //dynamic//: that is, the number of elements in an array is not fixed, so elements can be added or removed after the array is created. ## Adding The most basic way to add an element to an array is with the [ Add](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#add-void) method, which puts the element at the end of the array: ```lang=csharp, name=Add Example var greetings = Array[String]() { \"hello\", \"bonjour\", \"yo\", }; Console.WriteLine(greetings); greetings.Add(\"howdy\"); Console.WriteLine(greetings); ```name=Console Window {hello, bonjour, yo} {hello, bonjour, yo, howdy} The [ Push](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#push-void) method is functionally identical to Add for arrays, and they may be used interchangeably. Adding to the end is generally the fastest way of adding to an array, but it is possible to insert an element at any valid position within an array via the [ Insert](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#insert-void) method: ```lang=csharp, name=Insert Example var digitsOfE = Array[Integer]() { 2, 7, 1, 2, 8 }; Console.WriteLine(digitsOfE); digitsOfE.Insert(3, 8); // adds an 8 so that its new index is 3 Console.WriteLine(digitsOfE); ```name=Console Window {2, 7, 1, 2, 8} {2, 7, 1, 8, 2, 8} NOTE: Insert is less efficient than Add because it requires all the elements following the given index to be shifted toward the back of the array to make room for the new element. If the proper position of a new element is at the end of the array, or if the order of the elements is irrelevant, Add should generally be used instead of Insert. ## Removing The most basic way to remove an element from an array is with the [ Pop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#pop-plasma-engine-document) method, which shrinks the array by one from the end: ```lang=csharp, name=Pop Example var taskList = Array[String]() { \"make the game fun\", \"UI overhaul\", \"create placeholder SFX\", \"vacuum the break room\", }; Console.WriteLine(taskList); taskList.Pop(); Console.WriteLine(taskList); ```name=Console Window {make the game fun, UI overhaul, create placeholder SFX, vacuum the break room} {make the game fun, UI overhaul, create placeholder SFX} As with adding, removing from the end is fast, but it is also possible to remove an element at an arbitrary valid index via the [ RemoveAt](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removeat-void) and [ RemoveSwap](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removeswap-void) methods. **RemoveAt** removes the element that is found at the given index, and preserves the order of the remaining elements: ```lang=csharp, name=RemoveAt Example var commonLetters = Array[String]() { \"e\", // 0 \"t\", // 1 \"a\", // 2 \"x\", // 3 (this one doesn't belong) \"o\", // 4 \"i\", // 5 \"n\", // 6 }; Console.WriteLine(commonLetters); commonLetters.RemoveAt(3); Console.WriteLine(commonLetters); ```name=Console Window {e, t, a, x, o, i, n} {e, t, a, o, i, n} NOTE: RemoveAt is less efficient than Pop because it causes all the elements following the given index to be shifted toward the front of the array to close the gap following the removal. If the element to be removed is the last element in the array, Pop should be used instead of RemoveAt. Alternatively, there is another option if the order of elements is irrelevant. **RemoveSwap** first swaps the element at the given index with the last element in the array, and then Pops the element from the end. The order of the remaining elements is thus *not* preserved: ```lang=csharp, name=RemoveSwap Example var animals = Array[String]() { \"tardigrade\", // 0 \"aardwolf\", // 1 \"pile of dirt\", // 2 (this one doesn't belong) \"sponge\", // 3 \"plesiosaur\", // 4 }; Console.WriteLine(animals); animals.RemoveSwap(2); Console.WriteLine(animals); ```name=Console Window {tardigrade, aardwolf, pile of dirt, sponge, plesiosaur} {tardigrade, aardwolf, plesiosaur, sponge} Though RemoveSwap does not preserve element order, it is essentially just as efficient as Pop. It is also possible to remove a known element with an unknown index. [ RemoveFirst](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removefirst-plasma-engine) finds an array's first element that matches the given value and then removes it, preserving the order of the remaining elements: ```lang=csharp, name=RemoveFirst Example var data = Array[Integer]() { 0, 4, 1, -1, // (this one doesn't belong) 2, }; Console.WriteLine(data); data.RemoveFirst(-1); Console.WriteLine(data); ```name=Console Window {0, -1, 4, 1, 2} {0, 4, 1, 2} To find and remove *all* elements that match a given value, use the [ RemoveAll](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removeall-plasma-engine-do) method: ```lang=csharp, name=RemoveAll Example var waterfowl = Array[String]() { \"duck\", \"duck\", \"duck\", \"duck\", \"goose\", }; Console.WriteLine(waterfowl); waterfowl.RemoveAll(\"duck\"); Console.WriteLine(waterfowl); ```name=Console Window {duck, duck, duck, duck, goose} {goose} NOTE: Both RemoveFirst and RemoveAll require searching the array and comparing each element with the given value, which makes them even slower than RemoveAt. In certain situations, such as a deeply nested loop, or when element comparison is slow, this performance difference may be significant. Finally, to remove all of the elements from an array, use the [ Clear](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#clear-void) method: ```lang=csharp, name=Clear Example 1 var inventory = Array[String]() { \"car keys\", \"cell phone\", \"screwdriver\", \"leaflet\", \"crumpled note\", }; Console.WriteLine(inventory); inventory.Clear(); Console.WriteLine(inventory); ```name=Console Window {car keys, cell phone, screwdriver, leaflet, crumpled note} {} NOTE: The act of removing an item from an array does not itself delete the item. If one or more external references to an element exist, then that element will persist if it is removed from an array: ```lang=csharp, name=Clear Example 2 var arrayContainer = Array[Array[Real]](); var array0 = Array[Real]() { 1, 2, 3 }; var array1 = Array[Real]() { 1.61803, 2.71828, 3.14159 }; arrayContainer.Add(array0); arrayContainer.Add(array1); Console.WriteLine(\"arrayContainer before Clear: `arrayContainer`\"); arrayContainer.Clear(); Console.WriteLine(\"arrayContainer after Clear: `arrayContainer`\"); Console.WriteLine(\"array0 after Clear: `array0`\"); Console.WriteLine(\"array1 after Clear: `array1`\"); ```name=Console Window arrayContainer before Clear: {{1, 2, 3}, {1.61803, 2.71828, 3.14159}} arrayContainer after Clear: {} array0 after Clear: {1, 2, 3} array1 after Clear: {1.61803, 2.71828, 3.14159} # Reference Type In Lightning, **Array** is a //reference type//. Be aware of this when making copies. When setting one array variable to equal another existing array using the assignment operator, `=`, a copy is not constructed; rather, the first just ends up pointing to the second. In such a case, modifying the array through one of the two references will appear to modify both, because they are in fact one array. To create a copy, the [ Copy](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#copy-array-t) method should be used: ```lang=csharp, name=Array Reference Type Example var firstExample = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7 }; Console.WriteLine(\"firstExample, before copy and clear: `firstExample`\"); var naiveCopy = firstExample; // this doesn't actually make a copy, it just points the variable // \"naiveCopy\" to the same array that \"firstExample\" points to naiveCopy.Clear(); // thus, this line clears the original array Console.WriteLine(\"firstExample, after copy and clear: `firstExample`\"); var secondExample = Array[Integer]() { 7, 6, 5, 4, 3, 2, 1, 0 }; Console.WriteLine(\"secondExample, before copy and clear: `secondExample`\"); var properCopy = secondExample.Copy(); // the Copy method should be used to clone an array properCopy.Clear(); Console.WriteLine(\"secondExample, after copy and clear: `secondExample`\"); ```name=Console Window firstExample, before copy and clear: {0, 1, 2, 3, 4, 5, 6, 7} firstExample, after copy and clear: {} secondExample, before copy and clear: {7, 6, 5, 4, 3, 2, 1, 0} secondExample, after copy and clear: {7, 6, 5, 4, 3, 2, 1, 0} # Looping Over Arrays As arrays are ordered sequences of objects, they lend themselves naturally to use in [ loops](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown): in each loop iteration, the next element of the array can be accessed, modified, copied, etc. ## For Loops The most basic way to loop over an array is by using a [ for loop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown#for-loop). This takes advantage of the fact that an array contains its [ Count](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#count-plasma-engine-docume), or number of elements, as a property: ```lang=csharp, name=For Loop Example var numbers = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }; Console.WriteLine(\"Squares:\"); for (var i = 0; i < numbers.Count; ++i) { var currentNumber = numbers[i]; Console.WriteLine(currentNumber * currentNumber); } ```name=Console Window Squares: 0 1 4 9 16 25 36 49 64 81 ## For Each Loops Another way to iterate through an array is to use a [ foreach loop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown#for-each-loop): ```lang=csharp, name=For Each Loop Example var numbers = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }; Console.WriteLine(\"Cubes:\"); foreach (var number in numbers) { Console.WriteLine(number * number * number); } ```name=Console Window Cubes: 0 1 8 27 64 125 216 343 512 729 # Array Size A Lightning array keeps track of two different size-related properties: [ Count](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#count-plasma-engine-docume) and [ Capacity](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#capacity-plasma-engine-doc). When an array is initialized, it is allotted just enough memory to store the given number of elements. If an element is added when it doesn't have enough allocated space for another one, the array is automatically expanded so that it can fit more elements. An array's **Count** is the number of elements that have been added to it (or were placed there on initialization); its **Capacity** is the number of elements that could possibly fit in it before it needs to grow again: ```lang=csharp, name=Count and Capacity Example var array = Array[Integer](); for (var i = 0; i < 10; ++i) { Console.WriteLine(\"Count: `array.Count` | Capacity: `array.Capacity`\"); array.Add(i); } Console.WriteLine(\"Count: `array.Count` | Capacity: `array.Capacity`\"); ```name=Console Window Count: 0 | Capacity: 0 Count: 1 | Capacity: 2 Count: 2 | Capacity: 2 Count: 3 | Capacity: 3 Count: 4 | Capacity: 4 Count: 5 | Capacity: 6 Count: 6 | Capacity: 6 Count: 7 | Capacity: 9 Count: 8 | Capacity: 9 Count: 9 | Capacity: 9 Count: 10 | Capacity: 13 NOTE: If an element can be added to an array without it having to grow, it can be done very quickly, but expanding an array is potentially costly. In certain situations, such as a deeply nested loop, it may be beneficial to consider an array's Capacity before adding to it. Likewise, if the desired maximum size of an array is known ahead of time, space can be pre-allocated without adding any elements using the [ Reserve](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#reserve-void) method. # Sorting Arrays Lightning arrays may be sorted using the [ Sort](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#sort-void) method. Sorting an array may put it in, say, increasing or decreasing order, in the case of an array of Integer or another numeric type, or in alphabetical order, in the case of a String array, or some other order via some more abstract or complex set of criteria. **Sort** sorts an array using the given comparison function. In many cases, this is something the user creates, though some types, such as [ String](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/string.markdown), provide static functions that can be used with the Sort method: ```lang=csharp, name=String Sorting Example var strings = Array[String](); strings.Add(\"hi\"); strings.Add(\"greetings\"); strings.Add(\"nice to see you\"); strings.Add(\"good morning\"); Console.WriteLine(strings); strings.Sort(String.Compare); // the Compare function is passed as a delegate Console.WriteLine(strings); ```name=Console Window {hi, greetings, nice to see you, good morning} {good morning, greetings, hi, nice to see you} A user-created array comparison function should take as arguments two objects of the type stored in the array. It should compare them in some relevant manner and return either a Boolean or an Integer that tells the Sort function what to do with the two array elements: the Boolean should be true if first item should be sorted before the second, and false otherwise; the Integer should be negative if the first item should be sorted before the second, and nonnegative otherwise. Consider these two classes: one defining some data for an adventurer and some static functions that can be used to sort an array of Adventurers, and another containing an array of Adventurers and a method that returns a string representation of that array: ```lang=csharp, name=Sorting Example Classes class Adventurer { var Name : String; var HP : Integer; var Height : Real; // in meters [Static] function CompareNames(a : Adventurer, b : Adventurer) : Integer { return String.Compare(a.Name, b.Name); } [Static] function CompareHPsAscending(a : Adventurer, b : Adventurer) : Integer { if (a.HP < b.HP) return -1; if (a.HP == b.HP) return 0; return 1; } [Static] function CompareHeightsAscending(a : Adventurer, b : Adventurer) : Integer { if (a.Height < b.Height) return -1; if (a.Height == b.Height) return 0; return 1; } [Static] function CompareNameLengthsThenAlpha(a : Adventurer, b : Adventurer) : Integer { var aNameLength = a.Name.ComputeRuneCount(); var bNameLength = b.Name.ComputeRuneCount(); if (aNameLength < bNameLength) return -1; if (aNameLength > bNameLength) return 1; return Adventurer.CompareNames(a, b); } } class Party { var Roster : Array[Adventurer] = Array[Adventurer](); function ToString() : String { var sb = StringBuilder(); sb.Write(\"{ \"); for (var i = 0; i < this.Roster.Count; ++i) { var member = this.Roster[i]; sb.Write(member.Name); if (i < this.Roster.LastIndex) sb.Write(\", \"); } sb.Write(\" }\"); return sb.ToString(); } } These classes can be used to illustrate how to sort objects of custom classes: ```lang=csharp, name=Custom Class Sorting Example var party = Party() { Roster = Array Adventurer { Adventurer() { Name = \"Trevor\", HP = 14, Height = 1.75 }, Adventurer() { Name = \"Nathan\", HP = 17, Height = 1.80 }, Adventurer() { Name = \"Joshua\", HP = 14, Height = 1.85 }, Adventurer() { Name = \"Josh\", HP = 17, Height = 1.68 }, Adventurer() { Name = \"Ryan\", HP = 25, Height = 1.83 }, Adventurer() { Name = \"Dane\", HP = 9, Height = 1.70 }, Adventurer() { Name = \"Andrea\", HP = 17, Height = 1.65 }, } }; Console.WriteLine(\"Default order: party.ToString() \"); party.Roster.Sort(Adventurer.CompareNames); Console.WriteLine(\"Alphabetical order: party.ToString() \"); party.Roster.Sort(Adventurer.CompareHPsAscending); Console.WriteLine(\"HP order, ascending: party.ToString() \"); party.Roster.Sort(Adventurer.CompareHeightsAscending); Console.WriteLine(\"Height order, ascending: party.ToString() \"); party.Roster.Sort(Adventurer.CompareNameLengthsThenAlpha); Console.WriteLine(\"Name lengths then alpha: party.ToString() \"); ```name=Console Window Default order: { Trevor, Nathan, Joshua, Josh, Ryan, Dane, Andrea } Alphabetical order: { Andrea, Dane, Josh, Joshua, Nathan, Ryan, Trevor } HP order, ascending: { Dane, Joshua, Trevor, Andrea, Josh, Nathan, Ryan } Height order, ascending: { Andrea, Josh, Dane, Trevor, Nathan, Ryan, Joshua } Name length then alpha: { Dane, Josh, Ryan, Andrea, Joshua, Nathan, Trevor } Note that the CompareNameLengthsThenAlpha function sorts Adventurers in ascending order of the lengths of their names, except where there is a tie, in which case it sorts in ascending alphabetical order instead. # Array Properties ## All All converts the array into an ArrayRange. In Lightning, Arrays can be implicitly cast to ArrayRanges, so it is typically not necessary to use this property. ## Count and Capacity Count and Capacity get the number of elements in the array, and its potential capacity to hold elements, respectively. They are discussed in detail above . ## LastIndex LastIndex gets the index of the last element in the array. It is always one less than Count (even when Count is 0). # Array Methods ## Add, Push, and Insert The Add method expands an array so that the given element is the last item in it. The Push method is identical to Add, and exists only for legacy purposes. The Insert method expands an array so that the given element is at the given index in it. All of these methods are discussed in detail above . ## Pop, RemoveAt, RemoveSwap, RemoveFirst, RemoveAll, and Clear The Pop method removes the last item from an array. The RemoveAt method removes from an array the element found at the given index. The RemoveSwap method removes from an array the element found at the given index and swaps the last item in the array to that newly-vacated index. The RemoveFirst method removes from an array the first element that matches the given object. The RemoveAll method removes from an array every element that matches the given object. The Clear method removes all the elements from an array. All of these methods are discussed in detail above . ## Copy The Copy method returns a new array that is a copy of the original. This method should be used to create a clone of an array that is to be modified separately without affecting the original. Because Array is a reference type, this cannot be done merely with the assignment operator, as shown above . ## FindFirstIndex The FindFirstIndex method returns the index of the first occurrence in an array of a given object. This method compares value types by comparing their data, and it compares reference types by comparing their handles. If the given object is not found, it returns -1 : ```lang=csharp, name=FindFirstIndex Example var valueType0 = Integer2(1, 2); // Integer2 is a value type var valueType1 = Integer2(valueType0); // valueType1 is a data-wise copy of valueType0 var arrayOfValueType = Array Integer2 { valueType0 }; Console.WriteLine(arrayOfValueType.FindFirstIndex(valueType1)); // valueType1 is found because its data is identical to valueType0 var referenceType0 = Array Integer { 0, 1, 1, 2, 3, 5, 8 }; // Array[Integer] is a reference type var referenceType1 = referenceType0.Copy(); // referenceType1 is a data-wise copy of referenceType0 var arrayOfReferenceType = Array Array[Integer] { referenceType0 }; Console.WriteLine(arrayOfReferenceType.FindFirstIndex(referenceType1)); // referenceType1 is not found because its handle is not found in the array ```name=Console Window 0 -1 ## Get and Set The Get method returns the array element at the given index. The Set method writes the given object to the given index. These methods are called when the indexing operator , [] , is used: ```lang=chsarp, name=Get Example var aStates = Array String { \"alabama\", \"nebraska\", \"arizona\", \"kansas\" }; Console.WriteLine(aStates.Get(0)); Console.WriteLine(aStates[2]); // this is reading, so Get is called aStates.Set(1, \"alaska\"); aStates[3] = \"arkansas\"; // this is writing, so Set is called Console.WriteLine(aStates); ```name=Console Window alabama arizona {alabama, alaska, arizona, arkansas} ## Range The Range method returns an ArrayRange containing the specified range of elements, beginning with the given start index and including the given element count: ```lang=csharp, name=Range Example var primes = Array Integer { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, }; // etc. var primeSubset = primes.Range(4, 5); foreach (var prime in primeSubset) { Console.WriteLine(prime); } ```name=Console Window 11 13 17 19 23 ## Resize and Reserve The Resize method resizes an array so that its new Count is the given value. If the given count value is greater than the array's old Count, then new elements are constructed and added to the end of the array. This method can take an optional default value parameter, which is used to set the value of these new elements; if this is not specified, then the type default for the type stored in the array will be used instead: ```lang=csharp, name=Resize Example 1 var iceCreamServings = Array String { \"cookies 'n cream\", \"pistachio\", \"neapolitan\", }; Console.WriteLine(iceCreamServings); iceCreamServings.Resize(5, \"vanilla\"); Console.WriteLine(iceCreamServings); iceCreamServings.Resize(6); Console.WriteLine(iceCreamServings); ```name=Console Window {cookies 'n cream, pistachio, neapolitan} {cookies 'n cream, pistachio, neapolitan, vanilla, vanilla} {cookies 'n cream, pistachio, neapolitan, vanilla, vanilla, (null) String} If the given count value is less than the array's old Count, then enough elements will be removed from the end of the array to bring its Count to the new value: ```lang=csharp, name=Resize Example 2 var cubes = Array Integer { 0, 1, 8, 27, 64, 125, 216, 343, 512, 729, }; Console.WriteLine(cubes); cubes.Resize(4); Console.WriteLine(cubes); ```name=Console Window {0, 1, 8, 27, 64, 125, 216, 343, 512, 729} {0, 1, 8, 27} As with all cases of changing an array's size, if Resize raises an array's Count past its Capacity, more space is allocated to accommodate its new size. Since this can affect performance in certain situations, it may be beneficial to change an array's Capacity before any resizing is done. The Reserve method sets an array's Capacity to the given value, allocating more space as necessary. ## Sort The Sort method sorts an array using the given comparison function. Typically, this is something the user provides, though some types, such as String , provide static functions that can be used with the Sort method. Array sorting is discussed in depth above . # Related Materials ## Manual Strings Classes and Structs Looping ## Code Reference Array Integer Real String","title":"Arrays"},{"location":"manual/plasmamanual/lightning_in_plasma/arrays/#arrays","text":"Array is a templated Lightning type used to represent an ordered list. An array is a container class: it contains other objects. The type of object it contains is specified between square brackets when the array is declared: ```lang=csharp, name=Array Declaration Example var recentPositions = Array Real3 ; var currentTargets = Array Cog ; var inputBuffer = Array Array[Boolean] ; When an array is created, by default, it has no elements, but its initial size can be specified, and, optionally, the initial value of each element can be provided as well: ```lang=csharp, name=Array Initialization Example 1 var emptyArray = Array[Integer](); var eightDefaultIntegers = Array[Integer](8); var eightFives = Array[Integer](8, 5); Console.WriteLine(emptyArray); Console.WriteLine(eightDefaultIntegers); Console.WriteLine(eightFives); ```name=Console Window {} {0, 0, 0, 0, 0, 0, 0, 0} {5, 5, 5, 5, 5, 5, 5, 5} NOTE: When specifying the initial value for an array's elements in this manner, take note that one such element is constructed, and then it is duplicated as necessary to fill the array. If the type stored in the array is a value type, this will result in the construction of additional elements, but if it is a reference type, then each additional element will be a by-reference copy of the first. This may lead to unexpected behavior when modifying the array's contents later. If explicit copies of a reference type object are desired, they should be created and added after construction. Additionally, an array can be initialized with an initializer list: ```lang=csharp, name=Array Initialization Example 2 var a = Array[String]() { \"abc\", \"def\", \"ghi\", \"jkl\" }; Console.WriteLine(a); ```name=Console Window {abc, def, ghi, jkl} # Array Access Array elements can be accessed for reading or writing using the **indexing operator**, `[]`. Array indexing in Lightning is **plasma-based** (the very first element in an array has an index of 0): ```lang=csharp, name=Access Example var words = Array[String]() { \"the\", // element 0 \"quick\", // element 1 \"brown\", // element 2 \"fox\", // element 3 }; var chosenWord = words[1]; // reading element 1 Console.WriteLine(chosenWord); words[2] = \"polka-dotted\"; // writing element 2 Console.WriteLine(words); ```name=Console Window quick {the, quick, polka-dotted, fox} Attempting to access a negative index or an index that is greater than or equal to the array's [Count](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/arrays/.markdown#array-size) will throw a Lightning exception. # Adding to and Removing from Arrays Lightning arrays are //dynamic//: that is, the number of elements in an array is not fixed, so elements can be added or removed after the array is created. ## Adding The most basic way to add an element to an array is with the [ Add](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#add-void) method, which puts the element at the end of the array: ```lang=csharp, name=Add Example var greetings = Array[String]() { \"hello\", \"bonjour\", \"yo\", }; Console.WriteLine(greetings); greetings.Add(\"howdy\"); Console.WriteLine(greetings); ```name=Console Window {hello, bonjour, yo} {hello, bonjour, yo, howdy} The [ Push](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#push-void) method is functionally identical to Add for arrays, and they may be used interchangeably. Adding to the end is generally the fastest way of adding to an array, but it is possible to insert an element at any valid position within an array via the [ Insert](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#insert-void) method: ```lang=csharp, name=Insert Example var digitsOfE = Array[Integer]() { 2, 7, 1, 2, 8 }; Console.WriteLine(digitsOfE); digitsOfE.Insert(3, 8); // adds an 8 so that its new index is 3 Console.WriteLine(digitsOfE); ```name=Console Window {2, 7, 1, 2, 8} {2, 7, 1, 8, 2, 8} NOTE: Insert is less efficient than Add because it requires all the elements following the given index to be shifted toward the back of the array to make room for the new element. If the proper position of a new element is at the end of the array, or if the order of the elements is irrelevant, Add should generally be used instead of Insert. ## Removing The most basic way to remove an element from an array is with the [ Pop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#pop-plasma-engine-document) method, which shrinks the array by one from the end: ```lang=csharp, name=Pop Example var taskList = Array[String]() { \"make the game fun\", \"UI overhaul\", \"create placeholder SFX\", \"vacuum the break room\", }; Console.WriteLine(taskList); taskList.Pop(); Console.WriteLine(taskList); ```name=Console Window {make the game fun, UI overhaul, create placeholder SFX, vacuum the break room} {make the game fun, UI overhaul, create placeholder SFX} As with adding, removing from the end is fast, but it is also possible to remove an element at an arbitrary valid index via the [ RemoveAt](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removeat-void) and [ RemoveSwap](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removeswap-void) methods. **RemoveAt** removes the element that is found at the given index, and preserves the order of the remaining elements: ```lang=csharp, name=RemoveAt Example var commonLetters = Array[String]() { \"e\", // 0 \"t\", // 1 \"a\", // 2 \"x\", // 3 (this one doesn't belong) \"o\", // 4 \"i\", // 5 \"n\", // 6 }; Console.WriteLine(commonLetters); commonLetters.RemoveAt(3); Console.WriteLine(commonLetters); ```name=Console Window {e, t, a, x, o, i, n} {e, t, a, o, i, n} NOTE: RemoveAt is less efficient than Pop because it causes all the elements following the given index to be shifted toward the front of the array to close the gap following the removal. If the element to be removed is the last element in the array, Pop should be used instead of RemoveAt. Alternatively, there is another option if the order of elements is irrelevant. **RemoveSwap** first swaps the element at the given index with the last element in the array, and then Pops the element from the end. The order of the remaining elements is thus *not* preserved: ```lang=csharp, name=RemoveSwap Example var animals = Array[String]() { \"tardigrade\", // 0 \"aardwolf\", // 1 \"pile of dirt\", // 2 (this one doesn't belong) \"sponge\", // 3 \"plesiosaur\", // 4 }; Console.WriteLine(animals); animals.RemoveSwap(2); Console.WriteLine(animals); ```name=Console Window {tardigrade, aardwolf, pile of dirt, sponge, plesiosaur} {tardigrade, aardwolf, plesiosaur, sponge} Though RemoveSwap does not preserve element order, it is essentially just as efficient as Pop. It is also possible to remove a known element with an unknown index. [ RemoveFirst](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removefirst-plasma-engine) finds an array's first element that matches the given value and then removes it, preserving the order of the remaining elements: ```lang=csharp, name=RemoveFirst Example var data = Array[Integer]() { 0, 4, 1, -1, // (this one doesn't belong) 2, }; Console.WriteLine(data); data.RemoveFirst(-1); Console.WriteLine(data); ```name=Console Window {0, -1, 4, 1, 2} {0, 4, 1, 2} To find and remove *all* elements that match a given value, use the [ RemoveAll](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#removeall-plasma-engine-do) method: ```lang=csharp, name=RemoveAll Example var waterfowl = Array[String]() { \"duck\", \"duck\", \"duck\", \"duck\", \"goose\", }; Console.WriteLine(waterfowl); waterfowl.RemoveAll(\"duck\"); Console.WriteLine(waterfowl); ```name=Console Window {duck, duck, duck, duck, goose} {goose} NOTE: Both RemoveFirst and RemoveAll require searching the array and comparing each element with the given value, which makes them even slower than RemoveAt. In certain situations, such as a deeply nested loop, or when element comparison is slow, this performance difference may be significant. Finally, to remove all of the elements from an array, use the [ Clear](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#clear-void) method: ```lang=csharp, name=Clear Example 1 var inventory = Array[String]() { \"car keys\", \"cell phone\", \"screwdriver\", \"leaflet\", \"crumpled note\", }; Console.WriteLine(inventory); inventory.Clear(); Console.WriteLine(inventory); ```name=Console Window {car keys, cell phone, screwdriver, leaflet, crumpled note} {} NOTE: The act of removing an item from an array does not itself delete the item. If one or more external references to an element exist, then that element will persist if it is removed from an array: ```lang=csharp, name=Clear Example 2 var arrayContainer = Array[Array[Real]](); var array0 = Array[Real]() { 1, 2, 3 }; var array1 = Array[Real]() { 1.61803, 2.71828, 3.14159 }; arrayContainer.Add(array0); arrayContainer.Add(array1); Console.WriteLine(\"arrayContainer before Clear: `arrayContainer`\"); arrayContainer.Clear(); Console.WriteLine(\"arrayContainer after Clear: `arrayContainer`\"); Console.WriteLine(\"array0 after Clear: `array0`\"); Console.WriteLine(\"array1 after Clear: `array1`\"); ```name=Console Window arrayContainer before Clear: {{1, 2, 3}, {1.61803, 2.71828, 3.14159}} arrayContainer after Clear: {} array0 after Clear: {1, 2, 3} array1 after Clear: {1.61803, 2.71828, 3.14159} # Reference Type In Lightning, **Array** is a //reference type//. Be aware of this when making copies. When setting one array variable to equal another existing array using the assignment operator, `=`, a copy is not constructed; rather, the first just ends up pointing to the second. In such a case, modifying the array through one of the two references will appear to modify both, because they are in fact one array. To create a copy, the [ Copy](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#copy-array-t) method should be used: ```lang=csharp, name=Array Reference Type Example var firstExample = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7 }; Console.WriteLine(\"firstExample, before copy and clear: `firstExample`\"); var naiveCopy = firstExample; // this doesn't actually make a copy, it just points the variable // \"naiveCopy\" to the same array that \"firstExample\" points to naiveCopy.Clear(); // thus, this line clears the original array Console.WriteLine(\"firstExample, after copy and clear: `firstExample`\"); var secondExample = Array[Integer]() { 7, 6, 5, 4, 3, 2, 1, 0 }; Console.WriteLine(\"secondExample, before copy and clear: `secondExample`\"); var properCopy = secondExample.Copy(); // the Copy method should be used to clone an array properCopy.Clear(); Console.WriteLine(\"secondExample, after copy and clear: `secondExample`\"); ```name=Console Window firstExample, before copy and clear: {0, 1, 2, 3, 4, 5, 6, 7} firstExample, after copy and clear: {} secondExample, before copy and clear: {7, 6, 5, 4, 3, 2, 1, 0} secondExample, after copy and clear: {7, 6, 5, 4, 3, 2, 1, 0} # Looping Over Arrays As arrays are ordered sequences of objects, they lend themselves naturally to use in [ loops](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown): in each loop iteration, the next element of the array can be accessed, modified, copied, etc. ## For Loops The most basic way to loop over an array is by using a [ for loop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown#for-loop). This takes advantage of the fact that an array contains its [ Count](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#count-plasma-engine-docume), or number of elements, as a property: ```lang=csharp, name=For Loop Example var numbers = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }; Console.WriteLine(\"Squares:\"); for (var i = 0; i < numbers.Count; ++i) { var currentNumber = numbers[i]; Console.WriteLine(currentNumber * currentNumber); } ```name=Console Window Squares: 0 1 4 9 16 25 36 49 64 81 ## For Each Loops Another way to iterate through an array is to use a [ foreach loop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown#for-each-loop): ```lang=csharp, name=For Each Loop Example var numbers = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }; Console.WriteLine(\"Cubes:\"); foreach (var number in numbers) { Console.WriteLine(number * number * number); } ```name=Console Window Cubes: 0 1 8 27 64 125 216 343 512 729 # Array Size A Lightning array keeps track of two different size-related properties: [ Count](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#count-plasma-engine-docume) and [ Capacity](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#capacity-plasma-engine-doc). When an array is initialized, it is allotted just enough memory to store the given number of elements. If an element is added when it doesn't have enough allocated space for another one, the array is automatically expanded so that it can fit more elements. An array's **Count** is the number of elements that have been added to it (or were placed there on initialization); its **Capacity** is the number of elements that could possibly fit in it before it needs to grow again: ```lang=csharp, name=Count and Capacity Example var array = Array[Integer](); for (var i = 0; i < 10; ++i) { Console.WriteLine(\"Count: `array.Count` | Capacity: `array.Capacity`\"); array.Add(i); } Console.WriteLine(\"Count: `array.Count` | Capacity: `array.Capacity`\"); ```name=Console Window Count: 0 | Capacity: 0 Count: 1 | Capacity: 2 Count: 2 | Capacity: 2 Count: 3 | Capacity: 3 Count: 4 | Capacity: 4 Count: 5 | Capacity: 6 Count: 6 | Capacity: 6 Count: 7 | Capacity: 9 Count: 8 | Capacity: 9 Count: 9 | Capacity: 9 Count: 10 | Capacity: 13 NOTE: If an element can be added to an array without it having to grow, it can be done very quickly, but expanding an array is potentially costly. In certain situations, such as a deeply nested loop, it may be beneficial to consider an array's Capacity before adding to it. Likewise, if the desired maximum size of an array is known ahead of time, space can be pre-allocated without adding any elements using the [ Reserve](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#reserve-void) method. # Sorting Arrays Lightning arrays may be sorted using the [ Sort](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown#sort-void) method. Sorting an array may put it in, say, increasing or decreasing order, in the case of an array of Integer or another numeric type, or in alphabetical order, in the case of a String array, or some other order via some more abstract or complex set of criteria. **Sort** sorts an array using the given comparison function. In many cases, this is something the user creates, though some types, such as [ String](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/string.markdown), provide static functions that can be used with the Sort method: ```lang=csharp, name=String Sorting Example var strings = Array[String](); strings.Add(\"hi\"); strings.Add(\"greetings\"); strings.Add(\"nice to see you\"); strings.Add(\"good morning\"); Console.WriteLine(strings); strings.Sort(String.Compare); // the Compare function is passed as a delegate Console.WriteLine(strings); ```name=Console Window {hi, greetings, nice to see you, good morning} {good morning, greetings, hi, nice to see you} A user-created array comparison function should take as arguments two objects of the type stored in the array. It should compare them in some relevant manner and return either a Boolean or an Integer that tells the Sort function what to do with the two array elements: the Boolean should be true if first item should be sorted before the second, and false otherwise; the Integer should be negative if the first item should be sorted before the second, and nonnegative otherwise. Consider these two classes: one defining some data for an adventurer and some static functions that can be used to sort an array of Adventurers, and another containing an array of Adventurers and a method that returns a string representation of that array: ```lang=csharp, name=Sorting Example Classes class Adventurer { var Name : String; var HP : Integer; var Height : Real; // in meters [Static] function CompareNames(a : Adventurer, b : Adventurer) : Integer { return String.Compare(a.Name, b.Name); } [Static] function CompareHPsAscending(a : Adventurer, b : Adventurer) : Integer { if (a.HP < b.HP) return -1; if (a.HP == b.HP) return 0; return 1; } [Static] function CompareHeightsAscending(a : Adventurer, b : Adventurer) : Integer { if (a.Height < b.Height) return -1; if (a.Height == b.Height) return 0; return 1; } [Static] function CompareNameLengthsThenAlpha(a : Adventurer, b : Adventurer) : Integer { var aNameLength = a.Name.ComputeRuneCount(); var bNameLength = b.Name.ComputeRuneCount(); if (aNameLength < bNameLength) return -1; if (aNameLength > bNameLength) return 1; return Adventurer.CompareNames(a, b); } } class Party { var Roster : Array[Adventurer] = Array[Adventurer](); function ToString() : String { var sb = StringBuilder(); sb.Write(\"{ \"); for (var i = 0; i < this.Roster.Count; ++i) { var member = this.Roster[i]; sb.Write(member.Name); if (i < this.Roster.LastIndex) sb.Write(\", \"); } sb.Write(\" }\"); return sb.ToString(); } } These classes can be used to illustrate how to sort objects of custom classes: ```lang=csharp, name=Custom Class Sorting Example var party = Party() { Roster = Array Adventurer { Adventurer() { Name = \"Trevor\", HP = 14, Height = 1.75 }, Adventurer() { Name = \"Nathan\", HP = 17, Height = 1.80 }, Adventurer() { Name = \"Joshua\", HP = 14, Height = 1.85 }, Adventurer() { Name = \"Josh\", HP = 17, Height = 1.68 }, Adventurer() { Name = \"Ryan\", HP = 25, Height = 1.83 }, Adventurer() { Name = \"Dane\", HP = 9, Height = 1.70 }, Adventurer() { Name = \"Andrea\", HP = 17, Height = 1.65 }, } }; Console.WriteLine(\"Default order: party.ToString() \"); party.Roster.Sort(Adventurer.CompareNames); Console.WriteLine(\"Alphabetical order: party.ToString() \"); party.Roster.Sort(Adventurer.CompareHPsAscending); Console.WriteLine(\"HP order, ascending: party.ToString() \"); party.Roster.Sort(Adventurer.CompareHeightsAscending); Console.WriteLine(\"Height order, ascending: party.ToString() \"); party.Roster.Sort(Adventurer.CompareNameLengthsThenAlpha); Console.WriteLine(\"Name lengths then alpha: party.ToString() \"); ```name=Console Window Default order: { Trevor, Nathan, Joshua, Josh, Ryan, Dane, Andrea } Alphabetical order: { Andrea, Dane, Josh, Joshua, Nathan, Ryan, Trevor } HP order, ascending: { Dane, Joshua, Trevor, Andrea, Josh, Nathan, Ryan } Height order, ascending: { Andrea, Josh, Dane, Trevor, Nathan, Ryan, Joshua } Name length then alpha: { Dane, Josh, Ryan, Andrea, Joshua, Nathan, Trevor } Note that the CompareNameLengthsThenAlpha function sorts Adventurers in ascending order of the lengths of their names, except where there is a tie, in which case it sorts in ascending alphabetical order instead. # Array Properties ## All All converts the array into an ArrayRange. In Lightning, Arrays can be implicitly cast to ArrayRanges, so it is typically not necessary to use this property. ## Count and Capacity Count and Capacity get the number of elements in the array, and its potential capacity to hold elements, respectively. They are discussed in detail above . ## LastIndex LastIndex gets the index of the last element in the array. It is always one less than Count (even when Count is 0). # Array Methods ## Add, Push, and Insert The Add method expands an array so that the given element is the last item in it. The Push method is identical to Add, and exists only for legacy purposes. The Insert method expands an array so that the given element is at the given index in it. All of these methods are discussed in detail above . ## Pop, RemoveAt, RemoveSwap, RemoveFirst, RemoveAll, and Clear The Pop method removes the last item from an array. The RemoveAt method removes from an array the element found at the given index. The RemoveSwap method removes from an array the element found at the given index and swaps the last item in the array to that newly-vacated index. The RemoveFirst method removes from an array the first element that matches the given object. The RemoveAll method removes from an array every element that matches the given object. The Clear method removes all the elements from an array. All of these methods are discussed in detail above . ## Copy The Copy method returns a new array that is a copy of the original. This method should be used to create a clone of an array that is to be modified separately without affecting the original. Because Array is a reference type, this cannot be done merely with the assignment operator, as shown above . ## FindFirstIndex The FindFirstIndex method returns the index of the first occurrence in an array of a given object. This method compares value types by comparing their data, and it compares reference types by comparing their handles. If the given object is not found, it returns -1 : ```lang=csharp, name=FindFirstIndex Example var valueType0 = Integer2(1, 2); // Integer2 is a value type var valueType1 = Integer2(valueType0); // valueType1 is a data-wise copy of valueType0 var arrayOfValueType = Array Integer2 { valueType0 }; Console.WriteLine(arrayOfValueType.FindFirstIndex(valueType1)); // valueType1 is found because its data is identical to valueType0 var referenceType0 = Array Integer { 0, 1, 1, 2, 3, 5, 8 }; // Array[Integer] is a reference type var referenceType1 = referenceType0.Copy(); // referenceType1 is a data-wise copy of referenceType0 var arrayOfReferenceType = Array Array[Integer] { referenceType0 }; Console.WriteLine(arrayOfReferenceType.FindFirstIndex(referenceType1)); // referenceType1 is not found because its handle is not found in the array ```name=Console Window 0 -1 ## Get and Set The Get method returns the array element at the given index. The Set method writes the given object to the given index. These methods are called when the indexing operator , [] , is used: ```lang=chsarp, name=Get Example var aStates = Array String { \"alabama\", \"nebraska\", \"arizona\", \"kansas\" }; Console.WriteLine(aStates.Get(0)); Console.WriteLine(aStates[2]); // this is reading, so Get is called aStates.Set(1, \"alaska\"); aStates[3] = \"arkansas\"; // this is writing, so Set is called Console.WriteLine(aStates); ```name=Console Window alabama arizona {alabama, alaska, arizona, arkansas} ## Range The Range method returns an ArrayRange containing the specified range of elements, beginning with the given start index and including the given element count: ```lang=csharp, name=Range Example var primes = Array Integer { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, }; // etc. var primeSubset = primes.Range(4, 5); foreach (var prime in primeSubset) { Console.WriteLine(prime); } ```name=Console Window 11 13 17 19 23 ## Resize and Reserve The Resize method resizes an array so that its new Count is the given value. If the given count value is greater than the array's old Count, then new elements are constructed and added to the end of the array. This method can take an optional default value parameter, which is used to set the value of these new elements; if this is not specified, then the type default for the type stored in the array will be used instead: ```lang=csharp, name=Resize Example 1 var iceCreamServings = Array String { \"cookies 'n cream\", \"pistachio\", \"neapolitan\", }; Console.WriteLine(iceCreamServings); iceCreamServings.Resize(5, \"vanilla\"); Console.WriteLine(iceCreamServings); iceCreamServings.Resize(6); Console.WriteLine(iceCreamServings); ```name=Console Window {cookies 'n cream, pistachio, neapolitan} {cookies 'n cream, pistachio, neapolitan, vanilla, vanilla} {cookies 'n cream, pistachio, neapolitan, vanilla, vanilla, (null) String} If the given count value is less than the array's old Count, then enough elements will be removed from the end of the array to bring its Count to the new value: ```lang=csharp, name=Resize Example 2 var cubes = Array Integer { 0, 1, 8, 27, 64, 125, 216, 343, 512, 729, }; Console.WriteLine(cubes); cubes.Resize(4); Console.WriteLine(cubes); ```name=Console Window {0, 1, 8, 27, 64, 125, 216, 343, 512, 729} {0, 1, 8, 27} As with all cases of changing an array's size, if Resize raises an array's Count past its Capacity, more space is allocated to accommodate its new size. Since this can affect performance in certain situations, it may be beneficial to change an array's Capacity before any resizing is done. The Reserve method sets an array's Capacity to the given value, allocating more space as necessary. ## Sort The Sort method sorts an array using the given comparison function. Typically, this is something the user provides, though some types, such as String , provide static functions that can be used with the Sort method. Array sorting is discussed in depth above . # Related Materials ## Manual Strings Classes and Structs Looping ## Code Reference Array Integer Real String","title":"Arrays"},{"location":"manual/plasmamanual/lightning_in_plasma/attributes/","text":"Attributes Attributes are part of the Lightning grammar allowing additional information to be associated with other Lightning constructs, i.e. they may be applied to classes, fields, get-sets, and functions. While some attributes are inherent to the Lightning programming language, the program embedding Lightning may create and assign their own meaning to new attributes as appropriate for their scripting needs. This means that some attributes exist in Lightning, the standalone language, while others are available in Lightning due to the extensions made by the Plasma Engine in which it is embedded. # Using Attributes In Lightning, attributes can be assigned by annotating the affected construct with a capitalized name of the recognized attribute in square brackets above the definition: ```lang=csharp, name=Assigning an Attribute to a Function [Virtual] // Here we've added the attribute \"Virtual\" to the function Speak function Speak() : String { return \"...\"; } # Existing Attributes The following are usable in the Plasma Engine: | Attribute | From | High Concept | |-----------------------------------------|-------|-------------------------------------------------------------| | `[Static]` | Lightning | Makes construct static | | `[Virtual]` | Lightning | Marks a construct as a polymorphic base | | `[Override]` | Lightning | Marks a construct as overriding a base construct | | `[Extension(typeid(OtherType))]` | Lightning | Appends construct to preexisting `OtherType` | | `[Display]` | Plasma | Allows construct to appear in Property Grid | | `[Serialize]` | Plasma | Allows construct value to be saved by Plasma | | `[Property]` | Plasma | Combines `[Display]` and `[Serialize]` | | `[Dependency]` | Plasma | Enables Plasma to enforce explicit dependencies | | `[RunInEditor]` | Plasma | Allows code to run in the editor | | `[Tool]` | Plasma | Can run in editor and accessible in Tools Window | | `[Command]` | Plasma | Can run in editor and accessible in Search Window | | `[ComponentInterface]` | Plasma | Defines a class as a generic interface for derived classes | ## [Static] Static can be used on function, fields, and get-sets. These allow you to access fields, get-sets, and functions without first creating an instance of the class in your code. ```lang=csharp, name=Defining a Static Variable and Function class Mathematics { [Static] var PI: Real{ get{return 3.14159292;}} [Static] function Circumference(radius : Real) : Real { return Mathematics.PI * radius * radius; } } Given the class above you can use its functionality by calling into the class's namespace: ``lang=csharp, name=Using Static Variable and Function var myNewFavoriteNumber = Mathematics.PI + Mathematics.Circumference(2.0); Console.WriteLine(My new favorite number is: myNewFavoriteNumber`\"); will result in ```name=ConsoleWindow My new favorite number is: 15.708 NOTE: While these attributes enable polymorphism, they are still in their infancy. Virtual is to be used with the base class field/get-set/function, while Override is for all the derived classes seeking to write over the base class's field/get-set/function. That said, mixing up [Virtual] and [Override] , or forgetting the use of the [Override] may still provide desired results. To promote forward compatibility, we highly encourage the correct, indicated usage. ## [Virtual] Virtual is used to give Base classes the ability to determine some functions as being able to be overridden by its derived classes. ```lang=csharp, name=Applying Virtual to a Function class Animal { [Virtual] function Speak() : String { return \"...\"; } } ## [Override] Override is used by a derived class to mark the intentional overriding of a base class's virtual function. ```lang=csharp, name=Applying Override to a Function class Dog : Animal { [Override] function Speak() : String { return \"Woof\"; } } ## [Extension(typeid(OtherType))] This allow you to add functionality to a preexisting class from inside another. Currently, you can only extend a class by adding get-sets and functions (i.e. you cannot add fields). If a function is being added to an existing class ( Math , for example), the [Static] attribute should also be used: ```lang=csharp, name=Applying Extension Attribute to a Function class MyClass : LightningComponent { [Extension(typeid(Math))][Static] function Circumference(radius : Real) : Real { return Mathematics.PI * radius * radius; } } Plasma works with Lightning to offer these additional attributes: ## [Display] Allows you to set a field or get-set via the Property Grid in the editor. Because this doesn't save the settings, it is usually used in conjunction with either `[RunInEditor]` or `[Serialize]` . For example, changing ```lang=csharp, name=Variable without Display Attribute class MyClass : LightningComponent { var MyVariable : Real; } to ```lang=csharp, name=Variable with Display Attribute [Editiable] var MyVariable : Real; results in the the variable appearing in the Property Grid in Properties window ## [Serialize] Allows a value to be saved by the Engine. This allows a field and get-sets to be saved with ObjectStore. When used with `[Display]` it allows the values to be saved from the Property Grid so that they may be loaded in an instance of the game. ## [Property] Property wraps the `[Display]` and `[Serialize]` attributes together into one. As implied by the use of `[Display]` and `[Serialize]`, it works on fields and get-sets. Properties of certain types will result in unique set fields in the Property Grid. For example, ```lang=csharp, name=Variables with Property Attribute class MyClass { [Property] var MyColor : Real4; [Property] var MyMaterial : Material; } ## [Dependency] Allows the programmer to make a dependency between components explicit. This allows users to determine the interrelatedness without having intimate knowledge of a component's inner workings. The Plasma Engine supports this by requiring dependencies to be added prior to attaching the component, preventing the removal of dependencies while the component is still attached, and safeguarding the order of initialization of components such that the dependencies will always be initialized first. The below sample demonstrates the declaration of a dependence upon another component: ```lang=csharp, name=Applying the Dependence Attribute on Another Component class SimpleOffset : LightningComponent { // Declaring that SimpleOffset depends upon Transform component. [Dependency] var Transform : Transform = null; function Initialize(init : CogInitializer) { // This declaration also physically adds that variable to our fields: // Since this.Transform contains the component we have a dependency // on, we can access it without going through the Owner. this.Transform.Translation += Real3(0,5,0); } } The `[Dependency]` attribute may also be used on get-sets. NOTE: **Did you know?** When working in the editor, the space the objects operate in is paused. This means that the `LogicUpdate` event will never fire, and that Actions on objects never get updated! In order to receive continuous events, the object should connect to `UpdateFrame` instead. ## [RunInEditor] When placed on a class derived from LightningComponent, it changes proxy objects into live objects upon being attached in the editor. This means that the object will run its code in the editor. When *any* scripting file is saved in the editor, all live objects (i.e. those with the RunInEditor component attached) will, by default, have their object destroyed, recreated, and its data reinitialized. IMPORTANT: Any code you choose to run via `[RunInEditor]` can result in editor instability. For instance, if you choose to loop through and destroy all the objects and save your game you may lose your ability to recover the lost objects, and have to recreate them by hand. Undo and Redo operations for RunInEditor components must be handled by the programmer! ## [Tool] Allows for a tool to be hooked into the Tools Window such that it shows up in the drop down menu, and can be used in the editor. When creating a new custom tool, a good starting point is generating the LightningScript with the Tool template chosen in the Add Window. ## [Command] Allows for a class to be hooked into the command system such that it shows up, and can be ran, from Plasma's Search Window. The following Paste provides a template for a custom Command that creates an object based on an archetype, allowing the user to make their own \"Create\" commands similar to `CreateCube` and `CreateSphere`: [Command(autoRegister:true)] class CreateArchetype : LightningComponent { // The archetype from which to create an object var ArchetypeToCreate : Archetype = Archetype.MyObject; // The position at which to create the object var Position : Real3 = Real3(0, 1, 0); function Initialize(init : CogInitializer) { Plasma.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { var selection = Plasma.Editor.Selection; selection.SelectOnly(this); selection.FinalSelectionChanged(); this.CreateObject(); } function CreateObject() { // Create the object in Editor space var editorSpace = Plasma.Editor.EditSpace; editorSpace.CreateAtPosition(this.ArchetypeToCreate, this.Position); } } ## [ComponentInterface] The ComponentInterface attribute allows the user to define a class as a generic interface for its derived types. One common example of this is [collider](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/collider.markdown), which acts as a component interface for all collider types, such as [boxcollider](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/boxcollider.markdown), [capsulecollider](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/capsulecollider.markdown), and more. Defining an interface using this attribute allows the user to access the members of a derived class using the component name of the base class. ```name=Component Interface Access Example, lang=csharp var collisionGroup = this.Owner.BoxCollider.CollisionGroup; var collisionGroupAccessedByInterface = this.Owner.Collider.CollisionGroup; if(collisionGroup == collisionGroupAccessedByInterface) Console.WriteLine(\"These variables reference the same component\"); Using a component interface does not mean that the property and methods of a derived class need to be exactly the same as the base class. What would be the point? Using the Virtual and Override attributes, we can modify the interface of derived classes. ```name=Component Interface Example, lang=csharp [ComponentInterface] class AnimationDebugNode : LightningComponent { [Virtual] var Node : AnimationNode; function Initialize(init : CogInitializer) { } } class SelectiveDebugNode : AnimationDebugNode { [Override] var Node : SelectiveNode; } class DirectBlendDebugNode : AnimationDebugNode { [Override] var Node : DirectBlend; } class CrossBlendDebugNode : AnimationDebugNode { [Override] var Node : CrossBlend; } # Parameters in Attributes Attributes can also take parameters; below is the template generated for creating a new Command by Plasma: ```lang=csharp [Command(autoRegister:true)] // This template file sets a parameter, autoRegister, to true. class MyNewCommand : LightningComponent { function Initialize(init : CogInitializer) { Plasma.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { Console.WriteLine(\"MyNewCommand Command Executed\"); } } At this time, only Extension, Tool, and Command attributes take parameters. Extension requires the type you are using to extend the attribute, as a parameter. Tool and Command have the optional parameter to automatically register the component with the engine. To manually register, you would add these components to an archetype and then add the Tool or Command editor tag via the Library Window, respectively. Registering manually gives you access to the archetype, making it possible to leverage component-based design in the construction of new Tools and Commands. # Related Materials ## Manual - inheritance - variables_and_data_types - wysiwyg","title":"Attributes"},{"location":"manual/plasmamanual/lightning_in_plasma/attributes/#attributes","text":"Attributes are part of the Lightning grammar allowing additional information to be associated with other Lightning constructs, i.e. they may be applied to classes, fields, get-sets, and functions. While some attributes are inherent to the Lightning programming language, the program embedding Lightning may create and assign their own meaning to new attributes as appropriate for their scripting needs. This means that some attributes exist in Lightning, the standalone language, while others are available in Lightning due to the extensions made by the Plasma Engine in which it is embedded. # Using Attributes In Lightning, attributes can be assigned by annotating the affected construct with a capitalized name of the recognized attribute in square brackets above the definition: ```lang=csharp, name=Assigning an Attribute to a Function [Virtual] // Here we've added the attribute \"Virtual\" to the function Speak function Speak() : String { return \"...\"; } # Existing Attributes The following are usable in the Plasma Engine: | Attribute | From | High Concept | |-----------------------------------------|-------|-------------------------------------------------------------| | `[Static]` | Lightning | Makes construct static | | `[Virtual]` | Lightning | Marks a construct as a polymorphic base | | `[Override]` | Lightning | Marks a construct as overriding a base construct | | `[Extension(typeid(OtherType))]` | Lightning | Appends construct to preexisting `OtherType` | | `[Display]` | Plasma | Allows construct to appear in Property Grid | | `[Serialize]` | Plasma | Allows construct value to be saved by Plasma | | `[Property]` | Plasma | Combines `[Display]` and `[Serialize]` | | `[Dependency]` | Plasma | Enables Plasma to enforce explicit dependencies | | `[RunInEditor]` | Plasma | Allows code to run in the editor | | `[Tool]` | Plasma | Can run in editor and accessible in Tools Window | | `[Command]` | Plasma | Can run in editor and accessible in Search Window | | `[ComponentInterface]` | Plasma | Defines a class as a generic interface for derived classes | ## [Static] Static can be used on function, fields, and get-sets. These allow you to access fields, get-sets, and functions without first creating an instance of the class in your code. ```lang=csharp, name=Defining a Static Variable and Function class Mathematics { [Static] var PI: Real{ get{return 3.14159292;}} [Static] function Circumference(radius : Real) : Real { return Mathematics.PI * radius * radius; } } Given the class above you can use its functionality by calling into the class's namespace: ``lang=csharp, name=Using Static Variable and Function var myNewFavoriteNumber = Mathematics.PI + Mathematics.Circumference(2.0); Console.WriteLine(My new favorite number is: myNewFavoriteNumber`\"); will result in ```name=ConsoleWindow My new favorite number is: 15.708 NOTE: While these attributes enable polymorphism, they are still in their infancy. Virtual is to be used with the base class field/get-set/function, while Override is for all the derived classes seeking to write over the base class's field/get-set/function. That said, mixing up [Virtual] and [Override] , or forgetting the use of the [Override] may still provide desired results. To promote forward compatibility, we highly encourage the correct, indicated usage. ## [Virtual] Virtual is used to give Base classes the ability to determine some functions as being able to be overridden by its derived classes. ```lang=csharp, name=Applying Virtual to a Function class Animal { [Virtual] function Speak() : String { return \"...\"; } } ## [Override] Override is used by a derived class to mark the intentional overriding of a base class's virtual function. ```lang=csharp, name=Applying Override to a Function class Dog : Animal { [Override] function Speak() : String { return \"Woof\"; } } ## [Extension(typeid(OtherType))] This allow you to add functionality to a preexisting class from inside another. Currently, you can only extend a class by adding get-sets and functions (i.e. you cannot add fields). If a function is being added to an existing class ( Math , for example), the [Static] attribute should also be used: ```lang=csharp, name=Applying Extension Attribute to a Function class MyClass : LightningComponent { [Extension(typeid(Math))][Static] function Circumference(radius : Real) : Real { return Mathematics.PI * radius * radius; } } Plasma works with Lightning to offer these additional attributes: ## [Display] Allows you to set a field or get-set via the Property Grid in the editor. Because this doesn't save the settings, it is usually used in conjunction with either `[RunInEditor]` or `[Serialize]` . For example, changing ```lang=csharp, name=Variable without Display Attribute class MyClass : LightningComponent { var MyVariable : Real; } to ```lang=csharp, name=Variable with Display Attribute [Editiable] var MyVariable : Real; results in the the variable appearing in the Property Grid in Properties window ## [Serialize] Allows a value to be saved by the Engine. This allows a field and get-sets to be saved with ObjectStore. When used with `[Display]` it allows the values to be saved from the Property Grid so that they may be loaded in an instance of the game. ## [Property] Property wraps the `[Display]` and `[Serialize]` attributes together into one. As implied by the use of `[Display]` and `[Serialize]`, it works on fields and get-sets. Properties of certain types will result in unique set fields in the Property Grid. For example, ```lang=csharp, name=Variables with Property Attribute class MyClass { [Property] var MyColor : Real4; [Property] var MyMaterial : Material; } ## [Dependency] Allows the programmer to make a dependency between components explicit. This allows users to determine the interrelatedness without having intimate knowledge of a component's inner workings. The Plasma Engine supports this by requiring dependencies to be added prior to attaching the component, preventing the removal of dependencies while the component is still attached, and safeguarding the order of initialization of components such that the dependencies will always be initialized first. The below sample demonstrates the declaration of a dependence upon another component: ```lang=csharp, name=Applying the Dependence Attribute on Another Component class SimpleOffset : LightningComponent { // Declaring that SimpleOffset depends upon Transform component. [Dependency] var Transform : Transform = null; function Initialize(init : CogInitializer) { // This declaration also physically adds that variable to our fields: // Since this.Transform contains the component we have a dependency // on, we can access it without going through the Owner. this.Transform.Translation += Real3(0,5,0); } } The `[Dependency]` attribute may also be used on get-sets. NOTE: **Did you know?** When working in the editor, the space the objects operate in is paused. This means that the `LogicUpdate` event will never fire, and that Actions on objects never get updated! In order to receive continuous events, the object should connect to `UpdateFrame` instead. ## [RunInEditor] When placed on a class derived from LightningComponent, it changes proxy objects into live objects upon being attached in the editor. This means that the object will run its code in the editor. When *any* scripting file is saved in the editor, all live objects (i.e. those with the RunInEditor component attached) will, by default, have their object destroyed, recreated, and its data reinitialized. IMPORTANT: Any code you choose to run via `[RunInEditor]` can result in editor instability. For instance, if you choose to loop through and destroy all the objects and save your game you may lose your ability to recover the lost objects, and have to recreate them by hand. Undo and Redo operations for RunInEditor components must be handled by the programmer! ## [Tool] Allows for a tool to be hooked into the Tools Window such that it shows up in the drop down menu, and can be used in the editor. When creating a new custom tool, a good starting point is generating the LightningScript with the Tool template chosen in the Add Window. ## [Command] Allows for a class to be hooked into the command system such that it shows up, and can be ran, from Plasma's Search Window. The following Paste provides a template for a custom Command that creates an object based on an archetype, allowing the user to make their own \"Create\" commands similar to `CreateCube` and `CreateSphere`: [Command(autoRegister:true)] class CreateArchetype : LightningComponent { // The archetype from which to create an object var ArchetypeToCreate : Archetype = Archetype.MyObject; // The position at which to create the object var Position : Real3 = Real3(0, 1, 0); function Initialize(init : CogInitializer) { Plasma.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { var selection = Plasma.Editor.Selection; selection.SelectOnly(this); selection.FinalSelectionChanged(); this.CreateObject(); } function CreateObject() { // Create the object in Editor space var editorSpace = Plasma.Editor.EditSpace; editorSpace.CreateAtPosition(this.ArchetypeToCreate, this.Position); } } ## [ComponentInterface] The ComponentInterface attribute allows the user to define a class as a generic interface for its derived types. One common example of this is [collider](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/collider.markdown), which acts as a component interface for all collider types, such as [boxcollider](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/boxcollider.markdown), [capsulecollider](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/capsulecollider.markdown), and more. Defining an interface using this attribute allows the user to access the members of a derived class using the component name of the base class. ```name=Component Interface Access Example, lang=csharp var collisionGroup = this.Owner.BoxCollider.CollisionGroup; var collisionGroupAccessedByInterface = this.Owner.Collider.CollisionGroup; if(collisionGroup == collisionGroupAccessedByInterface) Console.WriteLine(\"These variables reference the same component\"); Using a component interface does not mean that the property and methods of a derived class need to be exactly the same as the base class. What would be the point? Using the Virtual and Override attributes, we can modify the interface of derived classes. ```name=Component Interface Example, lang=csharp [ComponentInterface] class AnimationDebugNode : LightningComponent { [Virtual] var Node : AnimationNode; function Initialize(init : CogInitializer) { } } class SelectiveDebugNode : AnimationDebugNode { [Override] var Node : SelectiveNode; } class DirectBlendDebugNode : AnimationDebugNode { [Override] var Node : DirectBlend; } class CrossBlendDebugNode : AnimationDebugNode { [Override] var Node : CrossBlend; } # Parameters in Attributes Attributes can also take parameters; below is the template generated for creating a new Command by Plasma: ```lang=csharp [Command(autoRegister:true)] // This template file sets a parameter, autoRegister, to true. class MyNewCommand : LightningComponent { function Initialize(init : CogInitializer) { Plasma.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { Console.WriteLine(\"MyNewCommand Command Executed\"); } } At this time, only Extension, Tool, and Command attributes take parameters. Extension requires the type you are using to extend the attribute, as a parameter. Tool and Command have the optional parameter to automatically register the component with the engine. To manually register, you would add these components to an archetype and then add the Tool or Command editor tag via the Library Window, respectively. Registering manually gives you access to the archetype, making it possible to leverage component-based design in the construction of new Tools and Commands. # Related Materials ## Manual - inheritance - variables_and_data_types - wysiwyg","title":"Attributes"},{"location":"manual/plasmamanual/lightning_in_plasma/boolean_operators/","text":"Boolean Operators NOTE: It is highly suggested you read conditionals before this page, as the concepts of conditionals are used through out to demonstrate Boolean Operators. The boolean type has special operators that work with it. # The Negation Operator ! The ! operator, called the negation operator, is typically the simplest of the boolean operators as it changes the value of its operand to true if it was false , and changes the value to false if it was true . ``name=The ! Operator, lang=csharp var a = true; Console.WriteLine(\"a starts as a \"); a = !a; Console.WriteLine(\"a is negated and is now a \"); a = !a; Console.WriteLine(\"a is negated again and is now a` again\"); ```name=Console Output a starts as true a is negated and is now false a is negated again and is now true again # Comparison Operators All comparison operators take a left side and right side operand and evaluate to a boolean value. ## Equality == Often certain code should only run under specific conditions. The == operator, called the Equality operator, determines if the value of two operands are equalivalent and returns true or false . ```name=Equality Operator, lang = csharp var a = true; var b = true; var c = false; Console.WriteLine(\"a is equal to b: a == b \"); Console.WriteLine(\"a is equal to c: a == c \"); Console.WriteLine(\"b is equal to c: b == c \"); Console.WriteLine(\"a, b, and c are equal: a == b == c \"); ```name=Console Output a is equal to b: true a is equal to c: false b is equal to c: false a, b, and c are equal: false While the Equality operator is not exclusively used with booleans it does always result in a boolean value. |Equality | | == | | Left Operand | Right Operand | Result | | true | true | true | | true | false | false | | false | true | false | | false | false | true | ## Inequality != The != operator, called the inequality operator, is the logical inverse of the equality operator return true if the operands are not the equal and false if they are. ```name=Inequality Operator, lang = csharp var a = true; var b = true; var c = false; Console.WriteLine(\"a is not equal to b: a != b \"); Console.WriteLine(\"a is not equal to c: a != c \"); Console.WriteLine(\"b is not equal to c: b != c \"); Console.WriteLine(\"a, b, and c are not equal: a != b != c \"); ```name=Console Output a is not equal to b: false a is not equal to c: true b is not equal to c: true a, b, and c are not equal: false Notice that a != b != c results in false. This is because == and != are evaluated left to right. So first a != b returns false as both variables have a value of true . Because a != b evaluates to false and c has a value of false a != b != c is reduced to false != c . The reduced form evaluates to false since both operands have a value of false . |Inequality | | != | | Left Operand | Right Operand | Result | | true | true | false | | true | false | true | | false | true | false | | false | false | false | ## Less Than & Greater Than < & > The < and > operators, called the less or greater then operators respectively, evaluate if one operand has a smaller/larger value than the other. ```name=Less/Greater Than, lang = csharp var i = 0; var j = 1; var k = 0; Console.WriteLine(\"i is less than j: i < j \"); Console.WriteLine(\"i is less than k: i < k \"); Console.WriteLine(\"j is less than k: j < k \"); Console.WriteLine(\"i is greater than j: i > j \"); Console.WriteLine(\"i is greater than k: i > k \"); Console.WriteLine(\"j is greater than k: j > k \"); ```name=Console Output i is less than j: true i is less than k: false j is less than k: false i is greater than j: false i is greater than k: false j is greater than k: true Notice that i is not less or greater than k as 0 is not less or greater than 0 . ## Less Than or Equal & Greater Than or Equal ( <= & >= ) The <= and >= , called the less than or equal to and greater than or equal to operators, determine if the value of the left operand is lesser than, greater than, or equal to the right operand. ```name=Less/Greater Than, lang = csharp var i = 0; var j = 1; var k = 0; Console.WriteLine(\"i is less or equal to than j: i <= j \"); Console.WriteLine(\"i is less or equal to than k: i <= k \"); Console.WriteLine(\"j is less or equal to than k: j <= k \"); Console.WriteLine(\"i is greater than or equal to j: i >= j \"); Console.WriteLine(\"i is greater than or equal to k: i >= k \"); Console.WriteLine(\"j is greater than or equal to k: j >= k \"); ```name=Console Output i is less than or equal to j: true i is less than or equal to k: true j is less than or equal to k: false i is greater than or equal to j: false i is greater than or equal to k: true j is greater than or equal to k: true # Logical Operators Logical operators take a left and a right side areguement, both of which must evaluate to boolean values, and evaluates them returning another boolean value. # and && The && operator, called the and operator, takes two boolean values and evaluates them, returning true only if both operands evaluate to true. This can be very useful as often one may find that a condition in script may depend on two seperate factors. ```name=Nested if, lang = csharp var i = true; var j = false; if(i) { if(j) { Console.WriteLine(\"Both i and j are true\"); } else { Console.WriteLine(\"Inner Else: Either i or j is false\"); } } else { Console.WriteLine(\"Outer Else: Either i or j is false\"); } ```name=Console Output Inner Else: Either i or j is false This can be simplified using the && operator to evaluate both i and j within the same if statement. ```name=&&, lang = csharp var i = true; var j = false; if(i && j) { Console.WriteLine(\"Both i and j are true\"); } else { Console.WriteLine(\"Either i or j is false\"); } ```name=Console Output Either i or j is false The nested if version of the above code does allow information about whether it is i or j which is false to be gathered, but in many cases the which doesn't matter, just that one of them is false is enough. |And | | && | | Left Operand | Right Operand | Result | | true | true | true | | true | false | false | | false | true | false | | false | false | false | (NOTE) Short Circuiting the Right Side Operand : Since logical and is an operator which is resolved left to right is can always be assumed that the left operand will be evaluated to either true or false before the righthand operand is evaluated at all. This is important as if the first operand does not evaluate to true the operator will immeidiately evaluate to false short circuiting the right side an causing it to not resolve and evaluate the expression of the right side operand at all. A good usage example is when checking object validity before accessing members such as components. # or || The || operator, called the or operator, takes two boolean values and evaluates them, returning true if either operands evaluates to true. ```name=||, lang = csharp var i = true; var j = false; if(i || j) { Console.WriteLine(\"Either i or j is true\"); } else { Console.WriteLine(\"Neither i or j is true\"); } ```name=Console Output Either i or j is true |And | | || | | Left Operand | Right Operand | Result | | true | true | true | | true | false | true | | false | true | true | | false | false | false | # Related Materials ## Manual - conditionals ## Code Reference - boolean","title":"Boolean Operators"},{"location":"manual/plasmamanual/lightning_in_plasma/boolean_operators/#boolean-operators","text":"NOTE: It is highly suggested you read conditionals before this page, as the concepts of conditionals are used through out to demonstrate Boolean Operators. The boolean type has special operators that work with it. # The Negation Operator ! The ! operator, called the negation operator, is typically the simplest of the boolean operators as it changes the value of its operand to true if it was false , and changes the value to false if it was true . ``name=The ! Operator, lang=csharp var a = true; Console.WriteLine(\"a starts as a \"); a = !a; Console.WriteLine(\"a is negated and is now a \"); a = !a; Console.WriteLine(\"a is negated again and is now a` again\"); ```name=Console Output a starts as true a is negated and is now false a is negated again and is now true again # Comparison Operators All comparison operators take a left side and right side operand and evaluate to a boolean value. ## Equality == Often certain code should only run under specific conditions. The == operator, called the Equality operator, determines if the value of two operands are equalivalent and returns true or false . ```name=Equality Operator, lang = csharp var a = true; var b = true; var c = false; Console.WriteLine(\"a is equal to b: a == b \"); Console.WriteLine(\"a is equal to c: a == c \"); Console.WriteLine(\"b is equal to c: b == c \"); Console.WriteLine(\"a, b, and c are equal: a == b == c \"); ```name=Console Output a is equal to b: true a is equal to c: false b is equal to c: false a, b, and c are equal: false While the Equality operator is not exclusively used with booleans it does always result in a boolean value. |Equality | | == | | Left Operand | Right Operand | Result | | true | true | true | | true | false | false | | false | true | false | | false | false | true | ## Inequality != The != operator, called the inequality operator, is the logical inverse of the equality operator return true if the operands are not the equal and false if they are. ```name=Inequality Operator, lang = csharp var a = true; var b = true; var c = false; Console.WriteLine(\"a is not equal to b: a != b \"); Console.WriteLine(\"a is not equal to c: a != c \"); Console.WriteLine(\"b is not equal to c: b != c \"); Console.WriteLine(\"a, b, and c are not equal: a != b != c \"); ```name=Console Output a is not equal to b: false a is not equal to c: true b is not equal to c: true a, b, and c are not equal: false Notice that a != b != c results in false. This is because == and != are evaluated left to right. So first a != b returns false as both variables have a value of true . Because a != b evaluates to false and c has a value of false a != b != c is reduced to false != c . The reduced form evaluates to false since both operands have a value of false . |Inequality | | != | | Left Operand | Right Operand | Result | | true | true | false | | true | false | true | | false | true | false | | false | false | false | ## Less Than & Greater Than < & > The < and > operators, called the less or greater then operators respectively, evaluate if one operand has a smaller/larger value than the other. ```name=Less/Greater Than, lang = csharp var i = 0; var j = 1; var k = 0; Console.WriteLine(\"i is less than j: i < j \"); Console.WriteLine(\"i is less than k: i < k \"); Console.WriteLine(\"j is less than k: j < k \"); Console.WriteLine(\"i is greater than j: i > j \"); Console.WriteLine(\"i is greater than k: i > k \"); Console.WriteLine(\"j is greater than k: j > k \"); ```name=Console Output i is less than j: true i is less than k: false j is less than k: false i is greater than j: false i is greater than k: false j is greater than k: true Notice that i is not less or greater than k as 0 is not less or greater than 0 . ## Less Than or Equal & Greater Than or Equal ( <= & >= ) The <= and >= , called the less than or equal to and greater than or equal to operators, determine if the value of the left operand is lesser than, greater than, or equal to the right operand. ```name=Less/Greater Than, lang = csharp var i = 0; var j = 1; var k = 0; Console.WriteLine(\"i is less or equal to than j: i <= j \"); Console.WriteLine(\"i is less or equal to than k: i <= k \"); Console.WriteLine(\"j is less or equal to than k: j <= k \"); Console.WriteLine(\"i is greater than or equal to j: i >= j \"); Console.WriteLine(\"i is greater than or equal to k: i >= k \"); Console.WriteLine(\"j is greater than or equal to k: j >= k \"); ```name=Console Output i is less than or equal to j: true i is less than or equal to k: true j is less than or equal to k: false i is greater than or equal to j: false i is greater than or equal to k: true j is greater than or equal to k: true # Logical Operators Logical operators take a left and a right side areguement, both of which must evaluate to boolean values, and evaluates them returning another boolean value. # and && The && operator, called the and operator, takes two boolean values and evaluates them, returning true only if both operands evaluate to true. This can be very useful as often one may find that a condition in script may depend on two seperate factors. ```name=Nested if, lang = csharp var i = true; var j = false; if(i) { if(j) { Console.WriteLine(\"Both i and j are true\"); } else { Console.WriteLine(\"Inner Else: Either i or j is false\"); } } else { Console.WriteLine(\"Outer Else: Either i or j is false\"); } ```name=Console Output Inner Else: Either i or j is false This can be simplified using the && operator to evaluate both i and j within the same if statement. ```name=&&, lang = csharp var i = true; var j = false; if(i && j) { Console.WriteLine(\"Both i and j are true\"); } else { Console.WriteLine(\"Either i or j is false\"); } ```name=Console Output Either i or j is false The nested if version of the above code does allow information about whether it is i or j which is false to be gathered, but in many cases the which doesn't matter, just that one of them is false is enough. |And | | && | | Left Operand | Right Operand | Result | | true | true | true | | true | false | false | | false | true | false | | false | false | false | (NOTE) Short Circuiting the Right Side Operand : Since logical and is an operator which is resolved left to right is can always be assumed that the left operand will be evaluated to either true or false before the righthand operand is evaluated at all. This is important as if the first operand does not evaluate to true the operator will immeidiately evaluate to false short circuiting the right side an causing it to not resolve and evaluate the expression of the right side operand at all. A good usage example is when checking object validity before accessing members such as components. # or || The || operator, called the or operator, takes two boolean values and evaluates them, returning true if either operands evaluates to true. ```name=||, lang = csharp var i = true; var j = false; if(i || j) { Console.WriteLine(\"Either i or j is true\"); } else { Console.WriteLine(\"Neither i or j is true\"); } ```name=Console Output Either i or j is true |And | | || | | Left Operand | Right Operand | Result | | true | true | true | | true | false | true | | false | true | true | | false | false | false | # Related Materials ## Manual - conditionals ## Code Reference - boolean","title":"Boolean Operators"},{"location":"manual/plasmamanual/lightning_in_plasma/casting/","text":"Casting Fundamentally, casting is converting from one type to another. As demonstrated in the code snippet below, a Function that takes a grade and returns pass/fail can be thought of as a conversion from a real to a boolean . ```lang=csharp, name=Conversion Function function IsPassing(grade : Real) : Boolean { if(grade >= 70) return true; else return false; } The logic of that particular conversion is defined as a function and intended for a specific situation, but *cast operations* are more general-case and defined by Lightning. # Implicit and Explicit There are two types of casting, implicit and explicit. Implicit casting occurs during the assignment of a variable of one type, with a value of a *different* type. Implicit casting is a mechanism that Lightning uses when a [Variable](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/variables_and_data_types.markdown) of one type is set to data of another type. Explicit casting is a mechanic used by the user with the `as` keyword. Any cast that can happen implicitly can be done explicitly. WARNING: Even with explicit casting, there are still *cast operations* that are invalid and will trigger compile-time exceptions. ```lang=csharp, name=Casting Implicitly and Explicitly var myReal : Real = 1.0; var myDoubleReal : DoubleReal = myReal; // implicit casting var myInteger : Integer = myReal as Integer; // explicit casting In the example above, myDoubleReal is being set to myReal , which invokes an implicit cast from real to doublereal . When myReal as Integer is evaluated, explicit casting is invoked to convert a real to an integer . The format for explicit casting is <value> as <new type> . NOTE: Explicit casting should only be used when one is aware of all of the nuances of the cast. # Casting Between Numeric and Boolean Types The following base data types are considerered Numeric and Boolean: | integer | | doubleinteger | | real | | doublereal | | boolean | All cast operations using only these types are valid, meaning either explicit or implicit. The code snippit below demonstates implicit casting between numeric types. ```lang=csharp, name=Implicit Numeric Casts var myInteger : Integer = 1; var myDoubleInteger : DoubleInteger = myInteger; var myReal : Real = myInteger; var myDoubleReal1 : DoubleReal = myInteger; var myDoubleReal2 : DoubleReal = myDoubleInteger; var myDoubleReal3 : DoubleReal = myReal; Notice that implicit casting is allowed when converting to a numeric set, from a smaller data size to a larger one. The value of `myInteger` can be implicitly casted to a [doubleinteger](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/doubleinteger.markdown), which holds twice the number of bits as an [integer](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown). The value of `myInteger` can also be implicitly casted to a [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown). Real values can hold whole numbers and a decimal portion, whereas integers can only be whole numbers. (NOTE)**From a Mathematics Perspective** The integer set is a subset of the real set. For more information on mathematical sets, visit the [Wikipedia Set (Mathematics)](https://en.wikipedia.org/wiki/Set_(mathematics)) page. ## Truncation When a real value is converted to an integer value explicitly, the value will be truncated. This means the decimal part of the real value will be lost, and without rounding. ```lang=csharp, name=Implicit Numeric Casts Console.WriteLine(1.1 as Integer); Console.WriteLine(2.99 as Integer); Console.WriteLine(-3.99 as Integer); ```name=Console Window 1 2 -3 # Upcasting and Downcasting When casting between classes related through [inheritance](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/inheritance.markdown), one class must be a base class of the other. ```lang=csharp, name=Classes with Inheritance class A {} class B : A {} class C : B {} The code snippet below uses the Classes with Inheritance snippet. ```lang=csharp, name=Upcasting and Downcasting var a : A = A(); var b : B = B(); var c : C = C(); // implicit var ba : A = b; var ca : A = c; var cb : B = c; // explicit var ab : B = a as B; var ac : C = a as C; var bc : C = b as C; Notice how all the implicit casts involve converting from a derived class to a base class. This is known as **upcasting**. **Downcasting** involves taking a base class and casting it to a derived class, which must be done explicitly. **Downcasting** is also a type of dynamic casting, which is validated at runtime. Observe that the objects `a`, `b`, and `c` are all references being casted, and not values. If a base class reference is downcasted to a derived class reference and the value referenced is of the base class type, then the cast failed at runtime. A *failed dynamic cast* will result in the value `null`. The code snippet below uses the `Classes with Inheritance` snippet. ```lang=csharp, name=Dynamic Casting var a_ref_b : A = B(); // upcast invoked implicitly var b_ref_a : B = A() as B; // downcast invoked explicitly var b_ref_b : B = a_ref_b as B; // downcast invoked explicitly Console.WriteLine(a_ref_b == null); Console.WriteLine(b_ref_a == null); Console.WriteLine(b_ref_b == null); ```name=Console Window false true false `a_ref_b` is a reference of type `A` to a value of type `B`, which uses an implicit **upcast**. `b_ref_a` is a reference of type `B` to a value of type `A`, which uses an explicit **downcast**. Notice how `b_ref_a` has the value `null` at runtime, the result of a //failed dynamic cast//. On the other hand, `a_ref_b` is successfully cast since it has a value of type `B`. # Null Casts The value `null` can be cast to any reference type implicitly. The code snippet below uses the `Classes with Inheritance` snippet. ```lang=csharp, name=Null Casting var a1 : A = null; // implicit cast var a2 : A = null as A; // explicit cast (unnecessary) NOTE: Interpreting null as an invalid state for object references is a common pattern in programming. # Any Casts Any type can be cast implicitly to an any , and an any value can be implicitly cast to any type. The any type is used as a generic reference to any instantiated class or struct. ```lang=csharp, name=Any Casting var integerOne : any = 1; var myInteger : Integer = integerOne; // any cast var myReal : Real = integerOne; // runtime exception Notice how the attempt to cast `integerOne`, which is an [any](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/any.markdown), to a [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown) results in a runtime exception. An [any](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/any.markdown) must first be cast to the type of the value it holds, even before other implicit conversions. # Same Casts Same casts are casts that convert a value of one type to the same type. All same casts can be done implicitly and are unnecessary. ```lang=csharp, name=Same Casting var myReal : Real = 1.0; // implicit same cast var myInteger : Integer = 1 as Integer; // explicit same cast # Related Materials ## Manual - Function - Variable - inheritance ## Code Reference - integer - doubleinteger - real - doublereal - boolean - any","title":"Casting"},{"location":"manual/plasmamanual/lightning_in_plasma/casting/#casting","text":"Fundamentally, casting is converting from one type to another. As demonstrated in the code snippet below, a Function that takes a grade and returns pass/fail can be thought of as a conversion from a real to a boolean . ```lang=csharp, name=Conversion Function function IsPassing(grade : Real) : Boolean { if(grade >= 70) return true; else return false; } The logic of that particular conversion is defined as a function and intended for a specific situation, but *cast operations* are more general-case and defined by Lightning. # Implicit and Explicit There are two types of casting, implicit and explicit. Implicit casting occurs during the assignment of a variable of one type, with a value of a *different* type. Implicit casting is a mechanism that Lightning uses when a [Variable](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/variables_and_data_types.markdown) of one type is set to data of another type. Explicit casting is a mechanic used by the user with the `as` keyword. Any cast that can happen implicitly can be done explicitly. WARNING: Even with explicit casting, there are still *cast operations* that are invalid and will trigger compile-time exceptions. ```lang=csharp, name=Casting Implicitly and Explicitly var myReal : Real = 1.0; var myDoubleReal : DoubleReal = myReal; // implicit casting var myInteger : Integer = myReal as Integer; // explicit casting In the example above, myDoubleReal is being set to myReal , which invokes an implicit cast from real to doublereal . When myReal as Integer is evaluated, explicit casting is invoked to convert a real to an integer . The format for explicit casting is <value> as <new type> . NOTE: Explicit casting should only be used when one is aware of all of the nuances of the cast. # Casting Between Numeric and Boolean Types The following base data types are considerered Numeric and Boolean: | integer | | doubleinteger | | real | | doublereal | | boolean | All cast operations using only these types are valid, meaning either explicit or implicit. The code snippit below demonstates implicit casting between numeric types. ```lang=csharp, name=Implicit Numeric Casts var myInteger : Integer = 1; var myDoubleInteger : DoubleInteger = myInteger; var myReal : Real = myInteger; var myDoubleReal1 : DoubleReal = myInteger; var myDoubleReal2 : DoubleReal = myDoubleInteger; var myDoubleReal3 : DoubleReal = myReal; Notice that implicit casting is allowed when converting to a numeric set, from a smaller data size to a larger one. The value of `myInteger` can be implicitly casted to a [doubleinteger](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/doubleinteger.markdown), which holds twice the number of bits as an [integer](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown). The value of `myInteger` can also be implicitly casted to a [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown). Real values can hold whole numbers and a decimal portion, whereas integers can only be whole numbers. (NOTE)**From a Mathematics Perspective** The integer set is a subset of the real set. For more information on mathematical sets, visit the [Wikipedia Set (Mathematics)](https://en.wikipedia.org/wiki/Set_(mathematics)) page. ## Truncation When a real value is converted to an integer value explicitly, the value will be truncated. This means the decimal part of the real value will be lost, and without rounding. ```lang=csharp, name=Implicit Numeric Casts Console.WriteLine(1.1 as Integer); Console.WriteLine(2.99 as Integer); Console.WriteLine(-3.99 as Integer); ```name=Console Window 1 2 -3 # Upcasting and Downcasting When casting between classes related through [inheritance](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/inheritance.markdown), one class must be a base class of the other. ```lang=csharp, name=Classes with Inheritance class A {} class B : A {} class C : B {} The code snippet below uses the Classes with Inheritance snippet. ```lang=csharp, name=Upcasting and Downcasting var a : A = A(); var b : B = B(); var c : C = C(); // implicit var ba : A = b; var ca : A = c; var cb : B = c; // explicit var ab : B = a as B; var ac : C = a as C; var bc : C = b as C; Notice how all the implicit casts involve converting from a derived class to a base class. This is known as **upcasting**. **Downcasting** involves taking a base class and casting it to a derived class, which must be done explicitly. **Downcasting** is also a type of dynamic casting, which is validated at runtime. Observe that the objects `a`, `b`, and `c` are all references being casted, and not values. If a base class reference is downcasted to a derived class reference and the value referenced is of the base class type, then the cast failed at runtime. A *failed dynamic cast* will result in the value `null`. The code snippet below uses the `Classes with Inheritance` snippet. ```lang=csharp, name=Dynamic Casting var a_ref_b : A = B(); // upcast invoked implicitly var b_ref_a : B = A() as B; // downcast invoked explicitly var b_ref_b : B = a_ref_b as B; // downcast invoked explicitly Console.WriteLine(a_ref_b == null); Console.WriteLine(b_ref_a == null); Console.WriteLine(b_ref_b == null); ```name=Console Window false true false `a_ref_b` is a reference of type `A` to a value of type `B`, which uses an implicit **upcast**. `b_ref_a` is a reference of type `B` to a value of type `A`, which uses an explicit **downcast**. Notice how `b_ref_a` has the value `null` at runtime, the result of a //failed dynamic cast//. On the other hand, `a_ref_b` is successfully cast since it has a value of type `B`. # Null Casts The value `null` can be cast to any reference type implicitly. The code snippet below uses the `Classes with Inheritance` snippet. ```lang=csharp, name=Null Casting var a1 : A = null; // implicit cast var a2 : A = null as A; // explicit cast (unnecessary) NOTE: Interpreting null as an invalid state for object references is a common pattern in programming. # Any Casts Any type can be cast implicitly to an any , and an any value can be implicitly cast to any type. The any type is used as a generic reference to any instantiated class or struct. ```lang=csharp, name=Any Casting var integerOne : any = 1; var myInteger : Integer = integerOne; // any cast var myReal : Real = integerOne; // runtime exception Notice how the attempt to cast `integerOne`, which is an [any](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/any.markdown), to a [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown) results in a runtime exception. An [any](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/any.markdown) must first be cast to the type of the value it holds, even before other implicit conversions. # Same Casts Same casts are casts that convert a value of one type to the same type. All same casts can be done implicitly and are unnecessary. ```lang=csharp, name=Same Casting var myReal : Real = 1.0; // implicit same cast var myInteger : Integer = 1 as Integer; // explicit same cast # Related Materials ## Manual - Function - Variable - inheritance ## Code Reference - integer - doubleinteger - real - doublereal - boolean - any","title":"Casting"},{"location":"manual/plasmamanual/lightning_in_plasma/classes/","text":"Classes Classes and structs define the type of certain objects in Lightning, and the class keyword can create user-defined data types. The Variables and Functions defined in a class or struct are all stored and referenced from instantiations. In contrast with how Structs handle Memory Management , classes are copied by-reference . # Class Contents Classes in Lightning must be defined in global scope . The format for classes and structs are as shown below: ```lang=csharp, name=Simple Classes struct SimpleStruct {} class SimpleClass {} Any members that belong to `SimpleStruct` or `SimpleClass` will be defined within their curly braces. ## Struct Members in Classes Because structs are copied `by-value`, structs cannot have class members. As shown in the code snippet below, any other permutation of containment is valid. ```lang=csharp, name=Classes and Structs in Classes and Structs struct StructInStruct { var MyStruct : SimpleStruct; } struct ClassInStruct { var MyClass : SimpleClass; } // ERROR class StructInClass { var MyStruct : SimpleStruct; } class ClassInClass { var MyClass : SimpleClass; } The class MyClass is a member of ClassInStruct , which is a struct. Having a class in a struct will cause Lightning to throw a compile-time exception. ## Static vs Non-Static Members Variables and functions inside a class or struct are known as members. Most member variables must be accessed through instantiations of the object. The one exception are member variables with the Static Attribute . ```lang=csharp, name=Static Members class MyClass { // standard variable instantiation and initialization var MyReal : Real = 0; // static variable [Static] var MyStaticBoolean : Boolean = false; // static function [Static] function MyStaticFunction() {} } Accessing static members can be done with `MyVariableClass.MyStaticReal` or `MyVariableClass.MyStaticFunction`, while `MyVariableClass().MyReal` is a way of accessing a non-static member. ## Member Variable Declaration Member variables define the data in a class. The rules for defining member variables differ from how local variables are defined. ```lang=csharp, name=Member Variables class MyClass { // variable instantiation only is allowed var MyDoubleReal : DoubleReal; // ERROR: type deduction not allowed on member variables var MyBoolean = false; } Notice how MyDoubleReal isn't initialized. At the class scope, uninitialized member variables will be set to the default values of their types. Also note that member variables must be explicitly typed. MyBoolean is set to false , but Lightning will still throw a compiler error if the type is omitted. ## Member Functions Member functions hold executable code, can take input parameters, and can return data. Member functions without the [Static] attribute also have access to the instantiated object that invoked them. ```lang=csharp, name=Member Functions class MyClass { var MyReal : Real = 1.2; function MyFunc() { var localReal = this.MyReal; } [Static] function MyFunc() { var localReal = this.MyReal; // ERROR } } Notice how `MyReal`, a member variable of `MyClass`, is accessed in `MyFunc` using the `this` keyword. `this` refers to the instantiated object. If the function is static, then `this` cannot be used as there is no instantiation of `MyClass`. Also notice how there are two versions of `MyFunc`, one static and one not. This is valid because static members must always be accessed through the class with the format `<class>.<function>`. ## Constructors and Destructors Structs/Classes can have constructor and destructors, which are special functions with no return type. Constructors are called when an object is instantiated, and the destructor is called when the object is deleted. ```lang=csharp, name=Default Constructor class ExplicitDefault { constructor() {} } class ImplicitDefault {} class Driver { function MyFunction() { ExplicitDefault(); // call default constructor ImplicitDefault(); // call default constructor (implicitly defined) } } The class ExplicitDefault has a single constructor that takes no parameters. This constructors type is known as the //default constructor//. Notice how the constructor is called by the class name in the statement ExplicitDefault(); Also notice how ImplicitDefault is constructed with the default constructor in the statement ImplicitDefault(); . As long as there are no constructors defined, the default will always be defined by lightning. ```lang=csharp, name=Custom Constructors class ExplicitCustom { constructor(r : Real) {} } class ExplicitCustomAndDefault { constructor() {} constructor(r : Real) {} } class Driver { function MyFunction() { ExplicitCustom(); // ERROR ExplicitCustom(1.0); ExplicitCustomAndDefault(); ExplicitCustomAndDefault(1.0); } } The class `ExplicitCustom` defines a single constructor that takes a single [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown). This means that `ExplicitCustom` cannot be default constructed, therefore the statement `ExplicitCustom();` fails to compile. The default constructor can still be readded by explicitly defining it alongside other constructors, as shown in the class `ExplicitCustomAndDefault`. NOTE: Explcitly defining a constructor is **not required** in Lightning as long as every data member of the class has a default constructor. Destructors are called when all handles to an object are destroyed. The exception is when an object is not a copy by reference type, in which case the destructor isn't called. ```lang=csharp, name=Destructors struct MyStruct { var Id : Integer; constructor(id : Integer) { this.Id = id; } destructor() { Console.WriteLine(this.Id); } } class MyClass : MyStruct {} class Driver2 { [Static] function MyFunction() { var v1 = MyStruct(1); var v2 = local MyStruct(2); var v3 = new MyStruct(3); var v4 = MyClass(4); var v5 = new MyClass(5); } // end of the scope, all unreferenced objects are destroyed } name=Console window 3 4 5 In the example above, MyClass inherits from MyStruct . MyClass has the same members as MyStruct , and the only difference between the two is that MyClass is a class . Observe how 3 , 4 , and 5 are printed, which means that the destructor got called on v3 , v4 , and v5 . All struct destructors were ignored, while all class destructors were called. The one exception is v3 , which is of the type ref MyStruct and has the copy by-reference quality. # Related Materials ## Manual - Variables - Functions - memory_management - attributes - inheritance - Static ## Code Reference - real","title":"Classes"},{"location":"manual/plasmamanual/lightning_in_plasma/classes/#classes","text":"Classes and structs define the type of certain objects in Lightning, and the class keyword can create user-defined data types. The Variables and Functions defined in a class or struct are all stored and referenced from instantiations. In contrast with how Structs handle Memory Management , classes are copied by-reference . # Class Contents Classes in Lightning must be defined in global scope . The format for classes and structs are as shown below: ```lang=csharp, name=Simple Classes struct SimpleStruct {} class SimpleClass {} Any members that belong to `SimpleStruct` or `SimpleClass` will be defined within their curly braces. ## Struct Members in Classes Because structs are copied `by-value`, structs cannot have class members. As shown in the code snippet below, any other permutation of containment is valid. ```lang=csharp, name=Classes and Structs in Classes and Structs struct StructInStruct { var MyStruct : SimpleStruct; } struct ClassInStruct { var MyClass : SimpleClass; } // ERROR class StructInClass { var MyStruct : SimpleStruct; } class ClassInClass { var MyClass : SimpleClass; } The class MyClass is a member of ClassInStruct , which is a struct. Having a class in a struct will cause Lightning to throw a compile-time exception. ## Static vs Non-Static Members Variables and functions inside a class or struct are known as members. Most member variables must be accessed through instantiations of the object. The one exception are member variables with the Static Attribute . ```lang=csharp, name=Static Members class MyClass { // standard variable instantiation and initialization var MyReal : Real = 0; // static variable [Static] var MyStaticBoolean : Boolean = false; // static function [Static] function MyStaticFunction() {} } Accessing static members can be done with `MyVariableClass.MyStaticReal` or `MyVariableClass.MyStaticFunction`, while `MyVariableClass().MyReal` is a way of accessing a non-static member. ## Member Variable Declaration Member variables define the data in a class. The rules for defining member variables differ from how local variables are defined. ```lang=csharp, name=Member Variables class MyClass { // variable instantiation only is allowed var MyDoubleReal : DoubleReal; // ERROR: type deduction not allowed on member variables var MyBoolean = false; } Notice how MyDoubleReal isn't initialized. At the class scope, uninitialized member variables will be set to the default values of their types. Also note that member variables must be explicitly typed. MyBoolean is set to false , but Lightning will still throw a compiler error if the type is omitted. ## Member Functions Member functions hold executable code, can take input parameters, and can return data. Member functions without the [Static] attribute also have access to the instantiated object that invoked them. ```lang=csharp, name=Member Functions class MyClass { var MyReal : Real = 1.2; function MyFunc() { var localReal = this.MyReal; } [Static] function MyFunc() { var localReal = this.MyReal; // ERROR } } Notice how `MyReal`, a member variable of `MyClass`, is accessed in `MyFunc` using the `this` keyword. `this` refers to the instantiated object. If the function is static, then `this` cannot be used as there is no instantiation of `MyClass`. Also notice how there are two versions of `MyFunc`, one static and one not. This is valid because static members must always be accessed through the class with the format `<class>.<function>`. ## Constructors and Destructors Structs/Classes can have constructor and destructors, which are special functions with no return type. Constructors are called when an object is instantiated, and the destructor is called when the object is deleted. ```lang=csharp, name=Default Constructor class ExplicitDefault { constructor() {} } class ImplicitDefault {} class Driver { function MyFunction() { ExplicitDefault(); // call default constructor ImplicitDefault(); // call default constructor (implicitly defined) } } The class ExplicitDefault has a single constructor that takes no parameters. This constructors type is known as the //default constructor//. Notice how the constructor is called by the class name in the statement ExplicitDefault(); Also notice how ImplicitDefault is constructed with the default constructor in the statement ImplicitDefault(); . As long as there are no constructors defined, the default will always be defined by lightning. ```lang=csharp, name=Custom Constructors class ExplicitCustom { constructor(r : Real) {} } class ExplicitCustomAndDefault { constructor() {} constructor(r : Real) {} } class Driver { function MyFunction() { ExplicitCustom(); // ERROR ExplicitCustom(1.0); ExplicitCustomAndDefault(); ExplicitCustomAndDefault(1.0); } } The class `ExplicitCustom` defines a single constructor that takes a single [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown). This means that `ExplicitCustom` cannot be default constructed, therefore the statement `ExplicitCustom();` fails to compile. The default constructor can still be readded by explicitly defining it alongside other constructors, as shown in the class `ExplicitCustomAndDefault`. NOTE: Explcitly defining a constructor is **not required** in Lightning as long as every data member of the class has a default constructor. Destructors are called when all handles to an object are destroyed. The exception is when an object is not a copy by reference type, in which case the destructor isn't called. ```lang=csharp, name=Destructors struct MyStruct { var Id : Integer; constructor(id : Integer) { this.Id = id; } destructor() { Console.WriteLine(this.Id); } } class MyClass : MyStruct {} class Driver2 { [Static] function MyFunction() { var v1 = MyStruct(1); var v2 = local MyStruct(2); var v3 = new MyStruct(3); var v4 = MyClass(4); var v5 = new MyClass(5); } // end of the scope, all unreferenced objects are destroyed } name=Console window 3 4 5 In the example above, MyClass inherits from MyStruct . MyClass has the same members as MyStruct , and the only difference between the two is that MyClass is a class . Observe how 3 , 4 , and 5 are printed, which means that the destructor got called on v3 , v4 , and v5 . All struct destructors were ignored, while all class destructors were called. The one exception is v3 , which is of the type ref MyStruct and has the copy by-reference quality. # Related Materials ## Manual - Variables - Functions - memory_management - attributes - inheritance - Static ## Code Reference - real","title":"Classes"},{"location":"manual/plasmamanual/lightning_in_plasma/comparison_operators/","text":"Comparison Operators Comparison operators take two operands and evaluate to a boolean value which describes a relationship between the given values. Comparison operators are frequently used with conditionals . # == & != Operators The == (equality) operator compares two operands and returns true if they are the same and false if they are not. The != (inequality) operator performs the inverse operation, returning false if they are the same and true if they are not. | Left Operand | Operator | Right Operand | Result | | true | == | true | true | | true | == | false | false | | true | != | true | false | | true | != | false | true | The equality operator is very useful when trying to identify unknown data, or verifying existing data. ```name=\"== Operator Identifying Data\", lang=csharp if(unknownObject == this.TargetObject) { Console.WriteLine(\"Found Target\"); } ```name=\"== Operator Verifying Data\", lang=csharp if(this.Owner.Player.TeamId == hitObject.Player.TeamId) Console.WriteLine(\"Friendly Fire!\"); Keep in mind that the values of the operands must be exactly equal. When comparing decimal values, the differences may be very small but still exist, i.e. 3.14159 == 3.141591 will evaluate to false . Similarly 2.236068 == 2.23607 will evaluate to false , as the values differ by 0.0000002 . It is common to use an epsilon value (i.e. 0.0000001 ) when comparing values that are more precise then the comparison needs to be. The != operator is commonly used to verify data exists before attempting to use it. ``name=\"!= Operator Verifying Data\", lang=csharp if(unknownObject != null) { Console.WriteLine( unkownObject is valid); if(unknownObject.Transform != null) Console.WriteLine(unkownObject.Transform.Translation); else Console.WriteLine(\" unkownObject` does not have a Tranform component\"); } # Object Comparison As seen in the first code block, object comparison is fairly common. However, there are a few details to be aware of when comparing objects by value vs. by reference. NOTE: To read about the details about by-value and by-reference objects, [ read the manual page](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/constructbyvaluevsbyref.markdown). ## Object Comparison by Value Take the following struct as a by-value example: ```name=\"ValueObj\", lang=csharp struct ValueObj { var ValueOne : Boolean; var ValueTwo : Integer; var ValueThree : Boolean; } In Lightning, structs are value types, so when they're compared using the == or != operators, the value(s) within the type are what is compared. This means that the == and != operators cannot be used with references to structs to determine if the operands are the same struct instance. ``name=\"Comparing Objects - ValueObj\", lang=csharp var a = ValueObj(); var b = a; var c = ValueObj(); Console.WriteLine(\"a & b are equal: a == b`\"); b.ValueOne = true; Console.WriteLine(\"a & b are equal: a == b \"); Console.WriteLine(\"a & c are equal: a == c \"); Console.WriteLine(\"b & c are equal: b == c \"); ```name=Console Output a & b are equal: true a & b are equal: false a & c are equal: true b & c are equal: false In this case, the ValueObj instances are constructed and compared by value. So despite b being a copy of a , when b.ValueOne is set to false, the value of a.ValueOne does not change, and the values of the two objects are no longer equal. Furthermore, it can be seen that even when ValueObj instance c , a new value type instance, is constructed, the ValueObj is only copied and compared by value. ## Object Comparison by Reference Take the following class as a by-reference example: ```name=\"ReferenceObj\", lang=csharp class ReferenceObj { var ValueOne : Boolean; var ValueTwo : Integer; var ValueThree : Boolean; } In Lightning, classes are reference types, so when they're compared using the `==` or `!=` operators, what are actually compared are the addresses of the objects in memory. This means that the `==` and `!=` operators **cannot** be used with class references to determine if the operands contain the same values; instead, they reveal whether the two objects are the same class instance. ```name=\"Comparing Objects - ReferenceObj\", lang=csharp var a = ReferenceObj(); var b = a; var c = ReferenceObj(); Console.WriteLine(\"a & b are equal: `a == b`\"); b.ValueOne = false; Console.WriteLine(\"a & b are equal: `a == b`\"); Console.WriteLine(\"a & c are equal: `a == c`\"); Console.WriteLine(\"b & c are equal: `b == c`\"); ```name=Console Output a & b are equal: true a & b are equal: true a & c are equal: false b & c are equal: false In this case, the `ReferenceObj` instances are constructed and compared by reference, so `b` is actually a copy of the reference `a` to the constructed `ReferenceObj`. This means that when `b.ValueOne` is set to `true`, the `ReferenceObj` instance that `a` references is modified, as `a` and `b` are in fact referencing the same `ReferenceObj` instance. Furthermore, looking at `c`, one can see that when a new reference type instance is constructed, it is only copied and compared by reference, so even when two instances contain the same value(s), they will not be considered equal. # Floating-Point Comparison Due to floating-point error, it is best to avoid comparing two extremely precise or large values of floating-point types (such as [ Real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown)) with the `==` and `!=` operators. Consider: ```lang=csharp, name=\"Floating-Point Comparison, Example 1\" Console.WriteLine(2000000000.0 == 2000000042.0); ```name=Console Output true This is not a quirk of the engine, it's a quirk of modern computing. Instead of using these operators, it is best to use a function like `Math.ApproximatelyEqual` (which can then be negated using the `!` operator to check for inequality) for floating-point types. For example, instead of something like this: ```lang=csharp, name=\"Floating-Point Comparison, Example 2 (problematic)\", counterexample if (this.Transform.WorldTranslation.Y == this.JumpHeight) { // } ... try something like this: ```lang=csharp, name=\"Floating-Point Comparison, Example 2 (fixed)\" if (Math.ApproximatelyEqual(this.Transform.WorldTranslation.Y, this.JumpHeight, 0.01)) { // } # `>` & `<` Operators The `>` (greater than) operator returns true if the left operand is *greater than// the right operand. The `<` (less than) operator returns true if the left operand is //less than* the right operand. | Left Operand | Operator | Right Operand | Result | | `0` | `>` | `1` | `false` | | `1` | `>` | `1` | `false` | | `2` | `>` | `1` | `true` | | `0` | `<` | `1` | `true` | | `1` | `<` | `1` | `false` | | `2` | `<` | `1` | `false` | `<` is often used to compare simulation values to detemine if a threshold has failed to be reached. ```name=\"< Operator Checking Threshold\", lang=csharp if(height < 5) Console.WriteLine(\"You must be at least 5ft tall to ride this attraction\"); > is often used to compare simulation values to detemine if a threshold has been exceeded. ```name=\"> Operator Checking Threshold\", lang=csharp if(cost > 10) Console.WriteLine(\"That restaurant is not within my dinner budget\"); # `>=` & `<=` Operators The `>=` (greater than or equal to) operator returns true if the left operand is *greater than **or** equal to// the right operand. The `<=` (less than or equal to) operator returns true if the left operand is //less than **or** equal to* the right operand. | Left Operand | Operator | Right Operand | Result | | `0` | `>=` | `1` | `false` | | `1` | `>=` | `1` | `true` | | `2` | `>=` | `1` | `true` | | `0` | `<=` | `1` | `true` | | `1` | `<=` | `1` | `true` | | `2` | `<=` | `1` | `false` | `<=` is often used to compare simulation values to detemine if a threshold has failed to be exceeded. ```name=\"< Operator Checking Threshold\", lang=csharp if(cost <= 10) Console.WriteLine(\"That restaurant is within my dinner budget\"); > is often used to compare simulation values to detemine if a threshold has been exceeded. name=\"> Operator Checking Threshold\", lang=csharp if(height >= 5) Console.WriteLine(\"You are at least 5ft tall, you may ride this attraction\"); # Related Materials # Manual - operators_precedence_chart","title":"Comparison Operators"},{"location":"manual/plasmamanual/lightning_in_plasma/comparison_operators/#comparison-operators","text":"Comparison operators take two operands and evaluate to a boolean value which describes a relationship between the given values. Comparison operators are frequently used with conditionals . # == & != Operators The == (equality) operator compares two operands and returns true if they are the same and false if they are not. The != (inequality) operator performs the inverse operation, returning false if they are the same and true if they are not. | Left Operand | Operator | Right Operand | Result | | true | == | true | true | | true | == | false | false | | true | != | true | false | | true | != | false | true | The equality operator is very useful when trying to identify unknown data, or verifying existing data. ```name=\"== Operator Identifying Data\", lang=csharp if(unknownObject == this.TargetObject) { Console.WriteLine(\"Found Target\"); } ```name=\"== Operator Verifying Data\", lang=csharp if(this.Owner.Player.TeamId == hitObject.Player.TeamId) Console.WriteLine(\"Friendly Fire!\"); Keep in mind that the values of the operands must be exactly equal. When comparing decimal values, the differences may be very small but still exist, i.e. 3.14159 == 3.141591 will evaluate to false . Similarly 2.236068 == 2.23607 will evaluate to false , as the values differ by 0.0000002 . It is common to use an epsilon value (i.e. 0.0000001 ) when comparing values that are more precise then the comparison needs to be. The != operator is commonly used to verify data exists before attempting to use it. ``name=\"!= Operator Verifying Data\", lang=csharp if(unknownObject != null) { Console.WriteLine( unkownObject is valid); if(unknownObject.Transform != null) Console.WriteLine(unkownObject.Transform.Translation); else Console.WriteLine(\" unkownObject` does not have a Tranform component\"); } # Object Comparison As seen in the first code block, object comparison is fairly common. However, there are a few details to be aware of when comparing objects by value vs. by reference. NOTE: To read about the details about by-value and by-reference objects, [ read the manual page](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/constructbyvaluevsbyref.markdown). ## Object Comparison by Value Take the following struct as a by-value example: ```name=\"ValueObj\", lang=csharp struct ValueObj { var ValueOne : Boolean; var ValueTwo : Integer; var ValueThree : Boolean; } In Lightning, structs are value types, so when they're compared using the == or != operators, the value(s) within the type are what is compared. This means that the == and != operators cannot be used with references to structs to determine if the operands are the same struct instance. ``name=\"Comparing Objects - ValueObj\", lang=csharp var a = ValueObj(); var b = a; var c = ValueObj(); Console.WriteLine(\"a & b are equal: a == b`\"); b.ValueOne = true; Console.WriteLine(\"a & b are equal: a == b \"); Console.WriteLine(\"a & c are equal: a == c \"); Console.WriteLine(\"b & c are equal: b == c \"); ```name=Console Output a & b are equal: true a & b are equal: false a & c are equal: true b & c are equal: false In this case, the ValueObj instances are constructed and compared by value. So despite b being a copy of a , when b.ValueOne is set to false, the value of a.ValueOne does not change, and the values of the two objects are no longer equal. Furthermore, it can be seen that even when ValueObj instance c , a new value type instance, is constructed, the ValueObj is only copied and compared by value. ## Object Comparison by Reference Take the following class as a by-reference example: ```name=\"ReferenceObj\", lang=csharp class ReferenceObj { var ValueOne : Boolean; var ValueTwo : Integer; var ValueThree : Boolean; } In Lightning, classes are reference types, so when they're compared using the `==` or `!=` operators, what are actually compared are the addresses of the objects in memory. This means that the `==` and `!=` operators **cannot** be used with class references to determine if the operands contain the same values; instead, they reveal whether the two objects are the same class instance. ```name=\"Comparing Objects - ReferenceObj\", lang=csharp var a = ReferenceObj(); var b = a; var c = ReferenceObj(); Console.WriteLine(\"a & b are equal: `a == b`\"); b.ValueOne = false; Console.WriteLine(\"a & b are equal: `a == b`\"); Console.WriteLine(\"a & c are equal: `a == c`\"); Console.WriteLine(\"b & c are equal: `b == c`\"); ```name=Console Output a & b are equal: true a & b are equal: true a & c are equal: false b & c are equal: false In this case, the `ReferenceObj` instances are constructed and compared by reference, so `b` is actually a copy of the reference `a` to the constructed `ReferenceObj`. This means that when `b.ValueOne` is set to `true`, the `ReferenceObj` instance that `a` references is modified, as `a` and `b` are in fact referencing the same `ReferenceObj` instance. Furthermore, looking at `c`, one can see that when a new reference type instance is constructed, it is only copied and compared by reference, so even when two instances contain the same value(s), they will not be considered equal. # Floating-Point Comparison Due to floating-point error, it is best to avoid comparing two extremely precise or large values of floating-point types (such as [ Real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown)) with the `==` and `!=` operators. Consider: ```lang=csharp, name=\"Floating-Point Comparison, Example 1\" Console.WriteLine(2000000000.0 == 2000000042.0); ```name=Console Output true This is not a quirk of the engine, it's a quirk of modern computing. Instead of using these operators, it is best to use a function like `Math.ApproximatelyEqual` (which can then be negated using the `!` operator to check for inequality) for floating-point types. For example, instead of something like this: ```lang=csharp, name=\"Floating-Point Comparison, Example 2 (problematic)\", counterexample if (this.Transform.WorldTranslation.Y == this.JumpHeight) { // } ... try something like this: ```lang=csharp, name=\"Floating-Point Comparison, Example 2 (fixed)\" if (Math.ApproximatelyEqual(this.Transform.WorldTranslation.Y, this.JumpHeight, 0.01)) { // } # `>` & `<` Operators The `>` (greater than) operator returns true if the left operand is *greater than// the right operand. The `<` (less than) operator returns true if the left operand is //less than* the right operand. | Left Operand | Operator | Right Operand | Result | | `0` | `>` | `1` | `false` | | `1` | `>` | `1` | `false` | | `2` | `>` | `1` | `true` | | `0` | `<` | `1` | `true` | | `1` | `<` | `1` | `false` | | `2` | `<` | `1` | `false` | `<` is often used to compare simulation values to detemine if a threshold has failed to be reached. ```name=\"< Operator Checking Threshold\", lang=csharp if(height < 5) Console.WriteLine(\"You must be at least 5ft tall to ride this attraction\"); > is often used to compare simulation values to detemine if a threshold has been exceeded. ```name=\"> Operator Checking Threshold\", lang=csharp if(cost > 10) Console.WriteLine(\"That restaurant is not within my dinner budget\"); # `>=` & `<=` Operators The `>=` (greater than or equal to) operator returns true if the left operand is *greater than **or** equal to// the right operand. The `<=` (less than or equal to) operator returns true if the left operand is //less than **or** equal to* the right operand. | Left Operand | Operator | Right Operand | Result | | `0` | `>=` | `1` | `false` | | `1` | `>=` | `1` | `true` | | `2` | `>=` | `1` | `true` | | `0` | `<=` | `1` | `true` | | `1` | `<=` | `1` | `true` | | `2` | `<=` | `1` | `false` | `<=` is often used to compare simulation values to detemine if a threshold has failed to be exceeded. ```name=\"< Operator Checking Threshold\", lang=csharp if(cost <= 10) Console.WriteLine(\"That restaurant is within my dinner budget\"); > is often used to compare simulation values to detemine if a threshold has been exceeded. name=\"> Operator Checking Threshold\", lang=csharp if(height >= 5) Console.WriteLine(\"You are at least 5ft tall, you may ride this attraction\"); # Related Materials # Manual - operators_precedence_chart","title":"Comparison Operators"},{"location":"manual/plasmamanual/lightning_in_plasma/conditionals/","text":"Conditionals Conditionals allow programs to ask questions and act or not act based of the results. # if An if conditional evaluates a given statement that evaluates to a boolean value and executes code in a block scope defined underneath if it evaluates to true . ```lang=csharp, name=if Conditional var boolValue = true; if(boolValue) { Console.WriteLine(\"boolValue is true\"); } boolValue = false; if(boolValue) { Console.WriteLine(\"boolValue is still true\"); } Console.WriteLine(\"End of the example\"); ```name=Console window boolValue is true End of the example boolValue , which initially stores true , is checked in the first if block. Since if is given the value true , the following block scope is executed and the Console.WriteLine function is called. It is good practice to have a program log it's activity for debugging certain values. The 'Console window' snippet above shows that \"boolValue is true\" and \"End of the example\" are printed. Notice that the line Console.WriteLine(\"boolValue is still true\") exists as well, but \"boolValue is still true\" is not printed. This is because the second if is given the value false , instructing the program to not execute any code inside that conditional's block scope. ## Unnecessary Conditionals Because if conditionals take boolean values, a literal value can also be used: ```lang=csharp, name=Tautology and Contradiction if(true) { Console.WriteLine(\"This is a tautology\"); } if(false) { Console.WriteLine(\"This is a contradiction\"); } ```name=Console window This is a tautology The first if conditional is known as a tautology, while the second is a contradiction. A tautology is always true, and the code block will always execute. A condtradiction is always false, and its code block will never be executed. While these patterns have no practical purpose in a program, the ability to 'disable' a conditional can be a useful debugging tool, making minimal changes to the code: ```lang=csharp, name=Disabling an if conditional with a tautology if(true / myVar /) { Console.WriteLine(\"Is this line run?\"); } `myVar` is a variable defined somewhere, but the check to see if it has the value `true` has been commented out and replaced with the literal `true` in order to explicitlly test the code within the scope of the `if` block. # Else An `if` conditional on its own has the power to decide between action and inaction, but often a decision is made between two different actions. The `else` conditional is used to execute code when the `if` condition fails. ```lang=csharp, name=else Conditional if(false) { Console.WriteLine(\"The if ran\"); } else { Console.WriteLine(\"The else ran\"); } ```name=Console window The else ran Under the code block of the first `if`, there is a code block paired with the [Keyword](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/keywords.markdown) `else`. The value `false` if given to the `if` conditional, and so the `else` block is executed. In any `if`-`else` pair, exactly one of the two code blocks will run. ## Else If While often for any given conditional there are only two outcomes, sometimes there are more. The `else if` keyword combinations allows the chaining of conditional statements. ```lang=csharp, name=else if Conditional var valone = false; var valtwo = false; if(valone) { Console.WriteLine(\"valone is true\"); } else if(valtwo) { Console.WriteLine(\"valtwo is true\"); } else { Console.WriteLine(\"neither valone or valtwo are true\"); } ```name=Console window neither valone or valtwo are true In the example above `valone` is evaluated as `false` in the first `if` conditional. Since the first if fails the script continues to the `else if` and evaluates `valtwo` as `false` causing the script to continue to the `else` condition. # Condensed Conditionals Conditionals don't always require the use of scope operators. If the code block underneath is only one line long, the `{` and `}` become unnecessary. ```lang=csharp, name=else if Conditional var valone = false; var valtwo = false; if(valone) Console.WriteLine(\"valone is true\"); else if(valtwo) Console.WriteLine(\"valtwo is true\"); else Console.WriteLine(\"neither valone or valtwo are true\"); ```name=Console window neither valone or valtwo are true The above rewrite of the last code block illustrates how scoping brackets can be removed to make code more compact. WARNING: Removing scope operators isn't always good practice, because they need to be added when a code block is more than one statement. Omitting scope operators can unintentionally change the scope of some code, and yet the script can still sucessfully compile. ## Uncondensing else if The `else if` conditional is actually an `else` conditional with an `if`-`else` pair afterwards. The fact that scope operators can be removed is the reason that `else if` is valid. Using this logic we can rewrite the last example with explcit scopes to make this clearer. ```lang=csharp, name=else if Conditional var valone = false; var valtwo = false; if(valone) { Console.WriteLine(\"valone is true\"); } else { if(valtwo) { Console.WriteLine(\"valtwo is true\"); } else { Console.WriteLine(\"neither valone or valtwo are true\"); } } name=Console window neither valone or valtwo are true else if may seem like a seperate keyword than if and else but it is actually just syntactical suger to make code easier to follow. # Boolean Operations While conditionals a useful their real power comes when used in combination with boolean_operators . It is highly suggested you review this page. # Related Material ## Manual - keywords - boolean_operators ## Code Reference - boolean","title":"Conditionals"},{"location":"manual/plasmamanual/lightning_in_plasma/conditionals/#conditionals","text":"Conditionals allow programs to ask questions and act or not act based of the results. # if An if conditional evaluates a given statement that evaluates to a boolean value and executes code in a block scope defined underneath if it evaluates to true . ```lang=csharp, name=if Conditional var boolValue = true; if(boolValue) { Console.WriteLine(\"boolValue is true\"); } boolValue = false; if(boolValue) { Console.WriteLine(\"boolValue is still true\"); } Console.WriteLine(\"End of the example\"); ```name=Console window boolValue is true End of the example boolValue , which initially stores true , is checked in the first if block. Since if is given the value true , the following block scope is executed and the Console.WriteLine function is called. It is good practice to have a program log it's activity for debugging certain values. The 'Console window' snippet above shows that \"boolValue is true\" and \"End of the example\" are printed. Notice that the line Console.WriteLine(\"boolValue is still true\") exists as well, but \"boolValue is still true\" is not printed. This is because the second if is given the value false , instructing the program to not execute any code inside that conditional's block scope. ## Unnecessary Conditionals Because if conditionals take boolean values, a literal value can also be used: ```lang=csharp, name=Tautology and Contradiction if(true) { Console.WriteLine(\"This is a tautology\"); } if(false) { Console.WriteLine(\"This is a contradiction\"); } ```name=Console window This is a tautology The first if conditional is known as a tautology, while the second is a contradiction. A tautology is always true, and the code block will always execute. A condtradiction is always false, and its code block will never be executed. While these patterns have no practical purpose in a program, the ability to 'disable' a conditional can be a useful debugging tool, making minimal changes to the code: ```lang=csharp, name=Disabling an if conditional with a tautology if(true / myVar /) { Console.WriteLine(\"Is this line run?\"); } `myVar` is a variable defined somewhere, but the check to see if it has the value `true` has been commented out and replaced with the literal `true` in order to explicitlly test the code within the scope of the `if` block. # Else An `if` conditional on its own has the power to decide between action and inaction, but often a decision is made between two different actions. The `else` conditional is used to execute code when the `if` condition fails. ```lang=csharp, name=else Conditional if(false) { Console.WriteLine(\"The if ran\"); } else { Console.WriteLine(\"The else ran\"); } ```name=Console window The else ran Under the code block of the first `if`, there is a code block paired with the [Keyword](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/keywords.markdown) `else`. The value `false` if given to the `if` conditional, and so the `else` block is executed. In any `if`-`else` pair, exactly one of the two code blocks will run. ## Else If While often for any given conditional there are only two outcomes, sometimes there are more. The `else if` keyword combinations allows the chaining of conditional statements. ```lang=csharp, name=else if Conditional var valone = false; var valtwo = false; if(valone) { Console.WriteLine(\"valone is true\"); } else if(valtwo) { Console.WriteLine(\"valtwo is true\"); } else { Console.WriteLine(\"neither valone or valtwo are true\"); } ```name=Console window neither valone or valtwo are true In the example above `valone` is evaluated as `false` in the first `if` conditional. Since the first if fails the script continues to the `else if` and evaluates `valtwo` as `false` causing the script to continue to the `else` condition. # Condensed Conditionals Conditionals don't always require the use of scope operators. If the code block underneath is only one line long, the `{` and `}` become unnecessary. ```lang=csharp, name=else if Conditional var valone = false; var valtwo = false; if(valone) Console.WriteLine(\"valone is true\"); else if(valtwo) Console.WriteLine(\"valtwo is true\"); else Console.WriteLine(\"neither valone or valtwo are true\"); ```name=Console window neither valone or valtwo are true The above rewrite of the last code block illustrates how scoping brackets can be removed to make code more compact. WARNING: Removing scope operators isn't always good practice, because they need to be added when a code block is more than one statement. Omitting scope operators can unintentionally change the scope of some code, and yet the script can still sucessfully compile. ## Uncondensing else if The `else if` conditional is actually an `else` conditional with an `if`-`else` pair afterwards. The fact that scope operators can be removed is the reason that `else if` is valid. Using this logic we can rewrite the last example with explcit scopes to make this clearer. ```lang=csharp, name=else if Conditional var valone = false; var valtwo = false; if(valone) { Console.WriteLine(\"valone is true\"); } else { if(valtwo) { Console.WriteLine(\"valtwo is true\"); } else { Console.WriteLine(\"neither valone or valtwo are true\"); } } name=Console window neither valone or valtwo are true else if may seem like a seperate keyword than if and else but it is actually just syntactical suger to make code easier to follow. # Boolean Operations While conditionals a useful their real power comes when used in combination with boolean_operators . It is highly suggested you review this page. # Related Material ## Manual - keywords - boolean_operators ## Code Reference - boolean","title":"Conditionals"},{"location":"manual/plasmamanual/lightning_in_plasma/constructbyvaluevsbyref/","text":"(NOTE) Advanced Users Only : The use of the new and local keywords is not something most users need to be concerned with , as it is almost entirely #deprecated. Heap or stack allocation is almost always handled automatically by the engine based off whether the constructed type is a class or struct, however, new and local still remain in the language for explicit allocation practices. Users attemptting to use new or local keywords should be aware that they override the standard allocation functionality of Lightning, but reference counted garbage collection will still happen for objects explicitly constructed with new and local . # Local When working with by-value types that have constructors, such as structs or more complex stack primitive data types, the keyword local may be used: ```lang=csharp var up : Real3 = local Real3(0.0, 1.0, 0.0); var stackStructInstance : CustomStruct = local CustomStruct(); The compiler will infer the use of local for by-value types: ```lang=csharp // This is also valid. var up : Real3 = Real3(0.0, 1.0, 0.0); var stackStructInstance : CustomStruct = CustomStruct(); # New When working with classes , references, or other or anything located on the heap with a constructor, use the new keyword: ```lang=csharp var heapObject : CustomClass = new CustomClass(); var heapStructInstance : CustomStruct = new CustomStruct(); Once again the compiler will infer the use of new for **by-ref** types: ```lang=csharp // This is also valid. var heapObject : CustomClass = CustomClass(); Since structs are by-value, in order to get a reference you must specify new. ```lang=csharp // This does not compile var heapStructInstance : CustomStruct = CustomStruct(); ```name=Console Output The value being assigned to 'heapStructInstance' must be of type 'CustomStruct'. Its type is 'CustomStruct'. # Related Material ## Manual - keywords - classes - memory_management","title":"Constructbyvaluevsbyref"},{"location":"manual/plasmamanual/lightning_in_plasma/delegates/","text":"Delegates Delegates allows you to hold a function pointer in a variable, and use them at a later time. The following three classes will work together to demonstrate creating, defining, and calling delegates. class DelegateHolder { var Name : String = \"Unnamed\"; var Greeting : delegate() = null; constructor(name: String) { this.Name = name; } function Introduce() { Console.WriteLine(\"Hi I'm `this.Name`\"); } } The DelegateHolder class contains a delegate member variable Greeting that is set in the constructor to the member function Introduce() . class MyMathLib { [Static] function Exponent(baseNum : Integer, exponent : Integer) : Integer { var num = 1; // Start at baseNum ^ 0 while(exponent > 0) { num = num * baseNum; --exponent; } return baseNum; } } The MyMathLib class contains just a single static function that returns the product of exponentiation. This function will be used to demonstrate how to use a delegate in the next and final class. class DelegateDriver : LightningComponent { function Initialize(init : CogInitializer) { this.DelegateSamples(); } function DelegateSamples() { var gh = new DelegateHolder(\"gh\"); var ef = new DelegateHolder(\"ef\"); // Making a delegate: var getName : delegate() = gh.Greeting; // Using a delegate: getName(); // Hi I'm gh // Assigning a member function to a delegate: getName = ef.Greeting; // Passing a delegate into a function: DelegateDriver.DelegateCaller(getName); // Hi I'm ef getName(); // Hi I'm ef // Assigning a static function to a delegate: getName = DelegateDriver.DelegateTest; getName(); // 256 DelegateDriver.DelegateCaller(getName); // 256 // Making a delegate: var doMath : delegate(a: Integer, b: Integer): Integer = DelegateDriver.Add; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 8 Console.WriteLine(doMath(2,6)); // 8 doMath = DelegateDriver.Multiply; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 15 Console.WriteLine(doMath(2,6)); // 12 doMath = DelegateDriver.Subtract; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 2 Console.WriteLine(doMath(2,6)); // -4 } [Static] function Add(a: Integer, b: Integer): Integer { return a+b; } [Static] function Multiply(a: Integer, b: Integer): Integer { return a*b; } [Static] function Subtract(a: Integer, b: Integer): Integer { return a-b; } [Static] function BinaryIntOpsCaller(a: delegate(a: Integer, b: Integer):Integer):Integer { return a(5, 3); } [Static] function DelegateCaller(a: delegate()) { a(); } [Static] function DelegateTest() { var doMath : delegate(lhs : Integer, rhs : Integer): Integer = MyMathLib.Exponent; Console.WriteLine(doMath(2, 8)); } } The DelegateDriver class covers a number of different ways to define and call a delegate. Lines 10 and 11 create two DelegateHolder objects, gh and ef , while line 14 creates a delegate variable that's set to the delegate variable found in object gh : ```name=Drive Lines 10 - 14, lang=csharp var gh = new DelegateHolder(\"gh\"); var ef = new DelegateHolder(\"ef\"); var getName : delegate() = gh.Greeting; Line 17 demonstrates directly calling a delegate using a delegate variable, while line 20 reassigns that delegate to the delegate variable found in object `ef`: ```lang=csharp, name=Driver Lines 17 & 20 getName(); getName = ef.Greeting; Line 24 passes the delegate variable into a function, DelegateCaller , which is defined further down the script\ufffdthat calls the delegate function of any delegate passed into it: ```lang=csharp, name=Driver Line 24 getName = DelegateDriver.DelegateTest; Line 27 assigns a static function to the delegate variable, `DelegateTest`, which defines its own delegate function assigned the to `Exponent` function in `MyMathLib`: ```lang=csharp, name=Driver Line 27 getName = DelegateDriver.DelegateTest; Line 30 then passes in the re-assigned variable back into the DelegateCaller function, showing that the Exponent function is still called: ```lang=csharp, name=Driver Line 30 DelegateDriver.DelegateCaller(getName); Line 33 creates a new delegate variable assigning it to another static function, while lines 35 - 44 demonstrates passing a delegate (that is redefined a couple of times) into a function that expects a delegate as a parameter: ```lang=csharp, name=Driver Lines 33-44 var doMath : delegate(a: Integer, b: Integer): Integer = DelegateDriver.Add; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 8 Console.WriteLine(doMath(2,6)); // 8 doMath = DelegateDriver.Multiply; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 15 Console.WriteLine(doMath(2,6)); // 12 doMath = DelegateDriver.Subtract; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 2 Console.WriteLine(doMath(2,6)); Attaching DelegateDriver to an object and running the project results in the following print statements in the Console Window : ```name=Console Output ---------------- Begin Game --------------- Hi I'm gh Hi I'm ef Hi I'm ef 256 256 8 8 15 12 2 -4 # Named Parameters IMPORTANT: At this time the names chosen for the parameters are part of the signature. In order for two function signatures to be the same the names chosen for the parameters must match: ```lang=csharp, name=MyMathLib class MyMathLib { [Static] // Note named parameters are lhs and rhs: function Exponent(lhs: Integer, rhs: Integer): Integer { return lhs^rhs; } } Consider these tests: ```lang=csharp, name=Invalid Delegate Parameter Names class Driver { function DelegateTest() { // Here the delegate has named parameters a and b: var doMath : delegate(a: Integer, b: Integer): Integer = MyMathLib.Exponent;// This won't compile. } } ```name=Console Output The value being assigned to 'doMath' must be of type 'delegate (a : Integer, b : Integer) : Integer'. Its type is 'delegate (lhs : Integer, rhs : Integer) : Integer'. ```lang=csharp, name=Excluded Parameter Names class Driver { function DelegateTest() { // When declaring a delegate you cannot exclude the parameter names: var doMath : delegate(Integer, Integer): Integer = MyMathLib.Exponent;// This won't compile. } } ```name=Console Output Function declaration 'delegate' has an invalid argument list. We found 'UpperIdentifier' but we expected to find ')'. ```lang=csharp, name=Correctly Named Parameters class Driver { function DelegateTest() { // Here, after making the parameter names match, does it work: var doMath : delegate(lhs: Integer, rhs: Integer): Integer = MyMathLib.Exponent; Console.WriteLine(doMath(2,8)); } } ```name=Console Output ---------------- Begin Game --------------- 256 # Member Function Delegates IMPORTANT: Delegates that point at member functions can create memory leaks if they make cycles. See memory_management for more. IMPORTANT: Delegates pointing to member functions will throw runtime errors if the instance it was bound with was destroyed: ```lang=csharp, name=Invalid Call to a Delegate from a Deleted Variable // Here are three Objects with the ability to hold delegates: var ab = new DelegateHolder(\"ab\"); var b = new DelegateHolder(\"b\"); ab.Greeting = b.Introduce; delete b; ab.Greeting(); // This throws a runtime error ```name=Console Output Attempted to access a member of a null handle: Attempted to call a member function on a null object # Null Delegates IMPORTANT: It is an illegal operation to call a null delegate, so be sure to initialize your delegates before calling! ```lang=csharp // Here are three Objects with the ability to hold delegates: var ab: delegate(a: Integer, b: Integer): Integer = null; ab(3, 6);// This throws a runtime error ```name=Console Output Attempted to invoke a null delegate # Related Materials ## Manual - memory_management - classes - attributes","title":"Delegates"},{"location":"manual/plasmamanual/lightning_in_plasma/delegates/#delegates","text":"Delegates allows you to hold a function pointer in a variable, and use them at a later time. The following three classes will work together to demonstrate creating, defining, and calling delegates. class DelegateHolder { var Name : String = \"Unnamed\"; var Greeting : delegate() = null; constructor(name: String) { this.Name = name; } function Introduce() { Console.WriteLine(\"Hi I'm `this.Name`\"); } } The DelegateHolder class contains a delegate member variable Greeting that is set in the constructor to the member function Introduce() . class MyMathLib { [Static] function Exponent(baseNum : Integer, exponent : Integer) : Integer { var num = 1; // Start at baseNum ^ 0 while(exponent > 0) { num = num * baseNum; --exponent; } return baseNum; } } The MyMathLib class contains just a single static function that returns the product of exponentiation. This function will be used to demonstrate how to use a delegate in the next and final class. class DelegateDriver : LightningComponent { function Initialize(init : CogInitializer) { this.DelegateSamples(); } function DelegateSamples() { var gh = new DelegateHolder(\"gh\"); var ef = new DelegateHolder(\"ef\"); // Making a delegate: var getName : delegate() = gh.Greeting; // Using a delegate: getName(); // Hi I'm gh // Assigning a member function to a delegate: getName = ef.Greeting; // Passing a delegate into a function: DelegateDriver.DelegateCaller(getName); // Hi I'm ef getName(); // Hi I'm ef // Assigning a static function to a delegate: getName = DelegateDriver.DelegateTest; getName(); // 256 DelegateDriver.DelegateCaller(getName); // 256 // Making a delegate: var doMath : delegate(a: Integer, b: Integer): Integer = DelegateDriver.Add; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 8 Console.WriteLine(doMath(2,6)); // 8 doMath = DelegateDriver.Multiply; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 15 Console.WriteLine(doMath(2,6)); // 12 doMath = DelegateDriver.Subtract; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 2 Console.WriteLine(doMath(2,6)); // -4 } [Static] function Add(a: Integer, b: Integer): Integer { return a+b; } [Static] function Multiply(a: Integer, b: Integer): Integer { return a*b; } [Static] function Subtract(a: Integer, b: Integer): Integer { return a-b; } [Static] function BinaryIntOpsCaller(a: delegate(a: Integer, b: Integer):Integer):Integer { return a(5, 3); } [Static] function DelegateCaller(a: delegate()) { a(); } [Static] function DelegateTest() { var doMath : delegate(lhs : Integer, rhs : Integer): Integer = MyMathLib.Exponent; Console.WriteLine(doMath(2, 8)); } } The DelegateDriver class covers a number of different ways to define and call a delegate. Lines 10 and 11 create two DelegateHolder objects, gh and ef , while line 14 creates a delegate variable that's set to the delegate variable found in object gh : ```name=Drive Lines 10 - 14, lang=csharp var gh = new DelegateHolder(\"gh\"); var ef = new DelegateHolder(\"ef\"); var getName : delegate() = gh.Greeting; Line 17 demonstrates directly calling a delegate using a delegate variable, while line 20 reassigns that delegate to the delegate variable found in object `ef`: ```lang=csharp, name=Driver Lines 17 & 20 getName(); getName = ef.Greeting; Line 24 passes the delegate variable into a function, DelegateCaller , which is defined further down the script\ufffdthat calls the delegate function of any delegate passed into it: ```lang=csharp, name=Driver Line 24 getName = DelegateDriver.DelegateTest; Line 27 assigns a static function to the delegate variable, `DelegateTest`, which defines its own delegate function assigned the to `Exponent` function in `MyMathLib`: ```lang=csharp, name=Driver Line 27 getName = DelegateDriver.DelegateTest; Line 30 then passes in the re-assigned variable back into the DelegateCaller function, showing that the Exponent function is still called: ```lang=csharp, name=Driver Line 30 DelegateDriver.DelegateCaller(getName); Line 33 creates a new delegate variable assigning it to another static function, while lines 35 - 44 demonstrates passing a delegate (that is redefined a couple of times) into a function that expects a delegate as a parameter: ```lang=csharp, name=Driver Lines 33-44 var doMath : delegate(a: Integer, b: Integer): Integer = DelegateDriver.Add; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 8 Console.WriteLine(doMath(2,6)); // 8 doMath = DelegateDriver.Multiply; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 15 Console.WriteLine(doMath(2,6)); // 12 doMath = DelegateDriver.Subtract; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 2 Console.WriteLine(doMath(2,6)); Attaching DelegateDriver to an object and running the project results in the following print statements in the Console Window : ```name=Console Output ---------------- Begin Game --------------- Hi I'm gh Hi I'm ef Hi I'm ef 256 256 8 8 15 12 2 -4 # Named Parameters IMPORTANT: At this time the names chosen for the parameters are part of the signature. In order for two function signatures to be the same the names chosen for the parameters must match: ```lang=csharp, name=MyMathLib class MyMathLib { [Static] // Note named parameters are lhs and rhs: function Exponent(lhs: Integer, rhs: Integer): Integer { return lhs^rhs; } } Consider these tests: ```lang=csharp, name=Invalid Delegate Parameter Names class Driver { function DelegateTest() { // Here the delegate has named parameters a and b: var doMath : delegate(a: Integer, b: Integer): Integer = MyMathLib.Exponent;// This won't compile. } } ```name=Console Output The value being assigned to 'doMath' must be of type 'delegate (a : Integer, b : Integer) : Integer'. Its type is 'delegate (lhs : Integer, rhs : Integer) : Integer'. ```lang=csharp, name=Excluded Parameter Names class Driver { function DelegateTest() { // When declaring a delegate you cannot exclude the parameter names: var doMath : delegate(Integer, Integer): Integer = MyMathLib.Exponent;// This won't compile. } } ```name=Console Output Function declaration 'delegate' has an invalid argument list. We found 'UpperIdentifier' but we expected to find ')'. ```lang=csharp, name=Correctly Named Parameters class Driver { function DelegateTest() { // Here, after making the parameter names match, does it work: var doMath : delegate(lhs: Integer, rhs: Integer): Integer = MyMathLib.Exponent; Console.WriteLine(doMath(2,8)); } } ```name=Console Output ---------------- Begin Game --------------- 256 # Member Function Delegates IMPORTANT: Delegates that point at member functions can create memory leaks if they make cycles. See memory_management for more. IMPORTANT: Delegates pointing to member functions will throw runtime errors if the instance it was bound with was destroyed: ```lang=csharp, name=Invalid Call to a Delegate from a Deleted Variable // Here are three Objects with the ability to hold delegates: var ab = new DelegateHolder(\"ab\"); var b = new DelegateHolder(\"b\"); ab.Greeting = b.Introduce; delete b; ab.Greeting(); // This throws a runtime error ```name=Console Output Attempted to access a member of a null handle: Attempted to call a member function on a null object # Null Delegates IMPORTANT: It is an illegal operation to call a null delegate, so be sure to initialize your delegates before calling! ```lang=csharp // Here are three Objects with the ability to hold delegates: var ab: delegate(a: Integer, b: Integer): Integer = null; ab(3, 6);// This throws a runtime error ```name=Console Output Attempted to invoke a null delegate # Related Materials ## Manual - memory_management - classes - attributes","title":"Delegates"},{"location":"manual/plasmamanual/lightning_in_plasma/enums/","text":"Enums An enum, or enumerated type, is a set custom identifiers that are enumerated. An enumerated type may be defined with the enum keyword: ```lang=csharp, name=Enum Definition enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} // no semicolon The names line up with incrementing [Integers](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown) where the default starting value is 0. The values can be manually set in which case the following values will increment off of that manually defined value. Note that to access these Integer values, the enum must be [casted](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/casting.markdown) to an Integer: ```lang=csharp, name=Casting Enums to Integers Console.WriteLine(\"ControllerButtons.Start = `ControllerButtons.Start as Integer` \" ); Console.WriteLine(\"ControllerButtons.Select = `ControllerButtons.Select as Integer` \" ); Console.WriteLine(\"ControllerButtons.Up = `ControllerButtons.Up as Integer` \" ); Console.WriteLine(\"ControllerButtons.Down = `ControllerButtons.Down as Integer` \" ); Console.WriteLine(\"ControllerButtons.Left = `ControllerButtons.Left as Integer` \" ); Console.WriteLine(\"ControllerButtons.Right = `ControllerButtons.Right as Integer` \" ); Console.WriteLine(\"ControllerButtons.A = `ControllerButtons.A as Integer` \" ); Console.WriteLine(\"ControllerButtons.B = `ControllerButtons.B as Integer` \" ); ```name=Console Window ---------------- Begin Game --------------- ControllerButtons.Start = 0 ControllerButtons.Select = 1 ControllerButtons.Up = 0 ControllerButtons.Down = 1 ControllerButtons.Left = 2 ControllerButtons.Right = 3 ControllerButtons.A = 0 ControllerButtons.B = 1 # Enum Rules There a number of rules that must be followed when defining enums. If these rules are not followed, an error will be thrown, as can be seen in the examples below. ## Type Name and Value Capitalization Identifiers for the enum type name and the enumerated values must be capitalized. ```lang=csharp, name=Incorrect Value Identifiers // This will not compile. enum Directions {up, down, left, right} ```name=Console Window Enum declaration 'Directions' does not have a closing '}'. We found 'LowerIdentifier' but we expected to find '}'. ```lang=csharp, name=Incorrect Type Name Identifier // This won't compile either. enum directions {Up, Down, Left, Right} ```name=Console Window Enum declaration is missing a name. Upper-camel case names are required here (use 'Directions' instead of 'directions'). ## Unique Identifiers Identifiers for the enumerated values must be unique. ```lang=csharp, name=Duplicate Identifiers // This will not compile. enum Directions {Up, Down, Up, Down} ```name=Console Window A value of the same name 'Up' has already been declared in the enum 'Directions'. Names must only be used once. ## Definition Scope Enums cannot be defined inside classes, structs, or other enums. ```lang=csharp, name=Incorrectly Defined Inside a Class // Classes cannot contain enums. class EnumWrapper { // This won't compile. enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} } ```name=Console Window Class declaration 'EnumWrapper' does not have a closing '}'. We found 'enum' but we expected to find '}'. # Enums and Integers As in other languages, Integers make up the backbone of how enums work, and thus they work together in many situations. ## Casting Because of this, Lightning will implicitly cast from an enum to an Integer when necessary: Given this: ```lang=csharp, name=Controller Class and Buttons Enum enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} class Controller { [Static] // This function accepts an enum type. function AcceptsEnum(param: ControllerButtons) { Console.WriteLine(\" turned into `param`!\"); } [Static] // This function accepts an integer type. function AcceptsInt(param: Integer) { Console.WriteLine(\" turned into `param`!\"); } } We can test the calls to these functions to see the interplay of casting: ```lang=csharp, name=Implicit Enum Cast var paramInt = 3; var paramEnum = ControllerButtons.Right; // This works, as you'd expect Console.Write(paramEnum); Controller.AcceptsEnum(paramEnum); // But if you want to accept an Integer in an enum's place you MUST cast. Console.Write(paramInt); Controller.AcceptsEnum(paramInt as ControllerButtons); ```name=Console Window ---------------- Begin Game --------------- Right turned into Right! 3 turned into Right! ```lang=csharp, name=Passing Integer to a Function That Expects Enum // Attempting to pass an Integer without casting to an enum // will cause a compiler error Console.Write(paramInt); Controller.AcceptsEnum(paramInt); ```name=Console Window The function 'AcceptsEnum' exists, but could not be resolved since the types of the arguments used did not match. The arguments you gave were: AcceptsEnum(Integer) The possible choices were: AcceptsEnum(param : ControllerButtons) ```lang=csharp, name=Passing Enum to a Function That Expects Integer // This also works as you'd expect. Console.Write(paramInt); Controller.AcceptsInt(paramInt); // The enum type parameter is implicitly casted to an Integer and is then passed to the function. Console.Write(paramEnum); Controller.AcceptsInt(paramEnum); ```name=Console Window ---------------- Begin Game --------------- 3 turned into 3! Right turned into 3! ## Enum-Integer Operations Enums can perform all operations as if they were Integers. For instance, you can perform all of the normal Integer math operations as implicit conversion will happen as necessary: ```lang=csharp, name=Using Integer Operations on an Enum // Here you can see use of the +, -, *, /, (), ^ and % Integer operators. var math = (ControllerButtons.Start + ControllerButtons.Right) ^ ControllerButtons.Left % ControllerButtons.Right - ControllerButtons.Right * ControllerButtons.Select; // When the math evaluates to an unaliased number, the variable, although still of the enum type, // prints out its integer value. Console.WriteLine(math); Console.WriteLine(typeid(math).Name); ```name=Console Window ---------------- Begin Game --------------- -3 ControllerButtons Notice that the typeid is not an Integer but ControllerButtons . An Integer value was printed because there was no alias in the enum that maps to -3 . Because the type is still that of the enum, it can be passed to the Controller.AcceptsEnum() function without issue. When an operation includes both an enum and an Integer the result is always promoted to the enum type. To get an Integer either Declare the variable you are storing the result in as an Integer: var result : Integer Cast it: result as Integer ## Caveat Although enums cast to Integers, they will not cast to Integers to perform cross-enum operations. ```lang=csharp, name=Invalid Cross-Enum Operation // This won't compile. Console.WriteLine(ControllerButtons.Down + Directions.Down); ```name=Console Window The binary '+' operator 'Positive / Add' is not valid with 'ControllerButtons' and 'Directions'. # Related Materials ## Manual - casting - functions ## Code Reference - enum_reference - integer","title":"Enums"},{"location":"manual/plasmamanual/lightning_in_plasma/enums/#enums","text":"An enum, or enumerated type, is a set custom identifiers that are enumerated. An enumerated type may be defined with the enum keyword: ```lang=csharp, name=Enum Definition enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} // no semicolon The names line up with incrementing [Integers](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown) where the default starting value is 0. The values can be manually set in which case the following values will increment off of that manually defined value. Note that to access these Integer values, the enum must be [casted](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/casting.markdown) to an Integer: ```lang=csharp, name=Casting Enums to Integers Console.WriteLine(\"ControllerButtons.Start = `ControllerButtons.Start as Integer` \" ); Console.WriteLine(\"ControllerButtons.Select = `ControllerButtons.Select as Integer` \" ); Console.WriteLine(\"ControllerButtons.Up = `ControllerButtons.Up as Integer` \" ); Console.WriteLine(\"ControllerButtons.Down = `ControllerButtons.Down as Integer` \" ); Console.WriteLine(\"ControllerButtons.Left = `ControllerButtons.Left as Integer` \" ); Console.WriteLine(\"ControllerButtons.Right = `ControllerButtons.Right as Integer` \" ); Console.WriteLine(\"ControllerButtons.A = `ControllerButtons.A as Integer` \" ); Console.WriteLine(\"ControllerButtons.B = `ControllerButtons.B as Integer` \" ); ```name=Console Window ---------------- Begin Game --------------- ControllerButtons.Start = 0 ControllerButtons.Select = 1 ControllerButtons.Up = 0 ControllerButtons.Down = 1 ControllerButtons.Left = 2 ControllerButtons.Right = 3 ControllerButtons.A = 0 ControllerButtons.B = 1 # Enum Rules There a number of rules that must be followed when defining enums. If these rules are not followed, an error will be thrown, as can be seen in the examples below. ## Type Name and Value Capitalization Identifiers for the enum type name and the enumerated values must be capitalized. ```lang=csharp, name=Incorrect Value Identifiers // This will not compile. enum Directions {up, down, left, right} ```name=Console Window Enum declaration 'Directions' does not have a closing '}'. We found 'LowerIdentifier' but we expected to find '}'. ```lang=csharp, name=Incorrect Type Name Identifier // This won't compile either. enum directions {Up, Down, Left, Right} ```name=Console Window Enum declaration is missing a name. Upper-camel case names are required here (use 'Directions' instead of 'directions'). ## Unique Identifiers Identifiers for the enumerated values must be unique. ```lang=csharp, name=Duplicate Identifiers // This will not compile. enum Directions {Up, Down, Up, Down} ```name=Console Window A value of the same name 'Up' has already been declared in the enum 'Directions'. Names must only be used once. ## Definition Scope Enums cannot be defined inside classes, structs, or other enums. ```lang=csharp, name=Incorrectly Defined Inside a Class // Classes cannot contain enums. class EnumWrapper { // This won't compile. enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} } ```name=Console Window Class declaration 'EnumWrapper' does not have a closing '}'. We found 'enum' but we expected to find '}'. # Enums and Integers As in other languages, Integers make up the backbone of how enums work, and thus they work together in many situations. ## Casting Because of this, Lightning will implicitly cast from an enum to an Integer when necessary: Given this: ```lang=csharp, name=Controller Class and Buttons Enum enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} class Controller { [Static] // This function accepts an enum type. function AcceptsEnum(param: ControllerButtons) { Console.WriteLine(\" turned into `param`!\"); } [Static] // This function accepts an integer type. function AcceptsInt(param: Integer) { Console.WriteLine(\" turned into `param`!\"); } } We can test the calls to these functions to see the interplay of casting: ```lang=csharp, name=Implicit Enum Cast var paramInt = 3; var paramEnum = ControllerButtons.Right; // This works, as you'd expect Console.Write(paramEnum); Controller.AcceptsEnum(paramEnum); // But if you want to accept an Integer in an enum's place you MUST cast. Console.Write(paramInt); Controller.AcceptsEnum(paramInt as ControllerButtons); ```name=Console Window ---------------- Begin Game --------------- Right turned into Right! 3 turned into Right! ```lang=csharp, name=Passing Integer to a Function That Expects Enum // Attempting to pass an Integer without casting to an enum // will cause a compiler error Console.Write(paramInt); Controller.AcceptsEnum(paramInt); ```name=Console Window The function 'AcceptsEnum' exists, but could not be resolved since the types of the arguments used did not match. The arguments you gave were: AcceptsEnum(Integer) The possible choices were: AcceptsEnum(param : ControllerButtons) ```lang=csharp, name=Passing Enum to a Function That Expects Integer // This also works as you'd expect. Console.Write(paramInt); Controller.AcceptsInt(paramInt); // The enum type parameter is implicitly casted to an Integer and is then passed to the function. Console.Write(paramEnum); Controller.AcceptsInt(paramEnum); ```name=Console Window ---------------- Begin Game --------------- 3 turned into 3! Right turned into 3! ## Enum-Integer Operations Enums can perform all operations as if they were Integers. For instance, you can perform all of the normal Integer math operations as implicit conversion will happen as necessary: ```lang=csharp, name=Using Integer Operations on an Enum // Here you can see use of the +, -, *, /, (), ^ and % Integer operators. var math = (ControllerButtons.Start + ControllerButtons.Right) ^ ControllerButtons.Left % ControllerButtons.Right - ControllerButtons.Right * ControllerButtons.Select; // When the math evaluates to an unaliased number, the variable, although still of the enum type, // prints out its integer value. Console.WriteLine(math); Console.WriteLine(typeid(math).Name); ```name=Console Window ---------------- Begin Game --------------- -3 ControllerButtons Notice that the typeid is not an Integer but ControllerButtons . An Integer value was printed because there was no alias in the enum that maps to -3 . Because the type is still that of the enum, it can be passed to the Controller.AcceptsEnum() function without issue. When an operation includes both an enum and an Integer the result is always promoted to the enum type. To get an Integer either Declare the variable you are storing the result in as an Integer: var result : Integer Cast it: result as Integer ## Caveat Although enums cast to Integers, they will not cast to Integers to perform cross-enum operations. ```lang=csharp, name=Invalid Cross-Enum Operation // This won't compile. Console.WriteLine(ControllerButtons.Down + Directions.Down); ```name=Console Window The binary '+' operator 'Positive / Add' is not valid with 'ControllerButtons' and 'Directions'. # Related Materials ## Manual - casting - functions ## Code Reference - enum_reference - integer","title":"Enums"},{"location":"manual/plasmamanual/lightning_in_plasma/flags/","text":"Flags Flags are very similar to enums except that they are ordered like a bit field (i.e. increasing in powers of two starting at 1 by default). Flags can be defined with the flags keyword: ```lang=csharp, name=Flags Type Defined flags Pizza { Sauce, Cheese, Pepperoni, Sausage, Peppers, Onion, Mushroom, Pineapple, CanadianBacon, Artichokes } The names flags enumeration line up with Integral Powers of two, the default starting value is `1`: Console.WriteLine(\"Pizza.Sauce as Integer: Pizza.Sauce as Integer \"); Console.WriteLine(\"Pizza.Cheese as Integer: Pizza.Cheese as Integer \"); Console.WriteLine(\"Pizza.Pepperoni as Integer: Pizza.Pepperoni as Integer \"); Console.WriteLine(\"Pizza.Sausage as Integer: Pizza.Sausage as Integer \"); Console.WriteLine(\"Pizza.Peppers as Integer: Pizza.Peppers as Integer \"); Console.WriteLine(\"Pizza.Onion as Integer: Pizza.Onion as Integer \"); Console.WriteLine(\"Pizza.Mushroom as Integer: Pizza.Mushroom as Integer \"); Console.WriteLine(\"Pizza.Pineapple as Integer: Pizza.Pineapple as Integer \"); Console.WriteLine(\"Pizza.CanadianBacon as Integer: Pizza.CanadianBacon as Integer \"); Console.WriteLine(\"Pizza.Artichokes as Integer: Pizza.Artichokes as Integer \"); ```name=Console Output Pizza.Sauce as Integer: 1 Pizza.Cheese as Integer: 2 Pizza.Pepperoni as Integer: 4 Pizza.Sausage as Integer: 8 Pizza.Peppers as Integer: 16 Pizza.Onion as Integer: 32 Pizza.Mushroom as Integer: 64 Pizza.Pineapple as Integer: 128 Pizza.CanadianBacon as Integer: 256 Pizza.Artichokes as Integer: 512 Flags are meant to work together; consider the following: ``lang=csharp, name=Adding Flags Together var hawaiian : Pizza = Pizza.Sauce + Pizza.Cheese + Pizza.CanadianBacon + Pizza.Pineapple; Console.WriteLine(hawaiian); // Using bitwise and, '&', to determine if the hawaiian pizza has pepperoni on it if ((hawaiian & Pizza.Pepperoni) != 0) { Console.WriteLine(\"Hawaiian pizza has Pizza.Pepperoni on it.\"); } else { Console.WriteLine(\"Hawaiian pizza does not have Pizza.Pepperoni` on it.\"); } ```name=Console Output ---------------- Begin Game --------------- Sauce | Cheese | Pineapple | CanadianBacon Hawaiian pizza does not have Pepperoni on it. Notice how it prints all of the active flags Basically, flags are enums that assign the next value by multiplying the previous value by two. For instance, given: ```lang=csharp, name=Defining a Custom Value flags Cookie { ChocolateChips, Raisins, Oatmeal, MacadamiaNuts = 3, Peanuts, Pecans, Caramel, Ginger, Cinnamon, Sugar = 3 } The values are different: ```lang=csharp Console.WriteLine(\"Cookie.ChocolateChips as Integer: `Cookie.ChocolateChips as Integer`\"); Console.WriteLine(\"Cookie.Raisins as Integer: `Cookie.Raisins as Integer`\"); Console.WriteLine(\"Cookie.Oatmeal as Integer: `Cookie.Oatmeal as Integer`\"); Console.WriteLine(\"Cookie.MacadamiaNuts as Integer: `Cookie.MacadamiaNuts as Integer`\"); Console.WriteLine(\"Cookie.Peanuts as Integer: `Cookie.Peanuts as Integer`\"); Console.WriteLine(\"Cookie.Pecans as Integer: `Cookie.Pecans as Integer`\"); Console.WriteLine(\"Cookie.Caramel as Integer: `Cookie.Caramel as Integer`\"); Console.WriteLine(\"Cookie.Ginger as Integer: `Cookie.Ginger as Integer`\"); Console.WriteLine(\"Cookie.Cinnamon as Integer: `Cookie.Cinnamon as Integer`\"); Console.WriteLine(\"Cookie.Sugar as Integer: `Cookie.Sugar as Integer`\"); ```name=Console Output Cookie.ChocolateChips as Integer: 1 Cookie.Raisins as Integer: 2 Cookie.Oatmeal as Integer: 4 Cookie.MacadamiaNuts as Integer: 3 Cookie.Peanuts as Integer: 6 Cookie.Pecans as Integer: 12 Cookie.Caramel as Integer: 24 Cookie.Ginger as Integer: 48 Cookie.Cinnamon as Integer: 96 Cookie.Sugar as Integer: 3 *Notice how after MacadamiaNuts is set to 3, the increment is no longer on powers of 2* The underlying structure is [integer](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown); therefore, you could interpret Integers as a flags type: ```lang=csharp, name=Casting Integers to Flags var random: Pizza = 583 as Pizza; Console.WriteLine(random); Console.WriteLine(7 as Cookie); ```name=Console Output Sauce | Cheese | Pepperoni | Mushroom | Artichokes ChocolateChips | Raisins | Oatmeal | MacadamiaNuts | Peanuts | Sugar *Notice how flags print both enumerated values if the flags share the same underlying integer value.* # Flags Rules ## Identifier Capitalization Identifiers for the flags type name and the enumerated values must be capitalized. ```lang=csharp, name=Invalid Value Capitalization // This will not compile. flags Directions {up, down, left, right} ```name=Console Output Enum declaration 'Directions' does not have a closing '}'. We found 'LowerIdentifier' but we expected to find '}'. ```lang=csharp, name=Invalid Type Name Capitalization // Neither will this. flags directions {Up, Down, Left, Right} ```name=Console Output Enum declaration is missing a name. Upper-camel case names are required here (use 'Directions' instead of 'directions'). ## Unique Identifiers Identifiers for the enumerated values must be unique. ```lang=csharp, name=Duplicate Identifiers // This will not compile. flags Directions {Up, Down, Up, Down} ```name=Console Output A value of the same name 'Up' has already been declared in the enum 'Directions'. Names must only be used once. ## Definition Scope Flags cannot be defined inside classes, structs, or other enums. ```lang=csharp, name=Incorrectly Defined Inside a Class // Classes cannot contain flags. class FlagsWrapper { // This won't compile. flags Directions {Up, Down, Left, Right}; } ```name=Console Output Class declaration 'FlagsWrapper' does not have a closing '}'. We found 'flags' but we expected to find '}'. ## Representation If there is no enumerated value the enum is represented as an Integer: ```lang=csharp, name=Integer That Does Not Map to Enum Console.WriteLine((64) as Cookie); ```name=Console Output 64 # Flags and Integers As in other languages, Integers make up the backbone of how flags work, and thus they work together in many situations. ## Casting Because of this, Lightning will implicitly cast from a flag to an Integer when necessary: ```lang=csharp, name=Implict Integer Cast class FlagsExample { [Static] // This function accepts an flags type. function AcceptsFlags(param: Pizza) { Console.WriteLine(\" turned into `param`!\"); } [Static] // This function accepts an integer type. function AcceptsInt(param: Integer) { Console.WriteLine(\" turned into `param`!\"); } } We can test the calls to these functions to see the interplay of casting: ```lang=csharp var paramInt = 128; var paramFlags = Pizza.Pineapple; // This works, as you'd expect Console.Write(paramFlags); FlagsExample.AcceptsFlags(paramFlags); // But if you want to accept an Integer in an enum's place you MUST cast. Console.Write(paramInt); *FlagsExample.AcceptsFlags(paramInt); * Doesn't compile FlagsExample.AcceptsFlags(paramInt as Pizza); ```name=Console Output Pineapple turned into Pineapple! 128 turned into Pineapple! ```lang=csharp, name=Invalid Implicit Cast // Attempting to pass an Integer without casting to an enum // will cause a compiler error Console.Write(paramInt); FlagsExample.AcceptsFlags(paramInt); ```name=Console Output The function 'AcceptsFlags' exists, but could not be resolved since the types of the arguments used did not match. The arguments you gave were: AcceptsFlags(Integer) The possible choices were: AcceptsFlags(param : Pizza) ```lang=csharp // This also works as you'd expect. Console.Write(paramInt); FlagsExample.AcceptsInt(paramInt); // The flags type parameter is implicitly casted to an Integer and is then passed to the function. Console.Write(paramFlags); FlagsExample.AcceptsInt(paramFlags); ```name=Console Output 128 turned into 128! Pineapple turned into 128! ## Flag-Integer Operations Flags can perform all operations as if they were Integers. For instance, you can perform all of the normal math operations as implicit conversion will happen as necessary from the enum type to Integer: ```lang=csharp, name=Flags Using Integer Operations // Here you can see use of the +, -, *, /, (), ^ and % Integer operators. var pizza = (Pizza.Sauce + Pizza.Cheese) ^ Pizza.Sausage % Pizza.Mushroom - Pizza.Artichokes * Pizza.Peppers; // When the math evaluates to an unaliased number, the variable, although still of the enum type, // prints out its integer value. Console.WriteLine(pizza); Console.WriteLine(typeid(pizza).Name); ```name=Console Output Sauce | Onion (-8159) Pizza You can see the typeid is not an Integer but Pizza. An Integer value was printed because there were flags with no alias in that maps all aspects of -8159 . Because the type is still of the flags, you could pass it to our FlagsExample.AcceptsFlags function without issue. When an operation includes both a flags and an Integer the result is always promoted to the flags type. If you want an Integer either - Declare the variable you are storing the result in as an Integer: var result : Integer - Cast it: result as Integer ## Caveat Although flags cast to Integers, they will not cast to Integers to perform cross-flags operations. ```lang=csharp, name=Invalid Cross-Flags Operation // This won't compile. Console.WriteLine(Pizza.Pineapple + Cookie.Sugar); ```name=Console Output The binary '+' operator 'Positive / Add' is not valid with 'Pizza' and 'Cookie'. # Related Materials # Manual - enums ## Code Reference - flags_reference - integer","title":"Flags"},{"location":"manual/plasmamanual/lightning_in_plasma/flags/#flags","text":"Flags are very similar to enums except that they are ordered like a bit field (i.e. increasing in powers of two starting at 1 by default). Flags can be defined with the flags keyword: ```lang=csharp, name=Flags Type Defined flags Pizza { Sauce, Cheese, Pepperoni, Sausage, Peppers, Onion, Mushroom, Pineapple, CanadianBacon, Artichokes } The names flags enumeration line up with Integral Powers of two, the default starting value is `1`: Console.WriteLine(\"Pizza.Sauce as Integer: Pizza.Sauce as Integer \"); Console.WriteLine(\"Pizza.Cheese as Integer: Pizza.Cheese as Integer \"); Console.WriteLine(\"Pizza.Pepperoni as Integer: Pizza.Pepperoni as Integer \"); Console.WriteLine(\"Pizza.Sausage as Integer: Pizza.Sausage as Integer \"); Console.WriteLine(\"Pizza.Peppers as Integer: Pizza.Peppers as Integer \"); Console.WriteLine(\"Pizza.Onion as Integer: Pizza.Onion as Integer \"); Console.WriteLine(\"Pizza.Mushroom as Integer: Pizza.Mushroom as Integer \"); Console.WriteLine(\"Pizza.Pineapple as Integer: Pizza.Pineapple as Integer \"); Console.WriteLine(\"Pizza.CanadianBacon as Integer: Pizza.CanadianBacon as Integer \"); Console.WriteLine(\"Pizza.Artichokes as Integer: Pizza.Artichokes as Integer \"); ```name=Console Output Pizza.Sauce as Integer: 1 Pizza.Cheese as Integer: 2 Pizza.Pepperoni as Integer: 4 Pizza.Sausage as Integer: 8 Pizza.Peppers as Integer: 16 Pizza.Onion as Integer: 32 Pizza.Mushroom as Integer: 64 Pizza.Pineapple as Integer: 128 Pizza.CanadianBacon as Integer: 256 Pizza.Artichokes as Integer: 512 Flags are meant to work together; consider the following: ``lang=csharp, name=Adding Flags Together var hawaiian : Pizza = Pizza.Sauce + Pizza.Cheese + Pizza.CanadianBacon + Pizza.Pineapple; Console.WriteLine(hawaiian); // Using bitwise and, '&', to determine if the hawaiian pizza has pepperoni on it if ((hawaiian & Pizza.Pepperoni) != 0) { Console.WriteLine(\"Hawaiian pizza has Pizza.Pepperoni on it.\"); } else { Console.WriteLine(\"Hawaiian pizza does not have Pizza.Pepperoni` on it.\"); } ```name=Console Output ---------------- Begin Game --------------- Sauce | Cheese | Pineapple | CanadianBacon Hawaiian pizza does not have Pepperoni on it. Notice how it prints all of the active flags Basically, flags are enums that assign the next value by multiplying the previous value by two. For instance, given: ```lang=csharp, name=Defining a Custom Value flags Cookie { ChocolateChips, Raisins, Oatmeal, MacadamiaNuts = 3, Peanuts, Pecans, Caramel, Ginger, Cinnamon, Sugar = 3 } The values are different: ```lang=csharp Console.WriteLine(\"Cookie.ChocolateChips as Integer: `Cookie.ChocolateChips as Integer`\"); Console.WriteLine(\"Cookie.Raisins as Integer: `Cookie.Raisins as Integer`\"); Console.WriteLine(\"Cookie.Oatmeal as Integer: `Cookie.Oatmeal as Integer`\"); Console.WriteLine(\"Cookie.MacadamiaNuts as Integer: `Cookie.MacadamiaNuts as Integer`\"); Console.WriteLine(\"Cookie.Peanuts as Integer: `Cookie.Peanuts as Integer`\"); Console.WriteLine(\"Cookie.Pecans as Integer: `Cookie.Pecans as Integer`\"); Console.WriteLine(\"Cookie.Caramel as Integer: `Cookie.Caramel as Integer`\"); Console.WriteLine(\"Cookie.Ginger as Integer: `Cookie.Ginger as Integer`\"); Console.WriteLine(\"Cookie.Cinnamon as Integer: `Cookie.Cinnamon as Integer`\"); Console.WriteLine(\"Cookie.Sugar as Integer: `Cookie.Sugar as Integer`\"); ```name=Console Output Cookie.ChocolateChips as Integer: 1 Cookie.Raisins as Integer: 2 Cookie.Oatmeal as Integer: 4 Cookie.MacadamiaNuts as Integer: 3 Cookie.Peanuts as Integer: 6 Cookie.Pecans as Integer: 12 Cookie.Caramel as Integer: 24 Cookie.Ginger as Integer: 48 Cookie.Cinnamon as Integer: 96 Cookie.Sugar as Integer: 3 *Notice how after MacadamiaNuts is set to 3, the increment is no longer on powers of 2* The underlying structure is [integer](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown); therefore, you could interpret Integers as a flags type: ```lang=csharp, name=Casting Integers to Flags var random: Pizza = 583 as Pizza; Console.WriteLine(random); Console.WriteLine(7 as Cookie); ```name=Console Output Sauce | Cheese | Pepperoni | Mushroom | Artichokes ChocolateChips | Raisins | Oatmeal | MacadamiaNuts | Peanuts | Sugar *Notice how flags print both enumerated values if the flags share the same underlying integer value.* # Flags Rules ## Identifier Capitalization Identifiers for the flags type name and the enumerated values must be capitalized. ```lang=csharp, name=Invalid Value Capitalization // This will not compile. flags Directions {up, down, left, right} ```name=Console Output Enum declaration 'Directions' does not have a closing '}'. We found 'LowerIdentifier' but we expected to find '}'. ```lang=csharp, name=Invalid Type Name Capitalization // Neither will this. flags directions {Up, Down, Left, Right} ```name=Console Output Enum declaration is missing a name. Upper-camel case names are required here (use 'Directions' instead of 'directions'). ## Unique Identifiers Identifiers for the enumerated values must be unique. ```lang=csharp, name=Duplicate Identifiers // This will not compile. flags Directions {Up, Down, Up, Down} ```name=Console Output A value of the same name 'Up' has already been declared in the enum 'Directions'. Names must only be used once. ## Definition Scope Flags cannot be defined inside classes, structs, or other enums. ```lang=csharp, name=Incorrectly Defined Inside a Class // Classes cannot contain flags. class FlagsWrapper { // This won't compile. flags Directions {Up, Down, Left, Right}; } ```name=Console Output Class declaration 'FlagsWrapper' does not have a closing '}'. We found 'flags' but we expected to find '}'. ## Representation If there is no enumerated value the enum is represented as an Integer: ```lang=csharp, name=Integer That Does Not Map to Enum Console.WriteLine((64) as Cookie); ```name=Console Output 64 # Flags and Integers As in other languages, Integers make up the backbone of how flags work, and thus they work together in many situations. ## Casting Because of this, Lightning will implicitly cast from a flag to an Integer when necessary: ```lang=csharp, name=Implict Integer Cast class FlagsExample { [Static] // This function accepts an flags type. function AcceptsFlags(param: Pizza) { Console.WriteLine(\" turned into `param`!\"); } [Static] // This function accepts an integer type. function AcceptsInt(param: Integer) { Console.WriteLine(\" turned into `param`!\"); } } We can test the calls to these functions to see the interplay of casting: ```lang=csharp var paramInt = 128; var paramFlags = Pizza.Pineapple; // This works, as you'd expect Console.Write(paramFlags); FlagsExample.AcceptsFlags(paramFlags); // But if you want to accept an Integer in an enum's place you MUST cast. Console.Write(paramInt); *FlagsExample.AcceptsFlags(paramInt); * Doesn't compile FlagsExample.AcceptsFlags(paramInt as Pizza); ```name=Console Output Pineapple turned into Pineapple! 128 turned into Pineapple! ```lang=csharp, name=Invalid Implicit Cast // Attempting to pass an Integer without casting to an enum // will cause a compiler error Console.Write(paramInt); FlagsExample.AcceptsFlags(paramInt); ```name=Console Output The function 'AcceptsFlags' exists, but could not be resolved since the types of the arguments used did not match. The arguments you gave were: AcceptsFlags(Integer) The possible choices were: AcceptsFlags(param : Pizza) ```lang=csharp // This also works as you'd expect. Console.Write(paramInt); FlagsExample.AcceptsInt(paramInt); // The flags type parameter is implicitly casted to an Integer and is then passed to the function. Console.Write(paramFlags); FlagsExample.AcceptsInt(paramFlags); ```name=Console Output 128 turned into 128! Pineapple turned into 128! ## Flag-Integer Operations Flags can perform all operations as if they were Integers. For instance, you can perform all of the normal math operations as implicit conversion will happen as necessary from the enum type to Integer: ```lang=csharp, name=Flags Using Integer Operations // Here you can see use of the +, -, *, /, (), ^ and % Integer operators. var pizza = (Pizza.Sauce + Pizza.Cheese) ^ Pizza.Sausage % Pizza.Mushroom - Pizza.Artichokes * Pizza.Peppers; // When the math evaluates to an unaliased number, the variable, although still of the enum type, // prints out its integer value. Console.WriteLine(pizza); Console.WriteLine(typeid(pizza).Name); ```name=Console Output Sauce | Onion (-8159) Pizza You can see the typeid is not an Integer but Pizza. An Integer value was printed because there were flags with no alias in that maps all aspects of -8159 . Because the type is still of the flags, you could pass it to our FlagsExample.AcceptsFlags function without issue. When an operation includes both a flags and an Integer the result is always promoted to the flags type. If you want an Integer either - Declare the variable you are storing the result in as an Integer: var result : Integer - Cast it: result as Integer ## Caveat Although flags cast to Integers, they will not cast to Integers to perform cross-flags operations. ```lang=csharp, name=Invalid Cross-Flags Operation // This won't compile. Console.WriteLine(Pizza.Pineapple + Cookie.Sugar); ```name=Console Output The binary '+' operator 'Positive / Add' is not valid with 'Pizza' and 'Cookie'. # Related Materials # Manual - enums ## Code Reference - flags_reference - integer","title":"Flags"},{"location":"manual/plasmamanual/lightning_in_plasma/functions/","text":"Functions A function is a named block of code (with its own scope that performs a task. Ideally, one function should perform just one task. A function may return a value of a specific type based on the operation performed in the function or it may return nothing at all. Functions can also take in values of a specific type, which are called parameters, that are used and/or changed by the operation of the function. Functions are declared using the function keyword: ```lang=csharp, name=Function Declaration // Note: // -function keyword is used // -function name is capitalized // -function name is followed by () // -when present parameters go in between () // -parameter names must start with a lowercase character // -parameters must have their type specified // -when a return type is present a colon ':' follows the ')' & the returned type follows the ':' function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType {// Scope of the function in wrapped in {} // function operations within this scope. // return keyword used to pass back return value specified. return MyReturnType(param1 + param2); } # Function Rules There are a number of important rules that functions in Lightning must follow. If these rules are not followed, an error will be thrown, as can be seen in the examples below. ## No Global Functions Lightning **does not support** global functions. They must be contained within the scope of either a [class](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/classes.markdown) or [struct](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/structs.markdown). Thus, the above would actually be encased like this: ```lang=csharp, name=Function Defined Within a Class class MyClassName { function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType { // Perform function operations here. return MyReturnType(param1 + param2); } } or this: ```lang=csharp, name=Function Defined Within a Struct struct MyStructName { function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType { // Perform function operations here. return MyReturnType(param1 + param2); } } Otherwise you may see an error like this ```name=Console Window Parsing could not be completed (we ran into something we didn't understand). The token we hit was 'function' with token type 'Function'. # The Static Keyword Static functions can be implemented using the [Static] attribute. Operations performed by functions which are static should be independent of independent of any particular data of the class. This is important as static functions can also be called with out access to an instance of the class by referencing the function through the non-instantied type: ```lang=csharp, name=Static Function class MyClass { [Static] // Marking it static allows you to reference the function without creating an instance. function ClassName():String { return \"MyClass\"; } } If we were to test it: Console.WriteLine(MyClass.ClassName()); the result would be ```name=ConsoleWindow MyClass NOTE: Unlike other languages static functions cannot be called from an instance, only from the class name. # Function Naming The first letter of a function name MUST be capitalized. While the rest of the name may remain un-capitalized, function names are traditionally written using upper camel case (e.g. MyFunctionName instead of Myfunctionname ). ```lang=csharp, name=Incorrect Function Name // Lowercase function name will cause a compiler error. function myFunctionName() // This won't work.. { // Perform function operations here. } ```name=Console Window Function declaration is missing a name. Upper-camel case names are required here (use 'MyFunctionName' instead of 'myFunctionName'). # Parameter and Variable Naming Parameters and locally-scoped (to the function scope in this case) MUST start with a lowercase character. While the rest of the name may remain un-capitalized, parameter and local variables are traditionally written using lower camel case (e.g. myParamName instead of myparamname ). ```lang=csharp, name=Incorrect Parameter Name // Capitalized parameter identifiers will cause a compiler error. function MyFunctionName(Param1: MyParamType) // This won't work. { // Capitalized locally-scoped variables will also cause a compiler error. var Count: Integer = 10; // This won't work. } ```name=Console Window Function declaration 'MyFunctionName' has an invalid argument list. We found 'UpperIdentifier' but we expected to find ')'. In this error, UpperIdentifier refers to the uppercase letter 'P' used in Param1 . As this is unacceptable for a parameter name, the error states that it expects to find the closing parenthesis instead. # Return Types Return types are appended to the function signature after the argument list separated by the : operator. When this is left off the return type is assumed to be Void. You can use the return keyword to return a value from the function; however, if the function signature has a Void return type, the return statement must be omitted. ```lang=csharp, name=Using return Without Specifying Return Type // Leaving off the return value, assumes nothing is returned. function MyFunctionName() { // 8 will NOT be returned since the signature does not specify a // return type (a compiler error will occur) return 8; } ```name=Console Window The return statement was not expected to return a '[ErrorType]' value, since the function does not declare it (no ':' at the end). # Related Materials ## Manual - attributes - classes - variables_and_data_types - classes - structs","title":"Functions"},{"location":"manual/plasmamanual/lightning_in_plasma/functions/#functions","text":"A function is a named block of code (with its own scope that performs a task. Ideally, one function should perform just one task. A function may return a value of a specific type based on the operation performed in the function or it may return nothing at all. Functions can also take in values of a specific type, which are called parameters, that are used and/or changed by the operation of the function. Functions are declared using the function keyword: ```lang=csharp, name=Function Declaration // Note: // -function keyword is used // -function name is capitalized // -function name is followed by () // -when present parameters go in between () // -parameter names must start with a lowercase character // -parameters must have their type specified // -when a return type is present a colon ':' follows the ')' & the returned type follows the ':' function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType {// Scope of the function in wrapped in {} // function operations within this scope. // return keyword used to pass back return value specified. return MyReturnType(param1 + param2); } # Function Rules There are a number of important rules that functions in Lightning must follow. If these rules are not followed, an error will be thrown, as can be seen in the examples below. ## No Global Functions Lightning **does not support** global functions. They must be contained within the scope of either a [class](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/classes.markdown) or [struct](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/structs.markdown). Thus, the above would actually be encased like this: ```lang=csharp, name=Function Defined Within a Class class MyClassName { function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType { // Perform function operations here. return MyReturnType(param1 + param2); } } or this: ```lang=csharp, name=Function Defined Within a Struct struct MyStructName { function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType { // Perform function operations here. return MyReturnType(param1 + param2); } } Otherwise you may see an error like this ```name=Console Window Parsing could not be completed (we ran into something we didn't understand). The token we hit was 'function' with token type 'Function'. # The Static Keyword Static functions can be implemented using the [Static] attribute. Operations performed by functions which are static should be independent of independent of any particular data of the class. This is important as static functions can also be called with out access to an instance of the class by referencing the function through the non-instantied type: ```lang=csharp, name=Static Function class MyClass { [Static] // Marking it static allows you to reference the function without creating an instance. function ClassName():String { return \"MyClass\"; } } If we were to test it: Console.WriteLine(MyClass.ClassName()); the result would be ```name=ConsoleWindow MyClass NOTE: Unlike other languages static functions cannot be called from an instance, only from the class name. # Function Naming The first letter of a function name MUST be capitalized. While the rest of the name may remain un-capitalized, function names are traditionally written using upper camel case (e.g. MyFunctionName instead of Myfunctionname ). ```lang=csharp, name=Incorrect Function Name // Lowercase function name will cause a compiler error. function myFunctionName() // This won't work.. { // Perform function operations here. } ```name=Console Window Function declaration is missing a name. Upper-camel case names are required here (use 'MyFunctionName' instead of 'myFunctionName'). # Parameter and Variable Naming Parameters and locally-scoped (to the function scope in this case) MUST start with a lowercase character. While the rest of the name may remain un-capitalized, parameter and local variables are traditionally written using lower camel case (e.g. myParamName instead of myparamname ). ```lang=csharp, name=Incorrect Parameter Name // Capitalized parameter identifiers will cause a compiler error. function MyFunctionName(Param1: MyParamType) // This won't work. { // Capitalized locally-scoped variables will also cause a compiler error. var Count: Integer = 10; // This won't work. } ```name=Console Window Function declaration 'MyFunctionName' has an invalid argument list. We found 'UpperIdentifier' but we expected to find ')'. In this error, UpperIdentifier refers to the uppercase letter 'P' used in Param1 . As this is unacceptable for a parameter name, the error states that it expects to find the closing parenthesis instead. # Return Types Return types are appended to the function signature after the argument list separated by the : operator. When this is left off the return type is assumed to be Void. You can use the return keyword to return a value from the function; however, if the function signature has a Void return type, the return statement must be omitted. ```lang=csharp, name=Using return Without Specifying Return Type // Leaving off the return value, assumes nothing is returned. function MyFunctionName() { // 8 will NOT be returned since the signature does not specify a // return type (a compiler error will occur) return 8; } ```name=Console Window The return statement was not expected to return a '[ErrorType]' value, since the function does not declare it (no ':' at the end). # Related Materials ## Manual - attributes - classes - variables_and_data_types - classes - structs","title":"Functions"},{"location":"manual/plasmamanual/lightning_in_plasma/hashmap/","text":"HashMap A HashMap is a templated data structure that can map unique keys of type A to values of type B (where A and B can be the same type). # Declaration NOTE: The types HashMap and KeyValue not currently appear in the lightning_base_types list and does not currently show up in code completion suggestions (T552) during initial declaration. HashMap declaration is similiar to the declaration of any templated type in Lightning. When a HashMap is created, by default, it has no elements. ```name=HashMap Declaration Example, lang=csharp var namesToObjects = HashMap String, Cog ; var idToCost = HashMap Integer, Real ; var spawnerToEnemyType = HashMap Cog, Archetype ; var enemyType = HashMap Archetype, Integer ; HashMaps have a variety of uses. One may use them to keep track of objects at runtime by an alternate name, or to keep count of how many of each enemy archetype a spawner has created at runtime. Below are some simple example of HashMap functionality which map unique [integer](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown) keys to non-unique [string](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/string.markdown) values. ## Initialization It is common for a HashMap to be populated at runtime, but it is also possible to define elements within an initializer list. ```name=Initializer List Example, lang=csharp var hash = HashMap[Integer, String]() { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, two} {1, one} {3, three} } Notice that the order in which the elements are printed is not the order in which they were added to the HashMap. This is due to HashMaps having no inherent order, unlike [Arrays](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown). Instead of the pairs being printed in an indexed order they are printed in an arbitrary order based on the hash of the pair. NOTE: The HashMap templated type is currently lacking templated print functionality similiar to [Arrays](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/arrays.markdown). The `PrintHashMap` function used in this page is implemented below: ```name=PrintHashMap, lang=csharp function PrintHashMap(hash : HashMap[Integer, String]) { Console.WriteLine(\"`hash` \\n{\"); foreach(var pair in hash.All) { Console.WriteLine(\" {`pair.Key`, `pair.Value`}\"); } Console.WriteLine(\"}\"); } # HashMap Access HashMap elements can be accessed for reading or writing in a few different ways which have different primary use cases. ## The [] Operator The [] (pronounced subscript) operator is the primary way to access any value// within a HashMap. When a valid //key is passed to the subscript operator the corresponding value is returned from the HashMap. The [] operator can also be used to assign new values to keys within the HashMap. ```name=[] Operator Example, lang=csharp var hash = HashMap Integer, String { {1, \"one\"}, {2, \"two\"} }; hash[3] = \"three\"; Console.WriteLine(hash[1]); Console.WriteLine(hash[2]); Console.WriteLine(hash[3]); ```name=Console Output one two three IMPORTANT: If an invalid key is passed to the [] operator a runtime exception will be thrown: ## Get Functions Another way to access the KeyValue pairs of a HashMap is to use the get functions. ### HashMap.Get HashMap.Get behaves the same as the [] operator, as it is the function actually called by the [] operator. However, being a function, Get can be referenced by a delegate. ```name=HashMap.Get Example, lang=csharp var hash = HashMap Integer, String { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; Console.WriteLine(hash.Get(1)); Console.WriteLine(hash.Get(2)); Console.WriteLine(hash.Get(3)); ```name=Console Output one two three ### HashMap.GetOrDefault HashMap.GetOrDefault behaves the same as Get , but instead of throwing an exception when passed an invalid key it returns a default// value that is the same type as the //values of the HashMap. ```name=HashMap.GetOrDefault Example, lang=csharp var hash = HashMap Integer, String { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; Console.WriteLine(hash.GetOrDefault(1, \"default\")); Console.WriteLine(hash.GetOrDefault(2, \"default\")); Console.WriteLine(hash.GetOrDefault(3, \"default\")); Console.WriteLine(hash.GetOrDefault(4, \"default\")); Console.WriteLine(hash.GetOrDefault(5)); ```name=Console Output one two three default (null) String ### HashMap.GetOrError GetOrError has the same functionality as Get , the only difference being that it is not called by the [] operator. # Adding to a HashMap There are multiple ways to add KeyValue pairs to HashMaps. Add , Set , and the [] operator can all be used to add KeyValue pairs to the HashMap. ## HashMap.Add Add takes a key and //value//, adding the pair to the HashMap. If the given key already exists then a runtime exception will be thrown. ```name=Add, lang=csharp var hash = HashMap Integer, String ; hash.Add(1, \"one\"); hash.Add(2, \"two\"); hash.Add(3, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, two} {1, one} {3, three} } It should be noted that the Add function is called for each KeyValue pair when a HashMap is populated using an initializer list. ## HashMap.Set Set is very similar to Add . Set takes a key// and //value//, adding the pair to the HashMap if the key does not exist. If the key does exist then the //value paired with the given key will be replaced with the //given value//. ```name=Set, lang=csharp var hash = HashMap Integer, String ; hash.Set(1, \"one\"); hash.Set(2, \"two\"); hash.Set(2, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, three} {1, one} } ### HashMap.SetOrOverwrite The relationship of Set and SetOrOverwrite is simliar to that of Get and GetOrError in that they have the same behavior. However, like Get , Set is called by the [] operator during assignment. ```name=SetOrOverwrite, lang=csharp var hash = HashMap Integer, String ; hash.SetOrOverwrite(1, \"one\"); hash.SetOrOverwrite(2, \"two\"); hash.SetOrOverwrite(2, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, three} {1, one} } ### HashMap.SetOrIgnore SetOrIgnore behaves the same as Set except if the given key already exists the function returns leaving the HashMap unmodified. ```name=SetOrIgnore, lang=csharp var hash = HashMap Integer, String ; hash.SetOrIgnore(1, \"one\"); hash.SetOrIgnore(2, \"two\"); hash.SetOrIgnore(2, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, two} {1, one} } ### HashMap.SetOrError SetOrError follows a similiar behavior to GetOrError . If the key passed to SetOrError already exists in the HashMap then an exception will be thrown. # HashMap Container Operations ## HashMap.Clear The Clear function simply removes all KeyValue pairs from the HashMap. ```name=Clear Example, lang=csharp var hash = HashMap Integer, String ; hash[1] = \"one\"; hash[2] = \"two\"; hash[3] = \"three\"; this.PrintHashMap(hash); hash.Clear(); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20712538) { {2, two} {1, one} {3, three} } HashMap[Integer, String] (20712538) { } ## HashMap.Contains Contains takes a parameter matching the key type of the HashMap and returns true if the given key exists in the HashMap. ``name=Contains Example, lang=csharp var hash = HashMap[Integer, String](); hash[1] = \"one\"; hash[2] = \"two\"; hash[3] = \"three\"; this.PrintHashMap(hash); Console.WriteLine(\"This HashMap contains the key 2: hash.Contains(2) \"); Console.WriteLine(\"This HashMap contains the key 4: hash.Contains(4)`\"); ```name=Console Output HashMap[Integer, String] (20713030) { {2, two} {1, one} {3, three} } This HashMap contains the key 2: true This HashMap contains the key 4: false # HashMap Range Functions There are a number of HashMap properties providing iterable ranges that are particularly useful for examining each pair in a HashMap. ## HashMap.All Contains an iterable range of all KeyValue pairs in the HashMap. name=PrintHashMap, lang=csharp function PrintHashMap(hash : HashMap[Integer, String]) { Console.WriteLine(\"`hash` \\n{\"); foreach(var pair in hash.All) { Console.WriteLine(\" {`pair.Key`, `pair.Value`}\"); } Console.WriteLine(\"}\"); } The PrintHashMap function is an excellent example of how one may use All . ## HashMap.Keys & HashMap.Values Keys and Values return iterable ranges of containing the keys and values in the HashMap correspondingly. # HashMap.Count Count returns the number of pairs in the HashMap. # Related Materials ## Manual - Arrays ## Reference - Arrays - integer - string","title":"HashMap"},{"location":"manual/plasmamanual/lightning_in_plasma/hashmap/#hashmap","text":"A HashMap is a templated data structure that can map unique keys of type A to values of type B (where A and B can be the same type). # Declaration NOTE: The types HashMap and KeyValue not currently appear in the lightning_base_types list and does not currently show up in code completion suggestions (T552) during initial declaration. HashMap declaration is similiar to the declaration of any templated type in Lightning. When a HashMap is created, by default, it has no elements. ```name=HashMap Declaration Example, lang=csharp var namesToObjects = HashMap String, Cog ; var idToCost = HashMap Integer, Real ; var spawnerToEnemyType = HashMap Cog, Archetype ; var enemyType = HashMap Archetype, Integer ; HashMaps have a variety of uses. One may use them to keep track of objects at runtime by an alternate name, or to keep count of how many of each enemy archetype a spawner has created at runtime. Below are some simple example of HashMap functionality which map unique [integer](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/integer.markdown) keys to non-unique [string](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/string.markdown) values. ## Initialization It is common for a HashMap to be populated at runtime, but it is also possible to define elements within an initializer list. ```name=Initializer List Example, lang=csharp var hash = HashMap[Integer, String]() { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, two} {1, one} {3, three} } Notice that the order in which the elements are printed is not the order in which they were added to the HashMap. This is due to HashMaps having no inherent order, unlike [Arrays](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/array_t.markdown). Instead of the pairs being printed in an indexed order they are printed in an arbitrary order based on the hash of the pair. NOTE: The HashMap templated type is currently lacking templated print functionality similiar to [Arrays](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/arrays.markdown). The `PrintHashMap` function used in this page is implemented below: ```name=PrintHashMap, lang=csharp function PrintHashMap(hash : HashMap[Integer, String]) { Console.WriteLine(\"`hash` \\n{\"); foreach(var pair in hash.All) { Console.WriteLine(\" {`pair.Key`, `pair.Value`}\"); } Console.WriteLine(\"}\"); } # HashMap Access HashMap elements can be accessed for reading or writing in a few different ways which have different primary use cases. ## The [] Operator The [] (pronounced subscript) operator is the primary way to access any value// within a HashMap. When a valid //key is passed to the subscript operator the corresponding value is returned from the HashMap. The [] operator can also be used to assign new values to keys within the HashMap. ```name=[] Operator Example, lang=csharp var hash = HashMap Integer, String { {1, \"one\"}, {2, \"two\"} }; hash[3] = \"three\"; Console.WriteLine(hash[1]); Console.WriteLine(hash[2]); Console.WriteLine(hash[3]); ```name=Console Output one two three IMPORTANT: If an invalid key is passed to the [] operator a runtime exception will be thrown: ## Get Functions Another way to access the KeyValue pairs of a HashMap is to use the get functions. ### HashMap.Get HashMap.Get behaves the same as the [] operator, as it is the function actually called by the [] operator. However, being a function, Get can be referenced by a delegate. ```name=HashMap.Get Example, lang=csharp var hash = HashMap Integer, String { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; Console.WriteLine(hash.Get(1)); Console.WriteLine(hash.Get(2)); Console.WriteLine(hash.Get(3)); ```name=Console Output one two three ### HashMap.GetOrDefault HashMap.GetOrDefault behaves the same as Get , but instead of throwing an exception when passed an invalid key it returns a default// value that is the same type as the //values of the HashMap. ```name=HashMap.GetOrDefault Example, lang=csharp var hash = HashMap Integer, String { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; Console.WriteLine(hash.GetOrDefault(1, \"default\")); Console.WriteLine(hash.GetOrDefault(2, \"default\")); Console.WriteLine(hash.GetOrDefault(3, \"default\")); Console.WriteLine(hash.GetOrDefault(4, \"default\")); Console.WriteLine(hash.GetOrDefault(5)); ```name=Console Output one two three default (null) String ### HashMap.GetOrError GetOrError has the same functionality as Get , the only difference being that it is not called by the [] operator. # Adding to a HashMap There are multiple ways to add KeyValue pairs to HashMaps. Add , Set , and the [] operator can all be used to add KeyValue pairs to the HashMap. ## HashMap.Add Add takes a key and //value//, adding the pair to the HashMap. If the given key already exists then a runtime exception will be thrown. ```name=Add, lang=csharp var hash = HashMap Integer, String ; hash.Add(1, \"one\"); hash.Add(2, \"two\"); hash.Add(3, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, two} {1, one} {3, three} } It should be noted that the Add function is called for each KeyValue pair when a HashMap is populated using an initializer list. ## HashMap.Set Set is very similar to Add . Set takes a key// and //value//, adding the pair to the HashMap if the key does not exist. If the key does exist then the //value paired with the given key will be replaced with the //given value//. ```name=Set, lang=csharp var hash = HashMap Integer, String ; hash.Set(1, \"one\"); hash.Set(2, \"two\"); hash.Set(2, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, three} {1, one} } ### HashMap.SetOrOverwrite The relationship of Set and SetOrOverwrite is simliar to that of Get and GetOrError in that they have the same behavior. However, like Get , Set is called by the [] operator during assignment. ```name=SetOrOverwrite, lang=csharp var hash = HashMap Integer, String ; hash.SetOrOverwrite(1, \"one\"); hash.SetOrOverwrite(2, \"two\"); hash.SetOrOverwrite(2, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, three} {1, one} } ### HashMap.SetOrIgnore SetOrIgnore behaves the same as Set except if the given key already exists the function returns leaving the HashMap unmodified. ```name=SetOrIgnore, lang=csharp var hash = HashMap Integer, String ; hash.SetOrIgnore(1, \"one\"); hash.SetOrIgnore(2, \"two\"); hash.SetOrIgnore(2, \"three\"); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20744110) { {2, two} {1, one} } ### HashMap.SetOrError SetOrError follows a similiar behavior to GetOrError . If the key passed to SetOrError already exists in the HashMap then an exception will be thrown. # HashMap Container Operations ## HashMap.Clear The Clear function simply removes all KeyValue pairs from the HashMap. ```name=Clear Example, lang=csharp var hash = HashMap Integer, String ; hash[1] = \"one\"; hash[2] = \"two\"; hash[3] = \"three\"; this.PrintHashMap(hash); hash.Clear(); this.PrintHashMap(hash); ```name=Console Output HashMap[Integer, String] (20712538) { {2, two} {1, one} {3, three} } HashMap[Integer, String] (20712538) { } ## HashMap.Contains Contains takes a parameter matching the key type of the HashMap and returns true if the given key exists in the HashMap. ``name=Contains Example, lang=csharp var hash = HashMap[Integer, String](); hash[1] = \"one\"; hash[2] = \"two\"; hash[3] = \"three\"; this.PrintHashMap(hash); Console.WriteLine(\"This HashMap contains the key 2: hash.Contains(2) \"); Console.WriteLine(\"This HashMap contains the key 4: hash.Contains(4)`\"); ```name=Console Output HashMap[Integer, String] (20713030) { {2, two} {1, one} {3, three} } This HashMap contains the key 2: true This HashMap contains the key 4: false # HashMap Range Functions There are a number of HashMap properties providing iterable ranges that are particularly useful for examining each pair in a HashMap. ## HashMap.All Contains an iterable range of all KeyValue pairs in the HashMap. name=PrintHashMap, lang=csharp function PrintHashMap(hash : HashMap[Integer, String]) { Console.WriteLine(\"`hash` \\n{\"); foreach(var pair in hash.All) { Console.WriteLine(\" {`pair.Key`, `pair.Value`}\"); } Console.WriteLine(\"}\"); } The PrintHashMap function is an excellent example of how one may use All . ## HashMap.Keys & HashMap.Values Keys and Values return iterable ranges of containing the keys and values in the HashMap correspondingly. # HashMap.Count Count returns the number of pairs in the HashMap. # Related Materials ## Manual - Arrays ## Reference - Arrays - integer - string","title":"HashMap"},{"location":"manual/plasmamanual/lightning_in_plasma/inheritance/","text":"Inheritance Inheritance allows a child class to automatically receive all of the data and functionality defined within the base class. ```name=Feline, lang=csharp class Feline { constructor() { } } ```name=Lion, lang=csharp // A colon designates an identifier for a base class follows. class Lion : Feline { // a constructor is not necessary when one is inherited from the base class. } ```name=Using Feline & Lion, lang=csharp var cat = new Feline(); var simba = new Lion(); // Instantiated from the inherited constructor In the above example the variable `simba` can be instantiated as a `Lion` using the constructor from `Feline`. # The **base** Keyword The **base** [keyword](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/keywords.markdown) is for use when defining an inherited class; it allows you to call the constructor of the base class being inherited from before running an explicitly defined constructor. ```name=Animal, lang=csharp class Animal { var Legs : Integer = 4; constructor() { } constructor(legs : Integer) { this.Legs = legs; } function ToString() : String { var builder = new StringBuilder(); builder.Write(\"Legs: \"); builder.Write(this.Legs); return builder.ToString(); } } The class animal defines a non-default constructor which takes a number of legs for the animal as a parameter. ```name=Human, lang=csharp class Human : Animal { constructor() : base(2) { } } The class `Human` which inherits from `Animal` can use `Animal`'s constructor by using the `base` keyword. In this situation either the default or non-default constructor from `Animal` could be called using based. Which constructor is called is determined by the parameters passed to the `()` after the`base` keyword. Because `2` is passed to the `base` keyword the **non-default** constructor of `Animal` is called before any implementation within the defined **default** constructor of `Human`. ```name=Using Animal & Human, lang=csharp var animal : Animal = new Animal(); Console.WriteLine(animal.ToString()); // Legs: 4 var jerry = new Human(); Console.WriteLine(jerry.ToString()); // Legs: 2 In this runtime example both Animal and Human are instantiated using their default constructor. ```name=Console Output, lang=csharp ---------------- Begin Game --------------- Legs: 4 Legs: 2 As can be seen in the console output the `Human` **default** constructor calls the **non-default** constructor of `Animal` and passes it `2`. # Classes & Structs Although Lightning currently does not throw an error, erratic and unexpected behavior will result from having a class inherit from a struct and vice versa. **i.e.** ```name=Incompatible Inheritance, lang=csharp // Mismatching the struct/class between parent and child struct MyBaseStruct { constructor() { } } class MyClass : MyBaseStruct { constructor() : base() { } } ```name=Console WriteLine // Leads to issues such as the inability to cast to the base class type. var incompatible: MyClass = new MyClass(); Console.WriteLine(typeid(incompatible).Name); // MyClass Console.WriteLine(typeid(incompatible as MyBaseStruct).Name); // This won't compile. # The Virtual Keyword Virtual is used to give Base classes the ability to determine some functions as being able to be *overridden* by its derived classes. The new `Speak` function defined in `Animal` will serve as an example: ```name=Applying Virtual to a Function,lang=csharp class Animal { var Legs:Integer = 4; constructor() { } constructor(legs : Integer) { this.Legs = legs; } function ToString() : String { var builder = new StringBuilder(); builder.Write(\"Legs: \"); builder.Write(this.Legs); return builder.ToString(); } [Virtual] function Speak() : String { return \"...\"; } } By default, animals don't say anything, so a string that says ... is returned. It is known that there are animals that do speak, so the [Virtual] attribute is added to the function to let other developers know that if a class is is derived from Animal , the functionality of Speak may be overridden. ```name=Animal, lang=csharp class Human : Animal { constructor() : base(2) { } [Override] function Speak() : String { return \"Hello\"; } } Humans do speak, so changeing the funcitonality of `Human.Speak` to say something other than `...` makes perfect sense. The `[Override]` attribute applied to `Speak` marks this implementation of the `Speak` function to replace `Animal.Speak` which is marked as `[Virtual]`. This can also be extended to other classes like a Cat: ```name=Cat, lang=csharp class Cat : Animal { // Cats have 4 legs, so let's update the constructor constructor() : base(4) { } [Override] function Speak() : String { return \"Meow\"; } } Now, this is great in the fact that we can now do something like the following: ```name=Using Overridden Functions, lang=csharp var animal = Animal(); Console.WriteLine(animal.Speak()); var human = Human(); Console.WriteLine(human.Speak()); var cat = Cat(); Console.WriteLine(cat.Speak()); ```name=Console Output ... Hello Meow The real magic of inheritance comes in the idea that a class of a derived class can be stored in a variable that matches the type of the base class. ```lang=csharp var humanIsAnAnimal : Animal = Human(); Console.WriteLine(humanIsAnAnimal.Speak()); Even though the variable is of type Animal, the Human version of the function is called: ```name=Console Output Hello This is because whenever a virtual method is called, the run-time type of the object is checked for an overriding member . The overriding member in the most derived class will then be called, which might be the original function if the derived class(es) have not overridden it. This can be quite useful with an array of Animals. ```name=Array of Animals, lang=csharp var a : Animal = Animal(); var b : Human = Human(); var c : Animal = Human(); var d : Cat = Cat(); var array : Array[Animal] = Array Animal {a,b,c,d}; foreach (var animal in array) { Console.WriteLine(animal.Speak()); } ```name=Console Output, lang=csharp ... Hello Hello Meow # Calling Parent Functions It's also possible to call the parent version of a function from a child class. In order to do this, the object must be cast to the base type and then use the non-virtual operator (~>) to call the base version: ```name=Calling base Function from Derived, lang=csharp var d : Cat = Cat(); (d as Animal)~>Speak(); ```name=Console Output, lang=csharp ... # Related Materials ## Manual - attributes","title":"Inheritance"},{"location":"manual/plasmamanual/lightning_in_plasma/inheritance/#inheritance","text":"Inheritance allows a child class to automatically receive all of the data and functionality defined within the base class. ```name=Feline, lang=csharp class Feline { constructor() { } } ```name=Lion, lang=csharp // A colon designates an identifier for a base class follows. class Lion : Feline { // a constructor is not necessary when one is inherited from the base class. } ```name=Using Feline & Lion, lang=csharp var cat = new Feline(); var simba = new Lion(); // Instantiated from the inherited constructor In the above example the variable `simba` can be instantiated as a `Lion` using the constructor from `Feline`. # The **base** Keyword The **base** [keyword](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/keywords.markdown) is for use when defining an inherited class; it allows you to call the constructor of the base class being inherited from before running an explicitly defined constructor. ```name=Animal, lang=csharp class Animal { var Legs : Integer = 4; constructor() { } constructor(legs : Integer) { this.Legs = legs; } function ToString() : String { var builder = new StringBuilder(); builder.Write(\"Legs: \"); builder.Write(this.Legs); return builder.ToString(); } } The class animal defines a non-default constructor which takes a number of legs for the animal as a parameter. ```name=Human, lang=csharp class Human : Animal { constructor() : base(2) { } } The class `Human` which inherits from `Animal` can use `Animal`'s constructor by using the `base` keyword. In this situation either the default or non-default constructor from `Animal` could be called using based. Which constructor is called is determined by the parameters passed to the `()` after the`base` keyword. Because `2` is passed to the `base` keyword the **non-default** constructor of `Animal` is called before any implementation within the defined **default** constructor of `Human`. ```name=Using Animal & Human, lang=csharp var animal : Animal = new Animal(); Console.WriteLine(animal.ToString()); // Legs: 4 var jerry = new Human(); Console.WriteLine(jerry.ToString()); // Legs: 2 In this runtime example both Animal and Human are instantiated using their default constructor. ```name=Console Output, lang=csharp ---------------- Begin Game --------------- Legs: 4 Legs: 2 As can be seen in the console output the `Human` **default** constructor calls the **non-default** constructor of `Animal` and passes it `2`. # Classes & Structs Although Lightning currently does not throw an error, erratic and unexpected behavior will result from having a class inherit from a struct and vice versa. **i.e.** ```name=Incompatible Inheritance, lang=csharp // Mismatching the struct/class between parent and child struct MyBaseStruct { constructor() { } } class MyClass : MyBaseStruct { constructor() : base() { } } ```name=Console WriteLine // Leads to issues such as the inability to cast to the base class type. var incompatible: MyClass = new MyClass(); Console.WriteLine(typeid(incompatible).Name); // MyClass Console.WriteLine(typeid(incompatible as MyBaseStruct).Name); // This won't compile. # The Virtual Keyword Virtual is used to give Base classes the ability to determine some functions as being able to be *overridden* by its derived classes. The new `Speak` function defined in `Animal` will serve as an example: ```name=Applying Virtual to a Function,lang=csharp class Animal { var Legs:Integer = 4; constructor() { } constructor(legs : Integer) { this.Legs = legs; } function ToString() : String { var builder = new StringBuilder(); builder.Write(\"Legs: \"); builder.Write(this.Legs); return builder.ToString(); } [Virtual] function Speak() : String { return \"...\"; } } By default, animals don't say anything, so a string that says ... is returned. It is known that there are animals that do speak, so the [Virtual] attribute is added to the function to let other developers know that if a class is is derived from Animal , the functionality of Speak may be overridden. ```name=Animal, lang=csharp class Human : Animal { constructor() : base(2) { } [Override] function Speak() : String { return \"Hello\"; } } Humans do speak, so changeing the funcitonality of `Human.Speak` to say something other than `...` makes perfect sense. The `[Override]` attribute applied to `Speak` marks this implementation of the `Speak` function to replace `Animal.Speak` which is marked as `[Virtual]`. This can also be extended to other classes like a Cat: ```name=Cat, lang=csharp class Cat : Animal { // Cats have 4 legs, so let's update the constructor constructor() : base(4) { } [Override] function Speak() : String { return \"Meow\"; } } Now, this is great in the fact that we can now do something like the following: ```name=Using Overridden Functions, lang=csharp var animal = Animal(); Console.WriteLine(animal.Speak()); var human = Human(); Console.WriteLine(human.Speak()); var cat = Cat(); Console.WriteLine(cat.Speak()); ```name=Console Output ... Hello Meow The real magic of inheritance comes in the idea that a class of a derived class can be stored in a variable that matches the type of the base class. ```lang=csharp var humanIsAnAnimal : Animal = Human(); Console.WriteLine(humanIsAnAnimal.Speak()); Even though the variable is of type Animal, the Human version of the function is called: ```name=Console Output Hello This is because whenever a virtual method is called, the run-time type of the object is checked for an overriding member . The overriding member in the most derived class will then be called, which might be the original function if the derived class(es) have not overridden it. This can be quite useful with an array of Animals. ```name=Array of Animals, lang=csharp var a : Animal = Animal(); var b : Human = Human(); var c : Animal = Human(); var d : Cat = Cat(); var array : Array[Animal] = Array Animal {a,b,c,d}; foreach (var animal in array) { Console.WriteLine(animal.Speak()); } ```name=Console Output, lang=csharp ... Hello Hello Meow # Calling Parent Functions It's also possible to call the parent version of a function from a child class. In order to do this, the object must be cast to the base type and then use the non-virtual operator (~>) to call the base version: ```name=Calling base Function from Derived, lang=csharp var d : Cat = Cat(); (d as Animal)~>Speak(); ```name=Console Output, lang=csharp ... # Related Materials ## Manual - attributes","title":"Inheritance"},{"location":"manual/plasmamanual/lightning_in_plasma/keywords/","text":"Lightning reserved keywords. # The following are keywords used in Lightning: | as | base | break | class | constructor | | continue | debug | delegate | delete | destructor | | do | else | enum | false | flags | | for | foreach | function | get | if | | in | loop | new | null | ref | | return | sends | set | struct | throw | | true | typeid | value | var | while | | this | local | scope | | # Below are keywords unused by Lightning, but they are still reserved keywords: | abstract | alias | alignof | assert | auto | | case | catch | checked | const | default | | dynamic | explicit | export | extern | finally | | fixed | friend | global | goto | immutable | | implicit | import | yield | include | inline | | interface | internal | is | typeof | lock | | module | mutable | namespace | operator | out | | override | package | params | partial | positional | | private | protected | public | readonly | register | | require | where | sealed | signed | sizeof | | stackalloc | static | switch | timeout | try | | typedef | typename | unchecked | unsafe | unsigned | | using | virtual | volatile | |","title":"Keywords"},{"location":"manual/plasmamanual/lightning_in_plasma/looping/","text":"Looping Looping is a technique used to execute code an arbitrary number of times. # The Loop Keyword The loop keyword defines the most basic type of looping structure in Lightning. This is most useful when processing each element in a container, where the container size may not be known. ```lang=csharp, name=Loop var i = 0; var sum = 0; loop { sum += i; Console.WriteLine(sum); if (i >= 3) return; ++i; } ```name=Console window 0 1 3 The values of sum printed are 0 , 1 , and 3 because sum += 0 , sum += 1 , and sum += 2 are all executed in sequence with a call to Console.WriteLine after each. Whatever code is in the block following loop will be repeatedly executed until the loop is escaped with return , break , or continue . return is a directive that leaves the function , and therefore can be used to exit a loop. # While and Do While While the loop keyword is sufficient in executing code an arbitrary ammount of times, there are other types of loop blocks that make for cleaner code. ```lang=csharp, name=While var i = 0; var sum = 0; while(i < 3) { sum += i; Console.WriteLine(sum); ++i; } ```name=Console window 0 1 3 The above snippet will sum together numbers in sequence like in the Loop code snippet, but this time using the while keyword. while will run when i is 0 , 1 , and 2 , and the sequence of sums will be the same as in the Loop code snippet. ```lang=csharp, name=Do While 1 var i = 0; var sum = 0; do { sum += i; Console.WriteLine(sum); ++i; } while(i < 3) ```name=Console window 0 1 3 The above snippet also produces the same result as the While code snippet, but with do while instead of while . The do while structure is similar to a while loop, but with the looping condition is checked after the loop is run. One should be mindful of the implications of do while , that whatever is in the code block following do will run at least once. Still, the do while block is executed when i is 0 , 1 , and 2 . ```lang=csharp, name=Do While 2 var i = 100; var sum = 0; do { sum += i; Console.WriteLine(sum); ++i; } while(i < 3) ```name=Console window 100 Notice how the above code snippet is a modification of Do While 1 , showing how choosing the wrong type of loop can result in logical errors. The initial value of i is now 100 , and therefore the summation range is [100,3] . In the field of mathematics, [100,3] is an empty interval, and the proper sum would be 0 . Since a do while is used here, the result is instead 100 . If the above example instead used a while loop, the code block would never execute and the result would be 0 . # For loop A common use for looping is to iterate over a set, whether it's numbers or elements in a container. The for loop provides an even shorter syntax than the while loop. ```lang=csharp, name=For var myArray = Array Integer ; var sum = 0; for (var j = 0; j < 3; ++j) { myArray.Add(j); } Console.WriteLine(myArray); for(var i = 0; i < 3; ++i) { sum += myArray.Get(i); Console.WriteLine(sum); } ```name=Console window {0, 1, 2} 0 1 3 Notice how the above code snippet and the While code snippet loops produce the same result: 0 , 1 , and 3 . First i is initialized to 0 . Then in a loop, the i < 3 condition is checked, sum is increased and printed, and i is incremented at the end of the iteration . The for loop follows the format for(<initialization>; <condition>; <iteration>) . In addition, the above code snippet uses an array . An array is a container with the indexable quality, which means the i-th element can be directly accessed. This access is done by calling the function myArray.Get . # For Each loop The foreach loop is reserved for iterating over containers, and is shorter than its equivalent for loop. ```lang=csharp, name=For Each var myArray = Array Integer ; var sum = 0; for (var i = 0; i < 3; ++i) { myArray.Add(i); } Console.WriteLine(myArray); foreach (var val in myArray) { sum += val; Console.WriteLine(sum); } ```name=Console window {0, 1, 2} 0 1 3 Any array that is indexable is also //iteratable//. The Array container in Lightning can be iterated over as shown in foreach (var val in myArray) . Take note that the index isn't accessable in a foreach loop, and that foreach should only be used when the order that elements are iterated over isn't relevant. # Navigating Loops There are two ways to exit from a loop. When the loop condition is evaluated to false, the loop will end. The other way is to use either return or break . As explained on the function page, return will exit the current function while break will leave the next highest loop. The following code snippet uses myArray from the For Each code snippet. ```lang=csharp, name=Break var target : Integer = 1; for (var index : Integer = 0; index < myArray.Count; ++index) { if(myArray.Get(index) == target) { Console.WriteLine(index); break; } } Console.WriteLine(\"Loop Finished\"); ```name=Console window 1 Loop Finished The above code snippet looks for the index of the value 1 in myArray . The array holds {0, 1, 2} from the For Each code snippet, so the index of the value 1 is 1 . Once the break statement is reached, Lightning will jump directly to the final } . This is the closing brace of the for loop block. ## Nested Loops Any loop inside another loop is considered nested. Be aware in these situations that break will exit out of only one loop, while return will leave all of them. ```lang=csharp, name=Break for (var i = 0; i < 3; ++i) { for (var j = 0; j < 3; ++j) { if(j >= i) break; Console.WriteLine(\"(`i`, `j`)\"); } } ```name=Console window (1, 0) (2, 0) (2, 1) Notice how the break statement only exits the inner for loop. The string passed into Console.WriteLine will evaluate to (1, 0) , (2, 0) , and (2, 1) . In other words, the result is printed when j < i . ## Continue The continue keyword operates similarly to break . While break will jump to the end of the loop's scope and exit the loop, continue will only jump to the end of the loop's scope. ```lang=csharp, name=Continue for(var i = 0; i < 5; ++i) { if(i == 2) continue; Console.WriteLine(i); } ```name=Console window 0 1 3 4 Notice how Console.WriteLine(i) executes for each i in the range [0, 4] with the exception of 2 . When i == 2 , continue is reached and the next iteration is reached. Also note that even when using continue in a for loop, the iterative statement ++i is still executed. # Condensed Loops In the case that a loops only contains one statement within its scope (simliar to conditionals ) then no {} brackets are needed. ```name=Single Line Loop, lang=csharp for(var i = 0; i < 3; ++i) Console.WriteLine(i); Console.WriteLine(\"-\"); ```name=Console Ouput 0 1 2 - Here you can see that the second instance of Console.WriteLine(i); is only executed once as it falls outside the scope of the for loop. # Related Material ## Manual - functions - strings ## Code Reference - array_t","title":"Looping"},{"location":"manual/plasmamanual/lightning_in_plasma/looping/#looping","text":"Looping is a technique used to execute code an arbitrary number of times. # The Loop Keyword The loop keyword defines the most basic type of looping structure in Lightning. This is most useful when processing each element in a container, where the container size may not be known. ```lang=csharp, name=Loop var i = 0; var sum = 0; loop { sum += i; Console.WriteLine(sum); if (i >= 3) return; ++i; } ```name=Console window 0 1 3 The values of sum printed are 0 , 1 , and 3 because sum += 0 , sum += 1 , and sum += 2 are all executed in sequence with a call to Console.WriteLine after each. Whatever code is in the block following loop will be repeatedly executed until the loop is escaped with return , break , or continue . return is a directive that leaves the function , and therefore can be used to exit a loop. # While and Do While While the loop keyword is sufficient in executing code an arbitrary ammount of times, there are other types of loop blocks that make for cleaner code. ```lang=csharp, name=While var i = 0; var sum = 0; while(i < 3) { sum += i; Console.WriteLine(sum); ++i; } ```name=Console window 0 1 3 The above snippet will sum together numbers in sequence like in the Loop code snippet, but this time using the while keyword. while will run when i is 0 , 1 , and 2 , and the sequence of sums will be the same as in the Loop code snippet. ```lang=csharp, name=Do While 1 var i = 0; var sum = 0; do { sum += i; Console.WriteLine(sum); ++i; } while(i < 3) ```name=Console window 0 1 3 The above snippet also produces the same result as the While code snippet, but with do while instead of while . The do while structure is similar to a while loop, but with the looping condition is checked after the loop is run. One should be mindful of the implications of do while , that whatever is in the code block following do will run at least once. Still, the do while block is executed when i is 0 , 1 , and 2 . ```lang=csharp, name=Do While 2 var i = 100; var sum = 0; do { sum += i; Console.WriteLine(sum); ++i; } while(i < 3) ```name=Console window 100 Notice how the above code snippet is a modification of Do While 1 , showing how choosing the wrong type of loop can result in logical errors. The initial value of i is now 100 , and therefore the summation range is [100,3] . In the field of mathematics, [100,3] is an empty interval, and the proper sum would be 0 . Since a do while is used here, the result is instead 100 . If the above example instead used a while loop, the code block would never execute and the result would be 0 . # For loop A common use for looping is to iterate over a set, whether it's numbers or elements in a container. The for loop provides an even shorter syntax than the while loop. ```lang=csharp, name=For var myArray = Array Integer ; var sum = 0; for (var j = 0; j < 3; ++j) { myArray.Add(j); } Console.WriteLine(myArray); for(var i = 0; i < 3; ++i) { sum += myArray.Get(i); Console.WriteLine(sum); } ```name=Console window {0, 1, 2} 0 1 3 Notice how the above code snippet and the While code snippet loops produce the same result: 0 , 1 , and 3 . First i is initialized to 0 . Then in a loop, the i < 3 condition is checked, sum is increased and printed, and i is incremented at the end of the iteration . The for loop follows the format for(<initialization>; <condition>; <iteration>) . In addition, the above code snippet uses an array . An array is a container with the indexable quality, which means the i-th element can be directly accessed. This access is done by calling the function myArray.Get . # For Each loop The foreach loop is reserved for iterating over containers, and is shorter than its equivalent for loop. ```lang=csharp, name=For Each var myArray = Array Integer ; var sum = 0; for (var i = 0; i < 3; ++i) { myArray.Add(i); } Console.WriteLine(myArray); foreach (var val in myArray) { sum += val; Console.WriteLine(sum); } ```name=Console window {0, 1, 2} 0 1 3 Any array that is indexable is also //iteratable//. The Array container in Lightning can be iterated over as shown in foreach (var val in myArray) . Take note that the index isn't accessable in a foreach loop, and that foreach should only be used when the order that elements are iterated over isn't relevant. # Navigating Loops There are two ways to exit from a loop. When the loop condition is evaluated to false, the loop will end. The other way is to use either return or break . As explained on the function page, return will exit the current function while break will leave the next highest loop. The following code snippet uses myArray from the For Each code snippet. ```lang=csharp, name=Break var target : Integer = 1; for (var index : Integer = 0; index < myArray.Count; ++index) { if(myArray.Get(index) == target) { Console.WriteLine(index); break; } } Console.WriteLine(\"Loop Finished\"); ```name=Console window 1 Loop Finished The above code snippet looks for the index of the value 1 in myArray . The array holds {0, 1, 2} from the For Each code snippet, so the index of the value 1 is 1 . Once the break statement is reached, Lightning will jump directly to the final } . This is the closing brace of the for loop block. ## Nested Loops Any loop inside another loop is considered nested. Be aware in these situations that break will exit out of only one loop, while return will leave all of them. ```lang=csharp, name=Break for (var i = 0; i < 3; ++i) { for (var j = 0; j < 3; ++j) { if(j >= i) break; Console.WriteLine(\"(`i`, `j`)\"); } } ```name=Console window (1, 0) (2, 0) (2, 1) Notice how the break statement only exits the inner for loop. The string passed into Console.WriteLine will evaluate to (1, 0) , (2, 0) , and (2, 1) . In other words, the result is printed when j < i . ## Continue The continue keyword operates similarly to break . While break will jump to the end of the loop's scope and exit the loop, continue will only jump to the end of the loop's scope. ```lang=csharp, name=Continue for(var i = 0; i < 5; ++i) { if(i == 2) continue; Console.WriteLine(i); } ```name=Console window 0 1 3 4 Notice how Console.WriteLine(i) executes for each i in the range [0, 4] with the exception of 2 . When i == 2 , continue is reached and the next iteration is reached. Also note that even when using continue in a for loop, the iterative statement ++i is still executed. # Condensed Loops In the case that a loops only contains one statement within its scope (simliar to conditionals ) then no {} brackets are needed. ```name=Single Line Loop, lang=csharp for(var i = 0; i < 3; ++i) Console.WriteLine(i); Console.WriteLine(\"-\"); ```name=Console Ouput 0 1 2 - Here you can see that the second instance of Console.WriteLine(i); is only executed once as it falls outside the scope of the for loop. # Related Material ## Manual - functions - strings ## Code Reference - array_t","title":"Looping"},{"location":"manual/plasmamanual/lightning_in_plasma/memory_management/","text":"Memory Management This section covers the basics of memory management in Lightning. Specifically, the topics covered include: Types of Memory Storage , allocating-memory , and freeing-memory # Types of Memory Storage ## By-Value There are two main types of storage, by-value and by-reference (or by-ref for short). By-value is stored on the local stack and the storage is cleaned up once it goes out of scope. When passed into a function it copies data by-value . Structs and primitives are by-value . ```lang=csharp, name=By-Value Storage in a Struct struct ByValue { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ByValue) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } ```name=Usage, lang=csharp // If we were to test it: var byValA: ByValue = local ByValue(1111111); Console.Write(\"byValA \"); Console.WriteLine(byValA.ToString()); // byValA ID: 1111111 // by-value copy does not update the passed in argument. ByValue.IncrementID(byValA); // Since it was copied, the changes were to a // local variable. The local variable is destroyed at Console.Write(\"byValA \"); // the end of the function's scope. Console.WriteLine(byValA.ToString()); // byValA ID: 1111111 ```name=Console Window byValA ID: 1111111 byValA ID: 1111111 ## By-Reference `By-reference` is stored on the heap and the storage is cleaned up once there are no longer references to it, or the handle is explicitly deleted in code. When passed into a [function](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/functions.markdown) it copies it `by-reference`. [Classes](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/classes.markdown) and structs promoted with the `ref` keyword are `by-reference`. ### By-Ref Storage in a Struct and a Class ```lang=csharp, name=ByValue struct ByValue { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ref ByValue) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } ```name=ByRef class ByRef { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ByRef) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } ```name=Usage, lang=csharp // If we were to test ByValue: var byValC: ref ByValue = new ByValue(3333333); Console.Write(\"byValC \"); Console.WriteLine(byValC.ToString()); // byValC ID: 3333333 ByValue.IncrementID(byValC); // Similar to a pointer, by-ref argument allows for Console.Write(\"byValC \"); // persistent changes to its internals: Console.WriteLine(byValC.ToString()); // byValC ID: 3333334 // If we were to test ByRef: var byRefA: ByRef = new ByRef(5555555); Console.Write(\"byRefA \"); Console.WriteLine(byRefA.ToString()); // byRefA ID: 5555555 ByRef.IncrementID(byRefA); // Since classes are made to be passed by-reference // this works without adding the ref keyword Console.Write(\"byRefA \"); // (adding it would make it not compile!) Console.WriteLine(byRefA.ToString()); // byRefA ID: 5555556 ```name=Console Window byValC ID: 3333333 byValC ID: 3333334 byRefA ID: 5555555 byRefA ID: 5555556 # Allocating Memory ## Null Null is a special type of its own: ```name=null, lang=csharp Console.Write(typeid(null).Name); // Null NOTE: A by-ref type can be set to null, but a by-value type cannot. ## Creating variables by-value and by-ref ### Local When working with by-value types that have constructors, such as structs or more complex stack primitive data types, the keyword local may be used: ```lang=csharp var up: Real3 = local Real3(0.0, 1.0, 0.0); var stackStructInstance: CustomStruct = local CustomStruct(); The compiler will infer the use of local for by-value types: ```lang=csharp // This is also valid. var up: Real3 = Real3(0.0, 1.0, 0.0); var stackStructInstance: CustomStruct = CustomStruct(); ### New When working with classes, references, or other or anything located on the heap with a constructor, use the new keyword: ```lang=csharp var heapObject: CustomClass = new CustomClass(); var heapStructInstance: ref CustomStruct = new CustomStruct(); Once again the compiler will infer the use of new for by-ref types: ```lang=csharp // This is also valid. var heapObject: CustomClass = CustomClass(); Since structs are by-value, in order to get a ref you must specify new. ```lang=csharp // This does not compile var heapStructInstance: ref CustomStruct = CustomStruct(); ```name=Console Window The value being assigned to 'heapStructInstance' must be of type 'ref CustomStruct'. Its type is 'CustomStruct'. IMPORTANT: Lightning does not currently have a dereferencing operator. Although you can still use the ref type with the dot operator to access functionality, those typed with ref will not be equivalent to the non-ref type. Anything expecting a// non-ref //type will not accept a// ref //type without dereferencing. Consider the following: ```lang=csharp, name=Incorrect Assignment of Ref Type to Non-Ref Type var heapObject: ref CustomStruct = new CustomStruct(); // The following will not compile because they are different types: // CustomStruct != ref CustomStruct var stackObject: CustomStruct = heapObject; ## constructors Constructors are required when calling local or new. The only times you wouldn't have a constructor is when your class or struct lacks instanced data, or you are using a primitive data type that can be created from a literal. ```lang=csharp class MyClass { constructor() { // Initialize members here. } } A class or struct may possess one or more constructors. Like functions they can be overloaded via their named_parameters . Special syntax is also used when constructing a derived class, see inheritance for more. # Freeing Memory Lightning does not have a full-fledged garbage collector, but it does have ref-counted handles. When you use local to make things on the stack they are cleaned up upon leaving the scope. When you use new to construct objects on the heap they are cleaned up when: You call delete on the handle. No references to the object exist. ## Important things to note: Lightning cannot detect cycles. These must be deleted explicitly. ```lang=csharp, name=Deleting Objects // Cycles will not get cleaned up without explicitly deleting. var gh: ARefHolder = new ARefHolder(\"gh\"); var ef: ARefHolder = new ARefHolder(\"ef\"); // Simply having one point at another is not // a cycle, it cleans up just fine. gh.Handle = ef; // Both gh & ef will clean up at the end of the scope. var ab: ARefHolder = new ARefHolder(\"ab\"); var ba: ARefHolder = new ARefHolder(\"ba\"); ab.Handle = ba; ba.Handle = ab; Console.WriteLine(\"Note ba's handle is valid: ba.Handle \"); // Cleans up when you explicitly delete one of the // Objects as it becomes null and nulls all references // to it as ARefHolder is a LightningType. delete ab; Console.WriteLine(\"Note ba's handle has been made null: ba.Handle \"); var cd: ARefHolder = new ARefHolder(\"cd\"); var dc: ARefHolder = new ARefHolder(\"dc\"); cd.Handle = dc; dc.Handle = cd; // Making a reference type null does not delete it. // The object is still alive in dc's handle // and since that handle has an object that refers // back to it; the cycle remains uncollected. (memory leak) cd = null; var ij: ARefHolder = new ARefHolder(\"ij\"); var ji: ARefHolder = new ARefHolder(\"ji\"); ij.Handle = ji; ji.Handle = ij; // Making null the cyclic handle breaks the cycle // allowing ref-counting to take care of the clean up: ij.Handle = null; var abc: ARefHolder = new ARefHolder(\"abc\"); var bca: ARefHolder = new ARefHolder(\"bca\"); var cab: ARefHolder = new ARefHolder(\"cab\"); abc.Handle = bca; bca.Handle = cab; cab.Handle = abc; // Without deleting any of the objects // e.g. delete abc; // or breaking the cycle // e.g. abc.Handle = null; // abc, bca, and cab will leak. 2. [delegates](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/delegates.markdown) containing an instance member function hold the `this` handle to the object, and thus will keep ref-counted objects alive. ```lang=csharp, name=Examples of Delegate Leaking class Utility { [Static] function NullDelegate() { } } class DelegateHolder { var Name:String = \"Unnamed\"; var Greeting: delegate() = Utility.NullDelegate; constructor(name: String) { this.Name = name; } function Introduce() { Console.WriteLine(\"Hi I'm `this.Name`\"); } destructor() { onsole.WriteLine(\"Dtor: `this.Name`\"); } } class Driver { function DelegateLeaking() { // Here are five Objects with the ability to hold delegates: var leaky = new DelegateHolder(\"Leaky\"); var tarp = new DelegateHolder(\"Tarp\"); var waterproof = new DelegateHolder(\"Waterproof\"); var mop = new DelegateHolder(\"Mop\"); var morph = new DelegateHolder(\"Morph\"); // This one has another object's delegate. // There is no cycle so they are all cleaned up // via ref-counting at the end of the scope. tarp.Greeting = waterproof.Introduce; // This instance holds a delegate to its own function. // The delegate, referring to a member function, includes // a handle to the instance it is associated with. // This creates a cycle between the delegate and the // the instance. leaky.Greeting = leaky.Introduce; // This will leak. mop.Greeting = mop.Introduce; morph.Greeting = morph.Introduce; // To not leak you'd have to either manually delete: delete mop; // or break the cycle by changing // what the delegate points to: morph.Greeting = tarp.Introduce; // Upon completion the console prints out: // Dtor: Mop // Dtor: Morph // Dtor: Tarp // Dtor: Waterproof // The Dtor for Leaky is never called; it is a // memory leak in this snippet. } } ## Deleting variables ```lang=csharp, name=Utility // Using ByValue and ByRef as defined above & the Utility class: class Utility { [Static] function SafeToString(a: ref ByValue, name: String) { Console.Write(name); if (a == null) { Console.WriteLine(\" is null\"); } else { Console.WriteLine(a.ToString()); } } [Static] function SafeToString(a: ByRef, name: String) { Console.Write(name); if (a == null) { Console.WriteLine(\" is null\"); } else { Console.WriteLine(a.ToString()); } } } ```name=Examples of Deleting Variables, lang=csharp // Examples of deleting: // 1. Delete a by-value struct instance: var byValA: ByValue = local ByValue(1111111); // Unable to delete a non reference type; delete byValA; // This line won't compile. // 2. Delete an instance of a struct promoted to by-reference: var byValB: ref ByValue = new ByValue(1111111); var byValC: ref ByValue = byValB; var byValD: ref ByValue = byValB; var byValK: ref ByValue = byValC; // Utility function calls ToString method, when ref is valid. // If invalid, it indicates it is null. Utility.SafeToString(byValB, \"byValB\"); // byValBID: 1111111 Utility.SafeToString(byValC, \"byValC\"); // byValCID: 1111111 Utility.SafeToString(byValD, \"byValD\"); // byValDID: 1111111 Utility.SafeToString(byValK, \"byValK\"); // byValKID: 1111111 // Simply use the delete keyword on the handle. delete byValB; // Since these are all handles to LightningTypes, all references // are made null. Utility.SafeToString(byValB, \"byValB\"); // byValB is null Utility.SafeToString(byValC, \"byValC\"); // byValC is null Utility.SafeToString(byValD, \"byValD\"); // byValD is null Utility.SafeToString(byValK, \"byValK\"); // byValK is null // 3. Delete an instance of a class: var byRefA: ByRef = new ByRef(22222222); var byRefB: ByRef = byRefA; var byRefC: ByRef = byRefA; var byRefK: ByRef = byRefC; Utility.SafeToString(byRefA, \"byRefA\"); // byRefAID: 22222222 Utility.SafeToString(byRefB, \"byRefB\"); // byRefBID: 22222222 Utility.SafeToString(byRefC, \"byRefC\"); // byRefCID: 22222222 Utility.SafeToString(byRefK, \"byRefK\"); // byRefKID: 22222222 delete byRefA; // Since these are all handles to LightningTypes, all references // are made null. Utility.SafeToString(byRefA, \"byRefA\"); // byRefA is null Utility.SafeToString(byRefB, \"byRefB\"); // byRefB is null Utility.SafeToString(byRefC, \"byRefC\"); // byRefC is null Utility.SafeToString(byRefK, \"byRefK\"); // byRefK is null ### Important things to note: Lightning always sets the deleted handle to null after deletion. Only if the handle points to a LightningType// does it make null the other objects referencing it. It //cannot automatically do things for objects bound through C++. In order to have C++ BoundTypes work the same as LightningTypes it must be handled in C++ by the object bound. Deleting in Lightning forwards delete calls to C++ bound objects. Thus, when you call delete in Lightning on a C++ BoundType, that bound type will have the C++ delete called allowing it to call its destructor. ## Destructors ```lang=csharp class MyClass { constructor() { // Initialize members here. } destructor() { // Do any object clean-up here. } } `` Destructors allow you to do any necessary clean up on your part, such as free memory. You can only have one, and there are no parameters or return values. It's important to know that stack allocated instances (i.e. non-ref by-value` types, or non-ref primitives) have no guarantee they'll call the destructor. Only those objects with handles that do not leak are guaranteed to have their destructors called. # Related Materials ## Manual - Classes - Structs - Functions - Keywords - named_parameters - inheritance - delegates","title":"Memory Management"},{"location":"manual/plasmamanual/lightning_in_plasma/memory_management/#memory-management","text":"This section covers the basics of memory management in Lightning. Specifically, the topics covered include: Types of Memory Storage , allocating-memory , and freeing-memory # Types of Memory Storage ## By-Value There are two main types of storage, by-value and by-reference (or by-ref for short). By-value is stored on the local stack and the storage is cleaned up once it goes out of scope. When passed into a function it copies data by-value . Structs and primitives are by-value . ```lang=csharp, name=By-Value Storage in a Struct struct ByValue { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ByValue) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } ```name=Usage, lang=csharp // If we were to test it: var byValA: ByValue = local ByValue(1111111); Console.Write(\"byValA \"); Console.WriteLine(byValA.ToString()); // byValA ID: 1111111 // by-value copy does not update the passed in argument. ByValue.IncrementID(byValA); // Since it was copied, the changes were to a // local variable. The local variable is destroyed at Console.Write(\"byValA \"); // the end of the function's scope. Console.WriteLine(byValA.ToString()); // byValA ID: 1111111 ```name=Console Window byValA ID: 1111111 byValA ID: 1111111 ## By-Reference `By-reference` is stored on the heap and the storage is cleaned up once there are no longer references to it, or the handle is explicitly deleted in code. When passed into a [function](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/functions.markdown) it copies it `by-reference`. [Classes](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/classes.markdown) and structs promoted with the `ref` keyword are `by-reference`. ### By-Ref Storage in a Struct and a Class ```lang=csharp, name=ByValue struct ByValue { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ref ByValue) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } ```name=ByRef class ByRef { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ByRef) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } ```name=Usage, lang=csharp // If we were to test ByValue: var byValC: ref ByValue = new ByValue(3333333); Console.Write(\"byValC \"); Console.WriteLine(byValC.ToString()); // byValC ID: 3333333 ByValue.IncrementID(byValC); // Similar to a pointer, by-ref argument allows for Console.Write(\"byValC \"); // persistent changes to its internals: Console.WriteLine(byValC.ToString()); // byValC ID: 3333334 // If we were to test ByRef: var byRefA: ByRef = new ByRef(5555555); Console.Write(\"byRefA \"); Console.WriteLine(byRefA.ToString()); // byRefA ID: 5555555 ByRef.IncrementID(byRefA); // Since classes are made to be passed by-reference // this works without adding the ref keyword Console.Write(\"byRefA \"); // (adding it would make it not compile!) Console.WriteLine(byRefA.ToString()); // byRefA ID: 5555556 ```name=Console Window byValC ID: 3333333 byValC ID: 3333334 byRefA ID: 5555555 byRefA ID: 5555556 # Allocating Memory ## Null Null is a special type of its own: ```name=null, lang=csharp Console.Write(typeid(null).Name); // Null NOTE: A by-ref type can be set to null, but a by-value type cannot. ## Creating variables by-value and by-ref ### Local When working with by-value types that have constructors, such as structs or more complex stack primitive data types, the keyword local may be used: ```lang=csharp var up: Real3 = local Real3(0.0, 1.0, 0.0); var stackStructInstance: CustomStruct = local CustomStruct(); The compiler will infer the use of local for by-value types: ```lang=csharp // This is also valid. var up: Real3 = Real3(0.0, 1.0, 0.0); var stackStructInstance: CustomStruct = CustomStruct(); ### New When working with classes, references, or other or anything located on the heap with a constructor, use the new keyword: ```lang=csharp var heapObject: CustomClass = new CustomClass(); var heapStructInstance: ref CustomStruct = new CustomStruct(); Once again the compiler will infer the use of new for by-ref types: ```lang=csharp // This is also valid. var heapObject: CustomClass = CustomClass(); Since structs are by-value, in order to get a ref you must specify new. ```lang=csharp // This does not compile var heapStructInstance: ref CustomStruct = CustomStruct(); ```name=Console Window The value being assigned to 'heapStructInstance' must be of type 'ref CustomStruct'. Its type is 'CustomStruct'. IMPORTANT: Lightning does not currently have a dereferencing operator. Although you can still use the ref type with the dot operator to access functionality, those typed with ref will not be equivalent to the non-ref type. Anything expecting a// non-ref //type will not accept a// ref //type without dereferencing. Consider the following: ```lang=csharp, name=Incorrect Assignment of Ref Type to Non-Ref Type var heapObject: ref CustomStruct = new CustomStruct(); // The following will not compile because they are different types: // CustomStruct != ref CustomStruct var stackObject: CustomStruct = heapObject; ## constructors Constructors are required when calling local or new. The only times you wouldn't have a constructor is when your class or struct lacks instanced data, or you are using a primitive data type that can be created from a literal. ```lang=csharp class MyClass { constructor() { // Initialize members here. } } A class or struct may possess one or more constructors. Like functions they can be overloaded via their named_parameters . Special syntax is also used when constructing a derived class, see inheritance for more. # Freeing Memory Lightning does not have a full-fledged garbage collector, but it does have ref-counted handles. When you use local to make things on the stack they are cleaned up upon leaving the scope. When you use new to construct objects on the heap they are cleaned up when: You call delete on the handle. No references to the object exist. ## Important things to note: Lightning cannot detect cycles. These must be deleted explicitly. ```lang=csharp, name=Deleting Objects // Cycles will not get cleaned up without explicitly deleting. var gh: ARefHolder = new ARefHolder(\"gh\"); var ef: ARefHolder = new ARefHolder(\"ef\"); // Simply having one point at another is not // a cycle, it cleans up just fine. gh.Handle = ef; // Both gh & ef will clean up at the end of the scope. var ab: ARefHolder = new ARefHolder(\"ab\"); var ba: ARefHolder = new ARefHolder(\"ba\"); ab.Handle = ba; ba.Handle = ab; Console.WriteLine(\"Note ba's handle is valid: ba.Handle \"); // Cleans up when you explicitly delete one of the // Objects as it becomes null and nulls all references // to it as ARefHolder is a LightningType. delete ab; Console.WriteLine(\"Note ba's handle has been made null: ba.Handle \"); var cd: ARefHolder = new ARefHolder(\"cd\"); var dc: ARefHolder = new ARefHolder(\"dc\"); cd.Handle = dc; dc.Handle = cd; // Making a reference type null does not delete it. // The object is still alive in dc's handle // and since that handle has an object that refers // back to it; the cycle remains uncollected. (memory leak) cd = null; var ij: ARefHolder = new ARefHolder(\"ij\"); var ji: ARefHolder = new ARefHolder(\"ji\"); ij.Handle = ji; ji.Handle = ij; // Making null the cyclic handle breaks the cycle // allowing ref-counting to take care of the clean up: ij.Handle = null; var abc: ARefHolder = new ARefHolder(\"abc\"); var bca: ARefHolder = new ARefHolder(\"bca\"); var cab: ARefHolder = new ARefHolder(\"cab\"); abc.Handle = bca; bca.Handle = cab; cab.Handle = abc; // Without deleting any of the objects // e.g. delete abc; // or breaking the cycle // e.g. abc.Handle = null; // abc, bca, and cab will leak. 2. [delegates](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/delegates.markdown) containing an instance member function hold the `this` handle to the object, and thus will keep ref-counted objects alive. ```lang=csharp, name=Examples of Delegate Leaking class Utility { [Static] function NullDelegate() { } } class DelegateHolder { var Name:String = \"Unnamed\"; var Greeting: delegate() = Utility.NullDelegate; constructor(name: String) { this.Name = name; } function Introduce() { Console.WriteLine(\"Hi I'm `this.Name`\"); } destructor() { onsole.WriteLine(\"Dtor: `this.Name`\"); } } class Driver { function DelegateLeaking() { // Here are five Objects with the ability to hold delegates: var leaky = new DelegateHolder(\"Leaky\"); var tarp = new DelegateHolder(\"Tarp\"); var waterproof = new DelegateHolder(\"Waterproof\"); var mop = new DelegateHolder(\"Mop\"); var morph = new DelegateHolder(\"Morph\"); // This one has another object's delegate. // There is no cycle so they are all cleaned up // via ref-counting at the end of the scope. tarp.Greeting = waterproof.Introduce; // This instance holds a delegate to its own function. // The delegate, referring to a member function, includes // a handle to the instance it is associated with. // This creates a cycle between the delegate and the // the instance. leaky.Greeting = leaky.Introduce; // This will leak. mop.Greeting = mop.Introduce; morph.Greeting = morph.Introduce; // To not leak you'd have to either manually delete: delete mop; // or break the cycle by changing // what the delegate points to: morph.Greeting = tarp.Introduce; // Upon completion the console prints out: // Dtor: Mop // Dtor: Morph // Dtor: Tarp // Dtor: Waterproof // The Dtor for Leaky is never called; it is a // memory leak in this snippet. } } ## Deleting variables ```lang=csharp, name=Utility // Using ByValue and ByRef as defined above & the Utility class: class Utility { [Static] function SafeToString(a: ref ByValue, name: String) { Console.Write(name); if (a == null) { Console.WriteLine(\" is null\"); } else { Console.WriteLine(a.ToString()); } } [Static] function SafeToString(a: ByRef, name: String) { Console.Write(name); if (a == null) { Console.WriteLine(\" is null\"); } else { Console.WriteLine(a.ToString()); } } } ```name=Examples of Deleting Variables, lang=csharp // Examples of deleting: // 1. Delete a by-value struct instance: var byValA: ByValue = local ByValue(1111111); // Unable to delete a non reference type; delete byValA; // This line won't compile. // 2. Delete an instance of a struct promoted to by-reference: var byValB: ref ByValue = new ByValue(1111111); var byValC: ref ByValue = byValB; var byValD: ref ByValue = byValB; var byValK: ref ByValue = byValC; // Utility function calls ToString method, when ref is valid. // If invalid, it indicates it is null. Utility.SafeToString(byValB, \"byValB\"); // byValBID: 1111111 Utility.SafeToString(byValC, \"byValC\"); // byValCID: 1111111 Utility.SafeToString(byValD, \"byValD\"); // byValDID: 1111111 Utility.SafeToString(byValK, \"byValK\"); // byValKID: 1111111 // Simply use the delete keyword on the handle. delete byValB; // Since these are all handles to LightningTypes, all references // are made null. Utility.SafeToString(byValB, \"byValB\"); // byValB is null Utility.SafeToString(byValC, \"byValC\"); // byValC is null Utility.SafeToString(byValD, \"byValD\"); // byValD is null Utility.SafeToString(byValK, \"byValK\"); // byValK is null // 3. Delete an instance of a class: var byRefA: ByRef = new ByRef(22222222); var byRefB: ByRef = byRefA; var byRefC: ByRef = byRefA; var byRefK: ByRef = byRefC; Utility.SafeToString(byRefA, \"byRefA\"); // byRefAID: 22222222 Utility.SafeToString(byRefB, \"byRefB\"); // byRefBID: 22222222 Utility.SafeToString(byRefC, \"byRefC\"); // byRefCID: 22222222 Utility.SafeToString(byRefK, \"byRefK\"); // byRefKID: 22222222 delete byRefA; // Since these are all handles to LightningTypes, all references // are made null. Utility.SafeToString(byRefA, \"byRefA\"); // byRefA is null Utility.SafeToString(byRefB, \"byRefB\"); // byRefB is null Utility.SafeToString(byRefC, \"byRefC\"); // byRefC is null Utility.SafeToString(byRefK, \"byRefK\"); // byRefK is null ### Important things to note: Lightning always sets the deleted handle to null after deletion. Only if the handle points to a LightningType// does it make null the other objects referencing it. It //cannot automatically do things for objects bound through C++. In order to have C++ BoundTypes work the same as LightningTypes it must be handled in C++ by the object bound. Deleting in Lightning forwards delete calls to C++ bound objects. Thus, when you call delete in Lightning on a C++ BoundType, that bound type will have the C++ delete called allowing it to call its destructor. ## Destructors ```lang=csharp class MyClass { constructor() { // Initialize members here. } destructor() { // Do any object clean-up here. } } `` Destructors allow you to do any necessary clean up on your part, such as free memory. You can only have one, and there are no parameters or return values. It's important to know that stack allocated instances (i.e. non-ref by-value` types, or non-ref primitives) have no guarantee they'll call the destructor. Only those objects with handles that do not leak are guaranteed to have their destructors called. # Related Materials ## Manual - Classes - Structs - Functions - Keywords - named_parameters - inheritance - delegates","title":"Memory Management"},{"location":"manual/plasmamanual/lightning_in_plasma/operators_precedence_chart/","text":"Operators Precedence Chart Below is a complete list of the operands sorted by order of operation. Precedence Operator Description Associativity 1 () function call LeftToRight ------------ --------------- [] index operator . dot operator 2 as casting operator ------------ 3 + unary plus RightToLeft ------------ --------------- - unary minus ++ pre-increment -- pre-decrement ! not ~ bitwise negation @ property delegate 4 ^ exponent LeftToRight ------------ --------------- 5 * multiplication ------------ / division % modulo, remainder 6 + addition ------------ - subtraction 7 << bitshift left ------------ >> bitshift right 8 < less than ------------ <= less than or equal to > greater than >= greater than or equal to 9 == equality ------------ != inequality 10 & bitwise and ------------ 11 $ bitwise xor ------------ 12 | bitwise or ------------ 13 && logical and ------------ 14 || logical or ------------ 15 = assignment RightToLeft ------------ --------------- += assignment of sum -= assignment of difference *= assignment of product /= assignment of quotient %= assignment of remainder ^= assignment of power <<= assignment of bitwise left shift >>= assignment of bitwise right shift &= assignment of bitwise and $= assignment of bitwise xor |= assignment of bitwise or","title":"Operators Precedence Chart"},{"location":"manual/plasmamanual/lightning_in_plasma/operators_precedence_chart/#operators-precedence-chart","text":"Below is a complete list of the operands sorted by order of operation. Precedence Operator Description Associativity 1 () function call LeftToRight ------------ --------------- [] index operator . dot operator 2 as casting operator ------------ 3 + unary plus RightToLeft ------------ --------------- - unary minus ++ pre-increment -- pre-decrement ! not ~ bitwise negation @ property delegate 4 ^ exponent LeftToRight ------------ --------------- 5 * multiplication ------------ / division % modulo, remainder 6 + addition ------------ - subtraction 7 << bitshift left ------------ >> bitshift right 8 < less than ------------ <= less than or equal to > greater than >= greater than or equal to 9 == equality ------------ != inequality 10 & bitwise and ------------ 11 $ bitwise xor ------------ 12 | bitwise or ------------ 13 && logical and ------------ 14 || logical or ------------ 15 = assignment RightToLeft ------------ --------------- += assignment of sum -= assignment of difference *= assignment of product /= assignment of quotient %= assignment of remainder ^= assignment of power <<= assignment of bitwise left shift >>= assignment of bitwise right shift &= assignment of bitwise and $= assignment of bitwise xor |= assignment of bitwise or","title":"Operators Precedence Chart"},{"location":"manual/plasmamanual/lightning_in_plasma/properties/","text":"Properties Get-Sets are syntactic sugar. They define two functions that look like variable usage. ```lang=csharp class Example { // This is a field. var SquareSideLength: Real = 2.0; // This is a property. var Perimeter : Real { get { return this.SquareSideLength * 4.0; } set { this.SquareSideLength = value * 0.25; } } } class Driver { function Test() { // If we were to test it: var square = Example(); // Nothing stops a user from setting the underlying value. square.SquareSideLength = 3.0; Console.WriteLine(square.Perimeter); // 12.0 Console.WriteLine(square.SquareSideLength); // 3.0 square.Perimeter = 1.0; // SquareSideLength = 0.25 Console.WriteLine(square.Perimeter); // 1.0 Console.WriteLine(square.SquareSideLength); // 0.25 square.Perimeter = 8.0; // SquareSideLength = 2.0 } } ```name=Console Output ---------------- Begin Game --------------- 12 3 1 0.25 This get-set could easily be replaced by functions. The following is its equivalent: ```lang=csharp class Example { var SquareSideLength: Real = 2.0; function GetPerimeter(): Real { return this.SquareSideLength * 4.0; } function SetPerimeter(value: Real) { this.SquareSideLength = value * 0.25; } } class Driver { function Test() { // If we were to test it we'd get the exact same results: var square = Example(); // Nothing stops a user from setting the underlying value. square.SquareSideLength = 3.0; Console.WriteLine(square.GetPerimeter()); // 12.0 Console.WriteLine(square.SquareSideLength); // 3.0 square.SetPerimeter(1.0); // SquareSideLength = 0.25 Console.WriteLine(square.GetPerimeter()); // 1.0 Console.WriteLine(square.SquareSideLength); // 0.25 square.SetPerimeter(8.0); // SquareSideLength = 2.0 } } ```name=Console Output ---------------- Begin Game --------------- 12 3 1 0.25 NOTE: Get-sets are not fields, and thus they have no storage of their own. If data state is needed you'll have to make another field on the class to which you may refer. Although get-sets are not fields, fields can auto-generate the property interface using property_delegates . # Parts of a Property's definition `lang=csharp // The type specified refers to BOTH the return type of the getter // and the parameter type of the setter. var Perimeter : Real // Despite var`` keyword, Properties have no storage. { // get denotes the getter; it must return the type specified above. get { return this.SquareSideLength * 4.0; } // Body of getter is wrapped in {} // set denotes the setter; it must accept the type specified above. // value is a keyword that denotes the right hand side of the // assignment operator as passed in from the user. set { this.SquareSideLength = value * 0.25; } // Body of setter is wrapped in {} } ``` # Related Materials ## Manual - property_delegates","title":"Properties"},{"location":"manual/plasmamanual/lightning_in_plasma/properties/#properties","text":"Get-Sets are syntactic sugar. They define two functions that look like variable usage. ```lang=csharp class Example { // This is a field. var SquareSideLength: Real = 2.0; // This is a property. var Perimeter : Real { get { return this.SquareSideLength * 4.0; } set { this.SquareSideLength = value * 0.25; } } } class Driver { function Test() { // If we were to test it: var square = Example(); // Nothing stops a user from setting the underlying value. square.SquareSideLength = 3.0; Console.WriteLine(square.Perimeter); // 12.0 Console.WriteLine(square.SquareSideLength); // 3.0 square.Perimeter = 1.0; // SquareSideLength = 0.25 Console.WriteLine(square.Perimeter); // 1.0 Console.WriteLine(square.SquareSideLength); // 0.25 square.Perimeter = 8.0; // SquareSideLength = 2.0 } } ```name=Console Output ---------------- Begin Game --------------- 12 3 1 0.25 This get-set could easily be replaced by functions. The following is its equivalent: ```lang=csharp class Example { var SquareSideLength: Real = 2.0; function GetPerimeter(): Real { return this.SquareSideLength * 4.0; } function SetPerimeter(value: Real) { this.SquareSideLength = value * 0.25; } } class Driver { function Test() { // If we were to test it we'd get the exact same results: var square = Example(); // Nothing stops a user from setting the underlying value. square.SquareSideLength = 3.0; Console.WriteLine(square.GetPerimeter()); // 12.0 Console.WriteLine(square.SquareSideLength); // 3.0 square.SetPerimeter(1.0); // SquareSideLength = 0.25 Console.WriteLine(square.GetPerimeter()); // 1.0 Console.WriteLine(square.SquareSideLength); // 0.25 square.SetPerimeter(8.0); // SquareSideLength = 2.0 } } ```name=Console Output ---------------- Begin Game --------------- 12 3 1 0.25 NOTE: Get-sets are not fields, and thus they have no storage of their own. If data state is needed you'll have to make another field on the class to which you may refer. Although get-sets are not fields, fields can auto-generate the property interface using property_delegates . # Parts of a Property's definition `lang=csharp // The type specified refers to BOTH the return type of the getter // and the parameter type of the setter. var Perimeter : Real // Despite var`` keyword, Properties have no storage. { // get denotes the getter; it must return the type specified above. get { return this.SquareSideLength * 4.0; } // Body of getter is wrapped in {} // set denotes the setter; it must accept the type specified above. // value is a keyword that denotes the right hand side of the // assignment operator as passed in from the user. set { this.SquareSideLength = value * 0.25; } // Body of setter is wrapped in {} } ``` # Related Materials ## Manual - property_delegates","title":"Properties"},{"location":"manual/plasmamanual/lightning_in_plasma/property_delegates/","text":"Property Delegate Property Delegates can be generated from any field using the @ symbol. Fields are variables, but not all variables are fields. Local variables do not have the ability to be accessed via a property and they cannot be used in conjunction with the property delegate operator like fields can. ```name=Cat, lang=csharp class Cat { var Lives: Integer = 9; function Example() { // @, the property delegate operator, takes this.Lives // and creates a property delegate from it. var prop = @this.Lives; Console.WriteLine(typeid(prop).Name); // Property[Integer] Console.WriteLine(prop.Get()); // 9 prop.Set(7); Console.WriteLine(prop.Get()); // 7 Console.WriteLine(this.Lives); // 7 } } ```name=Console Output Property[Integer] 9 7 7 # Property Delegates as Function Parameters Choosing to take a property delegate as a parameter allows the user to propagate side-effects to the parameters that would otherwise be lost on copies passed in by-value. ```name=PropertyDelegateTest, lang=csharp class PropertyDelegateTest : LightningComponent { [Property] var MyProperty : Real = 5.0; function Initialize(init : CogInitializer) { Console.WriteLine(\"Before Drivers: this.MyProperty \") // this.DriverControl(this.MyProperty); Console.WriteLine(\"Between Drivers: this.MyProperty \") this.Driver(@this.MyProperty); Console.WriteLine(\"After Drivers: this.MyProperty \") } function Driver(prop : Property[Integer]) { prop.Set(15); Console.WriteLine(\"Inside Driver: prop.Get() ); } function DriverControl(prop : Integer) { prop = 2; Console.WriteLine(\"Inside DriverControl: prop ); } } ```name=Console Output Before Drivers: 5.0 Inside Driver: 15.0 Between Drivers: 15.0 Inside DriverControl: 2.0 After Drivers: 15.0 In this example it can be seen that when the property delegate of MyProperty is passed into the function Driver() it can be used to set the value of the member variable. This is because desprite the delegate itself being passed by value into the function it still contains a reference to MyProperty . However, when MyProperty is passed directly into the function DriverControl() it is also passed by value. The assignment of prop in DriverControl() is actually setting the value of the a local copy of MyProperty . When the function completes and reaches the end of its scope prop will cease to exist.","title":"Property Delegate"},{"location":"manual/plasmamanual/lightning_in_plasma/property_delegates/#property-delegate","text":"Property Delegates can be generated from any field using the @ symbol. Fields are variables, but not all variables are fields. Local variables do not have the ability to be accessed via a property and they cannot be used in conjunction with the property delegate operator like fields can. ```name=Cat, lang=csharp class Cat { var Lives: Integer = 9; function Example() { // @, the property delegate operator, takes this.Lives // and creates a property delegate from it. var prop = @this.Lives; Console.WriteLine(typeid(prop).Name); // Property[Integer] Console.WriteLine(prop.Get()); // 9 prop.Set(7); Console.WriteLine(prop.Get()); // 7 Console.WriteLine(this.Lives); // 7 } } ```name=Console Output Property[Integer] 9 7 7 # Property Delegates as Function Parameters Choosing to take a property delegate as a parameter allows the user to propagate side-effects to the parameters that would otherwise be lost on copies passed in by-value. ```name=PropertyDelegateTest, lang=csharp class PropertyDelegateTest : LightningComponent { [Property] var MyProperty : Real = 5.0; function Initialize(init : CogInitializer) { Console.WriteLine(\"Before Drivers: this.MyProperty \") // this.DriverControl(this.MyProperty); Console.WriteLine(\"Between Drivers: this.MyProperty \") this.Driver(@this.MyProperty); Console.WriteLine(\"After Drivers: this.MyProperty \") } function Driver(prop : Property[Integer]) { prop.Set(15); Console.WriteLine(\"Inside Driver: prop.Get() ); } function DriverControl(prop : Integer) { prop = 2; Console.WriteLine(\"Inside DriverControl: prop ); } } ```name=Console Output Before Drivers: 5.0 Inside Driver: 15.0 Between Drivers: 15.0 Inside DriverControl: 2.0 After Drivers: 15.0 In this example it can be seen that when the property delegate of MyProperty is passed into the function Driver() it can be used to set the value of the member variable. This is because desprite the delegate itself being passed by value into the function it still contains a reference to MyProperty . However, when MyProperty is passed directly into the function DriverControl() it is also passed by value. The assignment of prop in DriverControl() is actually setting the value of the a local copy of MyProperty . When the function completes and reaches the end of its scope prop will cease to exist.","title":"Property Delegate"},{"location":"manual/plasmamanual/lightning_in_plasma/reflection/","text":"Reflection Reflection describes an objects ability to \"reflect\" on itself, generally this means to understand it's type and relationships to other types. Although Lightning does not boast a robust reflection library it does have a basic typeid for by-value types and property_delegates : # typeid ```lang=csharp var i = 0; var di = 0d; var real = 0.0; var double = 0.0d; var word = \"\"; var refType = null; var boolTrue = true; var boolFalse = false; var prop = new Property Real ; Console.Write(\"integer, 0 is of type: \"); Console.WriteLine(typeid(i).Name); // integer, 0 is of type: Integer Console.Write(\"doubleinteger, 0d is of type: \"); Console.WriteLine(typeid(di).Name); // doubleinteger, 0d is of type: DoubleInteger Console.Write(\"real, 0.0 is of type: \"); Console.WriteLine(typeid(real).Name); // real, 0.0 is of type: Real Console.Write(\"doublereal, 0.0d is of type: \"); Console.WriteLine(typeid(double).Name); // doublereal, 0.0d is of type: DoubleReal Console.Write(\"string, \\\"\\\" is of type: \"); Console.WriteLine(typeid(word).Name); // string, \"\" is of type: String Console.Write(\"null, null is of type: \"); Console.WriteLine(typeid(refType).Name); // refTypeHandle, null is of type: Null Console.Write(\"boolean, true is of type: \"); Console.WriteLine(typeid(boolTrue).Name); // boolean, true is of type: Boolean Console.Write(\"boolean, false is of type: \"); Console.WriteLine(typeid(boolFalse).Name); // boolean, false is of type: Boolean Console.Write(\"Real property delegate is of type: \"); Console.WriteLine(typeid(prop).Name); // Real property delegate is of type: Property[Real] ```name=Console Output ---------------- Begin Game --------------- integer, 0 is of type: Integer doubleinteger, 0d is of type: DoubleInteger real, 0.0 is of type: Real doublereal, 0.0d is of type: DoubleReal string, \"\" is of type: String null, null is of type: Null boolean, true is of type: Boolean boolean, false is of type: Boolean Real property delegate is of type: Property[Real] # String Interpolation Those types that are memory_management or delegates types can be inspected with string Interpolation: ```lang=csharp class Utility { constructor() { } [Static] function HelloWorld() { Console.WriteLine(\"Hello World\"); } function Add(a: Integer, b: Integer): Integer { return a+b; } } class Driver { function TypeidForRefAndDelegates() { var del = Utility.HelloWorld; var temp = new Utility(); var del2 = temp.Add; var vectorRef = new Real3(0.0, 1.0, 2.0); Console.Write(\"delegate(), Utility.HelloWorld can be string interpolated to read: \"); Console.WriteLine(\"`del`\"); Console.Write(\"delegate(a:Integer, b:Integer):Integer, Utility.Add\"); Console.Write(\" can be string interpolated to read: \"); Console.WriteLine(\"`del2`\"); Console.Write(\"ref Real3, (0.0, 1.0, 2.0) is of type: \"); Console.WriteLine(\"`vectorRef`\"); } } ```name=Console Output ---------------- Begin Game --------------- delegate(), Utility.HelloWorld can be string interpolated to read: Utility.HelloWorld() delegate(a:Integer, b:Integer):Integer, Utility.Add can be string interpolated to read: Utility.Add(a : Integer, b : Integer) : Integer ref Real3, (0.0, 1.0, 2.0) is of type: ref Real3 # Console.DumpValue Useful in understanding the current state of a Lightning object, Console.DumpValue prints out the names of the variables and their type, if a class , or their value if a basic, built-in data type. ```lang=csharp class TopLevel { var MyVariable: MidLevel = null; constructor() { } } class MidLevel { var MyVariable: BottomLevel = BottomLevel(false); constructor() { } } struct BottomLevel { var IsBottom: Boolean = true; var UpAxis: Real3 = Real3(0.0, 1.0, 0.0); constructor(param: Boolean) { this.IsBottom = param; } } class ReflectionDriver { [Static] function Dumping() { var top = TopLevel(); var mid = MidLevel(); var bot = BottomLevel(true); Console.DumpValue(top); Console.DumpValue(mid, 8); // The second parameter indicates the depth of recursion cut-off Console.DumpValue(bot); } } ```name=Console Output ---------------- Begin Game --------------- TopLevel MyVariable: (null) MidLevel MidLevel MyVariable: BottomLevel IsBottom: False UpAxis: (0, 1, 0) X: 0 Y: 1 Z: 0 BottomLevel IsBottom: True UpAxis: (0, 1, 0) Notice how the MidLevel dumps more information than the BottomLevel with comparable information, due to the second parameter. # Related Materials ## Manual property_delegates memory_management delegates string classes","title":"Reflection"},{"location":"manual/plasmamanual/lightning_in_plasma/reflection/#reflection","text":"Reflection describes an objects ability to \"reflect\" on itself, generally this means to understand it's type and relationships to other types. Although Lightning does not boast a robust reflection library it does have a basic typeid for by-value types and property_delegates : # typeid ```lang=csharp var i = 0; var di = 0d; var real = 0.0; var double = 0.0d; var word = \"\"; var refType = null; var boolTrue = true; var boolFalse = false; var prop = new Property Real ; Console.Write(\"integer, 0 is of type: \"); Console.WriteLine(typeid(i).Name); // integer, 0 is of type: Integer Console.Write(\"doubleinteger, 0d is of type: \"); Console.WriteLine(typeid(di).Name); // doubleinteger, 0d is of type: DoubleInteger Console.Write(\"real, 0.0 is of type: \"); Console.WriteLine(typeid(real).Name); // real, 0.0 is of type: Real Console.Write(\"doublereal, 0.0d is of type: \"); Console.WriteLine(typeid(double).Name); // doublereal, 0.0d is of type: DoubleReal Console.Write(\"string, \\\"\\\" is of type: \"); Console.WriteLine(typeid(word).Name); // string, \"\" is of type: String Console.Write(\"null, null is of type: \"); Console.WriteLine(typeid(refType).Name); // refTypeHandle, null is of type: Null Console.Write(\"boolean, true is of type: \"); Console.WriteLine(typeid(boolTrue).Name); // boolean, true is of type: Boolean Console.Write(\"boolean, false is of type: \"); Console.WriteLine(typeid(boolFalse).Name); // boolean, false is of type: Boolean Console.Write(\"Real property delegate is of type: \"); Console.WriteLine(typeid(prop).Name); // Real property delegate is of type: Property[Real] ```name=Console Output ---------------- Begin Game --------------- integer, 0 is of type: Integer doubleinteger, 0d is of type: DoubleInteger real, 0.0 is of type: Real doublereal, 0.0d is of type: DoubleReal string, \"\" is of type: String null, null is of type: Null boolean, true is of type: Boolean boolean, false is of type: Boolean Real property delegate is of type: Property[Real] # String Interpolation Those types that are memory_management or delegates types can be inspected with string Interpolation: ```lang=csharp class Utility { constructor() { } [Static] function HelloWorld() { Console.WriteLine(\"Hello World\"); } function Add(a: Integer, b: Integer): Integer { return a+b; } } class Driver { function TypeidForRefAndDelegates() { var del = Utility.HelloWorld; var temp = new Utility(); var del2 = temp.Add; var vectorRef = new Real3(0.0, 1.0, 2.0); Console.Write(\"delegate(), Utility.HelloWorld can be string interpolated to read: \"); Console.WriteLine(\"`del`\"); Console.Write(\"delegate(a:Integer, b:Integer):Integer, Utility.Add\"); Console.Write(\" can be string interpolated to read: \"); Console.WriteLine(\"`del2`\"); Console.Write(\"ref Real3, (0.0, 1.0, 2.0) is of type: \"); Console.WriteLine(\"`vectorRef`\"); } } ```name=Console Output ---------------- Begin Game --------------- delegate(), Utility.HelloWorld can be string interpolated to read: Utility.HelloWorld() delegate(a:Integer, b:Integer):Integer, Utility.Add can be string interpolated to read: Utility.Add(a : Integer, b : Integer) : Integer ref Real3, (0.0, 1.0, 2.0) is of type: ref Real3 # Console.DumpValue Useful in understanding the current state of a Lightning object, Console.DumpValue prints out the names of the variables and their type, if a class , or their value if a basic, built-in data type. ```lang=csharp class TopLevel { var MyVariable: MidLevel = null; constructor() { } } class MidLevel { var MyVariable: BottomLevel = BottomLevel(false); constructor() { } } struct BottomLevel { var IsBottom: Boolean = true; var UpAxis: Real3 = Real3(0.0, 1.0, 0.0); constructor(param: Boolean) { this.IsBottom = param; } } class ReflectionDriver { [Static] function Dumping() { var top = TopLevel(); var mid = MidLevel(); var bot = BottomLevel(true); Console.DumpValue(top); Console.DumpValue(mid, 8); // The second parameter indicates the depth of recursion cut-off Console.DumpValue(bot); } } ```name=Console Output ---------------- Begin Game --------------- TopLevel MyVariable: (null) MidLevel MidLevel MyVariable: BottomLevel IsBottom: False UpAxis: (0, 1, 0) X: 0 Y: 1 Z: 0 BottomLevel IsBottom: True UpAxis: (0, 1, 0) Notice how the MidLevel dumps more information than the BottomLevel with comparable information, due to the second parameter. # Related Materials ## Manual property_delegates memory_management delegates string classes","title":"Reflection"},{"location":"manual/plasmamanual/lightning_in_plasma/strings/","text":"Strings String is a Lightning type used to represent text as a sequence of characters. # Making Strings In Lightning, a string literal is made by enclosing plasma or more characters in double quotation marks: ```lang=csharp, name=String Literal Examples var greeting = \"hello world\"; var colorCode = \"#F9EF1A\"; var empty = \"\"; # String Interpolation *String interpolation* is a way of evaluating an expression and inserting it directly into a string literal. In Lightning, string interpolation is done using the **grave accent** character, ##`##. Anything in a string literal that is entered between two ##`##s is evaluated, and the result of that evaluation is used instead. For example: ```lang=csharp, name=String Interpolation Examples var xp = Integer.PositiveMax; var message = \"Gained `xp` experience points.\"; Console.WriteLine(message); message = \"Turn `Math.ToDegrees(Math.ACos(0.2)) - 15.0` degrees to starboard.\"; Console.WriteLine(message); message = \"This component is attached to `this.Owner`.\"; Console.WriteLine(message); ```name=Console Window Gained 2147483647 experience points. Turn 63.463 degrees to starboard. This component is attached to . String interpolation presents a handy means of joining two strings: ```lang=csharp, name=String Interpolation Joining var str0 = \"GAME\"; var str1 = \"OVER\"; Console.WriteLine(\"`str0` `str1`\"); ```name=Console Window GAME OVER It can also be used to effectively \"append\" to a string: ```lang=csharp, name=String Interpolation Appending var evenDigits = \"\"; var oddDigits = \"\"; for (var i = 0; i < 10; ++i) { if (i % 2 == 0) evenDigits = \"`evenDigits` `i`\"; else oddDigits = \"`oddDigits` `i`\"; } Console.WriteLine(\"Even base-ten digits: `evenDigits`\"); Console.WriteLine(\"Odd base-ten digits: `oddDigits`\"); ```name=Console Window Even base-ten digits: 0 2 4 6 8 Odd base-ten digits: 1 3 5 7 9 Note that strings in Lightning are **immutable**, which means they cannot be altered after they have been created. Thus, strictly speaking, no true *appending* takes place. In the above code block, where it appears that `evenDigits` is being appended via string interpolation, a new string is actually created using the previous value of `evenDigits` and the value of `i`, and that new string is assigned back to the `evenDigits` variable. (NOTE) Since this means of string appending involves the creation of another new string each time it occurs, it is less efficient than using a [ StringBuilder](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/stringbuilder.markdown), which is intended for just this purpose. In certain situations, such as a deeply nested loop, this performance difference may be significant. # Escape Sequences Some characters are entered in a string literal via special sequences of characters called //escape sequences//. In Lightning, all escape sequences consist of a backslash followed by another character. ```lang=csharp, name=Escape Sequence Examples // \\\" -- double quotation marks Console.WriteLine(\"Say \\\"hello\\\" to Dr. Cosmo for me.\"); Console.WriteLine(); // \\` -- grave accent Console.WriteLine(\"Press the \\` key to open the console\"); Console.WriteLine(); // \\\\ -- backslash Console.WriteLine(\"C:\\\\Logs\\\\Analytics\\\\ForestLevel.Analytics.gamedata\"); Console.WriteLine(); // \\n or \\r -- newline Console.WriteLine(\"BEWARE\\n OF\\r DOUG\"); Console.WriteLine(); // \\t -- horizontal tab Console.WriteLine(\"+---+---+---+\"); Console.WriteLine(\"1\\t12\\t123\\t|\"); Console.WriteLine(\"+---+---+---+\"); ```name=Console Window Say \"hello\" to Dr. Cosmo for me. Press the ` key to open the console C:\\Logs\\Analytics\\ForestLevel.Analytics.gamedata BEWARE OF DOUG +---+---+---+ 1 12 123 | +---+---+---+ # Strings and StringRanges [ StringRange](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/stringrange.markdown) is a separate but related class to **String**. It is an iterable range that can be used in a [ For Each loop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown#for-each-loop). A string can be **implicitly cast** to StringRange, so a string can be passed into any function that expects a StringRange. However, a StringRange *cannot* be implicitly cast to String: ```lang=csharp, name=String and StringRange Implicit Casting Examples var string = \"\"; var stringRange = StringRange(); this.FunctionTakingString(string); // okay *this.FunctionTakingString(stringRange); * error this.FunctionTakingString(stringRange.ToString()); // okay this.FunctionTakingStringRange(string); // okay this.FunctionTakingStringRange(stringRange); // okay # Static String Functions As with all static functions , the static functions of the String class are not invoked from instances of the class, but instead are found in the String namespace itself. ## Compare Compare returns an Integer indicating the relative sort order of the two given strings; that is, whether one string would be sorted before another when comparing the character codes of the two strings: ```lang=csharp, name=Relative Sort Order Example var str0 = \"abc\"; var str1 = \"def\"; Console.WriteLine(String.Compare(str0, str1)); Console.WriteLine(String.Compare(str1, str0)); Console.WriteLine(String.Compare(str0, str0)); ```name=Console Window -1 1 0 This results in more or less the same ordering as one would use to sort entries in an English dictionary, except that because it goes by character codes, uppercase letters are sorted before lowercase letters, etc.: ```lang=csharp, name=Letter Case Sorting Example var str0 = \"cat\"; var str1 = \"dog\"; var str2 = \"DOG\"; Console.WriteLine(String.Compare(str0, str1)); Console.WriteLine(String.Compare(str0, str2)); ```name=Console Window -1 1 This method is handy for sorting arrays of strings. Sort is an Array method that sorts an array in place using a given comparison function: ```lang=csharp, name=Compare Sort Example var strings = Array String ; strings.Add(\"hi\"); strings.Add(\"greetings\"); strings.Add(\"nice to see you\"); strings.Add(\"good morning\"); Console.WriteLine(strings); strings.Sort(String.Compare); // the Compare function is passed as a delegate Console.WriteLine(strings); ```name=Console Window {hi, greetings, nice to see you, good morning} {good morning, greetings, hi, nice to see you} ## Concatenate Concatenate can be used to join two existing strings: ```lang=csharp, name=Concatenate Example Console.WriteLine(String.Concatenate(\"exa\", \"mple\")); ```name=Console Window example ## FormatC FormatC produces a string using C-style string formatting syntax: ```lang=csharp, name=FormatC Example var score = 12340; Console.WriteLine(String.FormatC(\"Score: %08d\", score)); var hull = 100.0 * 43.0 / 64.0; // actual value 67.1875 Console.WriteLine(String.FormatC(\"Hull integrity at %.2f percent\", hull)); ```name=Console Window Score: 00012340 Hull integrity at 67.19 percent FormatC uses the same syntax as the C printf function , with the following notes: - the p format specifier can only be used with references to objects of reference types - the n format specifier cannot be used - the # flag can only be used with the o , x , and X specifiers - the . precision marker must have its precision value specified ## FromRune FromRune returns a one-character string that consists of the given rune, which can either be passed in directly, or be specified by its code point: ```lang=csharp, name=FromRune Example Console.WriteLine(String.FromRune(65)); Console.WriteLine(String.FromRune(Rune(90))); ```name=Console Window A Z ## IsNullOrEmpty and IsNullOrWhitespace IsNullOrEmpty returns true if the given string is either null or the empty string, \"\" , and false otherwise. IsNullOrWhitespace works just the same way, except that it also returns true if the given string consists only of whitespace characters: ```lang=csharp, name=IsNullOrWhitespace Example Console.WriteLine(String.IsNullOrWhitespace(\" \\n \\t \")); ```name=Console Window true ## Join Join combines two, three, or four strings into one, placing a given separator string between them in the result: ```lang=csharp, name=Join Example var word0 = \"Eeny\"; var word1 = \"Meeny\"; var word2 = \"Miney\"; var word3 = \"Moe\"; var separator = \", \"; Console.WriteLine(String.Join(separator, word0, word1, word2, word3)); ```name=Console Window Eeny, Meeny, Miney, Moe # String Properties ## All All converts the string into a StringRange. In Lightning, strings can be implicitly cast to StringRanges, so it is typically not necessary to use this property: ```lang=csharp, name=All Example // Contains takes a StringRange Console.WriteLine(\"homeowner\".Contains(\"meow\")); Console.WriteLine(\"homeowner\".Contains(\"meow\".All)); ```name=Console Window true true ## Begin and End Begin gets the RuneIterator at the start of the string, and End gets the RuneIterator at the end of it: ```lang=csharp, name=Begin and End Example var fileName = \"SnowLevel.Analytics.gamedata\"; var levelName = fileName.SubString(fileName.Begin, fileName.FindFirstOf(\".\").Begin); var extension = fileName.SubString(fileName.FindLastOf(\".\").End, fileName.End); Console.WriteLine(levelName); Console.WriteLine(extension); ```name=ConsoleWindow SnowLevel gamedata ## ByteCount and Count ByteCount gets the number of bytes in the string. For a string that contains one or more characters outside of the ASCII range, this will be different from the number of runes represented by the string (see ComputeRuneCount below). Consider the following code example, attached to a cog that has a SpriteText component whose Text property is set to the French word //gar\ufffdon//: ```lang=csharp, name=ByteCount Example var englishString = \"string\"; var frenchString = this.Owner.SpriteText.Text; Console.WriteLine(\"The English string has englishString.ByteCount bytes\"); Console.WriteLine(\"The French string has frenchString.ByteCount bytes\"); ```name=Console Window The English string has 6 bytes The French string has 7 bytes The Count property gets the same value as ByteCount , and exists for legacy purposes. ## Empty and IsNotEmpty Empty gets whether the string contains any characters at all: ```lang=csharp, name=Empty Example var userNameInput = \"\"; if (userNameInput.Empty) Console.WriteLine(\"Please enter a name.\"); else Console.WriteLine(\"Welcome, userNameInput .\"); ```name=Console Window Please enter a name. IsNotEmpty is always the exact opposite of Empty . # String Methods String methods are found on string instances, including literals: ```lang=csharp, name=String Method on Literal Example Console.WriteLine(\"hello world\".ToUpper()); ```name=Console Window HELLO WORLD ## CompareTo A string's CompareTo method returns an Integer indicating its relative sort order when compared with a given StringRange. It works much like the static Compare function seen above, except that it compares a given StringRange to the string on which this method is being invoked. ## ComputeRuneCount The ComputeRuneCount method calculates the number of runes represented by the string by iterating through it from its Begin iterator to its End . As noted above , a string that contains one or more characters outside of the ASCII range will have a different rune count from its byte count: ```lang=csharp, name=ComputeRuneCount Example var englishString = \"string\"; var frenchString = this.Owner.SpriteText.Text; Console.WriteLine(\"The English string has englishString.ComputeRuneCount() runes\"); Console.WriteLine(\"The French string has frenchString.ComputeRuneCount() runes\"); ```name=Console Window The English string has 6 runes The French string has 6 runes ## Contains The Contains method checks whether a string contains a given substring: ```lang=csharp, name=Contains Example var sentence = \"DR. COSMO: \\\"I'm looking for a person named Brianna.\\\"\"; var name0 = \"Brian\"; var name1 = \"Anna\"; Console.WriteLine(sentence); if (sentence.Contains(name0)) Console.WriteLine(\" BRIAN: \\\"Did someone mention me?\\\"\"); if (sentence.Contains(name1)) Console.WriteLine(\" ANNA: \\\"My ears are burning.\\\"\"); ```name=Console Window DR. COSMO: \"I'm looking for a person named Brianna.\" * BRIAN: \"Did someone mention me?\" As this example shows, Contains is case-sensitive, but it does not match only complete words. Brianna contains Brian , and it does contain anna , but not Anna . ## EndsWith and StartsWith The EndsWith method checks whether a string ends with a given substring: ```lang=csharp, name=EndsWith Example var fileNameToOpen = \"DesertLevel.Analytics.gamedata\"; var validFileExtension = \".gamedata\"; if (fileNameToOpen.EndsWith(validFileExtension)) Console.WriteLine(\"Opening fileNameToOpen ....\"); else Console.WriteLine(\" fileNameToOpen is not a valid file\"); ```name=ConsoleWindow Opening DesertLevel.Analytics.gamedata.... The StartsWith method works the same way, except that it checks the beginning of the string instead the end. ## Replace The Replace method returns a new string, with all occurrences of a given old substring replaced with a given new substring: ```lang=csharp, name=Replace Example var dialogueFromFile = \"Oh, [HERO_NAME]! Your friend [VILLAIN_NAME] was looking for you.\"; var heroName = \"Brianna\"; var villainName = \"Dr. Cosmo\"; var dialogue = dialogueFromFile.Replace(\"[HERO_NAME]\", heroName); dialogue = dialogue.Replace(\"[VILLAIN_NAME]\", villainName); Console.WriteLine(dialogue); ```name=Console Window Oh, Brianna! Your friend Dr. Cosmo was looking for you. ## Split The Split method scans a string for a given delimiter StringRange of one or more characters. The substrings that were found separated by occurrences of that delimiter, if any, are returned as an iterable range. The delimiter itself is not present in the split results: ```lang=csharp, name=Split Example var dataFromFile = \"0,0,2,0,5,4,1,1,0,0,0,1,1,3,5,1\"; var splitResults = dataFromFile.Split(\",\"); // splitResults now contains \"0\", \"0\", \"2\", \"0\", \"5\", \"4\", and so on var total = 0; foreach (var result in splitResults) total += Integer.Parse(result); Console.WriteLine(\"Data Total: total \"); ```name=Console Window Data Total: 24 NOTE: Parse is a static Integer function. It takes a StringRange and interprets it as if it were an Integer, and returns that value. Equivalent static functions exist in other classes, such as Real , DoubleInteger , etc. ## SubString, SubStringBytes, and SubStringFromRuneIndices The SubString method returns the snippet of a string that is bounded by the two given RuneIterators. This may be the entire string itself, or it may be a smaller portion thereof: ```lang=csharp, name=SubString Example var name = \"The Evil Dr. Cosmo\"; var firstSpace = name.FindFirstOf(\" \"); // firstSpace refers to the space directly after \"The\" var title = name.FindFirstOf(\"Dr.\"); // title refers to the \"Dr.\" between \"Evil\" and \"Cosmo\" var lastSpace = name.FindLastOf(\" \"); // lastSpace refers to the space directly before \"Cosmo\" var part0 = name.SubString(name.Begin, firstSpace.Begin); // \"The\" var part1 = \"Handsome but Misunderstood\"; var part2 = name.SubString(title.Begin, title.End); // \"Dr.\" var part3 = \"Eugene\"; var part4 = name.SubString(lastSpace.End, name.End); // \"Cosmo\" var part5 = \"IV\"; var revisedName = \" part0 part1 part2 part3 part4 part5 \"; Console.WriteLine(revisedName); ```name=Console Window The Handsome but Misunderstood Dr. Eugene Cosmo IV See also FindFirstOf See also FindLastOf Besides SubString , there are two other String methods that return substrings: SubStringBytes returns a string's substring that starts at the given byte index and runs for the given byte length: ```lang=csharp, name=SubStringBytes Example var str = \"abcdefghij\"; // 0123456789 // start ^ // 12345 // ^ 5 bytes long var sub = str.SubStringBytes(3, 5); Console.WriteLine(sub); ```name=Console Window defgh IMPORTANT: A string that contains characters that are outside of the ASCII range will not have a matching rune count and byte count. Using SubStringBytes on such a string may produce undesired behavior. SubStringFromRuneIndices returns a string's substring that starts at the given starting rune index and ends one past the given ending rune index: ```lang=csharp, name=SubStringFromRuneIndices Example var str = \"abcdefghij\"; // 0123456789 // start ^ ^ one past the end var sub = str.SubStringFromRuneIndices(2, 9); Console.WriteLine(sub); ```name=Console Window cdefghi NOTE: Finding a given rune by its index requires a linear search through a string. Because SubStringFromRuneIndices requires two such searches, this method can be slower than SubString . In certain situations, such as a deeply nested loop, this performance difference may be significant. ## ToLower and ToUpper The ToLower method returns a copy of the original string with all of its letters converted to lowercase. Any character that is not an uppercase alphabetical character is unchanged: ```lang=csharp, name=ToLower Example var sentence = \"gEt ReKT scRUb\"; var forbiddenWord = \"scrub\"; var lower = sentence.ToLower(); if (lower.Contains(forbiddenWord)) Console.WriteLine(\"You have been reported for bad manners.\"); else Console.WriteLine(sentence); ```name=Console Window You have been reported for bad manners. The ToUpper method is just like ToLower, except that it converts letters to uppercase: ``lang=csharp, name=ToUpper Example var name = \"Johnny\"; var upperName = name.ToUpper(); var dialogue = \" upperName : \\\"This is name`.\\\"\"; Console.WriteLine(dialogue); ```name=ConsoleWindow JOHNNY: \"This is Johnny.\" ## Trim, TrimEnd, and TrimStart The Trim method returns a copy of the original string with all of its whitespace characters removed from its beginning and end: ``lang=csharp, name=Trim Example var untrimmedID = \" f08b47e1 \"; Console.WriteLine(\"Your ID is untrimmedID`. Write it down.\"); var trimmedID = untrimmedID.Trim(); Console.WriteLine(\"Your ID is trimmedID . Write it down.\"); ```name=Console Window Your ID is f08b47e1 . Write it down. Your ID is f08b47e1. Write it down. TrimEnd and TrimStart work just the same as Trim , except that TrimEnd only trims whitespace characters from the end of the string, and TrimStart only trims from the start of the string. # Related Materials ## Manual - Looping ## Code Reference - String - StringRange - StringBuilder - StringSplitRange - Rune - RuneIterator","title":"Strings"},{"location":"manual/plasmamanual/lightning_in_plasma/strings/#strings","text":"String is a Lightning type used to represent text as a sequence of characters. # Making Strings In Lightning, a string literal is made by enclosing plasma or more characters in double quotation marks: ```lang=csharp, name=String Literal Examples var greeting = \"hello world\"; var colorCode = \"#F9EF1A\"; var empty = \"\"; # String Interpolation *String interpolation* is a way of evaluating an expression and inserting it directly into a string literal. In Lightning, string interpolation is done using the **grave accent** character, ##`##. Anything in a string literal that is entered between two ##`##s is evaluated, and the result of that evaluation is used instead. For example: ```lang=csharp, name=String Interpolation Examples var xp = Integer.PositiveMax; var message = \"Gained `xp` experience points.\"; Console.WriteLine(message); message = \"Turn `Math.ToDegrees(Math.ACos(0.2)) - 15.0` degrees to starboard.\"; Console.WriteLine(message); message = \"This component is attached to `this.Owner`.\"; Console.WriteLine(message); ```name=Console Window Gained 2147483647 experience points. Turn 63.463 degrees to starboard. This component is attached to . String interpolation presents a handy means of joining two strings: ```lang=csharp, name=String Interpolation Joining var str0 = \"GAME\"; var str1 = \"OVER\"; Console.WriteLine(\"`str0` `str1`\"); ```name=Console Window GAME OVER It can also be used to effectively \"append\" to a string: ```lang=csharp, name=String Interpolation Appending var evenDigits = \"\"; var oddDigits = \"\"; for (var i = 0; i < 10; ++i) { if (i % 2 == 0) evenDigits = \"`evenDigits` `i`\"; else oddDigits = \"`oddDigits` `i`\"; } Console.WriteLine(\"Even base-ten digits: `evenDigits`\"); Console.WriteLine(\"Odd base-ten digits: `oddDigits`\"); ```name=Console Window Even base-ten digits: 0 2 4 6 8 Odd base-ten digits: 1 3 5 7 9 Note that strings in Lightning are **immutable**, which means they cannot be altered after they have been created. Thus, strictly speaking, no true *appending* takes place. In the above code block, where it appears that `evenDigits` is being appended via string interpolation, a new string is actually created using the previous value of `evenDigits` and the value of `i`, and that new string is assigned back to the `evenDigits` variable. (NOTE) Since this means of string appending involves the creation of another new string each time it occurs, it is less efficient than using a [ StringBuilder](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/stringbuilder.markdown), which is intended for just this purpose. In certain situations, such as a deeply nested loop, this performance difference may be significant. # Escape Sequences Some characters are entered in a string literal via special sequences of characters called //escape sequences//. In Lightning, all escape sequences consist of a backslash followed by another character. ```lang=csharp, name=Escape Sequence Examples // \\\" -- double quotation marks Console.WriteLine(\"Say \\\"hello\\\" to Dr. Cosmo for me.\"); Console.WriteLine(); // \\` -- grave accent Console.WriteLine(\"Press the \\` key to open the console\"); Console.WriteLine(); // \\\\ -- backslash Console.WriteLine(\"C:\\\\Logs\\\\Analytics\\\\ForestLevel.Analytics.gamedata\"); Console.WriteLine(); // \\n or \\r -- newline Console.WriteLine(\"BEWARE\\n OF\\r DOUG\"); Console.WriteLine(); // \\t -- horizontal tab Console.WriteLine(\"+---+---+---+\"); Console.WriteLine(\"1\\t12\\t123\\t|\"); Console.WriteLine(\"+---+---+---+\"); ```name=Console Window Say \"hello\" to Dr. Cosmo for me. Press the ` key to open the console C:\\Logs\\Analytics\\ForestLevel.Analytics.gamedata BEWARE OF DOUG +---+---+---+ 1 12 123 | +---+---+---+ # Strings and StringRanges [ StringRange](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/stringrange.markdown) is a separate but related class to **String**. It is an iterable range that can be used in a [ For Each loop](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown#for-each-loop). A string can be **implicitly cast** to StringRange, so a string can be passed into any function that expects a StringRange. However, a StringRange *cannot* be implicitly cast to String: ```lang=csharp, name=String and StringRange Implicit Casting Examples var string = \"\"; var stringRange = StringRange(); this.FunctionTakingString(string); // okay *this.FunctionTakingString(stringRange); * error this.FunctionTakingString(stringRange.ToString()); // okay this.FunctionTakingStringRange(string); // okay this.FunctionTakingStringRange(stringRange); // okay # Static String Functions As with all static functions , the static functions of the String class are not invoked from instances of the class, but instead are found in the String namespace itself. ## Compare Compare returns an Integer indicating the relative sort order of the two given strings; that is, whether one string would be sorted before another when comparing the character codes of the two strings: ```lang=csharp, name=Relative Sort Order Example var str0 = \"abc\"; var str1 = \"def\"; Console.WriteLine(String.Compare(str0, str1)); Console.WriteLine(String.Compare(str1, str0)); Console.WriteLine(String.Compare(str0, str0)); ```name=Console Window -1 1 0 This results in more or less the same ordering as one would use to sort entries in an English dictionary, except that because it goes by character codes, uppercase letters are sorted before lowercase letters, etc.: ```lang=csharp, name=Letter Case Sorting Example var str0 = \"cat\"; var str1 = \"dog\"; var str2 = \"DOG\"; Console.WriteLine(String.Compare(str0, str1)); Console.WriteLine(String.Compare(str0, str2)); ```name=Console Window -1 1 This method is handy for sorting arrays of strings. Sort is an Array method that sorts an array in place using a given comparison function: ```lang=csharp, name=Compare Sort Example var strings = Array String ; strings.Add(\"hi\"); strings.Add(\"greetings\"); strings.Add(\"nice to see you\"); strings.Add(\"good morning\"); Console.WriteLine(strings); strings.Sort(String.Compare); // the Compare function is passed as a delegate Console.WriteLine(strings); ```name=Console Window {hi, greetings, nice to see you, good morning} {good morning, greetings, hi, nice to see you} ## Concatenate Concatenate can be used to join two existing strings: ```lang=csharp, name=Concatenate Example Console.WriteLine(String.Concatenate(\"exa\", \"mple\")); ```name=Console Window example ## FormatC FormatC produces a string using C-style string formatting syntax: ```lang=csharp, name=FormatC Example var score = 12340; Console.WriteLine(String.FormatC(\"Score: %08d\", score)); var hull = 100.0 * 43.0 / 64.0; // actual value 67.1875 Console.WriteLine(String.FormatC(\"Hull integrity at %.2f percent\", hull)); ```name=Console Window Score: 00012340 Hull integrity at 67.19 percent FormatC uses the same syntax as the C printf function , with the following notes: - the p format specifier can only be used with references to objects of reference types - the n format specifier cannot be used - the # flag can only be used with the o , x , and X specifiers - the . precision marker must have its precision value specified ## FromRune FromRune returns a one-character string that consists of the given rune, which can either be passed in directly, or be specified by its code point: ```lang=csharp, name=FromRune Example Console.WriteLine(String.FromRune(65)); Console.WriteLine(String.FromRune(Rune(90))); ```name=Console Window A Z ## IsNullOrEmpty and IsNullOrWhitespace IsNullOrEmpty returns true if the given string is either null or the empty string, \"\" , and false otherwise. IsNullOrWhitespace works just the same way, except that it also returns true if the given string consists only of whitespace characters: ```lang=csharp, name=IsNullOrWhitespace Example Console.WriteLine(String.IsNullOrWhitespace(\" \\n \\t \")); ```name=Console Window true ## Join Join combines two, three, or four strings into one, placing a given separator string between them in the result: ```lang=csharp, name=Join Example var word0 = \"Eeny\"; var word1 = \"Meeny\"; var word2 = \"Miney\"; var word3 = \"Moe\"; var separator = \", \"; Console.WriteLine(String.Join(separator, word0, word1, word2, word3)); ```name=Console Window Eeny, Meeny, Miney, Moe # String Properties ## All All converts the string into a StringRange. In Lightning, strings can be implicitly cast to StringRanges, so it is typically not necessary to use this property: ```lang=csharp, name=All Example // Contains takes a StringRange Console.WriteLine(\"homeowner\".Contains(\"meow\")); Console.WriteLine(\"homeowner\".Contains(\"meow\".All)); ```name=Console Window true true ## Begin and End Begin gets the RuneIterator at the start of the string, and End gets the RuneIterator at the end of it: ```lang=csharp, name=Begin and End Example var fileName = \"SnowLevel.Analytics.gamedata\"; var levelName = fileName.SubString(fileName.Begin, fileName.FindFirstOf(\".\").Begin); var extension = fileName.SubString(fileName.FindLastOf(\".\").End, fileName.End); Console.WriteLine(levelName); Console.WriteLine(extension); ```name=ConsoleWindow SnowLevel gamedata ## ByteCount and Count ByteCount gets the number of bytes in the string. For a string that contains one or more characters outside of the ASCII range, this will be different from the number of runes represented by the string (see ComputeRuneCount below). Consider the following code example, attached to a cog that has a SpriteText component whose Text property is set to the French word //gar\ufffdon//: ```lang=csharp, name=ByteCount Example var englishString = \"string\"; var frenchString = this.Owner.SpriteText.Text; Console.WriteLine(\"The English string has englishString.ByteCount bytes\"); Console.WriteLine(\"The French string has frenchString.ByteCount bytes\"); ```name=Console Window The English string has 6 bytes The French string has 7 bytes The Count property gets the same value as ByteCount , and exists for legacy purposes. ## Empty and IsNotEmpty Empty gets whether the string contains any characters at all: ```lang=csharp, name=Empty Example var userNameInput = \"\"; if (userNameInput.Empty) Console.WriteLine(\"Please enter a name.\"); else Console.WriteLine(\"Welcome, userNameInput .\"); ```name=Console Window Please enter a name. IsNotEmpty is always the exact opposite of Empty . # String Methods String methods are found on string instances, including literals: ```lang=csharp, name=String Method on Literal Example Console.WriteLine(\"hello world\".ToUpper()); ```name=Console Window HELLO WORLD ## CompareTo A string's CompareTo method returns an Integer indicating its relative sort order when compared with a given StringRange. It works much like the static Compare function seen above, except that it compares a given StringRange to the string on which this method is being invoked. ## ComputeRuneCount The ComputeRuneCount method calculates the number of runes represented by the string by iterating through it from its Begin iterator to its End . As noted above , a string that contains one or more characters outside of the ASCII range will have a different rune count from its byte count: ```lang=csharp, name=ComputeRuneCount Example var englishString = \"string\"; var frenchString = this.Owner.SpriteText.Text; Console.WriteLine(\"The English string has englishString.ComputeRuneCount() runes\"); Console.WriteLine(\"The French string has frenchString.ComputeRuneCount() runes\"); ```name=Console Window The English string has 6 runes The French string has 6 runes ## Contains The Contains method checks whether a string contains a given substring: ```lang=csharp, name=Contains Example var sentence = \"DR. COSMO: \\\"I'm looking for a person named Brianna.\\\"\"; var name0 = \"Brian\"; var name1 = \"Anna\"; Console.WriteLine(sentence); if (sentence.Contains(name0)) Console.WriteLine(\" BRIAN: \\\"Did someone mention me?\\\"\"); if (sentence.Contains(name1)) Console.WriteLine(\" ANNA: \\\"My ears are burning.\\\"\"); ```name=Console Window DR. COSMO: \"I'm looking for a person named Brianna.\" * BRIAN: \"Did someone mention me?\" As this example shows, Contains is case-sensitive, but it does not match only complete words. Brianna contains Brian , and it does contain anna , but not Anna . ## EndsWith and StartsWith The EndsWith method checks whether a string ends with a given substring: ```lang=csharp, name=EndsWith Example var fileNameToOpen = \"DesertLevel.Analytics.gamedata\"; var validFileExtension = \".gamedata\"; if (fileNameToOpen.EndsWith(validFileExtension)) Console.WriteLine(\"Opening fileNameToOpen ....\"); else Console.WriteLine(\" fileNameToOpen is not a valid file\"); ```name=ConsoleWindow Opening DesertLevel.Analytics.gamedata.... The StartsWith method works the same way, except that it checks the beginning of the string instead the end. ## Replace The Replace method returns a new string, with all occurrences of a given old substring replaced with a given new substring: ```lang=csharp, name=Replace Example var dialogueFromFile = \"Oh, [HERO_NAME]! Your friend [VILLAIN_NAME] was looking for you.\"; var heroName = \"Brianna\"; var villainName = \"Dr. Cosmo\"; var dialogue = dialogueFromFile.Replace(\"[HERO_NAME]\", heroName); dialogue = dialogue.Replace(\"[VILLAIN_NAME]\", villainName); Console.WriteLine(dialogue); ```name=Console Window Oh, Brianna! Your friend Dr. Cosmo was looking for you. ## Split The Split method scans a string for a given delimiter StringRange of one or more characters. The substrings that were found separated by occurrences of that delimiter, if any, are returned as an iterable range. The delimiter itself is not present in the split results: ```lang=csharp, name=Split Example var dataFromFile = \"0,0,2,0,5,4,1,1,0,0,0,1,1,3,5,1\"; var splitResults = dataFromFile.Split(\",\"); // splitResults now contains \"0\", \"0\", \"2\", \"0\", \"5\", \"4\", and so on var total = 0; foreach (var result in splitResults) total += Integer.Parse(result); Console.WriteLine(\"Data Total: total \"); ```name=Console Window Data Total: 24 NOTE: Parse is a static Integer function. It takes a StringRange and interprets it as if it were an Integer, and returns that value. Equivalent static functions exist in other classes, such as Real , DoubleInteger , etc. ## SubString, SubStringBytes, and SubStringFromRuneIndices The SubString method returns the snippet of a string that is bounded by the two given RuneIterators. This may be the entire string itself, or it may be a smaller portion thereof: ```lang=csharp, name=SubString Example var name = \"The Evil Dr. Cosmo\"; var firstSpace = name.FindFirstOf(\" \"); // firstSpace refers to the space directly after \"The\" var title = name.FindFirstOf(\"Dr.\"); // title refers to the \"Dr.\" between \"Evil\" and \"Cosmo\" var lastSpace = name.FindLastOf(\" \"); // lastSpace refers to the space directly before \"Cosmo\" var part0 = name.SubString(name.Begin, firstSpace.Begin); // \"The\" var part1 = \"Handsome but Misunderstood\"; var part2 = name.SubString(title.Begin, title.End); // \"Dr.\" var part3 = \"Eugene\"; var part4 = name.SubString(lastSpace.End, name.End); // \"Cosmo\" var part5 = \"IV\"; var revisedName = \" part0 part1 part2 part3 part4 part5 \"; Console.WriteLine(revisedName); ```name=Console Window The Handsome but Misunderstood Dr. Eugene Cosmo IV See also FindFirstOf See also FindLastOf Besides SubString , there are two other String methods that return substrings: SubStringBytes returns a string's substring that starts at the given byte index and runs for the given byte length: ```lang=csharp, name=SubStringBytes Example var str = \"abcdefghij\"; // 0123456789 // start ^ // 12345 // ^ 5 bytes long var sub = str.SubStringBytes(3, 5); Console.WriteLine(sub); ```name=Console Window defgh IMPORTANT: A string that contains characters that are outside of the ASCII range will not have a matching rune count and byte count. Using SubStringBytes on such a string may produce undesired behavior. SubStringFromRuneIndices returns a string's substring that starts at the given starting rune index and ends one past the given ending rune index: ```lang=csharp, name=SubStringFromRuneIndices Example var str = \"abcdefghij\"; // 0123456789 // start ^ ^ one past the end var sub = str.SubStringFromRuneIndices(2, 9); Console.WriteLine(sub); ```name=Console Window cdefghi NOTE: Finding a given rune by its index requires a linear search through a string. Because SubStringFromRuneIndices requires two such searches, this method can be slower than SubString . In certain situations, such as a deeply nested loop, this performance difference may be significant. ## ToLower and ToUpper The ToLower method returns a copy of the original string with all of its letters converted to lowercase. Any character that is not an uppercase alphabetical character is unchanged: ```lang=csharp, name=ToLower Example var sentence = \"gEt ReKT scRUb\"; var forbiddenWord = \"scrub\"; var lower = sentence.ToLower(); if (lower.Contains(forbiddenWord)) Console.WriteLine(\"You have been reported for bad manners.\"); else Console.WriteLine(sentence); ```name=Console Window You have been reported for bad manners. The ToUpper method is just like ToLower, except that it converts letters to uppercase: ``lang=csharp, name=ToUpper Example var name = \"Johnny\"; var upperName = name.ToUpper(); var dialogue = \" upperName : \\\"This is name`.\\\"\"; Console.WriteLine(dialogue); ```name=ConsoleWindow JOHNNY: \"This is Johnny.\" ## Trim, TrimEnd, and TrimStart The Trim method returns a copy of the original string with all of its whitespace characters removed from its beginning and end: ``lang=csharp, name=Trim Example var untrimmedID = \" f08b47e1 \"; Console.WriteLine(\"Your ID is untrimmedID`. Write it down.\"); var trimmedID = untrimmedID.Trim(); Console.WriteLine(\"Your ID is trimmedID . Write it down.\"); ```name=Console Window Your ID is f08b47e1 . Write it down. Your ID is f08b47e1. Write it down. TrimEnd and TrimStart work just the same as Trim , except that TrimEnd only trims whitespace characters from the end of the string, and TrimStart only trims from the start of the string. # Related Materials ## Manual - Looping ## Code Reference - String - StringRange - StringBuilder - StringSplitRange - Rune - RuneIterator","title":"Strings"},{"location":"manual/plasmamanual/lightning_in_plasma/swizzle/","text":"Swizzle Swizzling is accessing the values within vector types ( Real2 , Integer3 , etc.) in any order. The term swizzling originated as the name for a technique used for doing the same thing, but within shaders. # Understanding a Swizzle To swizzle a vector, refer to its values as if they were data members, using the letters X , Y , Z , and W for the corresponding elements. These can be combined in any permutation or combination. ``name=Simple Swizzle, lang=csharp var a = Real3(0,1,2); Console.WriteLine(\"Example 1: a.X: a.X \"); Console.WriteLine(\"Example 2: a.XYZ: a.XYZ \"); Console.WriteLine(\"Example 3: a.XY: a.XY \"); Console.WriteLine(\"Example 4: a.YX: a.YX \"); Console.WriteLine(\"Example 5: a.XXY: a.XXY \"); Console.WriteLine(\"Example 6: a.ZYXZ: a.ZYXZ`\"); ```name=Console Output Example 1: a.X: 0 Example 2: a.XYZ: (0, 1, 2) Example 3: a.XY: (0, 1) Example 4: a.YX: (1, 0) Example 5: a.XXY: (0, 0, 1) Example 6: a.ZYXZ: (2, 1, 0, 2) In this example a is a simple real3 : Example 1 constructs a Real containing the value of a.X Example 2 constructs a by-value copy of a . Example 3 constructs a real2 containing the X and Y values of a . Example 4 constructs a real2 with X as the value of a.Y , and Y as the value of a.X . Example 5 constructs a real3 where the X and Y are set to the value of a.X and Z is set to the value of a.Y . Example 6 constructs a real4 with the same X , Y , and Z values as the original vector a , but whose W value is the value of a.Z . # Assigning With Swizzles Extracting portions of a vector as seen above is a fairly common operation even outside of shader development. An example may be centering the camera object while not affecting its zoom in a 2D game. ```name=XY Assignment Without Swizzle, lang=csharp //0 out the XY axis and maintain the Z axis values var cameraOffset = this.Camera.Transform.LocalTranslation; cameraOffset.XY = Real2.Zero; this.Camera.Transform.LocalTranslation = cameraOffset; If we tried to assign into the swizzle constructed by-value from the member variable, however, it would not work: ```name=Direct Assignment Into Member Swizzle, lang=csharp, counterexample this.Camera.Transform.LocalTranslation.XY = Real2(); In this example .XY returns a by-value copy of the LocalTranslation 's X and Y values as a Real2 . So in this example when we assign the Real2() into it we are assigning into a copy instead of the member variable itself. # Related Materials ## Manual - constructbyvaluevsbyref - properties ## Reference - real2 - real3 - real4 - transform","title":"Swizzle"},{"location":"manual/plasmamanual/lightning_in_plasma/swizzle/#swizzle","text":"Swizzling is accessing the values within vector types ( Real2 , Integer3 , etc.) in any order. The term swizzling originated as the name for a technique used for doing the same thing, but within shaders. # Understanding a Swizzle To swizzle a vector, refer to its values as if they were data members, using the letters X , Y , Z , and W for the corresponding elements. These can be combined in any permutation or combination. ``name=Simple Swizzle, lang=csharp var a = Real3(0,1,2); Console.WriteLine(\"Example 1: a.X: a.X \"); Console.WriteLine(\"Example 2: a.XYZ: a.XYZ \"); Console.WriteLine(\"Example 3: a.XY: a.XY \"); Console.WriteLine(\"Example 4: a.YX: a.YX \"); Console.WriteLine(\"Example 5: a.XXY: a.XXY \"); Console.WriteLine(\"Example 6: a.ZYXZ: a.ZYXZ`\"); ```name=Console Output Example 1: a.X: 0 Example 2: a.XYZ: (0, 1, 2) Example 3: a.XY: (0, 1) Example 4: a.YX: (1, 0) Example 5: a.XXY: (0, 0, 1) Example 6: a.ZYXZ: (2, 1, 0, 2) In this example a is a simple real3 : Example 1 constructs a Real containing the value of a.X Example 2 constructs a by-value copy of a . Example 3 constructs a real2 containing the X and Y values of a . Example 4 constructs a real2 with X as the value of a.Y , and Y as the value of a.X . Example 5 constructs a real3 where the X and Y are set to the value of a.X and Z is set to the value of a.Y . Example 6 constructs a real4 with the same X , Y , and Z values as the original vector a , but whose W value is the value of a.Z . # Assigning With Swizzles Extracting portions of a vector as seen above is a fairly common operation even outside of shader development. An example may be centering the camera object while not affecting its zoom in a 2D game. ```name=XY Assignment Without Swizzle, lang=csharp //0 out the XY axis and maintain the Z axis values var cameraOffset = this.Camera.Transform.LocalTranslation; cameraOffset.XY = Real2.Zero; this.Camera.Transform.LocalTranslation = cameraOffset; If we tried to assign into the swizzle constructed by-value from the member variable, however, it would not work: ```name=Direct Assignment Into Member Swizzle, lang=csharp, counterexample this.Camera.Transform.LocalTranslation.XY = Real2(); In this example .XY returns a by-value copy of the LocalTranslation 's X and Y values as a Real2 . So in this example when we assign the Real2() into it we are assigning into a copy instead of the member variable itself. # Related Materials ## Manual - constructbyvaluevsbyref - properties ## Reference - real2 - real3 - real4 - transform","title":"Swizzle"},{"location":"manual/plasmamanual/lightning_in_plasma/variables_and_data_types/","text":"# Variables Variables are used to store data, and are declared using the var keyword. Each variable in lightning has a name, a type, and a value which must be declared within a class using the following syntax. var Name : Type = value; ```lang=csharp, name=Variable Instantiation with Initialization var Greeting : String = \"Hello\"; var Sum : Real = 1 + 2; var Up : Real3 = Real3(0,1,0); `var` is the keyword used to indicate that the statement on this line declares a variable. `Greeting` is the **name** of the first variable, an identifier used to reference the [string](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/string.markdown) type value `\"Hello\"`. Both `Greeting` and `Sum` follow the following format: `var` `Name` `:` `Type` `=` `\"Value\"``;`. | Token | Description | | `var` | Keyword used to indicate the statement declares a variable. | | `Name` | Name of the variable. | | `:` | Delimiter indicating the next identifier in the line is the type of the variable being declared. | | `Type` | Type of the variable being declared. | | `=` | Assignment operator used to initialize the variable to a value. | | `\"Value\"` | Value for the variable to be initialized to. | | `;` | Delimiter indicating the end of the statement. | NOTE: Identifier names must be alphanumeric and may include underscores. They cannot start with a number, and no other symbols are allowed. Remember to choose identifier names that don't clash with the [Keywords](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/keywords.markdown) or [Lightning Base Types](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types.markdown). Depending on the context, or [Scope](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/variables_and_data_types.markdown#scope), the required syntax for instantiating and initializing a variable can vary. The codeblock above will only compile if placed at the scope of a class or struct. (NOTE)**Literal Types**: Literal values are values explicitly defined by the user in script. `1 + 2` is an example of two literal values that evaluate to the non-literal value `3`. Below is a table of more literal values and their associated [lightning_base_types](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types.markdown). | Literal Value(s) | Type | | -- | -- | | `1`, `2`, etc. | Integer | | `1d`, `2d`, etc. | DoubleInteger | | `1.0`, `2.0`, etc. | Real | | `1.0d`, `1.0d`, etc. | DoubleReal | | `true`/`false` | Boolean | | `\"Hello\"`, `\"Goodbye\"`, etc. | String | | `null` | Null | # Scope A scope is a region in which certain elements of the language, such as variables and functions, are defined. Any scope can contain multiple nested scopes. A real-life example of scope could be a building and the rooms inside it. Whatever is *in* the scope of a room is also *in*, but not *at*, the scope of the building, because the room's scope exists inside the scope of the building. In Lightning, the three most common levels of scope are global, object, and block. ## Global Scope Everything in script exists *in* the **global scope**; however, not everything is created *at* the **global scope**. Libraries such as `Plasma` and `Math` exist //at// the **global scope** and are therefore accessible from any scope in script. The [plasma](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/class_reference/plasma.markdown) and [Math](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/math.markdown) libraries are objects defined at the global scope. [Classes and Structs](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/classes.markdown) are the only Lightning constructs that can be defined //at* the **global scope**. ```lang=csharp, name=Global Scope var R1 : Real; //Error, can not declare variables at the global scope class MyClass : LightningComponent //We can declare definitions of objects such as classes at the global scope { } Notice in this example that the attempted instantiation of a variable at the global scope will throw an exception. ## Object Scope Classes and Structs define their own scope and are one of the few constructs that exist at// the Global Scope . Variables defined //at the object scope are called member variables and will exist as long as the object exists. ```lang=csharp, name=Object Scope class MyClass { var Pi : Real = Math.Pi; //compiles var Theta : Real; // compiles var A = 4.0; //compiles var B = -5.0; //does not compile var C = PerspectiveMode.Orthographic; //does not compile } Notice in the example above that `Math` *in// the **global scope** is accessed //from* the **class scope** while initializing `MyClass.Pi`. ### Implicit Initialization Notice above that `MyClass.Theta` is not given an **explicit** initial value. This means that **implicit** initialization will take place, assigning `Theta` an initial value of the default type value of the type [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown), which in this case is `0`. Implicit initialization of a variable is only possible when defining a **member** variable. The final restriction for member variables is that they must begin with an upper case letter. ### Inferred Typing In the code block above `MyClass.A` is not given an explcit type. In this situation the type [real](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/lightning_base_types/real.markdown) is **inferred** from the the type of its initialization value `4.0`. Only literal, type casted, or manually constructed values may be use for inferred typing when initializing a member variable. Statements such as `var B = -5.0;` will not compile because they contain an expression. NOTE: You can not use implicit initialization and inferred typing on the same variable. ## Block Scope [functions](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/functions.markdown), [conditionals](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/conditionals.markdown), and [loops](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/looping.markdown) must have their scopes defined within an **object scope**. Variables defined within a **block scope** only exist until the scope is finished being executed. Variables defined within a block scope are called **local variables**. NOTE: Local variables can be implicitly initialized and have their types inferred just as member variables can. ### The Scope Operator In addition to to logical constructs defining scope, Lightning allows the user to define arbitrary scopes using the [scope](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/plasma_editor_documentation/plasmamanual/lightning_in_plasma/keywords.markdown) keyword. ```lang=csharp, name=Block Scope class MyClass { var M1 : Real = 1.0; function MyFunction() { var r1 = this.M1; scope { var r2 = r1; } var r3 = r1; r3 = r2; //ERROR } } In the above example begins with var r1 = this.M1; and then demonstrates the use of the {icon university}[[plasma_engine_documentation/plasma_editor_documentation/plasmama nual/lightning_in_plasma/keywords/|scope]] keyword. Inside the inner block scope is the line var r2 = r1; . Because r1 is declared in an outer scope it can be used to initialize r2 . The line var r3 = r1; follows the closing } of the inner block scope. Because r1 was declared at the same scope as r3 , it can be used as r3 's initialization value. However, the next line, r3 = r2; , will result in an error. r2 was declared in the inner block scope. When that scope closes, r2 is destroyed. As a result, r2 is no longer a valid variable, and so it cannot be used to initialize r3 . (NOTE) Data Lifetimes : It should be noted that when most variables go out of the scope they are declared in they stop existing. This is true for value types such as real and Structs . However, if a reference type such as a constructed Class instance still has a valid reference being held outside of the instantiation scope it will remain alive in memory. # Caching Variables Caching accessed data into locally scoped variables is a common practice that can improve the efficiency, readability, and flexibility of code. Often users may find themselves needing a value that will be used multiple times throughout the scope it is calculated/accessed in. ```name=With Variable Caching, lang = csharp class Intercept : LightningComponent { [Dependency] var RigidBody : RigidBody; [Property] var PlayerCogPath : CogPath = CogPath(); [Property] var Velocity : Real = 5.0; [Property] var MinDistance : Real = 5.0; [Property] var PredictionTime : Real = 1.0; function Initialize(init : CogInitializer) { this.Owner.RigidBody.DynamicState = RigidBodyDynamicState.Kinematic; Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var playerCog = this.PlayerCogPath.Cog; var playerPos = playerCog.Transform.Translation; var myPos = this.Owner.Transform.Translation; var distance = Math.Distance(myPos, playerPos); if(distance <= this.MinDistance) { var playerVelocity = playerCog.RigidBody.Velocity; var predictedPos = playerPos + (playerVelocity * this.PredictionTime); var myMoveDir = Math.Normalize(predictedPos - myPos); var newPos = myPos + (myMoveDir * this.Velocity * event.Dt); this.Owner.Transform.Translation = newPos; } } } In the above example `playerCog`, `playerPos`, and `myPos` are all examples of caching accessed values to local variables. These pieces of data are needed multiple times in calculations made later in the `OnLogicUpdate` function. By caching these values, not only does writing and reading the calculations become easier, it reduces the number of member data accesses that are necessary via the `.` operator. ```name=Intercept.OnLogicUpdate No Caching, lang=csharp, counterexample function OnLogicUpdate(event : UpdateEvent) { if(Math.Distance(this.Owner.Transform.Translation, this.PlayerCogPath.Cog.Transform.Translation) <= this.MinDistance) { this.Owner.Transform.Translation = this.Owner.Transform.Translation + (Math.Normalize(this.PlayerCogPath.Cog.Transform.Translation + (this.PlayerCogPath.Cog.RigidBody.Velocity * this.PredictionTime) - this.Owner.Transform.Translation) * this.Velocity * event.Dt); } } This example implements the exact same behavior as the previous OnLogicUdpate function, but does not cache any variables locally. As can be seen the line count has been reduced, but these few lines are much harder to interpret and contain many duplicate member access operations. While this may seems like a small issue, it is one that may add up rather quickly over time. # Related Materials ## Manual - Classes - functions - Keywords - Scope - Conditionals - Loops ## Code Reference - lightning_base_types - real - string - Plasma - Math ## Tasks - T472","title":"Variables"},{"location":"manual/plasmamanual/physics/colliders/","text":"The Collider component is used to define a shape for collision detection. Together with the RigidBody component, this creates a game object for physics to move around. There are several pre-defined Collider types, as well as a few customizable types to choose from. - BoxCollider - SphereCollider - CylinderCollider - EllipsoidCollider - CapsuleCollider - MeshCollider - ConvexMeshCollider - MultiConvexMeshCollider - HeightMapCollider # The Collider Interface A Collider is an interface component. This means only derived Collider types can be added to an object, not the base type. The Collider interface allows accessing common properties, such as ghost, between all Colliders without knowing the specific derived type. # Colliders and RigidBodies Colliders are used in combination with a RigidBody to give an object mass. The simplest object is one that has both a Collider and a RigidBody. See Hierarchies for more details. In either case, a Collider exposes the ActiveBody property to know what RigidBody a collider should apply forces to. # Physics Material The PhysicsMaterial on a Collider is used to determine how collision resolution should be handled. Knowing: (NOTE) mass = volume * density the density on the material is used with the Collider's volume (implicit from the shape and size) to contribute mass and inertia to a RigidBody. Additionally the material defines surface properties such as friction and restitution which describe how energy is lost in a collision. # Ghost Colliders While a collider is often used to define a shape for collision resolution, it is also common to disable collision resolution through the {nav icon=check-square-o, name=\"Ghost\"} property. The ghost property only disables collision resolution while continuing to detect collision. This is useful to create trigger regions where a user can check if something enters or exits an area. Additionally, ghost Colliders are often used to apply forces in an area with the Region component and PhysicsEffects . # Collision Groups Sometimes a Collider should only collide with some objects. In this case the ghost property is not sufficient. One of the provided alternatives is to use the {nav icon=wrench, name=\"CollisionGroup\"} property, which defines a group to be used in a CollisionTable. This allows customizing what group pairs go through collision detection and resolution. See Collision Groups and Collision Tables for more details. # Collision Information A Collider has two main methods of providing contact information (i.e. what other Colliders are in contact with this one). The most common way to do this is through Collision Events , which are sent to both objects involved in the contact by default. Additionally, a Collider exposes a range of current contacts to iterate through. In the same way, Joints can also be iterated through. ## Related Materials ### Manual - rigidbody.markdown - physicsmaterial.markdown - collisiongroupsandtables.markdown - collisionevents.markdown - physicseffectsandregions.markdown - hierarchies.markdown - joints.markdown ### Reference - Collider - RigidBody - PhysicsEffect - Region - CollisionEvent - CollisionTable - CollisionGroup - PhysicsMaterial - Joint","title":"Colliders"},{"location":"manual/plasmamanual/physics/collisionoverview/","text":"# Collision Detection and Resolution The physics system has a set of governing rules for how collisions are detected and resolved. It is important first to distinguish between detection and resolution. Collision detection is the act of determining if two {icon university}[[../Colliders | Collider's]] collide. Collision resolution is the act of updating velocity, position, etc... to realistically simulate an impact. If no collision is detected then no resolution can happen. # Basic Collision Types The physics system has a few basic rules to determine which of these collision stages a pair of objects can reach. Collision detection is not possible without a Collider as a Collider defines a shape. A DynamicState property controls how the physics system views a RigidBody. These states show a basic view of the collision detection stages in physics: No Rigid Body Dynamic Rigid Body Static Rigid Body Kinematic Rigid Body No Rigid Body Not Detected Dynamic Rigid Body Resolved Resolved Static Rigid Body Not Detected Resolved Not Detected Kinematic Rigid Body Not Resolved Resolved Not Resolved Not Resolved There are more complicated rule sets that go into fully determining if objects should detect and resolve collision. The simplest examples are the Ghost checkBox and CollisionGroup resource properties on Collider. # Collision Response Factors There's a few ways to alter how collisions are resolved. The primary way is through a Collider's Material property which defines density, friction, and restitution. RigidBody also contains properties that affect collision resolution. A RigidBody's mass is auto-computed from the relevant Colliders' volume and density. To override this manually see MassOverride . Additionally, various mass properties can be \"locked\". The {nav icon=list, name=Mode2d} property will restrict the object to simulate 2d movement. Additionally, the RotationLocked checkBox property locks the rotation of a body without changing linear movement restrictions. This is common on objects like a player where rotation would result in undesired game mechanics. # Resolution: RigidBodyDynamicState RigidBody defines the DynamicState enum property that changes how the dynamics, or resolution, for an object is handled. The default state of a RigidBody is dynamic (i.e. the body is free to move and resolve as normal). Commonly, a body needs to be locked in space to behave as some fixed world geometry. One way to do this is to remove the RigidBody. Additionally a RigidBody's DynamicState enum can be changed to Static . This object will be treated as an infinite mass object that doesn't move. The difference between these two forms of static is mostly internal performance. The general rule of thumb is: if it always exists and never moves, remove the RigidBody; otherwise, mark it static. A RigidBody can also be set to Kinematic . Kinematic is an infinite mass object like Static ; however, it also gives the physics system extra information about how to resolve collisions. A static object is never expected to move, so if it is teleported by the user into contact with other objects, then the physics system doesn't know how to properly resolve the collision as no velocity was involved. A kinematic object tells the physics system to approximate the velocity in the collision based upon the last and current position of the object. This is typically used for moving platforms or other moving, infinite mass objects. # Collision Information Information about collisions can be found in two ways. The most common is to listen for CollisionEvents . Additionally, Collider exposes the Contacts property range. # Collision Groups Advanced control of collision filtering and events can be configured through the use of CollisionTables and CollisionGroups . # Advanced There are several advanced topics that can affect how physics deals with collision. - Hierarchies can be used to make complicated physical objects from simple pieces. - Joints allow additional constraints on how an object is allowed to move. # Troubleshooting Collisions Sometimes collisions don't happen or behave differently than a user would expect. - WhyAreTheyNotColliding is a helper function to figure out why a collision didn't happen. - Edge Catching is a common issue when trying to make a player that can cause jarring movement. # Related Materials ## Manual - rigidbody.markdown - colliders.markdown - physicsmaterial.markdown - massoverride.markdown - collisionevents.markdown - collisiongroupsandtables.markdown - joints.markdown ## Reference - Collider - RigidBody - PhysicsMaterial - MassOverride - CollisionEvent - CollisionGroup - CollisionTable - DynamicState","title":"Collision Detection and Resolution"},{"location":"manual/plasmamanual/physics/hierarchies/","text":"Hierarchies allows physics to building complicated objects from simpler pieces ## Basic understanding To understand the basics of hierarchies, it's first important to conceptually understand what a RigidBody and {icon university}[[../Colliders | Collider's]] role is. A Collider defines a shape and contains certain physical attributes such as density, volume, friction, etc... A RigidBody gives an object inertia (e.g. mass, velocity, etc...). This gives a few meanings to objects in a hierarchy. If an object doesn't have a Collider, then it doesn't have volume or density, which means it can't contribute to the mass of a RigidBody. If an object doesn't have a RigidBody, then it may have collision properties, but it cannot be moved by physics interaction. This gives four simple objects configurations: - No RigidBody no Collider: Physics doesn't do anything. - Collider only: Physics detects collision and resolves collision, but this object cannot be moved by physics. - RigidBody only: The object is treated as a point-mass that cannot be collided with. Mass is assumed to be 1 for forces. - Both: A regular object that computes mass from the Collider and will be affected by forces, collisions, etc... The next easiest tree to look at is one with only Colliders. As each Collider only represents another collision volume, this tree would logically be the same as independent objects in the scene, ignoring how the transform data is computed. Physics will not move these objects, other objects can collide as normal, and each Collider defines its own materials for resolution. The first interesting example is an object with a RigidBody at the root and Collider children. In this hierarchy, the root has a RigidBody and Collider which implies that the root has velocity and mass. The children just have Colliders which imply that they have collision and could contribute to mass. As a root in the hierarchy typically moves children with it, physics chooses to \"attach\" the child Colliders to the RigidBody, i.e. the entire hierarchy acts as one RigidBody with multiple collision shapes. Each Collider still retains the properties of its material, such as friction and restitution. If one Collider has a larger mass (from the density and volume) then the root RigidBody's total mass properties will reflect this. # Advanced Hierarchies: Nested RigidBodies From here a larger nested tree can be built with the same basic structure to make a more complicated object. The tree can even have Cogs in the middle without a Collider. The real question is how do nested RigidBodies affect physics? This ends up depending on the DynamicState of the RigidBody. ### Dynamic RigidBodies When a RigidBody is marked as being Dynamic , it signifies that it should be an independent entity that is free to move and resolve as normal. This means that any dynamic RigidBody in the middle of a hierarchy behaves as if its sub-tree was a completely independent object. By keeping the objects in the hierarchy, logical organization is preserved while still allowing free movement. Archetypes can be made from a larger collection of individual objects (e.g. cars and their tires). Additionally, a RigidBody can be quickly toggled to another DynamicState enum. ### Static RigidBodies If a RigidBody is marked as Static then it behaves as if there's no RigidBody in that sub-tree. This is particularly useful if a sub-tree starts static but then switches to dynamic at a later point in time. ### Kinematic RigidBodies If a RigidBody is marked as Kinematic then it behaves like a Static body in the tree with one main exception: kinematic implies that an object can apply forces to other objects but cannot receive forces. In this case a kinematic sub-tree can push other objects but will not receive forces back. This can be useful to define a sub-portion of tree for a player to push objects without being pushed back. # Non-Uniform Scale One common problem with building hierarchies is when a parent object is non-uniformly scaled. This introduces what is known as a skew. Skews are currently not supported by the physics system and will be stripped out of any transformation. Typically all root objects should be configured with uniform scales. # Massless Children A common scenario when building complicated hierarchies is wanting to add a collision volume for game logic reasons without affecting the overall mass properties of the hierarchy. To do this, the physics systems supports a special configuration on the PhysicsMaterial . If a material's density is set to 0 (this has to be manually typed) then the object doesn't contribute to a RigidBody's total mass. # Troubleshooting When building a larger hierarchy, each Collider is still treated as a distinct object for collision detection. This means that it's possible for another object to get sandwiched between two flush Colliders (e.g. a table and its legs). Currently no solution is available to prevent this behavior. # Related Materials ## Manual - rigidbody.markdown - colliders.markdown - physicsmaterial.markdown ## Reference - Hierarchy - RigidBody - Collider - PhysicsMaterial - RigidBodyDynamicState","title":"Hierarchies"},{"location":"manual/plasmamanual/physics/joints/","text":"Joints are a representation of a physics concept known as constraints . A constraint is a mathematical rule that defines (or constrains) how objects are allowed to move. A Joint is a collection of one or more constraints that define a more common interaction. In Plasma, a Joint is typically an independent object that connects two ObjectLink . # Shared Properties Before looking at individual joints, there's a few useful shared properties: - Active checkBox Any joint can be toggled in order to temporarily disable it. - CollideConnected checkBox Sometimes it's useful to disable collision between the two objects the joint is connected to (e.g. articulated bodies). - MaxImpulse The max impulse (instantaneous force) allowed for the joint to solve any of its constraints. 'JointExceedImpulseLimit' is sent when this happens. - AutoSnaps checkBox It's common to auto-delete a joint when the MaxImpulse is exceeded. This property provides this behavior without requiring scripting. # Joint Add-ons Before discussing each individual Joint, there's several helper components that are important to understand. These components affect how a joint will affect the connected objects. These components can be added to any Joint, but may not always make sense for a specific one. ### JointLimit A limit restricts a certain portion of the joint to only be active part of the time. This is typically sets some min/max distance/angle where the joint will allow free movement. NOTE: When the limit is for angles it is specified in radians. ### JointMotor A motor takes a portion of the joint and adds energy to it. This is often used to drive a portion of the joint when no external forces are acting upon it. A motor allows setting a target speed and a max impulse it can use to try and achieve this. ### JointSpring A spring takes a portion of the joint and makes it soft, or non-rigid. This can be useful to simulate a spring or make the limits of a joint springy. Springs are defined by a frequency in Hertz (oscillations per second) and a damping ratio. The damping ratio defines how much energy should be damped out of the system where 0 means no damping and 1 is critical (perfect) damping. ## Extra AddOns There are a few extra joint add-ons that are less frequently used. ### JointConfigOverride This allows configuring individual joint properties for solving. Typically you shouldn't touch this if you don't understand it. ### JointDebugDrawConfig The debug draw config is used to give additional debug drawing information to the joint. This is mostly to allow configuring which object's perspective to draw information from. Not all joints currently observe this component. # JointTypes The physics systems supports most common mechanical joint types. ### StickJoint A stick joint, or distance joint, defines that two points on the objects should be a certain distance apart. This is common for creating rope-like objects. ### PositionJoint A position joint locks two points on the objects to be at the same position. This is common for a ball-and-socket like joint. ### WeldJoint A weld joint locks the the relative position and rotation of two objects together. For a rigid connection, hierarchies should be used instead as joints are not completely stiff. If run-time behaviors, such as auto-snapping with a max impulse, are desired then using a weld is easier than hierarchies. ### PrismaticJoint A prismatic joint (or slider) locks the rotation of two objects together and two of the linear axes. This allows relative translation of the objects along one axis. This is often used to create pistons or sliders. ### RevoluteJoint A revolute joint (or hinge) locks the positions of two objects together and two of the rotational axes. This allows relative rotation of the objects along one axis. This is often used to create doors, wheels, seesaws, etc.... ### WheelJoint A wheel joint is a revolute joint with a spring on one of the translational axes. This allows the axis to act like a suspension. ### UniversalJoint A universal joint locks the positions of two objects together and one of the rotational axes. This allows relative rotation about two axes. This joint is currently in a prototype state. ### UprightJoint The upright joint locks the rotation about one axis of two objects together. This is often used to keep an object always pointing up (or close enough). ### GearJoint The gear joint connects two joints of two objects together. The expected joint types to connect are prismatic or revolute. This makes the two joints transfer energy between each other to make more complicated joints. ### PulleyJoint A pulley joint connects two stick joints on two objects together. This restricts the relative length of the two joints together to create a pulley system. ### CustomJoint A custom joint is for advanced users. This allows you to define your own constraints via Jacobians and other constraint definitions. ## 2D Joints A few joints have 2D versions that should be used when making a 2D game instead of their 3D counterpart. The 2D versions makes certain assumptions about axes that don't need to be solved which result in faster performance and increased stability. ## Related Materials ### Manual - colliders.markdown ### Reference - Joint - StickJoint - PositionJoint - WeldJoint - PrismaticJoint - PrismaticJoint2d - RevoluteJoint - RevoluteJoint2d - WheelJoint - WheelJoint2d - UniversalJoint - UprightJoint - GearJoint - PulleyJoint - CustomJoint - JointEvent - CustomJointEvent - JointLimit - JointMotor - JointSpring - JointDebugDrawConfig - JointConfigOverride - CustomConstraintInfo - Collider","title":"Joints"},{"location":"manual/plasmamanual/physics/massoverride/","text":"By default, a MassOverride component is used to override these values. There's two primary uses for mass override: to lock the mass and to set the mass. MassOverride is commonly used to save the mass values of a RigidBody. During game development, the size of objects may need to be altered while keeping behavior the same. Unfortunately, the size of a collider is used to compute the mass of a RigidBody. To help alleviate this, the MassOverride component can be used to save a RigidBody's current mass properties regardless of all attached colliders and materials. This cached mass can be re-computed at any time from the current RigidBody's values. Another common use of MassOverride is to manually set the mass. Sometimes the user wants to tweak an object's mass without changing size or altering a material. This can be achieved through the Mass property. It is important to note that mass is represented by linear and angular (inertia tensor) values. Tweaking the mass will currently apply a ratio change to the inertia tensor, which is only exposed via script for now. Large alterations to the mass property can have undesired effects on rotation. # Related Materials ## Manual - rigidbody.markdown - colliders.markdown ## Reference - MassOverride - RigidBody - Collider","title":"Massoverride"},{"location":"manual/plasmamanual/physics/physicscasting/","text":"# PhysicsCasting One of the most common run-time interactions with a PhysicsSpace is casting, which queries for all objects within a region of space. This allows common operations such as line-of-sight queries, volume queries, and so on. Typically a cast will take 3 arguments: - The shape to cast - How many results to receive at max. This is needed for internal optimizations in physics. For Ray/Segments, the results will be sorted by the t-value. - The CastFilter describes how to filter out results when casting. Common operations include skipping objects of certain configurations (Static, Kinematic, CollisionGroups , etc...). Currently, the physics systems supports a few common casting types: ## Ray Casting ray casting checks for all shapes in a direction. Ray casts are common for things like line-of-sight tests. ## Segment Casting A segment cast is like a ray cast except it has an end position. Segment casts are used when there is a known max distance for the cast. ## Sphere Casting sphere casting checks to see what objects are within a sphere. Useful for simple volume queries such as finding all objects within an explosion radius. ## Aabb Casting aabb casting checks what objects are within an axis-aligned box. Sometimes a box is a better shape for casting, especially when the query area is long an thin. ## Frustum Casting frustum casting checks what objects are within a frustum. Useful for queries that come from a camera where perspective should be taken into account. ## Collider Casting Sometimes a more complicated shape query is desired. Collider casting allows the user to say: \"What if this collider was over there\". This is commonly used for a simple preventative collision check. ## CastFirst Ray and Segments have an additional \"CastFirst\" operation for convenience. These cast functions implicitly have a max object count of 1 . # DispatchWithin In addition to regular casting, the physicsspace.markdown contains other common cast related functions. Sometimes casts are performed just to send events to all shapes within a region. This is common for a generic interaction system where each object may or may-not handle some event. Instead of casting and iterating over all results, the PhysicsSpace has the \"DispatchWithin\" functions. Currently only Sphere and Aabb dispatch functions exist. # Sweeping While a cast can be used as a preventative check, sometimes the accuracy is not enough. This is where the SweepCollider function comes in. Sweeping can be thought of as extending a collider's volume in a direction to find the exact times that a collision would happen with static objects. This allows writing Time-of-Impact logic to avoid missing any collisions. NOTE: Swept casts are expensive operations and should be used only when important, such as a player. # Related Materials ## Manual - physicsspace.markdown - colliders.markdown - collisiongroupsandtables.markdown ### Reference - CastFilter - CastResult - SweepResult - Ray - Segment - Aabb - Sphere - Frustum - PhysicsSpace - CollisionGroup - Collider","title":"PhysicsCasting"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/","text":"# Overview PhysicsEffects apply common types of forces to objects. How an effect is applied varies depending on what kind of object it's attached to. Not all attachment modes make logical sense for all effect types. In order, an effect will check for these conditions: - levelsettings : All objects in the level have this effect applied to them. See IgnoreSpaceEffects for exceptions. - Region : All objects in contact with this collision volume (Collider assumed) will have the effect applied to them. Typically, the relevant Collider should be set to Ghost. - RigidBody : If a RigidBody exists without a Region, the effect will apply to the RigidBody's center of mass. - Collider : If a Collider exists then it is assumed that the effect should apply to the nearest parent RigidBody in the hierarchy. If relevant, the effect will also apply the force at the Collider's position (such as ThrustEffect ). - PhysicsSpace : When a physics effect is attached to a space it'll apply to all objects in that space. This option is less preferred to LevelSettings. - Hierarchy : If an effect does fall into one of the above criteria, it is assumed to apply to the nearest parent RigidBody in the hierarchy. In the remainder of this page, the wording \"global effect\" will be used to refer to both LevelSettings and PhysicsSpace effect mode types. # PhysicsEffects The currently available PhysicsEffects are: - GravityEffect : Applies an acceleration to an object in a direction. - ForceEffect : Applies a force to an object in a direction. - PointGravityEffect : Applies an acceleration towards the center of the effect. - PointForceEffect : Applies a force away from the center of the effect. - ThrustEffect : Applies a point force on an object based upon the position of the effect. - DragEffect : Applies linear/angular drag/damping to slow down object movement. - FlowEffect : Applies force to make an object move at a constant speed in a direction. Commonly used to make \"tractor beam\" like movement. - TorqueEffect : Applies a torque (angular force) to an object. - VortexEffect : Applies a force to make an object circle around a vortex center. - WindEffect : Applies a directional force proportional to the approximate surface area of the object in the wind direction. - BuoyancyEffect : Applies a buoyancy force to all objects in collision with this shape. - CustomPhysicsEffect : Allows user defined effects via script events. # IgnoreSpaceEffects Occasionally some objects should not have certain global effects applied to them, such as gravity or drag. One solution to this is to remove the relevant effects from LevelSettings/Space and add the effect to every RigidBody instead. This quickly becomes impractical as the number of objects increases. Instead the problem can be approached from the opposite direction: telling certain objects to ignore global effects. The IgnoreSpaceEffects component tells an object to not apply global forces of certain types. # Troubleshooting Sometimes a PhysicsEffect will not behave as desired. When trying to troubleshoot what is going wrong there are a few key considerations: - What application mode is being used? Is this behaving as a Region effect? LevelSettings? etc... - What space is the effect being applied in? Most effects have some kind of local space property that determines if the effect takes into account the object's Transform. If unexpected behavior happens when an object rotates then look for a property like this. - When trying to apply a Region effect, it's common to forget to make the relevant Collider ghost. In this scenario objects will still get the effect applied when in contact but will additionally undergo collision resolution. - If the effect happens once but doesn't happen again, it may have a RigidBody component that is causing it to move (e.g. by gravity). # Related Materials ## Manual - rigidbody.markdown - colliders.markdown - physicsspace.markdown - levelsettings - Hierarchy ## Reference - RigidBody - Collider - PhysicsSpace - Region - IgnoreSpaceEffects - PhysicsEffect - Transform","title":"Overview"},{"location":"manual/plasmamanual/physics/physicsmaterial/","text":"A PhysicsMaterial describes material properties to use for a Collider . These properties affect how collisions are resolved between collider types. Some PhysicsMaterial properties are used to define the surface of an object. In reality, these surface properties are not defined per object, but per object pair. The physics system computes a combined value for these properties as an approximation of the real life values. # Density Density is used to compute a Collider's mass. This mass contributes to a {icon university}[[../RigidBody | RigidBody's]] total mass. Mass is computed as: (NOTE) mass = density * volume Physics uses density so mass is auto-computed when colliders change size. This is partially due to people having bad intuition for how mass scales. Sometimes a Collider should not contribute a mass for accumulation on a RigidBody. In this case the density can be manually set to 0 . # Restitution Restitution is a value typically in the range of 0 to 1 that determines how much energy in a collision is lost in the direction of the normal. Commonly this is thought of as how bouncy a surface is. A restitution of 0 signifies that all energy should be lost, i.e. no bounce. A restitution of 1 signifies that no energy should be lost, i.e. a perfect bounce. Values larger than 1 can be set to add energy but is not recommended. The combined restitution is computed as the max of the two restitution values. # Friction Friction determines how much energy in a collision is lost in the plane of the collision (the plane tangent to the collision normal). The upper bound of the friction force is computed as: F=u*N where N is the total force in the normal direction and u is the friction scalar. Currently, dynamic and static friction are set to be equal. The combined friction is computed as the square-root of the product of the two values, i.e. F=sqrt(Fa*Fb) . # Restitution Importance RestitutionImportance determines which object's restitution should be used in collision resolution. When two objects are colliding, the restitution of the object with the higher importance value will be used. If both objects have the same importance value, the max of the two restitutions is applied. # Friction Importance FrictionImportance determines which object's friction should be used in collision resolution. When two objects are colliding, the friction of the object with the higher importance value will be used. If both objects have the same importance value, the combined friction is used (see above ). # Related Materials ## Manual - rigidbody.markdown - colliders.markdown ## Reference - PhysicsMaterial - RigidBody - Collider","title":"Physicsmaterial"},{"location":"manual/plasmamanual/physics/physicssolverconfig/","text":"The PhysicsSolverConfig resource allows a certain level of customization in how physics solves PhysicsSolverPositionCorrection types. WARNING: If you don't understand the topic of constraints then you probably shouldn't change the properties of this resource. # Velocity Restitution Threshold: Collision vs. Contact When performing collision resolution, physics has to distinguish between collisions and contacts. In this case, a collision refers to a large impact whereas a contact refers to a near resting contact. These are important to distinguish between when applying restitution; otherwise, resting objects will jitter. The physics solver uses this threshold value to compare against the relative velocity of the objects in contact. If the relative velocity is lower than this threshold then no restitution is applied. # Iteration Count Physics solvers are typically iterative in how they solve constraints (contacts, joints, etc...). The more iterations used the more stable a scene tends to be, but at the cost of decreased performance. Independent iteration counts are exposed for impulse solving and position solving (if configured to solve positions). # Position Correction Type Physics typically solves with discrete time-steps which allows position error to appear in joints. Plasma's physics system provides two methods to fix position error: - Baumgarte fixes position error by applying a \"penalty force\". This typically produces constraints that feel soft and spongy. - PostStabilization fixes position error by solving the position constraints directly. This makes stiffer constraints but often at the cost of speed and occasionally stability. This property configures the default solving method for all constraints unless overridden as described below. # Joint/Contact Configurations JointConfigOverride component and uses its properties. Note that this component cannot be applied to contacts. Next, the joint will check its space's PhysicsSolverConfig to see if a block for its joint type exists. If this block exists then it'll use the specified values. Finally, any global fallback values will be used such as the position correction type. In the case of properties like slop, each joint type has its own defaults to use when no block exists. # Joint Blocks A configuration block can be added for any joint type that determines how the physics system solves that constraint type. This allows changing certain joint types at a global level to solve differently from others. # Related Materials ## Manual - joints.markdown - collisionoverview.markdown - physicsspace.markdown ## Code Reference - Joint - JointConfigOverride - ConstraintConfigBlock - PhysicsSpace - PhysicsSolverPositionCorrection","title":"Physicssolverconfig"},{"location":"manual/plasmamanual/physics/physicsspace/","text":"physicsspace is a component that manages all physics objects within a space. ## Queries: Casting/Events Most commonly, a user will be working with the PhysicsSpace at run-time through function calls. The most common example of this is to query some collision information about the scene through what is called a cast function. A cast function lets a user query what collision shapes are in a certain region. The most common of these casts is a RayCast which is often used for line-of-sight testing, bullets, and so on. Additional information on casting can be found on this manual page. In addition to casting, PhysicsSpace supports a limited set of \"event casting\"; that is, sending a user defined event to all objects with a certain volume. This can be achieved with the \"DispatchWithin\" functions. ## Collision Filtering Another important run-time feature of the PhysicsSpace is allowing object pairs to be filtered out of collision through the use of the AddPairFilter and AddHierarchyPairFilter functions. These functions allow per object ignoring of collision (no events will be received) when CollisionTables are not sufficient, such as ignoring collision with a player and their projectiles. ## Important Properties There are two important properties to help control behavior of the physics system: - {nav icon=check-square-o, name=\"Mode2d\"} sets a global state that determines if objects behave in 2d, i.e. they cannot move along the z-axis and they can only rotate about the z-axis. Individual {icon university}[[../RigidBody | RigidBody's]] can override this if desired. - {nav icon=pencil-square-o, name=\"CollisionTable\"} lets the user specify CollisionGroup pairs and how colliders.markdown with these groups should interact with collision. This is the most efficient way to setup collision filtering so as to not resolve collisions or receive events. ## Advanced Properties Additionaly, there are several other properties on the physics space that are for more advanced users. - {nav icon=pencil-square-o, name=\"SubStepCount} lets the physics space run multiple iterations for every timestep to increase simulation fidelity. - {nav icon=pencil-square-o, name=\"PhysicsSolverConfig\"} allows defining various properties about how collisions are solved with the PhysicsSolverConfig resource (e.g. baumgarte constants). - The static and dynamic broadphase type can be configured for run-time. This is most commonly done to switch the static broadphase to something that allows cheaper dynamic addition/removal of objects at the cost of slightly slower queries. - {nav icon=check-square-o, name=\"Deterministic\"} tells the PhysicsSpace to do extra work to produce the same result from the same inputs every time. This is slightly more expensive and can be disabled if needed. - {nav icon=check-square-o, name=\"AllowSleep} should almost always be on, except when trying to debug if there is a logical sleeping bug. ## Debugging A common issue during development is to have two objects not collide when the user thinks they should. To help aid debugging this, physics exposes the WhyAreTheyNotColliding function. This function returns a text string as to why the physics system currently thinks these two objects are not colliding. ## Related Materials ### Manual - physicscasting.markdown - rigidbody.markdown - colliders.markdown - collisiongroupsandtables.markdown - whyaretheynotcolliding.markdown - physicssolverconfig.markdown ### Reference - Collider - PhysicsSpace - RigidBody - CollisionTable - CollisionGroup","title":"Physicsspace"},{"location":"manual/plasmamanual/physics/physicstroubleshooting/","text":"Here are common issues that a user can run into with physics and ways to address them # Why are my objects not colliding Help find out why objects aren't colliding when they should. # Tunneling Why do objects sometimes pass right through each other when moving too fast? # Edge Catching An object seems to get stuck occasionally. What is this and how is it fixed?","title":"Physicstroubleshooting"},{"location":"manual/plasmamanual/physics/rigidbody/","text":"The RigidBody component defines the inertia (mass, velocity, etc...) of a rigid object (i.e. one that cannot be deformed by forces). RigidBody approximations are used in physics to simplify common behaviors for both performance and stability. # RigidBodyDynamicState RigidBody defines the DynamicState property that changes how the dynamics (or resolution) for an object is handled. The default state of a RigidBody is dynamic (i.e. the body is free to move and resolve as normal). Commonly, a body needs to be locked in space to behave as some fixed world geometry. One way to do this is to remove the RigidBody. Additionally a RigidBody's DynamicState enum can be changed to Static . This object will be treated as an infinite mass object that doesn't move. The difference between these two forms of static is mostly internal performance. The general rule of thumb is: if it always exists and never moves, remove the RigidBody; otherwise, mark it Static . A RigidBody can also be set to Kinematic . Kinematic is an infinite mass object like Static ; however, it also gives the physics system extra information about how to resolve collisions. A static object is never expected to move, so if it is teleported by the user into contact with other objects, then the physics system doesn't know how to properly resolve the collision as no velocity was involved. A kinematic object tells the physics system to approximate the velocity in the collision based upon the last and current position of the object. This is typically used for moving platforms or other moving, infinite mass objects. # Mode2D {nav icon=list, name=Mode2D} defines whether a RigidBody should behave like a 2D or 3D object. If an object is 3D, it can translate and rotate in all three dimensions. If an object is 2D then its movement is restricted to the xy-plane and can only rotate about the z-axis. By default, a RigidBody will use the {nav icon=check-square-o, name=\"Mode2D\"} state of the PhysicsSpace so that an entire space can be changed at once, but an individual RigidBody can be set independently from the space. It is important to note that Mode2D only affects how the physics system will treat the object. A user can still manually translate or rotate an object on any axis, but physics will be unable to move a RigidBody on the locked axes, even if forces or velocity act on them. # RotationLocked Sometimes, physics shouldn't be able to rotate an object. In this case, the RotationLocked checkBox property can be used to restrict rotation while still allowing all linear forces to affect the object. This can be especially useful on a player object when rotation complicates game logic. NOTE: Sometimes dynamics will seem odd (e.g. friction, resolution) on locked objects. This is because humans tend to have bad intuition for physics on objects that can't rotate as this doesn't occur in real life. # Sleeping Sleeping is an optimization for physics. If an object hasn't moved in a while then physics will not perform some operations unless the object is interrupted (woken up). As this can sometimes cause gameplay bugs, it is a toggleable property. To help debug, there is also a global AllowSleep checkBox property on the PhysicsSpace. Common bugs involving sleeping include: - Relying on events to be sent out even when objects are asleep - Forces not affecting the object (even from script) For this reason, it is not uncommon to turn off sleeping on a player controlled object. Additionally, an object can be manually woken up through the ForceAwake function in script. Sometimes game logic may rely on sleeping. One such example of this is waiting for all objects to fall asleep to trigger the end of a turn or level in a game. For example, an environment-destruction game where the player's turn ends when all pieces of the environment stop moving and fall asleep. This can be checked both by querying the current state of the RigidBody and by listening for events. On rare occasion, a RigidBody may need to be forced to sleep (e.g. after some global timer) through the ForceAsleep function. # Movement via Script A RigidBody is expected to be moved through the use of physics instead of manually being teleported via the Transform . There are a few common methods to do this: - Forces : forces allow pushing an object over time while taking into account the object's mass. The same force applied to a heavy object will cause a slower change in momentum. Forces are accumulated each frame (such as gravity and drag) and are applied once physics updates. - Velocity : velocity describes how many units per second this object will move. This can be manually changed in script to control how an object moves. Changing the velocity directly will not take into account the object's mass. - Impulses : an impulse is like a hybrid of a force and velocity. An impulse is defined as an instantaneous force, i.e. a force that will be instantly applied to velocity. Use impulses to immediately update an object's velocity while still taking mass into account. All of these are applied by default to the center of mass of the RigidBody. This means that linear values will not affect angular values and vice versa. The linear and angular values, however, can be independently applied (angular force is called torque). Additionally, there is an ApplyAtPoint and ApplyAtOffset function for all three application methods. These apply a force/velocity/impulse at a world point or world offset vector that will result in changes to both linear and angular momentum. # Related Materials ## Manual - physicsspace.markdown ## Reference - PhysicsSpace - RigidBody - Transform - DynamicState","title":"Rigidbody"},{"location":"manual/plasmamanual/physics/colliders/boxcollider/","text":"BoxCollider defines a rectangular box shape ( cuboid ) for collision. The size of the box is determined by the combination of the box's Size property and the Transform's Scale . (NOTE) Recommended Reading: The Collider page should be read before this page. # Size A BoxCollider exposes the Size property to determine the pre-transform size of this box. This is most commonly done to match the collision to graphics before scale is applied. Additionally, this is sometimes used to set the size of a root object's collision without running into non-uniform scale issues. # Related Materials ## Manual - colliders.markdown ## Reference - BoxCollider - Collider","title":"Boxcollider"},{"location":"manual/plasmamanual/physics/colliders/capsulecollider/","text":"CapsuleCollider defines a capsule shape for collision. The base size of the capsule is determined by the Radius and Height properties. Scale is applied afterwards to determine the final capsule's size. Capsules are often used as a combination of cylinders and ellipsoids for collision, primarily for long thin shapes. An ellipsoid tends to be undesired when stretched on one axis due its curved sides. A cylinder fixes this but loses the curved caps of the ellipsoid. A capsule combines these by having a cylinder that can be scaled in one axis while containing smooth edge caps. Capsules are also commonly used for a player. The player's height can be scaled without affecting its width. Additionally, the curved caps help to avoid edge catching issues. (NOTE) Recommended Reading: The Collider page should be read before this page. # Radius Radius defines the radius of the capsule in local space. # Height Height defines the local space height of the cylinder. The height is defined as the distance from the center of the bottom sphere to the center of the top sphere. # Direction Direction enum is used to configure which local-space axis the height of the capsule runs along. This allows aligning a capsule with an asset that was configured about a different axis. # Scaling Mode and Non-Uniform Scale Like most other Collider types, CapsuleCollider will maintain a perfect capsule shape when non-uniform scale is present. That is to say that the spherical caps on the end of the capsule will always be perfect spheres, never ellipsoids. This creates a dilemma when non-uniform scale is applied to the height axis. There's two different behaviors that a user could expect that is controlled via ScalingMode enum: ## ScalingMode.PreserveScale PreserveScale applies scale to the full height of the capsule (including the end caps). The easiest way to understand this mode is by comparing it to a cylinder with the same total height as the capsule, both of which are pictured on the left. After scaling both objects their total heights should be the same as pictured on the right. To fully understand what this is doing requires a numerical example. In the above picture, the capsule has a height of 1 and a radius of 0.5 . The capsule's total height is 2 (height + 2 * radius) . After scaling, the total height should now be 4 , however no scale was applied in the y-axis so the radius must stay at 0.5 . This means that the capsule's world height must be 3 after scaling (height = 4 - 2 * radius) . ## ScalingMode.PreserveHeight PreserveHeight applies scale just to the capsule's height (not including the end caps). The easiest way to understand this is to compare to a cylinder with the same height as the capsule (pictured on the left). After scaling, the internal cylinder of the capsule matches the scaled cylinder (pictured on the right). This mode does not preserve the total scale of the capsule though. The original capsule had a total height of 2 . Since no scale was applied in the y-axis, the radius has to stay at 0.5 . Now the scaled capsule has a height of 2 with a radius of 0.5 which produces a total height of 3 . This mode is often desired when a model is attached to a cog that should match the inner cylinder. Additionally, this can be useful when game-logic cares about the positioning of the cap centers as opposed to the tips of the capsule. # Related Materials ## Manual - colliders.markdown - cylindercollider.markdown - ellipsoidcollider.markdown - edgecatching.markdown ## Reference - CapsuleCollider - CylinderCollider - EllipsoidCollider - Collider","title":"Capsulecollider"},{"location":"manual/plasmamanual/physics/colliders/convexmeshcollider/","text":"(NOTE) Recommended Reading: The Collider page should be read before this page. ConvexMeshCollider defines a convex hull for collision detection based upon a ConvexMesh resource. WARNING: A future version will likely combine all physics mesh types together. Unlike MeshCollider , convex meshes have a volume which means inertia properties can be computed. ConvexMeshColliders are complex shapes that are still efficient for physics. They are commonly used with dynamic rigid bodies to create an object with a complicated surface. If a mesh is non-convex, the convex hull of the shape is used for collision detection. This means that the geometry will be an approximation of the surface. Pictured above is an illustration of the convex hull of an object. Note that the collision is bigger than the original shape. # Related Materials ## Manual - colliders.markdown - meshcollider.markdown ## Reference - ConvexMeshCollider - ConvexMesh - MeshCollider - Collider","title":"Convexmeshcollider"},{"location":"manual/plasmamanual/physics/colliders/cylindercollider/","text":"CylinderCollider defines a cylindrical shape for collision. The base size of the cylinder is determined by the Radius and Height properties. Scale is applied afterwards to determine the final cylinder's size. (NOTE) Recommended Reading: The Collider page should be read before this page. # Radius Radius defines the radius of the cylinder in local space. # Height Height defines the total local space height of the cylinder. The height is defined as the distance from the bottom disc to the top disc. # Direction The Direction enum property is used to configure which local-space axis the height of the cylinder runs along. This allows aligning a cylinder with an asset that was configured about a different axis. # Non-Uniform Scale When non-uniform scale is applied, the CylinderCollider will always stay a perfect cylinder. The height of the cylinder will fully respect the object's scale, but the radius will come from the larger of the two remaining scale values. # Related Materials ## Manual - colliders.markdown ## Reference - CylinderCollider - Collider","title":"Cylindercollider"},{"location":"manual/plasmamanual/physics/colliders/ellipsoidcollider/","text":"EllipsoidCollider defines an ellipsoid shape for collision. The base size of the ellipsoid is determined by three radius values. Scale is applied afterwards to determine the final ellipsoid's size. (NOTE) Recommended Reading: The Collider page should be read before this page. # Radii Radii defines three radius values for the ellipsoid in local space. Each component of this vector defines its respective axis' radius. # Non-Uniform Scale EllipsoidCollider fully respects non-uniform scale (sheer aside). # Related Materials ## Manual - colliders.markdown ## Reference - EllipsoidCollider - Collider","title":"Ellipsoidcollider"},{"location":"manual/plasmamanual/physics/colliders/heightmapcollider/","text":"(NOTE) Recommended Reading: The Collider page should be read before this page. HeightMapCollider defines collision for a HeightMap . Physics more efficiently represent collision for a HeightMap than a generic mesh. NOTE: HeightMapCollider is assumed to be static and should not be used with a dynamic RigidBody . # Thickness HeightMapCollider exposes the Thickness property to turn each triangle of the height map into a prism . This helps avoid tunneling with fast moving objects. # Related Materials ## Manual - colliders.markdown - rigidbody.markdown ## Reference - HeightMapCollider - HeightMap - RigidBody","title":"Heightmapcollider"},{"location":"manual/plasmamanual/physics/colliders/meshcollider/","text":"(NOTE) Recommended Reading: The Collider page should be read before this page. MeshCollider defines a surface mesh for world geometry based upon a PhysicsMesh resource. WARNING: A future version will likely combine all physics mesh types together. MeshCollider defines a surface for collision; there are no volume or inertia properties to be computed. This means that a MeshCollider is assumed to be static and should not be used in conjunction with a dynamic RigidBody (static is fine). The primary use of MeshCollider is to define static world geometry that is too complicated to represent in a more efficient way for physics. NOTE: As MeshCollider is assumed to be static, collision detection is not performed between two MeshColliders. # Related Materials ## Manual - colliders.markdown - rigidbody.markdown ## Reference - MeshCollider - Collider - RigidBody","title":"Meshcollider"},{"location":"manual/plasmamanual/physics/colliders/multiconvexmeshcollider/","text":"(NOTE) Recommended Reading: The Collider page should be read before this page. MultiConvexMeshCollider defines a collection of convex hulls for collision detection based upon a MultiConvexMesh resource. WARNING: A future version will likely combine all physics mesh types together. MultiConvexMeshCollider allows more complicated shapes to be represented than a ConvexMeshCollider while still retaining performance. Physics needs convex shapes for efficiency so this Collider represents non-convex shapes as a collection of sub convex meshes. Currently, the editor for this mesh type only works for 2D shapes (sprites). 3D meshes can be made, but only through script. Future plans include implementing 3D approximate convex decomposition. # Troubleshooting As the MultiConvexMeshCollider contains multiple convex pieces, seams can exist between the pieces. This can cause edge catching issues when objects slide across the surface. Additionally, an object can get sandwiched in the interior between two sub-meshes. # Related Materials ## Manual - colliders.markdown - convexmeshcollider.markdown - edgecatching.markdown ## Reference - MultiConvexMeshCollider - MultiConvexMesh - ConvexMeshCollider - Collider","title":"Multiconvexmeshcollider"},{"location":"manual/plasmamanual/physics/colliders/spherecollider/","text":"SphereCollider defines a sphere shape for collision. The size of the sphere is determined byRadius and the Transform's Scale . (NOTE) Recommended Reading: The Collider page should be read before this page. # Radius A SphereCollider exposes the Radius property which determines the pre-transform radius of the sphere. The SphereCollider will always be a perfect sphere, even when non-uniform scale is present. It does this by taking the largest scale value to determine the radius in world-space. ## Related Materials ### Manual - colliders.markdown ### Reference - SphereCollider - Collider","title":"Spherecollider"},{"location":"manual/plasmamanual/physics/collisionoverview/collisionevents/","text":"CollisionEvents are the primary way that physics sends collision information to users. Three main event types are sent out for collisions: starting, persisting, and ending. Collision events are often used in gameplay, such as applying damage if an impact was large enough. Sometimes it is necessary to alter information about the two objects involved in a collision, such as their velocity. Other common examples include creating audio effects or graphics effects in response to a collision, such as a scraping sound and sparks of a sliding metal object. # Collision Event Types There are three primary collision events sent out. These events are typically sent to both objects involved and to the PhysicsSpace . If you're having trouble receiving events then see WhyAreTheyNotColliding . CollisionStarted is sent out on the first frame two objects come into contact. CollisionPersisted is sent every frame two objects are in contact. This event is not sent on the first frame of collision. CollisionEnded is sent the frame that contact is broken. At this point the two objects are no longer in contact. This event is also sent if an object is destroyed. # CollisionEvents Order The physics system will send out all CollisionEvents after resolving all collisions in the space. This means that some of the information in the event is //old//. This is most obvious when inspecting an object's position and velocity as both will reflect the post-collision resolution information. This is necessary to give final collision information like the final applied impulse. If pre-collision resolution information is desired, see PreSolveEvent of CollisionTables . # Properties There's a few properties worth discussing in detail on CollisionEvents. ## Object vs. OtherObject A collision event is sent with one object as the focus; that is to say that most information will have a primary object and a secondary object. This is necessary to know what direction other properties, such as the collision normal, face. If the event is received from the physics space then this ordering is not defined. ## ContactPoints A CollisionEvent exposes a range of contact points. For physics to solve a collision, several points of contact may be necessary. Often in game logic, one contact point is sufficient; for convenience, the FirstPoint property is exposed. ContactPoints expose information about what happened in a collision: Local and World Points: Contact points expose both a local and world space point on each object. Contact Normal: The normal of a collision describes the primary direction that collision is resolved in. ContactPoint exposes WorldNormalTowardsOther which is the normal from the WorldPoint on this// object towards the //other// object. This can be useful for pushing the //other// object away from //this//. To get the world normal towards //this object just negate this property. Impulses: The physics system solves collisions with impulses, i.e. an instantaneous force. To properly solve a collision there are three values: the normal impulse and two friction impulses. The normal impulse is the scalar impulse value that is applied in the direction of the contact normal to resolve the collision. This can be used to measure the strength of an impact between the two objects. Keep in mind that an impulse contains the inverse mass sum of the two objects involved. The two friction impulses are applied in tangential directions to the normal impulse to slow down an object. ContactPoint exposes FrictionImpulse , which is the total friction magnitude that was applied. Additionally, ComplexImpulse is exposed, which contains the normal, friction1, and friction2 values in the x, y, and z components of the vector respectively. # Related Materials ## Manual - whyaretheynotcolliding.markdown - physicsspace.markdown - collisiongroupsandtables.markdown ## Reference - CollisionEvent - ContactPoint - PreSolveEvent - PhysicsSpace","title":"Collisionevents"},{"location":"manual/plasmamanual/physics/collisionoverview/collisiongroupsandtables/","text":"CollisionGroups and CollisionTables are intertwined resources in the physics system. A CollisionGroup defines a label for a colliders.markdown to be used within a CollisionTable. A CollisionTable defines filters for pairs of CollisionGroups. These filters allow extra control over what collisions can take place. Additionally, filters can be configured to send extra events. # CollisionGroup A CollisionGroup defines a group (or label) for a Collider to take part in. This only serves to group certain Colliders together but doesn't change any behavior unless the active CollisionTable is configured to do so. # CollisionTable A CollisionTable is a resource property set on PhysicsSpace that defines pair-wise CollisionGroup relationships known as CollisionFilters. These filters control if a collision happens and if extra events are sent between group pairings. ## CollisionFilters A CollisionFilter can be used to control if collisions happen between pairs of CollisionGroups. There are three primary states of a CollisionFilter: - Resolve: The default state for a filter. Says that collision resolution should happen as normal. - SkipResolution: Collision detection should be run as normal but resolution should not happen. This allows configuring pairs to be ghost collisions while still getting events. - SkipDetection: Collision detection should be skipped. Skipping collision detection also implies skipping collision resolution. This option is typically only set for performance reasons. This can also be used to prevent collision events from being sent to make gameplay logic easier. Additional information can be configured on a CollisionFilter to send out events through the use of CollisionFilterBlocks. ### CollisionFilterBlocks A CollisionFilterBlock is a sub-component on CollisionFilter used to control what kinds of events are sent out between groups. The current supported block types are: - CollisionStartBlock: Sends out the GroupCollisionStarted event when this grouping has a CollisionStarted. - CollisionPersistedBlock: Sends out the GroupCollisionPersisted event when this grouping has a CollisionPersisted. - CollisionEndBlock: Sends out the GroupCollisionEnded event when this grouping has a CollisionEnded. - PreSolveBlock: Sent out before collision is resolved. Allows altering information before a collision has happened. All blocks can configure which groups in the filter to send to. The SendEventsTo properties control which objects in the pairing should get the event. The A and B referred to are in the same order as the GroupA and GroupB properties of the filter. If a filter has GroupA and GroupB as the same value, then this order is not defined. Additionally, filter blocks contain the EventOverride property that lets the user send out a custom event name instead of the default names. Note that these names do not currently show up in the Events namespace and must be connected to with a string literal. The PreSolveBlock is a special block that should be used sparingly. As PreSolveEvent before collisions are resolved. This event does not expect any drastic changes to the scene, such as removing components. Any complex behavior other than changing property values may crash the engine. # Troubleshooting One of the most common issues when using CollisionGroups and CollisionTables is forgetting to set the correct CollisionTable resource on the PhysicsSpace . Additionally, see WhyAreTheyNotColliding for other common collision issues. # Related Materials ## Manual - collisionevents.markdown - physicsspace.markdown - colliders.markdown - whyaretheynotcolliding.markdown ## Reference - CollisionGroup - CollisionTable - CollisionFilter - CollisionEvent - CollisionGroupEvent - PreSolveEvent - CollisionFilterBlock - CollisionStartBlock - CollisionPersistedBlock - CollisionEndBlock - PreSolveBlock","title":"Collisiongroupsandtables"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/buoyancyeffect/","text":"The BuoyancyEffect component applies a buoyancy force to an object. Buoyancy is approximately defined as: (NOTE) F = -G * (V/p) Where G is a gravity force, V is the volume of the object submerged in the fluid, and p is the density of the fluid. The Detail property is used to determine how many samples should be used to approximate the volume of the submerged object. # Application Modes BuoyancyEffect can only be applied as a Region effect. # Related Materials ## Manual - physicseffectsandregions.markdown ## Reference - BuoyancyEffect - PhysicsEffect - Region","title":"Buoyancyeffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/customphysicseffect/","text":"The CustomPhysicsEffect component allows users to define their own physics effects through callback events. Forces can be applied to any object independently of this component, but this component will determine what objects forces should be applied to using the defined application modes (level, region, etc...). This effect sends out two events: CustomPhysicsEffectPrecalculatePhase and ApplyCustomPhysicsEffect , both of which use the CustomPhysicsEffectEvent class. CustomPhysicsEffectPrecalculatePhase should be used to cache any unchanging values for the frame, such as the world-space values for the effect. ApplyCustomPhysicsEffect is sent out for each object that should have a force applied to it. # Application Modes It is up to a user to define what application modes the CustomPhysicsEffect works with. # Related Materials ## Manual - physicseffectsandregions.markdown ## Reference - CustomPhysicsEffect - CustomPhysicsEffectEvent - PhysicsEffect","title":"Customphysicseffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/drageffect/","text":"The DragEffect component applies forces to slow down the linear and angular velocity of an object. This is often used globally on the space to simulate air resistance, but can also be used for slowing movement in a water region, making one object slow down quickly, etc... # Drag vs. Damping DragEffect exposes properties for setting both drag and damping coefficients. A drag force is defined as: (NOTE) F = -//b//v where v is the object's velocity and b is the drag coefficient. This is a linear drag approximation ([[https://en.wikipedia.org/wiki/Drag_(physics)#Very_low_Reynolds_numbers:_Stokes.27_drag | Stoke's drag]]) that applies a force opposite of the objects velocity. Valid values of b range from 0 to 1/dt and can be through of as approximately how many seconds it'll take the object to stop when no other forces are applied. Damping defines a drag acceleration to be applied by the equation: (NOTE) A = -//b//v The only difference between drag and damping is whether the resultant acceleration takes the object's mass into account. Drag will slow down some objects more than others while damping will slow down all objects the same, regardless of mass. Angular drag is defined similarly to linear drag as: (NOTE) T = -kw where w is the angular velocity, k is the angular drag coefficient, and T is the resultant torque. Angular damping similarly defines an angular acceleration instead of force. # Application Modes The DragEffect component is expected to work with all application modes. Drag applied to the space or level will affect all objects within. Used as a Region effect, drag will slow down all objects in contact with the Region. On a RigidBody the effect will slow down that object alone. Collider and Hierarchy effects will behave the same as a RigidBody effect. # Related Materials ## Manual - physicseffectsandregions.markdown - rigidbody.markdown - colliders.markdown ## Reference - DragEffect - PhysicsEffect - RigidBody - Collider - Region","title":"Drageffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/floweffect/","text":"The FlowEffect component applies forces to make an object move at a target speed in a given direction. This is often used to make an object move in the flow of another, such as a river or a tractor beam. Unlike a ForceEffect which applies a constant force in a direction, FlowEffect applies a variable force to make an object move at a constant speed in the flow direction. MaxFlowForce allows the user to control how much force can be applied to reach this target speed. This can also be thought of as controlling the acceleration of objects within the field. Note: the flow portion of the effect only affects movement in the flow direction, not in the inward force direction. Additionally, FlowEffect has the AttractToFlowCenter checkBox property to pull objects towards the flow center. This attractional force is similarly defined by a target speed and a max force. Note: this force only affects movement in the inward direction, not in the flow direction. # Application Modes FlowEffect is only expected to be used as a Region effect. Other application modes are undefined. # Related Materials ## Manual - physicseffectsandregions.markdown - forceeffect.markdown ## Reference - FlowEffect - ForceEffect - PhysicsEffect - Region","title":"Floweffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/forceeffect/","text":"The ForceEffect and GravityEffect components are direction effects that apply linear forces to push an object in a direction. The only difference between the gravity and force effect is whether an acceleration or force is applied. A GravityEffect will apply a constant acceleration to an object, i.e. the object's mass will not affect the acceleration. ForceEffect will take the object's mass into account. The rest of this page will use force to refer to the acceleration or force depending on the effect type attached. The force// applied is a constant linear //force based upon the direction and strength of the effect. By default, the effect will be applied in the local space of the object it's attached to. This means that rotating the object will affect the direction of the //force//. # Application Methods GravityEffect and ForceEffect are assumed to work with all application methods of PhysicsEffects. If the effect is on the Space or LevelSettings then the force will apply to all objects in the level. If the effect is on a Region then it'll apply to all objects in the region. Otherwise, the effect will apply to the center of mass of the RigidBody (no angular //force//). Collider and Hierarchy application methods do not differ from the RigidBody mode. # Related Materials ## Manual - physicseffectsandregions.markdown - rigidbody.markdown - colliders.markdown ## Reference - ForceEffect - GravityEffect - PhysicsEffect - RigidBody - Collider","title":"Forceeffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/pointforceeffect/","text":"PointGravityEffect and PointForceEffect are effects that apply linear forces towards a central point based upon an inner and outer strength. This is commonly used to create spherical effects such as planetary gravity or explosive shockwaves. There's two main differences between the PointGravityEffect and PointForceEffect. The first is whether a positive strength points inwards or outwards. PointGravityEffect points inwards with a positive strength while PointForceEffect points outwards. The other difference is whether the applied force// is actually a force or an acceleration. PointGravityEffect applies an acceleration to objects, i.e. the resultant acceleration is independent of the object's mass. PointForceEffect applies a force to object, i.e. the object's mass is taken into account. The rest of this page will use //force to refer to the acceleration or force depending on the effect type attached. The center of a point force's effect is the object's translation by default. This position can be moved with {nav icon=pencil-square-o, name=\"LocalPositionOffset\"}, typically to align the position with some visual center on the object. # Effect Interpolation The force applied to an object is always linear (no angular //force//) and is computed as an interpolation between the two strength values based upon the object's distance from the effect's center. This is best illustrated with some graphs. When the distance is less than {nav icon=pencil-square-o, name=\"MinDistance\"}, the effect will always apply {nav icon=pencil-square-o, name=\"MinStrength\"} as a constant force// value. When in-between the min and max distance values, the //force will be an interpolation between the min and max strength values. Linear interpolation is pictured above. Quadratic interpolation can also be used for smoother interpolation. When the distance from the effect center is beyond {nav icon=pencil-square-o, name=\"MaxDistance\"}, how the effect is computed is based upon the {nav icon=list, name=\"EndCondition\"} property. The NoEffect value will not apply any force beyond {nav icon=pencil-square-o, name=\"MaxDistance\"}. ClampToMax will always apply {nav icon=pencil-square-o, name=\"MaxStrength\"} regardless of how far away the object is. ContinueFalloff will extrapolate the curve beyond {nav icon=pencil-square-o, name=\"MaxDistance\"} using the interpolation method specified by {nav icon=list, name=\"InterpolationMode\"}. NOTE: a force is only computed if the effect's Collider has collision, regardless of {nav icon=list, name=\"EndCondition's\"} value. With the two ring strength values it's possible to make a wide variety of point effects. Some possibilities include: - A standard gravity can be made by setting the inner strength larger than the outer strength. - The two effects can be set with opposite signs so as to attract to the center of the ring instead of the effect's center. - An explosion can be made by setting the inner ring's strength large than the other ring's. # Application Modes Point effects are only expected to be used as Region effects. Other application modes are undefined. # Related Materials ### Manual - physicseffectsandregions.markdown ## Reference - PointForceEffect - PointGravityEffect - PhysicsEffect - Region - PhysicsEffectInterpolationType","title":"Pointforceeffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/thrusteffect/","text":"The ThrustEffect component applies a directional force at the center of the attached object. Note that this is different than applying the force through the object's center of mass. If the attached object's center differs from the center of mass then this will apply both a linear and angular force. This effect is often used for thrusters on a ship or other point forces that need to apply torque. # Application Methods The ThrustEffect component expects to be used as a Collider or Hierarchy effect. These application methods allow the thrust's center to be defined independently of the center of mass of the RigidBody If used as a RigidBody effect then this is no different than ForceEffect . Other application modes are undefined. # Related Materials ## Manual - physicseffectsandregions.markdown - forceeffect.markdown - rigidbody.markdown - colliders.markdown ## Reference - ThrustEffect - PhysicsEffect","title":"Thrusteffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/torqueeffect/","text":"The TorqueEffect component applies a torque to an object. Torque is also known as angular force. Torque is applied about an axis with a strength. The resultant force will cause an object to spin about the axis according to the right-hand rule . By default, torque is applied in the local space of the object. # Application Modes Torque is only assumed to be used as a RigidBody effect. This will cause the object to twist about its center of mass. Other application modes are undefined. # Related Materials ## Manual - physicseffectsandregions.markdown - rigidbody.markdown ## Reference - TorqueEffect - PhysicsEffect - RigidBody","title":"Torqueeffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/vortexeffect/","text":"The VortexEffect component applies two forces to an object to simulate a spinning vortex. - An attractive linear force pulls objects towards the center of the disc. - A perpendicular linear force twists objects around the center of the disc. The same interpolation scheme as PointForceEffect is used by VortexEffect to compute the inward strength and twist strength. # Application Modes VortexEffect is only expected to work as a Region effect. All other application modes are undefined. # Related Materials ## Manual - physicseffectsandregions.markdown - pointforceeffect.markdown ## Reference - VortexEffect - PointForceEffect - PhysicsEffect - Region","title":"Vortexeffect"},{"location":"manual/plasmamanual/physics/physicseffectsandregions/windeffect/","text":"The WindEffect component applies a force in the WindDirection proportional to the approximate surface area of the object. This force can result in both linear and angular forces. The WindEffect is primarily used for simulating wind. WindEffect is also useful when a force should consider the surface area as well as the mass of an object, such as with an explosion. # Application Modes WindEffect expects to be applied as a Region , space , or Level effect. In these cases, the effect is applied to all objects in the application area. Other effect methods are undefined. # Related Materials ## Manual - physicseffectsandregions.markdown ## Reference - WindEffect - PhysicsEffect - Region - space","title":"Windeffect"},{"location":"manual/plasmamanual/physics/physicstroubleshooting/edgecatching/","text":"Sometimes a physics object will seem to get stuck on a smooth surface. This is often caused by an issue known as edge-catching. This issue is most common when creating a player. In a game, the ground is often piece-wise, i.e. made of a collection of individual pieces. In this example, assume that the ground is a collection of boxes. Now a rotation locked player is implemented with a BoxCollider to move via simple velocity changes (velocity is the drawn arrow). Sometimes the player will stop moving even though input is setting a velocity. This behavior is caused by the seams on the ground. For an explanation of why this happens a quick physics primer is necessary. # Physics Primer: Discrete Collision Detection Physics engines are often implemented with discrete collision detection. This is easiest to think of as a picture flip-book where physics teleports each object from frame-to-frame. This presents a problem to physics as objects will already be overlapping by the time collision is detected. To fix collisions, physics has to approximate the best direction in which to push the objects apart. The approach taken is to find the minimum translational distance required to push the objects apart. Given the above configuration, all 4 primary directions can be checked for the minimum translational distance. It should be clear that pushing the box up requires less work than the other four directions. # Edge Catching Sometimes physics incorrectly guesses what the best distance is. This commonly happens when gravity is combined with player input and collision happens at a corner. Even though two boxes are next to each other with no seam between, physics detects collision between each box in isolation. A step-by-step illustration is provided: First look at a movable box resting at the seam between two boxes. For this illustration the focus will be on the red box and the blue box on the right. Forces for the frame are applied to the red box. First, gravity pulls the red box down. Additionally, an input force pushes the red box to the right. After updating position from forces, the physics system will see this scenario. The red box is in contact with both ground surfaces and collision needs to fix the overlap by pushing it out. Each ground surface will independently determine the minimum translational distance. The left box will correctly push up. The right box will unfortunately push to the left since this requires the least movement. Now physics resolves collisions and puts the red box right back where it started. Given the same forces, the red box will repeat this cycle and be stuck on this seam in the ground. # Fixing Edge Catching Unfortunately there is no perfect generic solution to the edge catching problem. There are two main approaches to work around the problem: Change your collision: The root issue here is that a seam does exist. One way to fix this is to remove the seam by merging the surface's collision. It's near impossible to remove all seams in a game though, and it is often more practical to change the player's collision shape. Commonly, a player uses a CapsuleCollider instead of a BoxCollider to avoid seams. In the above illustration, the box on the left has a minimum translational distance that will push it to the left. The capsule however, has a minimum translational distance that is up and to the left. This will allow the capsule to move to the right a bit and escape the cycle of edge catching after a few frames. While this method mostly fixes edge catching, it tends to produce small bumps when crossing edges. This is because of the portion of the minimum translational distance that still points against the player's velocity. Use the SweptController: Plasma provides a character controller that uses //swept collision//. Swept collision is different than discrete collision because it detects exactly when a collision happens. This prevents a player from ever colliding with an internal edge because it must first collide with the surface. There's two issues with the swept controller. - It's more computationally expensive. This isn't an issue for a few number of objects, such as the player, but wouldn't be practical for every object. - It only works with Kinematic objects. Using the swept controller means manually translating the player and not working through velocity and forces. This swept object will no longer react to PhysicsEffects , collision resolution won't do anything, and Joints won't affect it. For some games this may make the SweptController impractical. # Related Materials ## Manual - physicstroubleshooting.markdown - physicsspace.markdown - colliders.markdown - boxcollider.markdown - capsulecollider.markdown - physicseffectsandregions.markdown ## Reference - PhysicsSpace - Collider - BoxCollider - CapsuleCollider - PhysicsEffect - Region","title":"Edgecatching"},{"location":"manual/plasmamanual/physics/physicstroubleshooting/tunneling/","text":"Sometimes when a small object is moving fast it might seem to pass through other objects. This is an artifact in physics engines known as tunneling. Before explaining this, understanding some basic concepts in physics engines is important. # Discrete Collision Detection Game physics engines are commonly implemented using a discrete collision detection model. In a discrete model, objects teleport from frame-to-frame. One way to view this is as a picture flip-book; in each subsequent picture the object teleports to its new position. Pictured above is an illustration of discrete physics. Notice how there are gaps in the object's movement trail due to a lowered framerate. Typically a physics engine runs at a much higher framerate which is why motion seems smooth. # Tunneling As an object becomes smaller and moves faster it becomes more likely to tunnel. Tunneling is when an object misses a collision due to moving too fast. In the above picture, the red ball is moving at a constant speed to the right with a framerate of 1 fps. In this example no collision is detected as the ball teleports past the wall without ever coming into contact with it. Tunneling happens even if the framerate is high. The faster and smaller an object the more likely tunneling is to happen. Additionally, tunneling doesn't just result in collisions being missed. Sometimes tunneling can result in wrong collisions. In the above picture the ball does end up hitting the wall; however, it hits on the opposite side. In this way the collision will be detected but in the wrong direction. # Fixing Tunneling The easiest way to fix tunneling is to limit the size and speed of an object. If an object can't move faster than its \"radius\" each frame then it won't tunnel. Another way to avoid tunneling is to increase the framerate of the simulation. PhysicsSpace exposes SubStepCount which allows the user to run physics at a higher framerate. The final way to avoid tunneling is to use continuous collision detection. Currently, continuous collision detection is only available through PhysicsSpace's SweepCollider function which is meant for character controllers. See the SweptController script for an example. Future plans include making this an option on rigid bodies. NOTE: Continuous collision detection is significantly more computationally expensive than discrete. # Related Materials ## Manual - physicstroubleshooting.markdown - collisionoverview.markdown - physicsspace.markdown ## Reference - PhysicsSpace","title":"Tunneling"},{"location":"manual/plasmamanual/physics/physicstroubleshooting/whyaretheynotcolliding/","text":"A common issue during development is to have two objects not collide when the user thinks they should. To help aid debugging this, PhysicsSpace exposes the WhyAreTheyNotColliding function. This function takes a pair of objects and returns a string signifying why the physics space doesn't think they're colliding. Here's a short list of a few common reasons: - There isn't a collision : The objects might just not be colliding. This is often the case when making a 2D game and the objects are on different z-layers. Try to look at the property grid or change the camera angle to verify this. - The collider is static: See the Collision Overview page for what goes through collision detection and collision resolution. - No messages are sent: Ensure that the Collider's SendsEvent checkBox property is true and that a CollisionTable is not interfering with these events. Additionally, if using the SweptController make sure: - CustomCollisionEventTracker component is attached to the same object as the SweptController - SweptController's ForwardEvents checkBox property is set to true - The listener didn't connect to the event: Make sure that the object that is supposed to get a collision event actually connected to the event. - The listener connected incorrectly: There's two common scenarios for this. - 1. Make sure that the correct event type was connected to. - 2. Make sure that the listener connected to the right object. Was this the correct cog? Should this have been the PhysicsSpace? # Related Materials ## Manual - physicstroubleshooting.markdown - colliders.markdown - collisionoverview.markdown - collisiongroupsandtables.markdown ## Reference - Collider - PhysicsSpace - CustomCollisionEventTracker - CollisionGroup - CollisionTable","title":"Whyaretheynotcolliding"},{"location":"manual/plasmamanual/scripting/debugdrawing/","text":"Debug drawing is a feature in Plasma that allows you to draw lines and shapes within the editor for the purpose of debugging your game. DebugDraw objects have simple interfaces to draw simple, solid color primitives that are intended for communicating information visually to the developer. While there are many different shapes that may be debug drawn, this page limits itself to describing lines and triangles. # DebugDraw The DebugDraw object draws all the debug objects in a level once per frame. Each debug draw object is turned into a graphical which uses either the DebugDraw resource or DebugDrawOnTop resource RenderGroup . The user will never make the draw call directly; instead, all debug objects to be rendered must be added to the debug draw call using the DebugDraw.Add() function: ``` lang=csharp // Create a DebugLine instance with a point and a radius, and add it to the DebugDraw call var dLine = DebugLine(Real3(0,0,0), Real3(5, 5, 0)); dLine.HeadSize = 1.0; dLine.Color = Real4(0.2, 0.4, 0.8, 1.0); DebugDraw.Add(dLine); // Create a DebugSphere instance and add it to the DebugDraw call var dSphere = DebugSphere(Real3(0,0,0), 4.0); dSphere.Colored = true; DebugDraw.Add(dSphere); ![DebugDrawLineSphere2D](https://media.githubusercontent.com/media/dragonCASTjosh/ZeroFiles/master/doc_files/47257.png) *The preceding code block as rendered in a 2D level* ![DebugDrawLineSphere3D](https://media.githubusercontent.com/media/dragonCASTjosh/ZeroFiles/master/doc_files/47259.png) *The preceding code block as rendered in a 3D level (viewed from an angle)* # DebugLine DebugLine draws a line between two points, a start and an end. Lines can also be arrows by using the BoxHeads checkBox property, which adds a cone on the end of the line. These two points provide the minimum required settings when adding a debug line object. The DebugLine-specific member variables along with descriptions of each are listed below: | Parameter | Description |------------|----------------- | Start | Defines the starting position of the line | End | Defines the end position of the line | Color | Defines the color of the line | HeadSize | Defines the size of the head at the top of the line (default shape is an arrow) | BoxHeads checkBox | A Boolean that when set to true changes the heads to boxes | DualHeads checkBox | A Boolean that when set to true places Heads on both ends of the line The following LightningScript shows how a debug object's member variables may be defined with properties as well as updated according to game logic: class RotateLine : LightningComponent { [Dependency] var Transform : Transform; [Property] var DrawLine : Boolean = false; [Property] var LineEnd : Real3; [Property] var RotDegrees : Real = 90.0; [Property] var LineColor : Real4 = Real4(0.2, 0.4, 0.8, 1.0); [Property] var LineArrowSize : Real = 1.0; var Angle : Real; // The angle by which to rotate the line function Initialize(init : CogInitializer) { Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if(this.DrawLine) { // Create a DebugLine instance var debugLine = DebugLine(this.Owner.Transform.Translation, this.LineEnd); // Set debug line start to the object's translation debugLine.Start = this.Owner.Transform.Translation; // Set target angle to the desired rotation multiplied by Dt this.Angle += Math.ToRadians(this.RotDegrees) * event.Dt; // Rotate the debug line's end based on the target angle var endX = (this.LineEnd.X * Math.Cos(this.Angle)) - (this.LineEnd.Y * Math.Sin(this.Angle)); var endY = (this.LineEnd.Y * Math.Cos(this.Angle)) + (this.LineEnd.X * Math.Sin(this.Angle)); // Set the new end point debugLine.End = Real3(endX, endY, 0); // Set line color and head size debugLine.Color = this.LineColor; debugLine.HeadSize = this.LineArrowSize; // Add the line to the DebugDraw call DebugDraw.Add(debugLine); } } } ![RotateLine](https://media.githubusercontent.com/media/dragonCASTjosh/ZeroFiles/master/doc_files/47261.gif) *The preceding LightningScript rendered in a 2D level* ## DebugTriangle DebugTriangle draws a triangle defined by three vertices (the member variables `Point0`, `Point1`, and `Point2`). The DebugTriangle-specific member variables along with descriptions of each are listed below: | Parameter | Description |-------------|--------------- | {nav icon=pencil-square-o, name=Point0} | Defines the first vertex of the triangle | {nav icon=pencil-square-o, name=Point1} | Defines the second vertex of the triangle | {nav icon=pencil-square-o, name=Point2} | Defines the third vertex of the triangle | Color | Defines the color of the border/fill of the triangle The following ZIlchScript illustrates in a simple manner how consecutive triangles may be debug drawn: class DrawTriangles: LightningComponent { // The vertices for the triangle pairs [Property] var Vertex1: Real3; [Property] var Vertex2 : Real3; [Property] var Vertex3 : Real3; [Property] var Vertex4 : Real3; // The two colors to use for each triangle pair [Property] var ColorA : Real4; [Property] var ColorB : Real4; // Number of triangle pairs to draw [Property] var NumberOfTriangles : Real; function Initialize(init : CogInitializer) { Plasma.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // Store the x-coordinate values for each vertex var x1 = this.Vertex1.X; var x2 = this.Vertex2.X; var x3 = this.Vertex3.X; var x4 = this.Vertex4.X; // Get the difference between two x-coordinates that share the same y-coordinate var diff = this.Vertex2.X - this.Vertex1.X; // Loop as many times as there should be pairs of triangles for(var i = 0; i < this.NumberOfTriangles; ++i) { // Increase the x-coordinate by the difference this.Vertex1.X += diff; this.Vertex2.X += diff; this.Vertex3.X += diff; this.Vertex4.X += diff; // Create and add the first triangle var triA = DebugTriangle(this.Vertex1, this.Vertex2, this.Vertex4); triA.Color = this.ColorA; DebugDraw.Add(triA); // Create and add the second triangle var triB = DebugTriangle(this.Vertex2, this.Vertex3, this.Vertex4); triB.Color = this.ColorB; DebugDraw.Add(triB); } // Reset the original x-coordinate values this.Vertex1.X = x1; this.Vertex2.X = x2; this.Vertex3.X = x3; this.Vertex4.X = x4; } } ``` The preceding LightningScript rendered in a 2D level ## Related Materials ### Manual - rendergroups","title":"Debugdrawing"},{"location":"manual/plasmamanual/scripting/eventsandconnections/","text":"Events are the main way that objects and components talk to each other in the Plasma Engine. When a component has information that it wants to share, the easiest way is to package the information into an Event, and then dispatch it. Then, any component that wants to have that information can listen for it by connecting a member function to the event. In the Plasma Engine, there are two main categories of events: the pre-defined Engine events (such as as an Update event or a Collision event) that are that ready-made for you to connect to, and Custom LightningScript Events that the user creates. The Custom Events allow the user to decide when and where to send them out, what information is sent with them, and what listens for the event after it's sent. This page will briefly cover each of the two categories, but will focus specifically on Custom Events(see event_reference for built-in events). # Pre-Defined Engine Events At the bottom of this page is a comprehensive list of the pre-defined engine events. The LogicUpdate Event, Collision Events (which comes in three variations: Started, Ended, and Persisted), Keyboard Events , and Mouse Events . # Custom LightningScript Events These are the events that the user will create and dispatch themselves. A primary reason to use custom events is that they move the focus away from whatever triggers an action (such as collision or a frame update) to the object that is responding to the event occurring (i.e. the player's health and the HUD element displaying the player's health that is changed as a result of colliding with an enemy). There are a number of benefits to this approach, including: * One event dispatch on an object can cause many behaviors to occur. * i.e. PlayersDamagedEvent is dispatched on the player object * The player's hp lowers in the Health component attached to the player * The object representing the player's health in the HUD scales to reflect the player's new health * The AnimationController changes the player sprite to the DamagedAnimation * Multiple components on different objects can all respond to the same event dispatch. * Events can make it easier to understand and modify your code as particular behavior responses are more closely related to the objects they affect, while also encouraging logical decoupling. Keep in mind that the user will only want to use custom events when there is more than one component \"listening\" for the event. The user will get the most use out of custom events when the events that are created are things that affect multiple objects in your game. Using a custom event when only one object is listening adds an unnecessary layer of abstraction, whereas a simple, direct function call to enact the desired behavior change is much simpler. # Using Custom Events in a Game Let's go through a quick analogy for events. Imagine a world just like ours, but where vampires and ghosts also happen to exist alongside humans. In this instance, the custom event we are concerned with is the rising of the sun in the morning. In this world we're imagining, the appearance of the sun causes specific behaviors in some of the objects that exist in the world, but for others, it means nothing at all. For the humans, the sun rising means it is time to wake up; for the vampires, it can mean instant death if they happen to be outside; for the ghosts, it means they are banished back to the grave; for rocks, however, it means nothing at all. Humans, vampires, and ghosts all have an interest in the sun rising and will respond to it in different ways. Rocks couldn't care less. (NOTE) Exceptions to the Rule : When might one want to use a custom event when there is only one object listening? Here is at least one example worth covering: When the user has a large number of instances of the same object that need to respond to some change. Using the example above, say that the world is overrun with vampires. There are hundreds swarming over an area. Once could put all instances of the vampire into an array and call the behavior-changing function on each one, but in this case it is simpler, and most likely more efficient, to just have the vampire archetype from which the instances are created have a component that listens for a \"sun rises\" event and changes their behavior accordingly. This scenario could translate into a game as follows: * When the sun rises, a custom event is \"sent out\" to the entire game space. * One must then decide what objects should be \"listening\" for this event. In the example, all humans, vampires, and ghosts. * These objects that are listening for the event respond to it in different ways, however, requiring the user to define how each separate object responds when they \"hear\" the event (to be written in behavior-changing functions--in the components attached to the listening objects--that are called as a result of the component \"hearing\" the event). * All the other objects that are not affected by the event (rocks, buildings, etc...) have no need to listen to the event. Since they don't care about the event, they will have no component that even acknowledges the event was sent. ## Decoupling and Custom Events To understand how Custom Events can help with Decoupling one's code, it is helpful to first have a working definition of Coupling. Two elements within a project are considered coupled if a change in one element directly leads to a change in the other element. For example, if the player object has a child object that moves one-to-one with every movement of the player (and the player moves one-to-one with every movement of the child), the movement of those two objects could be considered tightly coupled. If, on the other hand, the child's movement is not reliant upon the movement of the player, the movement of the two objects is decoupled (otherwise known as loose or low coupling); that is, the action of either object does not have a direct, corresponding effect on the other. Custom Events allow you to decouple elements within one's game so that the emphasis lies more with those objects that are listening for an event, causing some change in behavior. The behavior change caused by listening to the event is not directly tied to the sending of the event; on the contrary, the objects that listen for the event can respond to hearing that event in completely different ways that do not affect each other and are not influenced by the sending of the event (the exception in this case being if you are attaching data with an event, as will be shown below). # Event Dispatching Events are dispatched per object. The objects that events can be dispatched on can include the Space, the Level Settings of a level, the owner of the component dispatching the event (i.e. this.Owner ), as well as any other specific object to which one has a reference. Events dispatched onto the Space object will be heard by every object that is listening to the Space for that particular event. In short, the listener that is connecting to an event must match up that connection exactly in the way in which the event was dispatched. (NOTE) Consider the Following : There are two red Players, Player1 and Player2. They both connect to ChangeColorToBlueEvent so they can respond with their OnChangeColorToBlueEvent functions (that, in fact, change their color blue.) When Player1 signs up for the ChangeColorToBlueEvent, it listens for the one dispatched by the Space object. When Player2 signs up for the same ChangeColorToBlueEvent, it listens for the one dispatched out by the Game object. Later when the ChangeColorToBlueEvent is fired from the Space, Player1 changes to the color Blue having received the event, while Player2 stays red. # Creating and Using Custom Script Events The creation and usage of custom events in Plasma is a multi-step process that follows a simple mechanism that relies upon correctly matching up event dispatches with event connections. The following sections will detail the way in which to correctly create, attach data to, dispatch, and connect to custom events. WARNING: Occasionally, you will need to store information received in an event for later use. You may be tempted to store a reference to the event object itself. This is a bad practice and should never be done. You should instead copy the information within the received event object by value into variables of their corresponding types. If you were to store a reference to the event object itself the reference would lose its validity as soon as all event listeners have executed and the event is deallocated. This situation would result in the event reference to point at an address in memory that may be currently be in use by another part of the engine since it is no longer being used by the event. Accessing the broken event reference in the state will result in undefined behavior. ## Creating the Event Definition The following code-block demonstrates both how to create a custom event as well as how to include data to send with the event. While it is rare that one will send no data, it is not necessary to include data when creating the event. In these cases, the dispatching of the event itself is the data. In most cases, however, data will be included that will have relevance to the behavior change desired by the object that is connecting to the event (i.e. on a \"enemy destroyed\" event, one might send the amount of points the player receives for destroying the enemy). // Define a custom LightningEvent class MyCustomEvent : LightningEvent { //Data to be sent with the event //that will be used by the object connecting to the event var InfoToSend : String = \"\"; var NumberToSend : Integer = 0; var RealToSend : Real = 0.0; } ## Send an Event Sending an event is a four part process. 1. Create an event. 2. Attach data to the event. (optional) 3. Use the sends keyword to add the name of the event you're sending to the Events namespace. 4. Using the appropriate event-sender, dispatch the event. ## Create the Event //Create an instance of the Custom Event var myCustomEvent = MyCustomEvent(); ## Attach Data to the Event NOTE: Users can only add data to the member variables defined in the event's class. To add more data, the user needs to alter the event's class to include more member variables. class MyCustomEvent : LightningEvent { //Attach Data myCustomEvent.InfoToSend = \"data\"; myCustomEvent.NumberToSend = 5; } class EventDispatcher : LightningComponent { var DataThatWillNotBeAdded : Real = 10.5; //This data WILL NOT be sent with the event //as it is not added within the event-defining class myCustomEvent.RealToSend = this.DataThatWillNotBeAdded; } ## Using the Sends Keyword The sends keyword helps users in two ways. First, it registers the string type ID so that it's associated with the event type itself (allowing one to send and connect using the Events.MyCustomEvent syntax) while also keeping the event //type safe//; that is, an error will be thrown on the event response function if one tries to connect to an event that doesn't precisely match the method in which the event was dispatched. Users can only use the sends keyword within the outermost class-scope (of either the class defining the custom event or the class in which it is dispatched), outside of any function within that class. In other words, it must be used outside of Initialize , OnLogicUpdate , or any other function. Placing it within the class that creates the event itself is a good way to keep track of it is registered, but ultimately it is up to the user where they wish to put it so long as it not used inside any function. The following two code-blocks show two ways to use the sends keyword correctly: class MyCustomEvent : LightningEvent { //Using the sends keyword correctly within the class //that defines that custom event sends MyCustomEvent : MyCustomEvent; } class EventDispatcher : LightningComponent { //Using the sends keyword correctly within the class //that dispatches the custom event sends MyCustomEvent : MyCustomEvent; function Initialize(init : CogInitializer) { } } The following code-block will show an incorrect way use the sends keyword: class EventDispatcher : LightningComponent { function Initialize(init : CogInitializer) { //Incorrect usage of sends keyword within a function sends MyCustomEvent : MyCustomEvent; } } ## Dispatch the Event Always be mindful of sending the events from the source one's subscribers are expecting to hear it from. class MyCustomEvent : LightningEvent { //Registers the string type ID to be associated with the event type sends MyCustomEvent : MyCustomEvent; } class EventDispatcher : LightningComponent { //Property for selecting the CogPath of the object for which to //dispatch the event [Property] var ObjectToDispatchToPath : CogPath = null; //Cog variable for which to assign the Cog of the CogPath variable var ObjectToDispatchTo : Cog = null; function Initialize(init : CogInitializer) { //Sets Cog variable for the object to dispatch //to the Cog from CogPath variable this.ObjectToDispatchTo = this.ObjectToDispatchToPath.Cog; //Create an instance of the event var myCustomEvent : MyCustomEvent = new MyCustomEvent(); //Dispatches the Event onto multiple objects from component //Dispatch onto `this.Owner` this.Owner.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto LevelSettings this.LevelSettings.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto other, specific object this.ObjectToDispatchTo.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto `this.Space` this.Space.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto `this.GameSession` this.GameSession.DispatchEvent(Events.MyCustomEvent, myCustomEvent); } } ## Listening for an Event In order to respond to an event, the user must identify which event-sender you are listening to: Space, LevelSettings, GameSession, Object from which the event is dispatched (along with the object's parent or children), another specific object, etc. Which event the user cares about: Events.LogicUpdate, Events.MyCustomEvent, etc. And how the user plans to respond: OnLogicUpdate, OnMyCustomEvent, etc. (NOTE) Dispatching Onto Space vs LevelSettings : One thing to keep in mind when dispatching onto either the Space or LevelSettings is the scope of each. Remember that the LevelSettings object is also scoped to the Level that it is in. This is important to consider when using custom events because if the level is changed, the particular LevelSettings object for that level will no longer exist as well as any events that were dispatched onto LevelSettings. The Space on the other hand, could continue to exist between the changing of levels and any events that dispatch onto the Space will still exist. Many different functions in various components can connect to the same dispatched event. All that is required is that each object have a function that is connected correctly to the single event that has been dispatched on that object. IMPORTANT: Make sure the event connection is made in a place that will only run once . If the event ends up connecting multiple times//, the object it's dispatched onto will //respond multiple times to a single //event//. While connecting to an event is usually done in a component's Initialize function, it doesn't have to. The connection may be dependent on other factors or variables, especially if the user wants the object to connect only after something significant has happened. In these cases, one may choose to place the connection outside of the Initialize function and within the scope of a conditional statement checking for certain criteria. ## Connecting //Listening for Custom Events //Listening for Dispatch onto `this.Owner` Plasma.Connect(this.Owner, Events.MyCustomEvent, this.OnMyCustomEvent); //Listening for Dispatch onto `this.Space` Plasma.Connect(this.Space, Events.MyCustomEvent, this.OnMyCustomEvent); //Listening for Dispatch onto `this.LevelSettings` Plasma.Connect(this.LevelSettings, Events.MyCustomEvent, this.OnMyCustomEvent); //Listening for Dispatch onto `this.GameSession` Plasma.Connect(this.GameSession, Events.MyCustomEvent, this.OnMyCustomEvent); ## Responding to an Event In order to actually respond to the event, the user needs to define the function provided in the call to Plasma.Connect. ere, one can gain access to the data that is sent with the event, for use in altering behavior or setting properties. //This function gets called because this is the one //we connected to when we listened to the event function OnMyCustomEvent(myCustomEvent : MyCustomEvent) { //Use as much or as little information passed by the event this.Owner.ComponentName.PropertyName = myCustomEvent.InfoToSend; this.Owner.ComponentName.Value = myCustomEvent.NumberToSend; } ## Disconnecting Disconnecting makes it so one is no longer notified when the event occurs. If multiple functions are linked to the same event, these too will be disconnected. There is no way to disconnect only one connection to the event; if one is disconnected, all are disconnected. //Disconnecting From Events Plasma.Disconnect(this.Owner, Events.MyCustomEvent, this); Another important thing to keep in mind regarding Disconnecting is that is object-specific and event-specific but not receiver-specific. That is why in the code-block immediately above, only this is passed in as the final argument instead of the delegate itself (i.e. this.OnMyCustomEvent ). # Related Material ## Reference - event_reference - Collision Events - Keyboard Events - Mouse Events","title":"Eventsandconnections"},{"location":"manual/plasmamanual/scripting/wysiwyg/","text":"Properties are one of the easiest ways to make components more reusable. While some properties affect runtime behavior, others are simply items that help set the initial state of one\ufffds components. One can see the WYSIWYG (what-you-see-is-what-you-get) effect with some of the built-in components. Here the Sprite 's orientation is changed the moment the FlipX checkBox box is checked in the editor. As a demonstration, the following custom LightningScript will emulateFlipX checkBox while using a Property: class Flipper : LightningComponent { [Dependency] // Need the Transform component to perform the flip var Transform : Transform; [Dependency] var Orientation : Orientation; [Serialized] // This is the backing field that saves the value. var FlipXs : Boolean = false; [Editable] // This is displayed in the Properties Window, but doesn't save var FlipX : Boolean = false; function Initialize(init : CogInitializer) { // If they chose to Flip, do so now if(this.FlipX) this.Flip(); } function Flip() { this.Transform.RotateWorld(Math.AxisAngle(this.Orientation.WorldUp, Math.Pi)); } } While this works, it doesn't flip when FlipX checkBox is altered at runtime. By only calling Flip() during initialization, it runs once and then never again. Although other scripts can access and call Flip() themselves, this function doesn't update FlipX checkBox, which means it doesn't represent the state of the object, like it does in the Sprite component. To link the call of flip with the setting of the variable, we'll use a Get-Set for editing and a field for the backing variable. i.e. Update Flipper.z to the following: [RunInEditor] class Flipper : LightningComponent { [Dependency] // Need the Transform component to perform the flip var Transform : Transform; [Dependency] var Orientation : Orientation; [Serialized] // This is the backing field that saves the value. var FlipXs : Boolean = false; [Editable] // This is displayed in the Properties Window, but doesn't save var FlipX : Boolean { get { return this.FlipXs; } set { // Using a get-set allows us to add functionality when the value is set; // in this case, performing the flip when the value is changed. if (this.FlipXs != value) { this.Flip(); this.FlipXs = value; } } } function Initialize(init : CogInitializer) { // If they chose to Flip, do so now if(this.FlipX) this.Flip(); } function Flip() { this.Transform.RotateWorld(Math.AxisAngle(this.Orientation.WorldUp, Math.Pi)); } } Employing RunInEditor , Serialized , and Editable we've created the WYSIWYG feel, and the sprite can now be flipped at editor runtime. This design pattern can be reused to create the polished WYSIWYG feel with most scripted components. # Related Materials ## Manual LightningScript - Sprites - RunInEditor - Get-Set - RunInEditor - Serialized - Editable","title":"Wysiwyg"},{"location":"reference/","text":"The Code Reference sub-sections are generated directly from the C++ source code and comments contained within the rZCORE repository. # Class Reference All types bound to Lightning. # Class Reference Sorted By Tag All types bound to Lightning, sorted by tags. # Command Reference All commands available via the in editor search bar. # Enum Reference All enums bound to Lightning. # Event Reference All bound event types. # Flag Reference # Lightning Base Types","title":"Index"},{"location":"reference/attribute_reference/","text":"# function_attribute_reference # object_attribute_reference # property_attribute_reference","title":"[function_attribute_reference](https://github.com/PlasmaEngine/PlasmaDocs/blob/master/code_reference/attribute_reference/function_attribute_reference.markdown)"},{"location":"reference/class_reference/","text":"aabb acquirenethostinfo action actiondelay actiongroup actions actionsequence actionset actionspace actionsystem additivesynthnode addnoisenode addobjectwidget addresourcewindow adsrenvelope alternatesearchcompletedevent anchoringsubtool animation animationbuilder animationclip animationclips animationeditor animationeditordata animationgraph animationgraphevent animationnode animationsettings animationtrackview archetype archetyped archetypeinstance area areaevent arrayhandleofmaterial arrayhandleofrendergroup arrowgizmo asyncprocess asyncprocessevent atlas audio audiobytedataevent audiocontent audiofloatdataevent audiooptions audiosettings autocompletepopup backgroundtaskevent backgroundtasks bandpassnode basecastfilter basecollisionevent basescrollarea basesprite basetextbuilder basicanimation basicdirectioneffect basicpointeffect binarybuilder binarycontent bitstream blendsettings blendsettingsmrt blockingtaskevent blockingwebrequest bone boundingboxbroadphase boundingspherebroadphase boxcollider boxparticleemitter bugreporterresponse buildercomponent buildinfo buoyancyeffect buttonbase calltippopup camera cameraviewport capsulecollider carwheelarray carwheelref castfilter castfilterevent castresult castresults castresultsarrayrange castresultsrange chainnode checkbox childrendergrouplist chorusnode chrome chromepopupevent cog cogarchetypeextension cogarchetypepropertyfilter cogcommand cogcomponentmeta coghashsetrange coginitializer coginitializerevent cogmetadatainheritance cogmetadisplay cogmetaoperations cogmetaserialization cogmetatransform cognamerange cogpath cogpathevent cogpathmetaserialization cogreplaceevent cogserializationfilter collider collisionendblock collisionevent collisionfilter collisionfilterblock collisiongroup collisiongroupevent collisionpersistedblock collisionstartblock collisiontable colorevent colorgradient colorscheme colortargetmrt combobox command commandevent commandexecuter commandmanager commandupdateevent component composite compressornode conflictoptions connectiondata connectionevent consoletextevent consoleui constraintconfigblock contactblock contactgraphedge contactpoint contactpointrange contactrange contentcomponent contentcomposition contentconfig contentcopyright contenteditoroptions contenthistory contentitem contentitemmetaoperations contentlibrary contentlibraryreference contentlibraryreferencearray contentnotes contentpackage contentsystem contentsystemevent contenttags contextmenuentry contextmenuentrychildrenrange contextmenuentrycommand contextmenuentrydivider contextmenuentrymenu contextmenuevent convexmesh convexmeshcollider createdestroytool creationtool crossblend curvecontrolpoint curvedraggable curveevent curvetangent customaudionode customaudionodeevent customcollisioneventtracker customconstraintinfo customjoint customjointblock customjointevent customphysicseffect customphysicseffectevent cylindercollider databuilder datacontent dataevent datareplaceevent dataresource dataresourceinheritance debugarc debugbox debugcapsule debugcircle debugcone debugcylinder debugdraw debugengineevent debugfrustum debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline debugline debuglinecross debugobb debugsettings debugsphere debugtext debugtriangle defaultgamesetup definitionset delaynode depthsettings developerconfig directblend directproperty docklayout document documentationlibrary documenteditor documentmanager documentresource drageffect dragselectsubtool dualblendchainnode dualblendcrossblend dualblenddirectblend dualblendselectivenode dynamicaabbtreebroadphase dynamicbroadphasepropertyextension dynamicmotor edgedocklayout editingamefilter editor editorcameracontroller editorconfig editorevent editorflags editorindexedstringarray editormain editorpackageloader editorpropertyextension editorrange editorrotationbasis editorsettings editorslider editorviewport edittext ellipsoidcollider engine environment equalizernode event eventbundle eventdirectorywatcher eventobject eventrange expandernode factory fileeditevent filllayout fixedanglejoint fixedanglejointblock flangernode flattentool floatingcomposite floweffect focusevent font fontbuilder fontcontent forceeffect formattedinplacetext frameratesettings frustum gameevent gamepad gamepadevent gamepads gamesession gamesessionrange gamewidget gearjoint gearjointblock generalsearchview generatedarchetype generatedwavenode genericphysicsmesh geometrycontent geometryimport geometryoptions geometryresourceentry gizmo gizmocreator gizmodrag gizmoevent gizmoraytestevent gizmospace gizmoupdateevent granularsynthnode graphical graphicalentry graphicalentryrange graphicalevent graphicalrangeinterface graphicalsortevent graphics graphicsdriversupport graphicsengine graphicsraycastprovider graphicsspace gravityeffect griddraw gridlayout handleableevent heightmanipulationtool heightmap heightmapcollider heightmapevent heightmapimporter heightmapmodel heightmapsource heightmapsubtool heightmaptool heightpatch hidebasefilter hierarchy hierarchycomposition hierarchyevent hierarchylistrange hierarchylistreverserange hierarchynamerange hierarchyrange hierarchyspline highlightborderevent highpassnode hotkeyeditor ibroadphase iconbutton ignorespaceeffects imagecontent imagedefinition imageoptions imagewidget importbutton importoptions indexbuffer indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgefaceedgeindexarrayrange indexedhalfedgemesh indexedhalfedgemeshedgearray indexedhalfedgemeshedgearrayrange indexedhalfedgemeshfacearray indexedhalfedgemeshfacearrayrange indexedhalfedgemeshvertexarray indexedhalfedgemeshvertexarrayrange inplacetexteditor inputdeviceevent ipaddress item itemgroup itemlist job joint jointconfigoverride jointcreator jointdebugdrawconfig jointevent jointgraphedge jointlimit jointmotor jointrange jointspring jointtool joystick joystickevent joystickrange joysticks keyboard keyboardevent keyboardtextevent keyframeevent label layout layoutarea level libraryview linearaxisjoint linearaxisjointblock linearparticleanimator linkid listbox localmodifications lowpassnode mainconfig mainpropertyview mainwindow mainwindowtransformevent manipulatorjoint manipulatorjointblock manipulatortool manipulatortoolevent massoverride material materialblock materialblockproxy materialfactory materiallist menubar menubaritem mesh meshbuilder meshcollider meshparticleemitter messageboxevent metaarray metaarraywrapper metaattribute metacomposition metacompositionwrapper metacustomui metadatainheritance metadatainheritanceroot metadependency metadisplay metadropevent metaeditorgizmo metaeditorresource metaeditorscriptobject metagroup metainterface metalibraryevent metanetproperty metaoperations metaowner metapropertybasicfilter metapropertyeditor metapropertyfilter metapropertyrename metaresource metascriptshortcutattribute metascripttagattribute metaselection metaselectionrange metaserialization metaserializedproperty metashaderinput metastringserialization metatransform microphoneinputnode midievent modal modalbuttonevent modalconfirmevent model modulationnode mouse mousecapture mousedragevent mouseevent mousefiledropevent mousemanipulation multiconvexmesh multiconvexmeshcollider multiconvexmesheditor multiconvexmeshindexdata multiconvexmeshindexrange multiconvexmeshpoint multiconvexmeshpropertyviewinfo multiconvexmeshsubmeshdata multiconvexmeshsubmeshrange multiconvexmeshvertexdata multiconvexmeshvertexrange multidock multilinetext multimanager multirendertarget multisprite multispriteentry multispriteentryrange named netchannel netchannelconfig netchannelpropertychange netchanneltype neteventreceived neteventsent netgamestarted nethost nethostlistupdate nethostrange nethostrecord nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobject netobjectoffline netobjectonline netpeer netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netproperty netpropertyconfig netpropertyinfo netpropertyinfos netpropertytype netspace netuser netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged netuserrange nodeinfolistrange nodeprintinfo notifyevent nsquaredbroadphase objectconnectingtool objectevent objectlink objectlinkanchor objectlinkedge objectlinkevent objectlinkpointchangedevent objectlinkrange objectpollevent objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objectstore objecttrack objecttransformgizmo objecttransformgizmoevent objecttransformtool objecttranslategizmo objecttranslatetool objectview operation operationbatch operationlistrange operationqueue operationqueueevent orientation orientationbasisgizmo osfileselection osmousedropevent osmouseevent osshell oswindow oswindowevent panningnode parentingtool particle particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particleevent particlelistrange particlesystem particletwister particlewander phygunjoint phygunjointblock physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsengine physicsmaterial physicsmesh physicsmeshbuilder physicsmeshindexdata physicsmeshindexrange physicsmeshvertexdata physicsmeshvertexrange physicsraycastprovider physicssolverconfig physicsspace pitchnode plane pointforceeffect pointgravityeffect pointmassselectorsubtool pointselectorsubtool popup posenode positionjoint positionjointblock postaddresourceevent presolveblock presolveevent previewwidget previewwidgetfactory prismaticjoint prismaticjoint2d prismaticjoint2dblock prismaticjointblock progressbar progressevent projectdescription projectsettings propertyevent propertyoperation propertypath propertyview propertywidget propertywidgetobject pulleyjoint pulleyjointblock querymodifiedsaveevent quickhull3d raiselowertool randomcontext ratiolayout rawcontrolmapping ray raycaster raycastprovider reactive reactivespace reactiveviewport receiveddataevent recentprojects recordingnode rectangle referencecountedempty referencecountedeventobject referencecountedobject referencecountedsafeid32 referencecountedsafeid32eventobject referencecountedsafeid32object referencecountedsafeid64 referencecountedsafeid64eventobject referencecountedsafeid64object referencecountedthreadsafeid32 referencecountedthreadsafeid32eventobject referencecountedthreadsafeid32object referencecountedthreadsafeid64 referencecountedthreadsafeid64eventobject referencecountedthreadsafeid64object region relativevelocityjoint relativevelocityjointblock removedentry rendergroup rendergrouphierarchies rendergrouplist rendersettings rendertarget rendertasksevent resourcedisplayfunctions resourceeditors resourceevent resourcelibrary resourcelistevent resourcemetaoperations resourcemetaserialization resourcepackage resourcepackagedisplay resourcesystem resourcetable resourcetableentry resourcetableentryrange resourcetemplate resourcetemplatedisplay resourcetemplatesearch resourcetypesearch reverbnode revision revisions revolutebasisgizmo revolutejoint revolutejoint2d revolutejoint2dblock revolutejointblock richanimation richanimationbuilder rigidbody ringgizmo ringgizmoevent rootwidget ropecreatorsubtool rotategizmo rotategizmoupdateevent rotationbasisgizmo rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent rotationbasisgizmometatransform safeid32 safeid32eventobject safeid32object safeid64 safeid64eventobject safeid64object samplecurve samplersettings sapbroadphase saveaudionode savingevent scalegizmo scalegizmoupdateevent scenegraphsource scrollarea searchview searchviewelement searchviewevent segment selectionchangedevent selectionicon selectivenode selectorbutton selectorspringsubtool selecttool selecttoolfrustumevent sendableevent serializationfilter shaderinputs shaderinputsevent sharedcontent shortcuts showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter simpleanimation simpledebuggerlistener simplegizmobase simplesocket simplesound sizepolicies skeleton skinnedmodel sliceddefinition slider smoothsharpentool sound soundattenuator soundattenuatordisplay soundbuffer soundbuilder soundcue soundcuedisplay sounddisplay soundemitter soundemitterdisplay soundentry soundentrydisplay soundevent soundinstance soundinstanceevent soundinstancerange soundlistener soundnode sounds soundspace soundtag soundtagdisplay soundtagentry soundtagentrydisplay soundtags space spacemapvaluerange spaceobjects spacer spacerange sphere spherecollider sphericalparticleemitter spline splinebakedpoint splinebakedpoints splinecontrolpoint splinecontrolpoints splineevent splineparticleanimator splineparticleemitter splinesampledata splitter springcreatorsubtool springpointproxy springpointproxyproperty springselectorsubtool springsubtool sprite spritedata spriteframe spriteparticlesystem spritepreview spritesheetimporter spritesource spritesourcebuilder spritesourceeditor spritetext squaregizmo stacklayout staticaabbtreebroadphase stickjoint stickjointblock stresstest stresstestdialog stringcombobox stringnamedisplay subconvexmesh subrendergrouppass sweepresult sweepresultrange system tabarea tabmodifiedevent tabrenamedevent tagevent tcpsocket text textblock textbox textbuilder textbutton textcheckbox textcontent textdefinition texteditor texteditorconfig texteditorevent texterrorevent textevent textupdatedevent texture texturebuilder texturecontent texturedata textureinfo textureview thickness threadedwebrequest threadsafeid32 threadsafeid32eventobject threadsafeid64 threadsafeid64eventobject threadsafeid64object threadsafereferencecounted thrusteffect tileeditor2d tileeditor2ddrawtool tileeditor2dselecttool tileeditor2dsubtool tilemap tilemapsource tilepalettesource tilepalettesprite tilepaletteview tileview tileviewevent tileviewwidget timespace timesystem toggleiconbutton tool toolcontrol toolgizmoevent tooltip tooluievent torqueeffect tracker trackevent tracknode transform transformmetatransform translategizmo translategizmoupdateevent treeevent treerow treeview treeviewheaderaddedevent tweakables typeevent typenamedisplay uidocklayout uifilllayout uifocusevent uilayout uilegacytooltip uirootwidget uistacklayout uitransformupdateevent uiwidget uiwidgetcastresultsrange uiwidgetcomponenthierarchy uiwidgetrange unittestmousedropevent unittestmouseevent universaljoint universaljointblock updateevent uprightjoint uprightjointblock userconfig valueeditorfactory valueevent vertexbuffer vertexsemanticrange viewport viewportmouseevent viewporttextwidget volumenode vortexeffect webbrowser webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowsermanager webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsersetup webbrowsertextevent webbrowserurlevent webbrowserwidget webrequester webresponseevent weightedcomposite weightpaintertool weldjoint weldjointblock wheeljoint wheeljoint2d wheeljoint2dblock wheeljointblock widget widgetmanager windeffect window windowlaunchsettings windowsoswindow windowtabevent plasma plasmametaarrayanimationclips plasmametaarraycontentlibraryreferencearray plasmametaarraynetpropertyinfos plasmametaarrayrevisions plasmametaarraysounds plasmametaarraysoundtags lightningcompiledevent lightningcompileevent lightningcompilefragmentevent lightningcomponent lightningdocumentresource lightningevent lightningfragment lightningfragmentbuilder lightninglibraryresource lightningobject lightningpluginbuilder lightningpluginconfig lightningpluginlibrary lightningpluginsource lightningprecompilationevent lightningscript lightningscriptbuilder","title":"Class reference"},{"location":"reference/classes_by_tag_reference/","text":"# Component actionspace animationgraph archetyped area arrowgizmo audiosettings basesprite basicdirectioneffect basicpointeffect bone boxcollider boxparticleemitter buoyancyeffect camera cameraviewport capsulecollider collider component contentconfig convexmeshcollider creationtool customcollisioneventtracker customjoint customphysicseffect cylindercollider debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline debugsettings defaultgamesetup developerconfig drageffect dynamicmotor editorcameracontroller editorconfig editorflags editorsettings ellipsoidcollider fixedanglejoint floweffect forceeffect frameratesettings gearjoint gizmo gizmocreator gizmodrag gizmospace graphical graphicsspace gravityeffect griddraw heightmap heightmapcollider heightmapmodel heightmaptool hierarchy hierarchyspline ignorespaceeffects joint jointconfigoverride jointdebugdrawconfig jointlimit jointmotor jointspring jointtool linearaxisjoint linearparticleanimator linkid mainconfig manipulatorjoint manipulatortool massoverride meshcollider meshparticleemitter model mousecapture multiconvexmeshcollider multisprite named netobject netpeer netspace netuser objectconnectingtool objectlink objectlinkanchor objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objecttransformgizmo objecttransformtool objecttranslategizmo objecttranslatetool orientation orientationbasisgizmo parentingtool particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particlesystem particletwister particlewander phygunjoint physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsspace pointforceeffect pointgravityeffect positionjoint prismaticjoint prismaticjoint2d projectdescription projectsettings pulleyjoint randomcontext reactive reactivespace recentprojects region relativevelocityjoint revolutebasisgizmo revolutejoint revolutejoint2d rigidbody ringgizmo rotategizmo rotationbasisgizmo scalegizmo selectionicon selecttool sharedcontent simpleanimation simplegizmobase simplesocket simplesound skeleton skinnedmodel soundemitter soundlistener soundspace spaceobjects spherecollider sphericalparticleemitter splineparticleanimator splineparticleemitter sprite spriteparticlesystem spritetext squaregizmo stickjoint texteditorconfig thrusteffect tileeditor2d tilemap timespace torqueeffect transform translategizmo uidocklayout uifilllayout uilayout uirootwidget uistacklayout uiwidget uiwidgetcomponenthierarchy universaljoint uprightjoint userconfig vortexeffect webrequester weldjoint wheeljoint wheeljoint2d windeffect windowlaunchsettings lightningcomponent lightningpluginconfig # ContentMeta animationbuilder animationclip animationclips audiocontent audiooptions basetextbuilder binarybuilder binarycontent buildercomponent conflictoptions contentcomponent contentcomposition contentcopyright contenteditoroptions contenthistory contentitem contentitemmetaoperations contentlibrary contentnotes contentsystem contentsystemevent contenttags databuilder datacontent fontbuilder fontcontent generatedarchetype geometrycontent geometryimport geometryoptions geometryresourceentry imagecontent imageoptions importoptions keyframeevent meshbuilder physicsmeshbuilder resourcetemplate richanimation richanimationbuilder showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter soundbuilder spritedata spritesourcebuilder textbuilder textcontent texturebuilder texturecontent textureinfo trackevent tracknode plasmametaarrayanimationclips lightningfragmentbuilder lightningpluginbuilder lightningscriptbuilder # Core anyhandle anytype array_type asciiencoding boolean boolean2 boolean2x2 boolean2x3 boolean2x4 boolean3 boolean3x2 boolean3x3 boolean3x4 boolean4 boolean4x2 boolean4x3 boolean4x4 boundtype buildevent byte color colors console consoleevent debuggerevent delegateparameter delegateparameterrange delegatetype doubleinteger doublereal errorevent errortype eventdata eventhandler events exception exceptionevent executablestate fatalerrorevent field fieldrange filepath filestream function functionrange gettersetter gettersetterrange [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /]] hashmapkeyrange_key [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /]] hashmapvaluerange_value iencoding indirectiontype integer integer2 integer2x2 integer2x3 integer2x4 integer3 integer3x2 integer3x3 integer3x4 integer4 integer4x2 integer4x3 integer4x4 istream [[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key, value /]] library math member memberrange memoryleakevent multiplemethodsofthesamename multiprimitive null opcodeevent parseevent pluginevent processclass processstartinfo property_type propertyrange quaternion random real real2 real2x2 real2x3 real2x4 real3 real3x2 real3x3 real3x4 real4 real4x2 real4x3 real4x4 reflectionobject rune runeiterator string stringbuilder stringrange stringsplitrange type utf8encoding variable void wrapper # Editor addobjectwidget addresourcewindow anchoringsubtool animationeditor animationeditordata animationsettings animationtrackview arrowgizmo autocompletepopup backgroundtaskevent backgroundtasks bugreporterresponse calltippopup cogcommand colorevent colorscheme command consoletextevent consoleui contentpackage createdestroytool creationtool curvecontrolpoint curvedraggable curveevent curvetangent directproperty document documenteditor documentmanager dragselectsubtool editor editorcameracontroller editorevent editormain editorpackageloader editorviewport flattentool floatingcomposite formattedinplacetext generalsearchview gizmo gizmocreator gizmodrag gizmoevent gizmoraytestevent gizmospace gizmoupdateevent griddraw heightmanipulationtool heightmapimporter heightmapsubtool heightmaptool hotkeyeditor importbutton inplacetexteditor item itemgroup itemlist jointtool libraryview mainpropertyview manipulatortool manipulatortoolevent messageboxevent metacompositionwrapper metadropevent metapropertyeditor multiconvexmesheditor multiconvexmeshpoint multiconvexmeshpropertyviewinfo objectconnectingtool objectpollevent objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objecttransformgizmo objecttransformgizmoevent objecttransformtool objecttranslategizmo objecttranslatetool objectview orientationbasisgizmo parentingtool physicscarwheelbasisgizmo pointmassselectorsubtool pointselectorsubtool popup postaddresourceevent previewwidget previewwidgetfactory propertyview propertywidget propertywidgetobject raiselowertool removedentry rendergrouphierarchies resourceeditors resourcetemplatedisplay resourcetemplatesearch resourcetypesearch revolutebasisgizmo ringgizmo ringgizmoevent ropecreatorsubtool rotategizmo rotategizmoupdateevent rotationbasisgizmo rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent rotationbasisgizmometatransform scalegizmo scalegizmoupdateevent selectorspringsubtool selecttool selecttoolfrustumevent simpledebuggerlistener simplegizmobase smoothsharpentool springcreatorsubtool springpointproxy springpointproxyproperty springselectorsubtool springsubtool spriteframe spritepreview spritesheetimporter spritesourceeditor squaregizmo stresstest stresstestdialog texteditor texteditorevent textupdatedevent tileeditor2d tileeditor2ddrawtool tileeditor2dselecttool tileeditor2dsubtool tilepalettesource tilepalettesprite tilepaletteview tileview tileviewevent tileviewwidget tool toolcontrol toolgizmoevent tooluievent translategizmo translategizmoupdateevent treeevent treerow treeview treeviewheaderaddedevent uilegacytooltip valueeditorfactory valueevent viewporttextwidget weightedcomposite weightpaintertool # Engine action actiondelay actiongroup actions actionsequence actionset actionspace actionsystem animation animationgraph animationgraphevent animationnode archetype archetyped archetypeinstance area areaevent asyncprocess asyncprocessevent basicanimation blockingtaskevent buildinfo chainnode cog cogarchetypeextension cogarchetypepropertyfilter coghashsetrange coginitializer coginitializerevent cogmetadatainheritance cogmetadisplay cogmetaoperations cogmetaserialization cogmetatransform cognamerange cogpath cogpathevent cogpathmetaserialization cogreplaceevent cogserializationfilter colorgradient component contentconfig contentlibraryreference contentlibraryreferencearray crossblend dataevent datareplaceevent dataresource dataresourceinheritance debugdraw debugengineevent debugsettings developerconfig directblend documentationlibrary documentresource dualblendchainnode dualblendcrossblend dualblenddirectblend dualblendselectivenode editorconfig editorflags editorsettings engine environment eventdirectorywatcher factory fileeditevent frameratesettings gameevent gamepad gamepadevent gamepads gamesession gamesessionrange heightmap heightmapevent heightmapsource heightpatch hierarchy hierarchycomposition hierarchyevent hierarchylistrange hierarchylistreverserange hierarchynamerange hierarchyrange hierarchyspline inputdeviceevent job joystick joystickevent joystickrange joysticks keyboard keyboardevent keyboardtextevent level linkid mainconfig metadependency metaeditorscriptobject metainterface metaresource mouse named objectlink objectlinkanchor objectlinkedge objectlinkevent objectlinkpointchangedevent objectlinkrange objectstore objecttrack operation operationbatch operationlistrange operationqueue operationqueueevent osfileselection osmousedropevent osmouseevent osshell oswindow oswindowevent posenode progressevent projectdescription projectsettings propertyoperation rawcontrolmapping raycaster raycastprovider recentprojects rectangle resourcedisplayfunctions resourceevent resourcelibrary resourcemetaoperations resourcemetaserialization resourcepackage resourcepackagedisplay resourcesystem resourcetable resourcetableentry resourcetableentryrange samplecurve savingevent scenegraphsource selectivenode sharedcontent shortcuts simpleanimation space spacemapvaluerange spaceobjects spacerange spline splinebakedpoint splinebakedpoints splinecontrolpoint splinecontrolpoints splineevent splinesampledata system textblock texteditorconfig texterrorevent textevent thickness timespace timesystem tracker transform transformmetatransform tweakables updateevent userconfig windowlaunchsettings plasmametaarraycontentlibraryreferencearray lightningcompiledevent lightningcompileevent lightningcompilefragmentevent lightningdocumentresource lightninglibraryresource lightningpluginconfig lightningprecompilationevent # Event acquirenethostinfo alternatesearchcompletedevent animationgraphevent areaevent asyncprocessevent audiobytedataevent audiofloatdataevent backgroundtaskevent basecollisionevent blockingtaskevent bugreporterresponse castfilterevent chromepopupevent coginitializerevent cogpathevent cogreplaceevent collisionevent collisiongroupevent colorevent commandevent commandupdateevent connectionevent consoletextevent contentsystemevent contextmenuevent curveevent customaudionodeevent customjointevent customphysicseffectevent dataevent datareplaceevent debugengineevent editorevent event fileeditevent focusevent gameevent gamepadevent gizmoevent gizmoraytestevent gizmoupdateevent graphicalevent graphicalsortevent handleableevent heightmapevent hierarchyevent highlightborderevent inputdeviceevent jointevent joystickevent keyboardevent keyboardtextevent keyframeevent mainwindowtransformevent manipulatortoolevent messageboxevent metadropevent metalibraryevent midievent modalbuttonevent modalconfirmevent mousedragevent mouseevent mousefiledropevent netchannelpropertychange neteventreceived neteventsent netgamestarted nethostlistupdate nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobjectoffline netobjectonline netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged notifyevent objectevent objectlinkevent objectlinkpointchangedevent objectpollevent objecttransformgizmoevent operationqueueevent osfileselection osmousedropevent osmouseevent oswindowevent particleevent postaddresourceevent presolveevent progressevent propertyevent querymodifiedsaveevent receiveddataevent rendertasksevent resourceevent resourcelistevent ringgizmoevent rotategizmoupdateevent rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent savingevent scalegizmoupdateevent searchviewevent selectionchangedevent selecttoolfrustumevent sendableevent shaderinputsevent soundevent soundinstanceevent splineevent tabmodifiedevent tabrenamedevent tagevent texteditorevent texterrorevent textevent textupdatedevent tileviewevent toolgizmoevent tooluievent trackevent translategizmoupdateevent treeevent treeviewheaderaddedevent typeevent uifocusevent uitransformupdateevent updateevent valueevent viewportmouseevent webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsertextevent webbrowserurlevent webresponseevent windowtabevent lightningcompiledevent lightningcompileevent lightningcompilefragmentevent lightningevent lightningprecompilationevent # Gameplay cameraviewport chrome chromepopupevent defaultgamesetup gamewidget indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgefaceedgeindexarrayrange indexedhalfedgemesh indexedhalfedgemeshedgearray indexedhalfedgemeshedgearrayrange indexedhalfedgemeshfacearray indexedhalfedgemeshfacearrayrange indexedhalfedgemeshvertexarray indexedhalfedgemeshvertexarrayrange mousecapture mousefiledropevent orientation quickhull3d randomcontext reactive reactivespace reactiveviewport splineparticleanimator splineparticleemitter tilemap tilemapsource unittestmousedropevent unittestmouseevent viewportmouseevent webbrowser webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowsermanager webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsersetup webbrowsertextevent webbrowserurlevent webbrowserwidget plasma # Geometry aabb debugarc debugbox debugcapsule debugcircle debugcone debugcylinder debugfrustum debugline debuglinecross debugobb debugsphere debugtext debugtriangle frustum plane ray segment sphere # Graphics arrayhandleofmaterial arrayhandleofrendergroup atlas basesprite blendsettings blendsettingsmrt bone boxparticleemitter camera childrendergrouplist colortargetmrt debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline definitionset depthsettings font graphical graphicalentry graphicalentryrange graphicalevent graphicalrangeinterface graphicalsortevent graphics graphicsdriversupport graphicsengine graphicsraycastprovider graphicsspace heightmapmodel hidebasefilter imagedefinition indexbuffer linearparticleanimator material materialblock materialblockproxy materialfactory materiallist mesh meshparticleemitter model multirendertarget multisprite multispriteentry multispriteentryrange particle particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particleevent particlelistrange particlesystem particletwister particlewander rendergroup rendergrouplist rendersettings rendertarget rendertasksevent resourcelistevent samplersettings selectionicon shaderinputs shaderinputsevent skeleton skinnedmodel sliceddefinition sphericalparticleemitter sprite spriteparticlesystem spritesource spritetext subrendergrouppass textdefinition texture texturedata vertexbuffer vertexsemanticrange lightningfragment # Meta cogcomponentmeta editorindexedstringarray editorpropertyextension editorrange editorrotationbasis editorslider event eventobject ipaddress localmodifications metaarray metaarraywrapper metaattribute metacomposition metacustomui metadatainheritance metadatainheritanceroot metadisplay metaeditorgizmo metaeditorresource metagroup metalibraryevent metaoperations metaowner metapropertybasicfilter metapropertyfilter metapropertyrename metaselection metaselectionrange metaserializedproperty metashaderinput metatransform notifyevent objectevent propertyevent propertypath referencecountedempty referencecountedeventobject referencecountedobject referencecountedsafeid32 referencecountedsafeid32eventobject referencecountedsafeid32object referencecountedsafeid64 referencecountedsafeid64eventobject referencecountedsafeid64object referencecountedthreadsafeid32 referencecountedthreadsafeid32eventobject referencecountedthreadsafeid32object referencecountedthreadsafeid64 referencecountedthreadsafeid64eventobject referencecountedthreadsafeid64object revision revisions safeid32 safeid32eventobject safeid32object safeid64 safeid64eventobject safeid64object selectionchangedevent stringnamedisplay threadsafeid32 threadsafeid32eventobject threadsafeid64 threadsafeid64eventobject threadsafeid64object threadsafereferencecounted typeevent typenamedisplay plasmametaarrayrevisions # Networking acquirenethostinfo bitstream blockingwebrequest connectiondata connectionevent editingamefilter eventbundle eventrange metanetproperty netchannel netchannelconfig netchannelpropertychange netchanneltype neteventreceived neteventsent netgamestarted nethost nethostlistupdate nethostrange nethostrecord nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobject netobjectoffline netobjectonline netpeer netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netproperty netpropertyconfig netpropertyinfo netpropertyinfos netpropertytype netspace netuser netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged netuserrange receiveddataevent sendableevent simplesocket tcpsocket threadedwebrequest webrequester webresponseevent plasmametaarraynetpropertyinfos # Physics basecastfilter basecollisionevent basicdirectioneffect basicpointeffect boxcollider buoyancyeffect capsulecollider carwheelarray carwheelref castfilter castfilterevent castresult castresults castresultsarrayrange castresultsrange collider collisionendblock collisionevent collisionfilter collisionfilterblock collisiongroup collisiongroupevent collisionpersistedblock collisionstartblock collisiontable constraintconfigblock contactblock contactgraphedge contactpoint contactpointrange contactrange convexmesh convexmeshcollider customcollisioneventtracker customconstraintinfo customjoint customjointblock customjointevent customphysicseffect customphysicseffectevent cylindercollider drageffect dynamicmotor ellipsoidcollider fixedanglejoint fixedanglejointblock floweffect forceeffect gearjoint gearjointblock genericphysicsmesh gravityeffect heightmapcollider ignorespaceeffects joint jointconfigoverride jointcreator jointdebugdrawconfig jointevent jointgraphedge jointlimit jointmotor jointrange jointspring linearaxisjoint linearaxisjointblock manipulatorjoint manipulatorjointblock massoverride meshcollider multiconvexmesh multiconvexmeshcollider multiconvexmeshindexdata multiconvexmeshindexrange multiconvexmeshsubmeshdata multiconvexmeshsubmeshrange multiconvexmeshvertexdata multiconvexmeshvertexrange phygunjoint phygunjointblock physicscar physicscarwheel physicseffect physicsengine physicsmaterial physicsmesh physicsmeshindexdata physicsmeshindexrange physicsmeshvertexdata physicsmeshvertexrange physicsraycastprovider physicssolverconfig physicsspace pointforceeffect pointgravityeffect positionjoint positionjointblock presolveblock presolveevent prismaticjoint prismaticjoint2d prismaticjoint2dblock prismaticjointblock pulleyjoint pulleyjointblock region relativevelocityjoint relativevelocityjointblock revolutejoint revolutejoint2d revolutejoint2dblock revolutejointblock rigidbody spherecollider stickjoint stickjointblock subconvexmesh sweepresult sweepresultrange thrusteffect torqueeffect universaljoint universaljointblock uprightjoint uprightjointblock vortexeffect weldjoint weldjointblock wheeljoint wheeljoint2d wheeljoint2dblock wheeljointblock windeffect # Resource animation archetype atlas collisiongroup collisiontable colorgradient convexmesh dataresource definitionset documentresource font genericphysicsmesh heightmapsource imagedefinition level material mesh multiconvexmesh netchannelconfig netpropertyconfig physicsmaterial physicsmesh physicssolverconfig rendergroup resourcetable samplecurve sliceddefinition sound soundattenuator soundcue soundtag spritesource textblock textdefinition texture tilemapsource tilepalettesource lightningdocumentresource lightningfragment lightninglibraryresource lightningpluginlibrary lightningpluginsource lightningscript # Serialization metaserialization metastringserialization serializationfilter # Sound additivesynthnode addnoisenode adsrenvelope audio audiobytedataevent audiofloatdataevent audiosettings bandpassnode chorusnode compressornode customaudionode customaudionodeevent delaynode equalizernode expandernode flangernode generatedwavenode granularsynthnode highpassnode lowpassnode microphoneinputnode midievent modulationnode nodeinfolistrange nodeprintinfo panningnode pitchnode recordingnode reverbnode saveaudionode simplesound sound soundattenuator soundattenuatordisplay soundbuffer soundcue soundcuedisplay sounddisplay soundemitter soundemitterdisplay soundentry soundentrydisplay soundevent soundinstance soundinstanceevent soundinstancerange soundlistener soundnode sounds soundspace soundtag soundtagdisplay soundtagentry soundtagentrydisplay soundtags volumenode plasmametaarraysounds plasmametaarraysoundtags # SpatialPartition boundingboxbroadphase boundingspherebroadphase dynamicaabbtreebroadphase dynamicbroadphasepropertyextension ibroadphase nsquaredbroadphase sapbroadphase staticaabbtreebroadphase # UiWidget uidocklayout uifilllayout uifocusevent uilayout uirootwidget uistacklayout uitransformupdateevent uiwidget uiwidgetcastresultsrange uiwidgetcomponenthierarchy uiwidgetrange # Widget alternatesearchcompletedevent basescrollarea buttonbase checkbox combobox commandevent commandexecuter commandmanager commandupdateevent composite contextmenuentry contextmenuentrychildrenrange contextmenuentrycommand contextmenuentrydivider contextmenuentrymenu contextmenuevent docklayout edgedocklayout edittext filllayout focusevent gridlayout handleableevent highlightborderevent iconbutton imagewidget label layout layoutarea listbox mainwindow mainwindowtransformevent menubar menubaritem metascriptshortcutattribute metascripttagattribute modal modalbuttonevent modalconfirmevent mousedragevent mouseevent mousemanipulation multidock multilinetext multimanager progressbar querymodifiedsaveevent ratiolayout rootwidget scrollarea searchview searchviewelement searchviewevent selectorbutton sizepolicies slider spacer splitter stacklayout stringcombobox tabarea tabmodifiedevent tabrenamedevent tagevent text textbox textbutton textcheckbox textureview toggleiconbutton tooltip viewport widget widgetmanager window windowtabevent # WindowsShellSystem windowsoswindow # LightningScript lightningcomponent lightningevent lightningobject lightningpluginlibrary lightningpluginsource lightningscript","title":"Component"},{"location":"reference/classes_by_tag_reference/#component","text":"actionspace animationgraph archetyped area arrowgizmo audiosettings basesprite basicdirectioneffect basicpointeffect bone boxcollider boxparticleemitter buoyancyeffect camera cameraviewport capsulecollider collider component contentconfig convexmeshcollider creationtool customcollisioneventtracker customjoint customphysicseffect cylindercollider debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline debugsettings defaultgamesetup developerconfig drageffect dynamicmotor editorcameracontroller editorconfig editorflags editorsettings ellipsoidcollider fixedanglejoint floweffect forceeffect frameratesettings gearjoint gizmo gizmocreator gizmodrag gizmospace graphical graphicsspace gravityeffect griddraw heightmap heightmapcollider heightmapmodel heightmaptool hierarchy hierarchyspline ignorespaceeffects joint jointconfigoverride jointdebugdrawconfig jointlimit jointmotor jointspring jointtool linearaxisjoint linearparticleanimator linkid mainconfig manipulatorjoint manipulatortool massoverride meshcollider meshparticleemitter model mousecapture multiconvexmeshcollider multisprite named netobject netpeer netspace netuser objectconnectingtool objectlink objectlinkanchor objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objecttransformgizmo objecttransformtool objecttranslategizmo objecttranslatetool orientation orientationbasisgizmo parentingtool particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particlesystem particletwister particlewander phygunjoint physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsspace pointforceeffect pointgravityeffect positionjoint prismaticjoint prismaticjoint2d projectdescription projectsettings pulleyjoint randomcontext reactive reactivespace recentprojects region relativevelocityjoint revolutebasisgizmo revolutejoint revolutejoint2d rigidbody ringgizmo rotategizmo rotationbasisgizmo scalegizmo selectionicon selecttool sharedcontent simpleanimation simplegizmobase simplesocket simplesound skeleton skinnedmodel soundemitter soundlistener soundspace spaceobjects spherecollider sphericalparticleemitter splineparticleanimator splineparticleemitter sprite spriteparticlesystem spritetext squaregizmo stickjoint texteditorconfig thrusteffect tileeditor2d tilemap timespace torqueeffect transform translategizmo uidocklayout uifilllayout uilayout uirootwidget uistacklayout uiwidget uiwidgetcomponenthierarchy universaljoint uprightjoint userconfig vortexeffect webrequester weldjoint wheeljoint wheeljoint2d windeffect windowlaunchsettings lightningcomponent lightningpluginconfig # ContentMeta animationbuilder animationclip animationclips audiocontent audiooptions basetextbuilder binarybuilder binarycontent buildercomponent conflictoptions contentcomponent contentcomposition contentcopyright contenteditoroptions contenthistory contentitem contentitemmetaoperations contentlibrary contentnotes contentsystem contentsystemevent contenttags databuilder datacontent fontbuilder fontcontent generatedarchetype geometrycontent geometryimport geometryoptions geometryresourceentry imagecontent imageoptions importoptions keyframeevent meshbuilder physicsmeshbuilder resourcetemplate richanimation richanimationbuilder showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter soundbuilder spritedata spritesourcebuilder textbuilder textcontent texturebuilder texturecontent textureinfo trackevent tracknode plasmametaarrayanimationclips lightningfragmentbuilder lightningpluginbuilder lightningscriptbuilder # Core anyhandle anytype array_type asciiencoding boolean boolean2 boolean2x2 boolean2x3 boolean2x4 boolean3 boolean3x2 boolean3x3 boolean3x4 boolean4 boolean4x2 boolean4x3 boolean4x4 boundtype buildevent byte color colors console consoleevent debuggerevent delegateparameter delegateparameterrange delegatetype doubleinteger doublereal errorevent errortype eventdata eventhandler events exception exceptionevent executablestate fatalerrorevent field fieldrange filepath filestream function functionrange gettersetter gettersetterrange [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /]] hashmapkeyrange_key [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /]] hashmapvaluerange_value iencoding indirectiontype integer integer2 integer2x2 integer2x3 integer2x4 integer3 integer3x2 integer3x3 integer3x4 integer4 integer4x2 integer4x3 integer4x4 istream [[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key, value /]] library math member memberrange memoryleakevent multiplemethodsofthesamename multiprimitive null opcodeevent parseevent pluginevent processclass processstartinfo property_type propertyrange quaternion random real real2 real2x2 real2x3 real2x4 real3 real3x2 real3x3 real3x4 real4 real4x2 real4x3 real4x4 reflectionobject rune runeiterator string stringbuilder stringrange stringsplitrange type utf8encoding variable void wrapper # Editor addobjectwidget addresourcewindow anchoringsubtool animationeditor animationeditordata animationsettings animationtrackview arrowgizmo autocompletepopup backgroundtaskevent backgroundtasks bugreporterresponse calltippopup cogcommand colorevent colorscheme command consoletextevent consoleui contentpackage createdestroytool creationtool curvecontrolpoint curvedraggable curveevent curvetangent directproperty document documenteditor documentmanager dragselectsubtool editor editorcameracontroller editorevent editormain editorpackageloader editorviewport flattentool floatingcomposite formattedinplacetext generalsearchview gizmo gizmocreator gizmodrag gizmoevent gizmoraytestevent gizmospace gizmoupdateevent griddraw heightmanipulationtool heightmapimporter heightmapsubtool heightmaptool hotkeyeditor importbutton inplacetexteditor item itemgroup itemlist jointtool libraryview mainpropertyview manipulatortool manipulatortoolevent messageboxevent metacompositionwrapper metadropevent metapropertyeditor multiconvexmesheditor multiconvexmeshpoint multiconvexmeshpropertyviewinfo objectconnectingtool objectpollevent objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objecttransformgizmo objecttransformgizmoevent objecttransformtool objecttranslategizmo objecttranslatetool objectview orientationbasisgizmo parentingtool physicscarwheelbasisgizmo pointmassselectorsubtool pointselectorsubtool popup postaddresourceevent previewwidget previewwidgetfactory propertyview propertywidget propertywidgetobject raiselowertool removedentry rendergrouphierarchies resourceeditors resourcetemplatedisplay resourcetemplatesearch resourcetypesearch revolutebasisgizmo ringgizmo ringgizmoevent ropecreatorsubtool rotategizmo rotategizmoupdateevent rotationbasisgizmo rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent rotationbasisgizmometatransform scalegizmo scalegizmoupdateevent selectorspringsubtool selecttool selecttoolfrustumevent simpledebuggerlistener simplegizmobase smoothsharpentool springcreatorsubtool springpointproxy springpointproxyproperty springselectorsubtool springsubtool spriteframe spritepreview spritesheetimporter spritesourceeditor squaregizmo stresstest stresstestdialog texteditor texteditorevent textupdatedevent tileeditor2d tileeditor2ddrawtool tileeditor2dselecttool tileeditor2dsubtool tilepalettesource tilepalettesprite tilepaletteview tileview tileviewevent tileviewwidget tool toolcontrol toolgizmoevent tooluievent translategizmo translategizmoupdateevent treeevent treerow treeview treeviewheaderaddedevent uilegacytooltip valueeditorfactory valueevent viewporttextwidget weightedcomposite weightpaintertool # Engine action actiondelay actiongroup actions actionsequence actionset actionspace actionsystem animation animationgraph animationgraphevent animationnode archetype archetyped archetypeinstance area areaevent asyncprocess asyncprocessevent basicanimation blockingtaskevent buildinfo chainnode cog cogarchetypeextension cogarchetypepropertyfilter coghashsetrange coginitializer coginitializerevent cogmetadatainheritance cogmetadisplay cogmetaoperations cogmetaserialization cogmetatransform cognamerange cogpath cogpathevent cogpathmetaserialization cogreplaceevent cogserializationfilter colorgradient component contentconfig contentlibraryreference contentlibraryreferencearray crossblend dataevent datareplaceevent dataresource dataresourceinheritance debugdraw debugengineevent debugsettings developerconfig directblend documentationlibrary documentresource dualblendchainnode dualblendcrossblend dualblenddirectblend dualblendselectivenode editorconfig editorflags editorsettings engine environment eventdirectorywatcher factory fileeditevent frameratesettings gameevent gamepad gamepadevent gamepads gamesession gamesessionrange heightmap heightmapevent heightmapsource heightpatch hierarchy hierarchycomposition hierarchyevent hierarchylistrange hierarchylistreverserange hierarchynamerange hierarchyrange hierarchyspline inputdeviceevent job joystick joystickevent joystickrange joysticks keyboard keyboardevent keyboardtextevent level linkid mainconfig metadependency metaeditorscriptobject metainterface metaresource mouse named objectlink objectlinkanchor objectlinkedge objectlinkevent objectlinkpointchangedevent objectlinkrange objectstore objecttrack operation operationbatch operationlistrange operationqueue operationqueueevent osfileselection osmousedropevent osmouseevent osshell oswindow oswindowevent posenode progressevent projectdescription projectsettings propertyoperation rawcontrolmapping raycaster raycastprovider recentprojects rectangle resourcedisplayfunctions resourceevent resourcelibrary resourcemetaoperations resourcemetaserialization resourcepackage resourcepackagedisplay resourcesystem resourcetable resourcetableentry resourcetableentryrange samplecurve savingevent scenegraphsource selectivenode sharedcontent shortcuts simpleanimation space spacemapvaluerange spaceobjects spacerange spline splinebakedpoint splinebakedpoints splinecontrolpoint splinecontrolpoints splineevent splinesampledata system textblock texteditorconfig texterrorevent textevent thickness timespace timesystem tracker transform transformmetatransform tweakables updateevent userconfig windowlaunchsettings plasmametaarraycontentlibraryreferencearray lightningcompiledevent lightningcompileevent lightningcompilefragmentevent lightningdocumentresource lightninglibraryresource lightningpluginconfig lightningprecompilationevent # Event acquirenethostinfo alternatesearchcompletedevent animationgraphevent areaevent asyncprocessevent audiobytedataevent audiofloatdataevent backgroundtaskevent basecollisionevent blockingtaskevent bugreporterresponse castfilterevent chromepopupevent coginitializerevent cogpathevent cogreplaceevent collisionevent collisiongroupevent colorevent commandevent commandupdateevent connectionevent consoletextevent contentsystemevent contextmenuevent curveevent customaudionodeevent customjointevent customphysicseffectevent dataevent datareplaceevent debugengineevent editorevent event fileeditevent focusevent gameevent gamepadevent gizmoevent gizmoraytestevent gizmoupdateevent graphicalevent graphicalsortevent handleableevent heightmapevent hierarchyevent highlightborderevent inputdeviceevent jointevent joystickevent keyboardevent keyboardtextevent keyframeevent mainwindowtransformevent manipulatortoolevent messageboxevent metadropevent metalibraryevent midievent modalbuttonevent modalconfirmevent mousedragevent mouseevent mousefiledropevent netchannelpropertychange neteventreceived neteventsent netgamestarted nethostlistupdate nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobjectoffline netobjectonline netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged notifyevent objectevent objectlinkevent objectlinkpointchangedevent objectpollevent objecttransformgizmoevent operationqueueevent osfileselection osmousedropevent osmouseevent oswindowevent particleevent postaddresourceevent presolveevent progressevent propertyevent querymodifiedsaveevent receiveddataevent rendertasksevent resourceevent resourcelistevent ringgizmoevent rotategizmoupdateevent rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent savingevent scalegizmoupdateevent searchviewevent selectionchangedevent selecttoolfrustumevent sendableevent shaderinputsevent soundevent soundinstanceevent splineevent tabmodifiedevent tabrenamedevent tagevent texteditorevent texterrorevent textevent textupdatedevent tileviewevent toolgizmoevent tooluievent trackevent translategizmoupdateevent treeevent treeviewheaderaddedevent typeevent uifocusevent uitransformupdateevent updateevent valueevent viewportmouseevent webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsertextevent webbrowserurlevent webresponseevent windowtabevent lightningcompiledevent lightningcompileevent lightningcompilefragmentevent lightningevent lightningprecompilationevent # Gameplay cameraviewport chrome chromepopupevent defaultgamesetup gamewidget indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgefaceedgeindexarrayrange indexedhalfedgemesh indexedhalfedgemeshedgearray indexedhalfedgemeshedgearrayrange indexedhalfedgemeshfacearray indexedhalfedgemeshfacearrayrange indexedhalfedgemeshvertexarray indexedhalfedgemeshvertexarrayrange mousecapture mousefiledropevent orientation quickhull3d randomcontext reactive reactivespace reactiveviewport splineparticleanimator splineparticleemitter tilemap tilemapsource unittestmousedropevent unittestmouseevent viewportmouseevent webbrowser webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowsermanager webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsersetup webbrowsertextevent webbrowserurlevent webbrowserwidget plasma # Geometry aabb debugarc debugbox debugcapsule debugcircle debugcone debugcylinder debugfrustum debugline debuglinecross debugobb debugsphere debugtext debugtriangle frustum plane ray segment sphere # Graphics arrayhandleofmaterial arrayhandleofrendergroup atlas basesprite blendsettings blendsettingsmrt bone boxparticleemitter camera childrendergrouplist colortargetmrt debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline definitionset depthsettings font graphical graphicalentry graphicalentryrange graphicalevent graphicalrangeinterface graphicalsortevent graphics graphicsdriversupport graphicsengine graphicsraycastprovider graphicsspace heightmapmodel hidebasefilter imagedefinition indexbuffer linearparticleanimator material materialblock materialblockproxy materialfactory materiallist mesh meshparticleemitter model multirendertarget multisprite multispriteentry multispriteentryrange particle particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particleevent particlelistrange particlesystem particletwister particlewander rendergroup rendergrouplist rendersettings rendertarget rendertasksevent resourcelistevent samplersettings selectionicon shaderinputs shaderinputsevent skeleton skinnedmodel sliceddefinition sphericalparticleemitter sprite spriteparticlesystem spritesource spritetext subrendergrouppass textdefinition texture texturedata vertexbuffer vertexsemanticrange lightningfragment # Meta cogcomponentmeta editorindexedstringarray editorpropertyextension editorrange editorrotationbasis editorslider event eventobject ipaddress localmodifications metaarray metaarraywrapper metaattribute metacomposition metacustomui metadatainheritance metadatainheritanceroot metadisplay metaeditorgizmo metaeditorresource metagroup metalibraryevent metaoperations metaowner metapropertybasicfilter metapropertyfilter metapropertyrename metaselection metaselectionrange metaserializedproperty metashaderinput metatransform notifyevent objectevent propertyevent propertypath referencecountedempty referencecountedeventobject referencecountedobject referencecountedsafeid32 referencecountedsafeid32eventobject referencecountedsafeid32object referencecountedsafeid64 referencecountedsafeid64eventobject referencecountedsafeid64object referencecountedthreadsafeid32 referencecountedthreadsafeid32eventobject referencecountedthreadsafeid32object referencecountedthreadsafeid64 referencecountedthreadsafeid64eventobject referencecountedthreadsafeid64object revision revisions safeid32 safeid32eventobject safeid32object safeid64 safeid64eventobject safeid64object selectionchangedevent stringnamedisplay threadsafeid32 threadsafeid32eventobject threadsafeid64 threadsafeid64eventobject threadsafeid64object threadsafereferencecounted typeevent typenamedisplay plasmametaarrayrevisions # Networking acquirenethostinfo bitstream blockingwebrequest connectiondata connectionevent editingamefilter eventbundle eventrange metanetproperty netchannel netchannelconfig netchannelpropertychange netchanneltype neteventreceived neteventsent netgamestarted nethost nethostlistupdate nethostrange nethostrecord nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobject netobjectoffline netobjectonline netpeer netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netproperty netpropertyconfig netpropertyinfo netpropertyinfos netpropertytype netspace netuser netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged netuserrange receiveddataevent sendableevent simplesocket tcpsocket threadedwebrequest webrequester webresponseevent plasmametaarraynetpropertyinfos # Physics basecastfilter basecollisionevent basicdirectioneffect basicpointeffect boxcollider buoyancyeffect capsulecollider carwheelarray carwheelref castfilter castfilterevent castresult castresults castresultsarrayrange castresultsrange collider collisionendblock collisionevent collisionfilter collisionfilterblock collisiongroup collisiongroupevent collisionpersistedblock collisionstartblock collisiontable constraintconfigblock contactblock contactgraphedge contactpoint contactpointrange contactrange convexmesh convexmeshcollider customcollisioneventtracker customconstraintinfo customjoint customjointblock customjointevent customphysicseffect customphysicseffectevent cylindercollider drageffect dynamicmotor ellipsoidcollider fixedanglejoint fixedanglejointblock floweffect forceeffect gearjoint gearjointblock genericphysicsmesh gravityeffect heightmapcollider ignorespaceeffects joint jointconfigoverride jointcreator jointdebugdrawconfig jointevent jointgraphedge jointlimit jointmotor jointrange jointspring linearaxisjoint linearaxisjointblock manipulatorjoint manipulatorjointblock massoverride meshcollider multiconvexmesh multiconvexmeshcollider multiconvexmeshindexdata multiconvexmeshindexrange multiconvexmeshsubmeshdata multiconvexmeshsubmeshrange multiconvexmeshvertexdata multiconvexmeshvertexrange phygunjoint phygunjointblock physicscar physicscarwheel physicseffect physicsengine physicsmaterial physicsmesh physicsmeshindexdata physicsmeshindexrange physicsmeshvertexdata physicsmeshvertexrange physicsraycastprovider physicssolverconfig physicsspace pointforceeffect pointgravityeffect positionjoint positionjointblock presolveblock presolveevent prismaticjoint prismaticjoint2d prismaticjoint2dblock prismaticjointblock pulleyjoint pulleyjointblock region relativevelocityjoint relativevelocityjointblock revolutejoint revolutejoint2d revolutejoint2dblock revolutejointblock rigidbody spherecollider stickjoint stickjointblock subconvexmesh sweepresult sweepresultrange thrusteffect torqueeffect universaljoint universaljointblock uprightjoint uprightjointblock vortexeffect weldjoint weldjointblock wheeljoint wheeljoint2d wheeljoint2dblock wheeljointblock windeffect # Resource animation archetype atlas collisiongroup collisiontable colorgradient convexmesh dataresource definitionset documentresource font genericphysicsmesh heightmapsource imagedefinition level material mesh multiconvexmesh netchannelconfig netpropertyconfig physicsmaterial physicsmesh physicssolverconfig rendergroup resourcetable samplecurve sliceddefinition sound soundattenuator soundcue soundtag spritesource textblock textdefinition texture tilemapsource tilepalettesource lightningdocumentresource lightningfragment lightninglibraryresource lightningpluginlibrary lightningpluginsource lightningscript # Serialization metaserialization metastringserialization serializationfilter # Sound additivesynthnode addnoisenode adsrenvelope audio audiobytedataevent audiofloatdataevent audiosettings bandpassnode chorusnode compressornode customaudionode customaudionodeevent delaynode equalizernode expandernode flangernode generatedwavenode granularsynthnode highpassnode lowpassnode microphoneinputnode midievent modulationnode nodeinfolistrange nodeprintinfo panningnode pitchnode recordingnode reverbnode saveaudionode simplesound sound soundattenuator soundattenuatordisplay soundbuffer soundcue soundcuedisplay sounddisplay soundemitter soundemitterdisplay soundentry soundentrydisplay soundevent soundinstance soundinstanceevent soundinstancerange soundlistener soundnode sounds soundspace soundtag soundtagdisplay soundtagentry soundtagentrydisplay soundtags volumenode plasmametaarraysounds plasmametaarraysoundtags # SpatialPartition boundingboxbroadphase boundingspherebroadphase dynamicaabbtreebroadphase dynamicbroadphasepropertyextension ibroadphase nsquaredbroadphase sapbroadphase staticaabbtreebroadphase # UiWidget uidocklayout uifilllayout uifocusevent uilayout uirootwidget uistacklayout uitransformupdateevent uiwidget uiwidgetcastresultsrange uiwidgetcomponenthierarchy uiwidgetrange # Widget alternatesearchcompletedevent basescrollarea buttonbase checkbox combobox commandevent commandexecuter commandmanager commandupdateevent composite contextmenuentry contextmenuentrychildrenrange contextmenuentrycommand contextmenuentrydivider contextmenuentrymenu contextmenuevent docklayout edgedocklayout edittext filllayout focusevent gridlayout handleableevent highlightborderevent iconbutton imagewidget label layout layoutarea listbox mainwindow mainwindowtransformevent menubar menubaritem metascriptshortcutattribute metascripttagattribute modal modalbuttonevent modalconfirmevent mousedragevent mouseevent mousemanipulation multidock multilinetext multimanager progressbar querymodifiedsaveevent ratiolayout rootwidget scrollarea searchview searchviewelement searchviewevent selectorbutton sizepolicies slider spacer splitter stacklayout stringcombobox tabarea tabmodifiedevent tabrenamedevent tagevent text textbox textbutton textcheckbox textureview toggleiconbutton tooltip viewport widget widgetmanager window windowtabevent # WindowsShellSystem windowsoswindow # LightningScript lightningcomponent lightningevent lightningobject lightningpluginlibrary lightningpluginsource lightningscript","title":"#  Component"},{"location":"reference/command_reference/","text":"# About |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Add Add a new content item to the project Tags Shortcut Menu Selection Editor Ctrl + N # AddComponent Add component to object Tags Shortcut Menu Selection No Tags Ctrl + M # AlignCameraToSelectedCamera Aligns the editor camera to the selected camera Tags Shortcut Menu Selection Camera No Keyboard Shortcut # AlignSelectedCameraToCamera Aligns the selected camera to the editor's camera Tags Shortcut Menu Selection Camera No Keyboard Shortcut # Animator Show the Animator Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Animator # ArchiveProject Archive a project into a file Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ArchiveProject # BackupProject Back up project to time stamped archive Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> BackupProject # BroadPhaseTracker Used to compare broad phase performance Tags Shortcut Menu Selection Editor No Keyboard Shortcut # Browser Show the Browser Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Browser # BuildVersion Print this version date and revision number in the console and copies them to the clipboard Tags Shortcut Menu Selection Editor No Keyboard Shortcut # CenterSelected Center the object in the view Tags Shortcut Menu Selection Select F name=Select> CenterSelected # Chat A place where users can talk to each other and share content Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Chat # ClearConsole Clears output text from the console Tags Shortcut Menu Selection Editor No Keyboard Shortcut # ClearObjectStore Clear the Object Store on this computer Tags Shortcut Menu Selection Editor No Keyboard Shortcut # Commands Show the Command List Viewer Tags Shortcut Menu Selection Windows Ctrl + Shift + C name=Windows> Commands # Console Toggle the Console Window Tags Shortcut Menu Selection Windows ~ name=Windows> Console # Copy Copy objects to clipboard Tags Shortcut Menu Selection Edit Ctrl + C name=Edit> Copy # CrashEngine |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # CreateBlockTower |Tags|Shortcut|Menu Selection| |---|---|---| |Create | No Keyboard Shortcut | name=Create> CreateBlockTower | # CreateCamera Create Camera Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateCamera # CreateCube Create Cube Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateCube # CreateCylinder Create Cylinder Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateCylinder # CreateDirectionalLight Create DirectionalLight Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateDirectionalLight # CreateDirectionalLightShadows Create DirectionalLightShadows Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateDirectionalLightShadows # CreateGrid Create Grid Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateGrid # CreatePointLight Create PointLight Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreatePointLight # CreatePyramid |Tags|Shortcut|Menu Selection| |---|---|---| |Create | No Keyboard Shortcut | name=Create> CreatePyramid | # CreateSphere Create Sphere Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSphere # CreateSpline Create Spline Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpline # CreateSplineParticleSystem Create SplineParticleSystem Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSplineParticleSystem # CreateSpotLight Create SpotLight Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpotLight # CreateSpotLightShadows Create SpotLightShadows Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpotLightShadows # CreateSprite Create Sprite Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSprite # CreateSpriteParticles Create SpriteParticles Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpriteParticles # CreateSpriteText Create SpriteText Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpriteText # CreateTeeter |Tags|Shortcut|Menu Selection| |---|---|---| |Create | No Keyboard Shortcut | name=Create> CreateTeeter | # CreateTower |Tags|Shortcut|Menu Selection| |---|---|---| |Create | No Keyboard Shortcut | name=Create> CreateTower | # CreateTransform Create Transform Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateTransform # CreateWall |Tags|Shortcut|Menu Selection| |---|---|---| |Create | No Keyboard Shortcut | name=Create> CreateWall | # CreateWedge Create Wedge Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateWedge # CreationTool Enables the CreationTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # Cut Cut selected objects and save them to clipboard Tags Shortcut Menu Selection Edit Ctrl + X name=Edit> Cut # DebugShaderTranslation |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Delete Delete selected objects Tags Shortcut Menu Selection Edit Delete name=Edit> Delete # DetachSelected |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # DisableAutoProjectScreenshot Disables automatically taking a project screen shot every time you save. Use the 'TakeProjectScreenshot' command to take the screen shot manually. Tags Shortcut Menu Selection No Tags No Keyboard Shortcut # Documentation |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # DumpMemoryDebuggerStats |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Duplicate Duplicate select objects Tags Shortcut Menu Selection Edit Ctrl + D name=Edit> Duplicate # EditColorScheme Edit color scheme Tags Shortcut Menu Selection Editor No Keyboard Shortcut # EnableAutoProjectScreenshot Enables automatically taking a project screen shot every time you save. Tags Shortcut Menu Selection No Tags No Keyboard Shortcut # Exit Exit the editor Tags Shortcut Menu Selection File Alt + F4 # ExportAndPlayGame Export the game and play it Tags Shortcut Menu Selection Export No Keyboard Shortcut # ExportContent Export content to a folder for an installer Tags Shortcut Menu Selection Export No Keyboard Shortcut # ExportContentPackage |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ExportGame Export game to a standalone exe Tags Shortcut Menu Selection Export No Keyboard Shortcut # ExportHeightMapToObj |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ExportTypeList |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # FindAll Show the Find/Replace Window to search all documents Tags Shortcut Menu Selection Windows Ctrl + Shift + F name=Windows> FindAll # FindNext Show the Find/Replace Window to search the current document Tags Shortcut Menu Selection Windows Ctrl + F name=Windows> FindNext # FixArchetypeTransforms |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ForceCompileAllShaders |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # FrameSelected Center and frame the object in the view Tags Shortcut Menu Selection Select FF name=Select> FrameSelected # GoToDefinition Using the current cursor in the current open script we will attempt to go to the definition of that type, member, or variable Tags Shortcut Menu Selection Script F12 # Graph Displays a graph Tags Shortcut Menu Selection Editor No Keyboard Shortcut # GroupSelected Create a transform at the center of the selected objects and parent them to it Tags Shortcut Menu Selection Editor Ctrl + G # HeightMapTool Enables the HeightMapTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # Help Display documentation for the engine Tags Shortcut Menu Selection Editor No Keyboard Shortcut # HideConsole Hide the Console Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> HideConsole # HideSelected Hide selected objects Tags Shortcut Menu Selection Hide No Keyboard Shortcut # HostLightningDebugger |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ImportContentPackage |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ImportGroup |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ImportHeightMap |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ImportSpriteSheet |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # JointTool Enables the JointTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # Library Show the Library Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Library # ManipulatorTool Enables the Manipulator Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # Market Show the Plasma Market where you can download content for your projects Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Market # Mode2D |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Mode3D |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # MoveToLookPoint |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # NewProject Create a new project Tags Shortcut Menu Selection Project Ctrl + Shift + N name=Project> NewProject # NextSelection |Tags|Shortcut|Menu Selection| |---|---|---| |Select | Alt + Right | name=Select> NextSelection | # Objects Show the Objects Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Objects # OnExportCommandsList |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # OpenProject Open a project Tags Shortcut Menu Selection Project Ctrl + O name=Project> OpenProject # OpenTestWidgets |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # OperationHistory Show the Operation Queue Tags Shortcut Menu Selection Windows Ctrl + Shift + O name=Windows> OperationHistory # ParentToPrimary Parents all selected objects to the primary selected object (highlighted in orange) Tags Shortcut Menu Selection Editor No Keyboard Shortcut # ParentingTool Enables the ParentingTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # Paste Paste objects on clipboard to space Tags Shortcut Menu Selection Edit Ctrl + V name=Edit> Paste # PauseGame Pause / resume the game Tags Shortcut Menu Selection Game F6 # Performance Displays a performance graph Tags Shortcut Menu Selection Editor No Keyboard Shortcut # PlayGame Play the game with the current level Tags Shortcut Menu Selection Game F5 # PlayNewGame Play the game in an additional window Tags Shortcut Menu Selection Game Ctrl + F5 # PlayUnitTestFile |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # PreviousSelection |Tags|Shortcut|Menu Selection| |---|---|---| |Select | Alt + Left | name=Select> PreviousSelection | # Properties Show the Property Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Properties # RecordUnitTestFile |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Redo Redo last undo operation Tags Shortcut Menu Selection Edit Ctrl + Y name=Edit> Redo # ReloadProject Reload the current project Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ReloadProject # RenderGroupHierarchies Show the RenderGroup Hierarchies Window Tags Shortcut Menu Selection Editor No Keyboard Shortcut # ReplaceAll Show the Find/Replace Window to replace in all documents Tags Shortcut Menu Selection Windows Ctrl + Shift + H name=Windows> ReplaceAll # ReplaceNext Show the Find/Replace Window to replace in the current document Tags Shortcut Menu Selection Windows Ctrl + H name=Windows> ReplaceNext # ReportBug Report a bug Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> ReportBug # ResaveAllResources |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # ResetCamera Resets the camera to look at the origin Tags Shortcut Menu Selection Camera No Keyboard Shortcut # ResetTransform |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Restart Restart the editor Tags Shortcut Menu Selection File No Keyboard Shortcut # RotateTool Enables the Rotate Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # RunUnitTests |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # RunLightningDebugger |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # SaveProject Save project and all resources Tags Shortcut Menu Selection Project Ctrl + S name=Project> SaveProject # ScaleTool Enables the Scale Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # SelectAll Select all in scene Tags Shortcut Menu Selection Select Shift + A name=Select> SelectAll # SelectAllInTree Select all in tree Tags Shortcut Menu Selection Select No Keyboard Shortcut name=Select> SelectAllInTree # SelectChild Select the first child Tags Shortcut Menu Selection Select No Keyboard Shortcut name=Select> SelectChild # SelectEditorConfig Show the Editor Config in the Property Window Tags Shortcut Menu Selection Select Shift + E name=Select> SelectEditorConfig # SelectGame Select game Tags Shortcut Menu Selection Select Shift + G name=Select> SelectGame # SelectNone Select no objects Tags Shortcut Menu Selection Select Shift + D name=Select> SelectNone # SelectParent Select parent of current object Tags Shortcut Menu Selection Select Shift + W name=Select> SelectParent # SelectProject Show the Project in the Property Window Tags Shortcut Menu Selection Select Shift + P name=Select> SelectProject # SelectRoot Select root of tree Tags Shortcut Menu Selection Select Shift + Q name=Select> SelectRoot # SelectSibling Select the next sibling Tags Shortcut Menu Selection Select No Keyboard Shortcut name=Select> SelectSibling # SelectSpace Select the space Tags Shortcut Menu Selection Select Shift + S name=Select> SelectSpace # SelectTool Picks objects in the scene. Tags Shortcut Menu Selection Tool No Keyboard Shortcut # ShowConsole Show the Console Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> ShowConsole # ShowContentOutput Show the project's content output folder Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ShowContentOutput # ShowCoreLibrary |Tags|Shortcut|Menu Selection| |---|---|---| |Tool | No Keyboard Shortcut | | # ShowProjectFolder Show the folder the project is located in the file system Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ShowProjectFolder # SoundNodeGraph Show the Sound Node Graph Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> SoundNodeGraph # SpringTools |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # StepGame Step the game forward one frame Tags Shortcut Menu Selection Game F7 # StopGame Stop the game Tags Shortcut Menu Selection Game F8 # StressTest Stress test the engine by doing a bunch of random stuff Tags Shortcut Menu Selection Editor No Keyboard Shortcut # TakeProjectScreenshot Takes a screen shot for the project. Disables automatically taking a project screen shot every time you save. Tags Shortcut Menu Selection No Tags No Keyboard Shortcut # TileEditor2D Enables the TileEditor2D tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # ToggleFullScreen |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # Tools Show the Tools Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Tools # TranslateTool Enables the Translate Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut # Undo Undo last operation Tags Shortcut Menu Selection Edit Ctrl + Z name=Edit> Undo # UnhideAll Unhide all objects Tags Shortcut Menu Selection Hide No Keyboard Shortcut # UnhideSelected Unhide selected objects Tags Shortcut Menu Selection Hide No Keyboard Shortcut # VolumeMeter Show the Volume Meter Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> VolumeMeter # WriteBuildInfo |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | | # PlasmaHub |Tags|Shortcut|Menu Selection| |---|---|---| |No Tags | No Keyboard Shortcut | |","title":"About"},{"location":"reference/enum_reference/","text":"|Enum|| |---| | ActionExecuteMode | | ActionState | | AnimationBlendMode | | AnimationBlendType | | AnimationPlayMode | | ArrowHeadType | | AtomFilter | | AudioCueImport | | AudioFileLoadType | | AudioLatency | | AudioMixTypes | | Authority | | AuthorityMode | | AxisDirection | | BasicNetType | | BasisType | | BlendEquation | | BlendFactor | | BlendMode | | BoundType | | Buttons | | CameraDragMode | | CapsuleScalingMode | | CastFilterState | | CellIndexType | | CogPathPreference | | ColliderType | | CollisionFilterBlockType | | CollisionFilterCollisionFlags | | CollisionType | | ConflictAction | | ConnectResponse | | ConnectResponseMode | | ConstraintPositionCorrection | | ControlMode | | ConvergenceState | | CullMode | | Cursor | | CurveType | | DefaultAddOnFilters | | DepthMode | | DetectionMode | | DisconnectReason | | DockArea | | Ease | | EditorMode | | Enum | | eUpdateTransformState | | FalloffCurveType | | Filter | | FlickedStick | | FragmentCountFilter | | FragmentFilter | | GeometryValue | | GizmoBasis | | GizmoDragMode | | GizmoGrab | | GizmoGrabMode | | GizmoPivot | | GizmoSnapMode | | GranularSynthWindows | | GraphicalSortMethod | | HeightTextureSelect | | HeightTool | | HorizontalAlignment | | ImageImport | | ImportFrames | | ImportMode | | IncludeMode | | IndicatorSide | | InputDevice | | InternalKeyState | | InternetProtocol | | JointFrameOfReference | | JointToolTypes | | JointTypes | | Keys | | KeyState | | LauncherAutoRunMode | | LinkState | | LinkStatus | | Location | | LoopingMode | | MeshEmitMode | | MeshImport | | Mode2DStates | | MouseButtons | | MultiConvexMeshAutoComputeMethod | | MultiConvexMeshAutoComputeMode | | MultiConvexMeshDrawMode | | MultiConvexMeshSnappingMode | | NetRefreshResult | | NetRole | | NetUserAddResponse | | Network | | ObjectIndex | | OrientationBases | | PerspectiveMode | | PhysicsContactTangentTypes | | PhysicsEffectEndCondition | | PhysicsEffectInterpolationType | | PhysicsEffectType | | PhysicsImport | | PhysicsIslandPreProcessingMode | | PhysicsIslandType | | PhysicsMeshType | | PhysicsSolverPositionCorrection | | PhysicsSolverSubType | | PhysicsSolverType | | Placement | | PlayGameOptions | | PrimitiveType | | Receipt | | ReceiveState | | ReliabilityMode | | ReplicationPhase | | RigidBodyDynamicState | | RouteMode | | ScaleConversion | | SendsEvents | | SerializationMode | | ShadowResolution | | SoundPlayMode | | SoundSelectMode | | SplineAnimatorMode | | SplineType | | SpringDebugDrawMode | | SpringDebugDrawType | | SpringSortOrder | | SpringSubTools | | SpriteFill | | SpriteGeometryMode | | SpriteOrigin | | SpriteParticleAnimationMode | | SpriteParticleGeometryMode | | SpriteParticleSortMode | | SpriteSampling | | StencilMode | | StencilOp | | StoreResult | | StreamOrigin | | StreamType | | SynthWaveType | | SystemSpace | | TabWidth | | TcpSocketBind | | TextAlign | | TextureAddressing | | TextureAnisotropy | | TextureCompareFunc | | TextureCompareMode | | TextureCompression | | TextureFace | | TextureFiltering | | TextureFormat | | TextureMipMapping | | TextureType | | TileEditor2DSubToolType | | TimeDisplay | | TimeMode | | ToolTipColorScheme | | TrackType | | TransferMode | | TransmissionDirection | | TransportProtocol | | UiDockMode | | UiFocusDirection | | UiHighlightColorMode | | UiHighlightColorOp | | UiHighlightMouseMode | | UiHorizontalAlignment | | UiScrollBarAxis | | UiSizePolicy | | UiStackLayoutDirection | | UiVerticalAlignment | | UpdateMode | | UserConnectResponse | | Verbosity | | VertexElementType | | VertexSemantic | | VerticalAlignment | | ViewportScaling | | WebBrowserModifiers | | WindowState | | WindowStyleFlags | #### ActionExecuteMode EnumValue Description FrameUpdate LogicUpdate #### ActionState EnumValue Description Completed Running #### AnimationBlendMode EnumValue Description Auto Manual #### AnimationBlendType EnumValue Description Normalized Standard #### AnimationPlayMode EnumValue Description Loop Pingpong PlayOnce #### ArrowHeadType EnumValue Description Arrow Cube #### AtomFilter EnumValue Description AngularAxis LinearAxis #### AudioCueImport EnumValue Description Grouped None PerSound #### AudioFileLoadType The choices for how to load and play an audio file. EnumValue Description Auto This will choose whether to stream a file depending on its length. Files longer than 30 seconds will be streamed from memory, and those longer than 1 minute will be streamed from file. StreamFromFile The audio data will be read from the file and decompressed as it plays. StreamFromMemory The compressed audio data will be read into memory when the Sound resource is loaded and will be decompressed as it plays. Uncompressed The audio data will be decompressed and held in memory when the Sound resource is loaded. #### AudioLatency The latency setting used by the audio system. EnumValue Description High Audio will have a higher latency. This can fix some audio problems in some cases. Low The default setting, where audio will have a low amount of latency. #### AudioMixTypes The possible settings for the number of channels used by the audio system when creating audio. EnumValue Description AutoDetect The audio system will match its channels to the default output device. FiveOne Audio will be produced using a typical 5.1 speaker configuration. Mono Audio will be produced using only a single channel. Quad Audio will be produced using two left channels and two right channels. SevenOne Audio will be produced using a typical 7.1 speaker configuration. Stereo Audio will be produced using two channels, one for the left speaker and one for the right. #### Authority EnumValue Description Client Server #### AuthorityMode EnumValue Description Dynamic Fixed #### AxisDirection Defines a primary direction for an axis. EnumValue Description X Y Z #### BasicNetType Use Archetype \"ResourceId:Name\" String as ReplicaType? Otherwise we will use ResourceId u64 as ReplicaType (much more efficient). This impacts bandwidth performance when first spawning/cloning new NetObject types to remote peers. EnumValue Description Boolean Boolean2 Boolean3 Boolean4 Byte DoubleInteger DoubleReal Integer Integer2 Integer3 Integer4 Other Quaternion Real Real2 Real2x2 Real3 Real3x3 Real4 Real4x4 String #### BasisType EnumValue Description NegativeX NegativeY NegativeZ PositiveX PositiveY PositiveZ #### BlendEquation How pixel values (source) are combined with the active render target's values (destination). EnumValue Description Add Source is added to destination. Max The maximum value between source and destination is kept. Min The minimum value between source and destination is kept. ReverseSubtract Destination is subtracted from source. Subtract Source is subtracted from destination. #### BlendFactor Values that can be multiplied with the operands used in the blend equation. EnumValue Description DestAlpha The alpha channel of the destination value. DestColor The RGB of the destination value. InvDestAlpha One minus the alpha channel of the destination value. InvDestColor One minus the RGB of the destination value. InvSourceAlpha One minus the alpha channel of the source value. InvSourceColor One minus the RGB of the source value. One Multiplied by one, operand is unchanged. SourceAlpha The alpha channel of the source value. SourceAlphaSaturate Minimum of source alpha and one minus destination alpha. SourceColor The RGB of the source value. Plasma #### BlendMode If blend equations are applied when writing to a render target. EnumValue Description Disabled Blending is not used. Enabled Blending is used, color and alpha use the same equations. Separate Blending is used, color and alpha use separate equations. #### BoundType EnumValue Description PrismJoint PrismJoint2d RevJoint RevJoint2d #### Buttons EnumValue Description A AnyButton B Back DpadDown DpadDownFiltered DpadLeft DpadLeftFiltered DpadRight DpadRightFiltered DpadUp DpadUpFiltered LeftShoulder LeftThumb RightShoulder RightThumb Start StickDown StickLeft StickRight StickUp X Y #### CameraDragMode EnumValue Description NotActive Pan Rotation Zoom #### CapsuleScalingMode How should a capsule collider respond to non-uniform scale? EnumValue Description PreserveHeight Scale applies to the height of the cylinder. PreserveScale Scale applies to the total size of the capsule. #### CastFilterState Controls custom cast filtering via the CastFilterEvent . Allows custom filter logic per object. EnumValue Description Accept Always accept this object for testing. DefaultBehavior Run the rest of the filtering logic on the cast filter. Reject Always reject this object for testing. #### CellIndexType EnumValue Description Absoulte Local #### CogPathPreference EnumValue Description Absolute CogRelative SpaceRelative #### ColliderType All possible collider types. Needed mostly for collision detection. The order is somewhat important as collision detection currently assumes that all simple shapes (primitive types) are before the complex shapes. EnumValue Description cBox cCapsule cConvexMesh cCylinder cEllipsoid cHeightMap cInvalid cMesh cMultiConvexMesh cSize cSphere #### CollisionFilterBlockType What kind of filter block this is. These blocks are used to send out/override collision group events of certain types (collision started, etc...) EnumValue Description CollisionEndedBlock CollisionPersistedBlock CollisionStartedBlock PreSolveBlock #### CollisionFilterCollisionFlags Controls what parts of collision detection/resolution are run for a CollisionGroup pair. EnumValue Description Resolve Run both collision detection and resolution as normal. SkipDetection Don't run collision detection. No events will be sent. SkipResolution Don't run collision resolution. Detection will still be run so events might be sent out. #### CollisionType Used to determine what kind of collision this is during event sending. EnumValue Description CollisionEnded CollisionPersisted CollisionStarted #### ConflictAction EnumValue Description Replace Skip #### ConnectResponse EnumValue Description Accept Deny DenyFull DenyTimeout #### ConnectResponseMode EnumValue Description Accept Custom Deny #### ConstraintPositionCorrection What kind of position correction behavior is desired for constraint or constraint type. EnumValue Description Baumgarte Use a baumgarte penalty force. Inherit Use the global position correction method. PostStabilization Directly fix position errors via translation. #### ControlMode EnumValue Description FirstPerson Orbit ZPlane #### ConvergenceState EnumValue Description Active None Resting #### CullMode How triangles should be culled (not rendered) depending on which way they face. EnumValue Description BackFace Clockwise triangles are not rendered. Disabled Triangles are always rendered. FrontFace Counter clockwise triangles are not rendered. #### Cursor Standard Mouse Cursors. EnumValue Description Arrow Cross Hand Invisible SizeAll SizeNESW SizeNS SizeNWSE SizeWE TextBeam Wait #### CurveType EnumValue Description BSpline CatmullRom Linear #### DefaultAddOnFilters EnumValue Description AllAngularAxes AllAxes AllLinearAxes SingleAngularAxis SingleAxis SingleLinearAxis #### DepthMode How pixels depth values should be tested to determine if the pixel renders. EnumValue Description Disabled No depth testing. Read Depth values are compared to the depth buffer. Write Depth values are compared to the depth buffer, if comparison succeeds the new value is written to the buffer. #### DetectionMode EnumValue Description Assume Automatic Manual Manumatic #### DisconnectReason EnumValue Description Latency Request Timeout #### DockArea EnumValue Description BotTool Bottom Center Count Floating Left Right Top TopTool #### Ease EnumValue Description BackIn BackInOut BackOut BounceIn BounceInOut BounceOut ElasticIn ElasticInOut ElasticOut Linear QuadIn QuadInOut QuadOut SinIn SinInOut SinOut WarpIn WarpInOut WarpOut #### EditorMode EnumValue Description Mode2D Mode3D #### Enum EnumValue Description #### eUpdateTransformState Internal enum used for determining what kind of transform update is happening. EnumValue Description cInitialize cUpdate #### FalloffCurveType The type of curve used for attenuating volume by SoundAttenuators. EnumValue Description Custom Sets the volume reduction using a SampleCurve resource. Linear Volume reduces linearly with distance. Log Volume reduces logarithmically, mimicking sound in real life. Sine Volume reduces linearly at first then slowly. SquareRoot Volume reduces quickly at first then linearly. Squared Volume reduces slowly at first then linearly. #### Filter EnumValue Description ActiveOffset DefaultOffset FilterFlag #### FlickedStick EnumValue Description Left None Right #### FragmentCountFilter EnumValue Description FiveFragments FourFragments OneFragment SixFragments ThreeFragments TwoFragments #### FragmentFilter EnumValue Description FreeAngularFragment FreeLinearFragment NoFreeAxesFragment SingleFragment #### GeometryValue EnumValue Description Albedo Depth Metallic None Normal Roughness Specular #### GizmoBasis EnumValue Description Local World #### GizmoDragMode EnumValue Description Line Plane ViewPlane #### GizmoGrab EnumValue Description Hold Toggle #### GizmoGrabMode EnumValue Description Hold Toggle #### GizmoPivot EnumValue Description Average Center Primary #### GizmoSnapMode EnumValue Description Relative WorldAxes WorldGrid #### GranularSynthWindows Types of windows (volume envelopes) that can be used for individual grains generated by the GranularSynthNode . EnumValue Description Linear A triangle-shaped linear envelope. Does not use attack and release times. Parabolic A smoothly curved envelope. Does not use attack and release times. RaisedCosine Uses cosine curves to smoothly ramp up and down during attack and release times. Trapezoid Uses linear ramps during attack and release times. More efficient than RaisedCosine but not as smooth. #### GraphicalSortMethod Method of sorting for determining the draw order of graphicals. EnumValue Description BackToFrontView Uses the distance in the view direction, furthest to nearest. FrontToBackView Uses the distance in the view direction, nearest to furthest. GraphicalSortValue Uses the sort value on the graphical component, lowest to highest. NegativeToPositiveX Uses the world space X-coordinate. NegativeToPositiveY Uses the world space Y-coordinate. NegativeToPositiveZ Uses the world space Z-coordinate. None Not sorted, draw order is undefined. PositiveToNegativeX Uses the world space X-coordinate. PositiveToNegativeY Uses the world space Y-coordinate. PositiveToNegativeZ Uses the world space Z-coordinate. SortEvent An event is sent on CameraViewport every frame for custom logic to determine the sort value. #### HeightTextureSelect EnumValue Description Texture0 Texture1 Texture2 Texture3 #### HeightTool EnumValue Description CreateDestroy Flatten RaiseLower SmoothSharpen WeightPainter #### HorizontalAlignment EnumValue Description Center Left Right #### ImageImport EnumValue Description Sprites Textures #### ImportFrames EnumValue Description AllFrames SelectedFrames #### ImportMode EnumValue Description FitToPatches MaintainAspectRatio #### IncludeMode EnumValue Description Children OnlyRoot #### IndicatorSide EnumValue Description Bottom Left Right Top #### InputDevice EnumValue Description Gamepad Joystick Keyboard Mouse #### InternalKeyState EnumValue Description KeyHeld KeyNotHeld KeyPressed KeyReleased #### InternetProtocol EnumValue Description Both Unspecified V4 V6 #### JointFrameOfReference EnumValue Description ObjectA ObjectB #### JointToolTypes EnumValue Description FixedAngleJoint GearJoint LinearAxisJoint ObjectLink PositionJoint PrismaticJoint PrismaticJoint2d PulleyJoint RevoluteJoint RevoluteJoint2d StickJoint UniversalJoint UprightJoint WeldJoint WheelJoint WheelJoint2d #### JointTypes EnumValue Description CustomJoint FixedAngleJoint GearJoint LinearAxisJoint ManipulatorJoint PhyGunJoint PositionJoint PrismaticJoint PrismaticJoint2d PulleyJoint RelativeVelocityJoint RevoluteJoint RevoluteJoint2d StickJoint UniversalJoint UprightJoint WeldJoint WheelJoint WheelJoint2d #### Keys EnumValue Description A Add Alt Apostrophe B Back Backslash C Capital Comma Control D Decimal Delete Divide Down E Eight End Enter Equal Escape F F1 F10 F11 F12 F2 F3 F4 F5 F6 F7 F8 F9 Five Four G H Home I Insert J K L Left LeftBracket M Minus Multiply N Nine None NumPad0 NumPad1 NumPad2 NumPad3 NumPad4 NumPad5 NumPad6 NumPad7 NumPad8 NumPad9 O One P PageDown PageUp Period Q R Right RightBracket S Semicolon Seven Shift Six Slash Space Subtract T Tab Three Tilde Two U Unknown Up V W X Y Z Zero #### KeyState EnumValue Description Down Repeated Up #### LauncherAutoRunMode EnumValue Description IfInstalled InstallAndRun None #### LinkState EnumValue Description Connected Disconnected ReceivedConnectRequest ReceivedDisconnectNotice ReceivedNegativeConnectResponse SentConnectRequest SentDisconnectNotice SentNegativeConnectResponse Unspecified #### LinkStatus EnumValue Description AttemptingConnection Connected Disconnected Unspecified #### Location EnumValue Description BottomCenter BottomLeft BottomRight Center CenterLeft CenterRight TopCenter TopLeft TopRight #### LoopingMode EnumValue Description Default Looping Once #### MeshEmitMode EnumValue Description Edge Face Vertex #### MeshImport EnumValue Description MultiMesh NoMesh SingleMesh #### Mode2DStates Represents what dimensions a RigidBody should operate in (how many degrees of freedom it has by default). EnumValue Description InheritFromSpace Use the Mode2D state on the PhysicsSpace . This allows easy changing of the entire space between 2D/3D. Mode2D Restricts the object's movement through physics to 2D. This lowers the object's degrees of freedom down to 3 (x-linear, y-linear, z-angular). Mode3D A regular 3D object (6 degrees of freedom). #### MouseButtons As the extra mouse buttons are typically Back and Forward they have been named accordingly. EnumValue Description Left Middle None Right XOneBack XTwoForward #### MultiConvexMeshAutoComputeMethod EnumValue Description MarchingSquares Pixels #### MultiConvexMeshAutoComputeMode EnumValue Description Alpha Intensity #### MultiConvexMeshDrawMode EnumValue Description Edges Filled None #### MultiConvexMeshSnappingMode EnumValue Description Always IfClose None #### NetRefreshResult Network refresh result. EnumValue Description DirectBasicHostInfo ExtraHostInfo IndirectBasicHostInfo NoResponse #### NetRole EnumValue Description Client MasterServer Offline Server Unspecified #### NetUserAddResponse Network user add response. EnumValue Description Accept Deny #### Network Network specification. EnumValue Description Internet LAN #### ObjectIndex EnumValue Description IndexA IndexB #### OrientationBases EnumValue Description Custom ForwardNegativeZUpY ForwardXUpY ForwardXUpZ ForwardYUpZ ForwardZUpY #### PerspectiveMode Method of 3D scene projection to a 2D plane. EnumValue Description Orthographic Projection is parallel with the viewing direction. Perspective Projection towards a single view point, making distant objects appear smaller. #### PhysicsContactTangentTypes How to compute the tangents for a contact point. Mainly for testing. EnumValue Description OrthonormalTangents RandomTangents VelocityTangents #### PhysicsEffectEndCondition Describes how interpolation is performed (if at all) outside of a physics effect's max distance. EnumValue Description ClampToMax Clamps to the max force value ContinueFalloff Continue the regular interpolation method NoEffect Don't apply a force past the max distance #### PhysicsEffectInterpolationType Describes how force values are interpolated between min/max values. EnumValue Description Linear Linearly interpolate between values. Quadratic Quadratically interpolate between values (uses t^2). #### PhysicsEffectType EnumValue Description Buoyancy Custom Drag Flow Force Gravity Invalid PointForce PointGravity Thrust Torque Vortex Wind #### PhysicsImport EnumValue Description ConvexMesh NoMesh StaticMesh #### PhysicsIslandPreProcessingMode What kind of pre-processing strategy should be used for merging islands. EnumValue Description ColliderCount ConstraintCount None #### PhysicsIslandType How should islands be built. Internal for testing (mostly legacy). EnumValue Description Composites ForcedOne Kinematics #### PhysicsMeshType EnumValue Description ConvexMesh PhysicsMesh #### PhysicsSolverPositionCorrection What kind of position correction should be applied for any constraint that is set to Inherit. EnumValue Description Baumgarte Use a baumgarte penalty force. PostStabilization Directly fix position errors via translation. #### PhysicsSolverSubType What kind of solver technique to use for position correction. Mainly for testing. EnumValue Description BasicSolving BlockSolving #### PhysicsSolverType What kind of a constraint solver should be used. A few pre-defined types meant for comparing performance. EnumValue Description Basic GenericBasic Normal Threaded #### Placement EnumValue Description CameraLocation LookAtPlane LookAtPoint OnTop PlaneXY ViewAtDepth #### PlayGameOptions EnumValue Description MultipleInstances SingleInstance #### PrimitiveType EnumValue Description Lines Points Triangles #### Receipt EnumValue Description ACK EXPIRED MAYBE NAK #### ReceiveState EnumValue Description cCloseConnection cDataReceived cNextConnection #### ReliabilityMode EnumValue Description Reliable Unreliable #### ReplicationPhase EnumValue Description Change Initialization Uninitialization #### RigidBodyDynamicState What kind of dynamics this body should have. Determines if forces are integrated and if collisions are resolved. EnumValue Description Dynamic A regular body that can be affected by forces. Kinematic An infinite mass body that approximates velocity when moved. Used for moving platforms and other movable infinite mass objects. Static An infinite mass body. Will not move via dynamics. #### RouteMode EnumValue Description Exclude Include #### ScaleConversion EnumValue Description CentimeterToInches CentimeterToMeter Custom InchesToCentimenters InchesToMeters MetersToCentimeters MetersToInches #### SendsEvents EnumValue Description False True #### SerializationMode EnumValue Description All Changed #### ShadowResolution EnumValue Description High Low Medium #### SoundPlayMode Whether a SoundCue should play once or loop continuously. EnumValue Description Looping The sound will loop continuously between its LoopStartTime and LoopEndTime. Single The sound will play once to its EndTime and then stop. #### SoundSelectMode Whether a SoundCue should pick a Sound to play randomly or sequentially. EnumValue Description Random The SoundCue will pick a Sound at random, taking into account the Weight values. Sequential Each time the SoundCue is played it will pick the next Sound in the order they are displayed. #### SplineAnimatorMode EnumValue Description Exact Spring #### SplineType EnumValue Description BSpline CatmullRom Linear #### SpringDebugDrawMode When should debug drawing of a spring system happen. EnumValue Description Always Always debug draw. None Never debug draw. WhenNoMesh Only debug draw if no graphical mesh is present. #### SpringDebugDrawType How should springs be drawn? EnumValue Description Normal Draw all springs equally (same color). Sorted Draw the springs in sorted order. This alters the color based upon the distance from an anchor point. #### SpringSortOrder How should springs be sorted for solving. This effects the convergence rate of a system. EnumValue Description BottomUp Sort so that springs further away from anchors are solved first. None No sorting is preserved. TopDown Sort so that springs closer to anchors are solved first. #### SpringSubTools EnumValue Description Anchoring PointSelector RopeCreator SpringCreator SpringSelector #### SpriteFill EnumValue Description NineSlice Stretch Tiled #### SpriteGeometryMode How the sprite quad is aligned in 3D space. EnumValue Description ViewPlane Aligned to always face the camera. ZPlane Aligned with the object's z axis. #### SpriteOrigin EnumValue Description BottomCenter BottomLeft Center Custom UpperLeft #### SpriteParticleAnimationMode EnumValue Description Looping Single #### SpriteParticleGeometryMode Sprite Particle System Enums. EnumValue Description Beam Billboarded FaceVelocity Flat Outward #### SpriteParticleSortMode EnumValue Description BackToFrontView FrontToBackView NegativeToPositiveX NegativeToPositiveY NegativeToPositiveZ None PositiveToNegativeX PositiveToNegativeY PositiveToNegativeZ #### SpriteSampling EnumValue Description Linear Nearest #### StencilMode How stencil buffer values should be tested to determine if a pixel renders. EnumValue Description Disabled No stencil testing. Enabled Stencil values will be tested with the active settings. Separate Stencil values will be tested, frontface/backface triangles will use separate settings. #### StencilOp Operations that can be applied to the stencil buffer. EnumValue Description Decrement Decrements the current stencil buffer value. Clamps to 0. DecrementWrap Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum value when decrementing a stencil buffer value of plasma. Increment Increments the current stencil buffer value. Clamps to the maximum value. IncrementWrap Increments the current stencil buffer value. Wraps stencil buffer value to plasma when incrementing the maximum value. Invert Bitwise inverts the current stencil buffer value. Keep Keeps the current value. Replace Sets the stencil buffer value to the test value. Zero #### StoreResult EnumValue Description Added Failed Replaced #### StreamOrigin EnumValue Description Current End Start #### StreamType EnumValue Description StandardError StandardInput StandardOutput #### SynthWaveType Types of sound waves that can be used by SoundNodes. EnumValue Description Noise White noise produced by getting random values between -1 and 1. SawWave Audio generated by a saw wave (values go linearly from -1 to 1 then jump back to -1). SineWave Audio generated by a Sine wave. SquareWave Audio generated by a square wave (values are either -1 or 1). TriangleWave Audio generated by a triangle wave (values go linearly from -1 to 1 and back again). #### SystemSpace EnumValue Description LocalSpace WorldSpace #### TabWidth EnumValue Description FourSpaces TwoSpaces #### TcpSocketBind EnumValue Description Any Loopback #### TextAlign How text is positioned relative to the object position. EnumValue Description Center Center is aligned with the position. Left Left side is aligned with the position. Right Right side is aligned with the position. #### TextureAddressing How to address the texture with uv's outside of the range [0, 1] Clamp - Uses the last pixel at the border of the image Repeat - Wraps to the opposite side and continues to sample the image Mirror - Similar to Repeat but reverses image direction. EnumValue Description Clamp Mirror Repeat #### TextureAnisotropy How pixels are sampled when the ratio of pixels viewed along its u/v directions is not 1:1 (Typically when viewing a texture at an angle) The options represent how large of a ratio will be accounted for when sampling x1 = 1:1 (no anisotropy), x16 = 16:1 (high anisotropy), x16 being the best quality. EnumValue Description x1 x16 x2 x4 x8 #### TextureCompareFunc Method of comparison used when testing values against textures/buffers. EnumValue Description Always Compare always succeeds. Equal Compares if test value is equal to buffer value. Greater Compares if test value is greater than buffer value. GreaterEqual Compares if test value is greater than or equal to buffer value. Less Compares if test value is less than buffer value. LessEqual Compares if test value is less than or equal to buffer value. Never Compare never succeeds. NotEqual Compares if test value is not equal to buffer value. #### TextureCompareMode If texture sampling should do comparison. EnumValue Description Disabled Regular texture sampling. Enabled Sampling returns the result of a comparison. #### TextureCompression Block compression, lossy hardware supported formats with very high memory savings None - No compression will be used BC1 - RGB stored at 1/2 byte per pixel Used for color maps that don't need alpha, normal maps BC2 - RGB w/ low precision alpha stored at 1 byte per pixel No common usages BC3 - RGB w/ alpha stored at 1 byte per pixel Used for color maps that need alpha BC4 - R stored at 1/2 byte per pixel Used for single channel maps like height, specular, roughness BC5 - RG stored at 1 byte per pixel Used for two channel maps like normals with reconstructed Z BC6 - RGB floats stored at 1 byte per pixel Used for high dynamic range images. EnumValue Description BC1 BC2 BC3 BC4 BC5 BC6 None #### TextureFace EnumValue Description NegativeX NegativeY NegativeZ None PositiveX PositiveY PositiveZ #### TextureFiltering How pixels are sampled when viewing image at a different size Nearest - Gets the closest pixel unaltered Bilinear - Gets the 4 closest pixels and linearly blends between them Trilinear - Same as bilinear with an additional linear blend between mip levels. EnumValue Description Bilinear Nearest Trilinear #### TextureFormat EnumValue Description Depth16 Depth24 Depth24Stencil8 Depth32 Depth32f Depth32fStencil8Pad24 None R16 R16f R32f R8 RG16 RG16f RG32f RG8 RGB16 RGB16f RGB32f RGB8 RGBA16 RGBA16f RGBA32f RGBA8 SRGB8 SRGB8A8 #### TextureMipMapping Progressively scaled down versions of the image are produced to preserve image integrity when viewed at smaller scales None - No mipmaps are generated PreGenerated - Mipmaps are generated by the engine Uses higher quality filtering than the gpu Required for cubemaps in order to get perspective correct filtering over face edges GpuGenerated - Mipmaps are generated by the gpu at load time. EnumValue Description GpuGenerated None PreGenerated #### TextureType Type of the texture, must match sampler type in shaders Texture2D - Standard 2 dimensional texture TextureCube - Uses texture as a cubemap Faces are extracted from the image using aspect ratio to determine layout. EnumValue Description Texture2D TextureCube #### TileEditor2DSubToolType EnumValue Description DrawTool SelectionTool #### TimeDisplay EnumValue Description Frames Timecodes #### TimeMode EnumValue Description ActualFrametime FixedFrametime #### ToolTipColorScheme EnumValue Description Default Gray Green Orange Red Yellow #### TrackType EnumValue Description Component Invalid Object Property SubProperty #### TransferMode EnumValue Description Immediate Ordered Sequenced #### TransmissionDirection EnumValue Description Incoming Outgoing Unspecified #### TransportProtocol EnumValue Description Tcp Udp Unspecified #### UiDockMode EnumValue Description Bottom Left Right Top #### UiFocusDirection EnumValue Description Backward Forward #### UiHighlightColorMode EnumValue Description Hierarchy Local #### UiHighlightColorOp EnumValue Description Add Multiply Set #### UiHighlightMouseMode EnumValue Description Enter EnterHierarchy Hover #### UiHorizontalAlignment EnumValue Description Center Left Right #### UiScrollBarAxis EnumValue Description X Y #### UiSizePolicy EnumValue Description Auto Fixed Flex #### UiStackLayoutDirection EnumValue Description BottomToTop LeftToRight RightToLeft TopToBottom #### UiVerticalAlignment EnumValue Description Bottom Center Top #### UpdateMode EnumValue Description None TranslateRoot TranslateSelf #### UserConnectResponse EnumValue Description Accept Deny Pending #### Verbosity EnumValue Description Detailed Minimal #### VertexElementType EnumValue Description Byte Half NormByte NormShort Real Short #### VertexSemantic EnumValue Description Aux0 Aux1 Aux2 Aux3 Aux4 Aux5 Bitangent BoneIndices BoneWeights Color ColorAux None Normal Position Tangent Uv UvAux #### VerticalAlignment EnumValue Description Bottom Center Top #### ViewportScaling How the viewport should be sized within the window size. EnumValue Description Exact Viewport is not scaled. Fill Viewport fills the whole size. LargestMultiple Viewport is the largest multiple of the set resolution that fits in the window. Letterbox Viewport aspect ratio is always preserved. #### WebBrowserModifiers EnumValue Description Alt CapsLock Command Control IsKeyPad IsLeft IsRight LeftMouse MiddleMouse NumLock RightMouse Shift #### WindowState The state of the window for minimizing / maximizing. EnumValue Description Fullscreen Maximized Minimized Restore Windowed #### WindowStyleFlags EnumValue Description ClientOnly Close MainWindow NotVisible OnTaskBar Resizable TitleBar","title":"Enum reference"},{"location":"reference/event_reference/","text":"# Event List Event EventType AcquireBasicNetHostInfo acquirenethostinfo AcquireExtraNetHostInfo acquirenethostinfo AnimationBlendEnded animationgraphevent AnimationEnded animationgraphevent AnimationLooped animationgraphevent AreaChanged areaevent PartialStandardErrorResponse asyncprocessevent PartialStandardOutputResponse asyncprocessevent MicrophoneCompressedByteData audiobytedataevent MicrophoneUncompressedFloatData audiofloatdataevent CastFilterCallback castfilterevent OperationRedone ChangedHistoryView OperationUndone ChangedHistoryView AllObjectsInitialized coginitializerevent CogPathCogChanged cogpathevent CollisionEnded collisionevent CollisionPersisted collisionevent CollisionStarted collisionevent GroupCollisionEnded collisiongroupevent GroupCollisionPersisted collisiongroupevent GroupCollisionStarted collisiongroupevent CommandExecute commandevent ConnectionCompleted connectionevent ConnectionFailed connectionevent Disconnected connectionevent ContextMenuCreated contextmenuevent CustomAudioNodeSamplesNeeded customaudionodeevent ComputeCustomJointInfo customjointevent ApplyCustomPhysicsEffect customphysicseffectevent CustomPhysicsEffectPrecalculatePhase customphysicseffectevent AnimationPostUpdate event CameraControllerUpdated event ChildrenOrderChanged event EditSpaces event GizmoObjectsDuplicated event RotationBasisGizmoBegin event RotationBasisGizmoEnd event RotationBasisGizmoModified event SelectionChanged event SelectionFinal event StandardErrorFinished event StandardOutputFinished event ToolActivate event ToolDeactivate event ToolDraw event GameFocusIn gameevent GameFocusOut gameevent GameLoad gameevent GameQuit gameevent GameRequestQuit gameevent GameSetup gameevent GameStarted gameevent LevelStarted gameevent ButtonDown gamepadevent ButtonUp gamepadevent GamepadStickFlicked gamepadevent GizmoPreDrag gizmoevent MouseEnterGizmo gizmoevent MouseEnterGizmoHierarchy gizmoevent MouseExitGizmo gizmoevent MouseExitGizmoHierarchy gizmoevent GizmoModified gizmoupdateevent ObjectTransformGizmoStart gizmoupdateevent EnterView graphicalevent EnterViewAny graphicalevent ExitView graphicalevent ExitViewAll graphicalevent GraphicalSort graphicalsortevent Closing handleableevent Attached hierarchyevent ChildAttached hierarchyevent ChildDetached hierarchyevent Detached hierarchyevent JointExceedImpulseLimit jointevent JointLowerLimitReached jointevent JointUpperLimitReached jointevent JoystickButtonDown joystickevent JoystickButtonUp joystickevent JoystickFound joystickevent JoystickLost joystickevent JoystickUpdated joystickevent HoverKeyDown keyboardevent HoverKeyPreview keyboardevent HoverKeyRepeated keyboardevent HoverKeyUp keyboardevent KeyDown keyboardevent KeyRepeated keyboardevent KeyUp keyboardevent TextTyped keyboardtextevent MainWindowTransformUpdated mainwindowtransformevent ManipulatorToolEnd manipulatortoolevent ManipulatorToolModified manipulatortoolevent ManipulatorToolStart manipulatortoolevent MetaDrop metadropevent MetaDropTest metadropevent MetaDropUpdate metadropevent MIDIModWheel midievent MIDINoteOff midievent MIDINoteOn midievent MIDIOtherControl midievent MIDIPitchWheel midievent MIDIVolume midievent MouseFileDrop mousefiledropevent NetChannelIncomingPropertyChanged netchannelpropertychange NetChannelIncomingPropertyInitialized netchannelpropertychange NetChannelIncomingPropertyUninitialized netchannelpropertychange NetChannelOutgoingPropertyChanged netchannelpropertychange NetChannelOutgoingPropertyInitialized netchannelpropertychange NetChannelOutgoingPropertyUninitialized netchannelpropertychange NetEventReceived neteventreceived NetEventSent neteventsent NetGameStarted netgamestarted NetHostListDiscovered nethostlistupdate NetHostListRefreshed nethostlistupdate NetHostRecordDiscovered nethostrecordevent NetHostRecordExpired nethostrecordevent NetHostRecordUpdate nethostrecordevent NetHostDiscovered nethostupdate NetHostRefreshed nethostupdate NetLevelStarted netlevelstarted NetLinkConnected netlinkconnected NetLinkDisconnected netlinkdisconnected NetGameOffline netobjectoffline NetObjectOffline netobjectoffline NetSpaceOffline netobjectoffline NetUserOffline netobjectoffline NetGameOnline netobjectonline NetObjectOnline netobjectonline NetSpaceOnline netobjectonline NetUserOnline netobjectonline NetPeerClosed netpeerclosed NetPeerOpened netpeeropened NetPeerReceivedConnectRequest netpeerreceivedconnectrequest NetPeerReceivedConnectResponse netpeerreceivedconnectresponse NetPeerReceivedUserAddRequest netpeerreceiveduseraddrequest NetPeerReceivedUserAddResponse netpeerreceiveduseraddresponse NetPeerSentConnectRequest netpeersentconnectrequest NetPeerSentConnectResponse netpeersentconnectresponse NetPeerSentUserAddRequest netpeersentuseraddrequest NetPeerSentUserAddResponse netpeersentuseraddresponse NetUserAcquiredObjectOwnership netuseracquiredobjectownership NetUserLostObjectOwnership netuserlostobjectownership NetUserOwnerChanged netuserownerchanged AllParticlesDead objectevent CogDelayedDestroy objectevent CogDestroy objectevent CogNameChanged objectevent ComponentsModified objectevent GamepadUpdated objectevent GamepadsUpdated objectevent GizmoTargetSet objectevent JoysticksChanged objectevent ObjectModified objectevent ObjectStructureModified objectevent ParticlesExhausted objectevent PhysicsUpdateFinished objectevent RigidBodyAwoke objectevent RigidBodySlept objectevent TransformUpdated objectevent ObjectLinkChanged objectlinkevent ObjectLinkPointChanged objectlinkpointchangedevent ObjectRotateGizmoModified objecttransformgizmoevent ObjectScaleGizmoModified objecttransformgizmoevent ObjectTransformGizmoEnd objecttransformgizmoevent ObjectTranslateGizmoModified objecttransformgizmoevent OperationQueued operationqueueevent OperationRedo operationqueueevent OperationUndo operationqueueevent ParticlesSpawned particleevent GroupCollisionPreSolve presolveevent PropertyModified propertyevent PropertyModifiedIntermediate propertyevent ReceivedData receiveddataevent RenderTasksUpdate rendertasksevent RingGizmoModified ringgizmoevent RotateGizmoModified rotategizmoupdateevent RotationBasisAabbQuery rotationbasisgizmoaabbqueryevent ScaleGizmoModified scalegizmoupdateevent AddedInstanceToTag soundevent AudioInterpolationDone soundevent SoundNodeDisconnected soundevent TagHasNoInstances soundevent MusicBar soundinstanceevent MusicBeat soundinstanceevent MusicCustomTime soundinstanceevent MusicEighthNote soundinstanceevent MusicHalfNote soundinstanceevent MusicQuarterNote soundinstanceevent MusicWholeNote soundinstanceevent SoundCuePostPlay soundinstanceevent SoundCuePrePlay soundinstanceevent SoundInstancePlayed soundinstanceevent SoundLooped soundinstanceevent SoundStopped soundinstanceevent QuerySpline splineevent SplineModified splineevent SocketError texterrorevent GetToolInfo tooluievent TranslateGizmoModified translategizmoupdateevent UiFocusGained uifocusevent UiFocusGainedHierarchy uifocusevent UiFocusGainedPreview uifocusevent UiFocusLost uifocusevent UiFocusLostHierarchy uifocusevent UiFocusReset uifocusevent UiPostUpdate uitransformupdateevent UiPreUpdate uitransformupdateevent CurrentInputDeviceChanged updateevent EngineUpdate updateevent FrameUpdate updateevent LogicUpdate updateevent PreviewUpdate updateevent DoubleClick viewportmouseevent LeftClick viewportmouseevent LeftMouseDown viewportmouseevent LeftMouseUp viewportmouseevent MiddleClick viewportmouseevent MiddleMouseDown viewportmouseevent MiddleMouseUp viewportmouseevent MouseDown viewportmouseevent MouseDragEnd viewportmouseevent MouseDragMove viewportmouseevent MouseDragStart viewportmouseevent MouseDragUpdate viewportmouseevent MouseEnter viewportmouseevent MouseEnterHierarchy viewportmouseevent MouseEnterPreview viewportmouseevent MouseExit viewportmouseevent MouseExitHierarchy viewportmouseevent MouseHold viewportmouseevent MouseHover viewportmouseevent MouseMove viewportmouseevent MouseScroll viewportmouseevent MouseUp viewportmouseevent MouseUpdate viewportmouseevent RightClick viewportmouseevent RightMouseDown viewportmouseevent RightMouseUp viewportmouseevent SelectToolPreSelect viewportmouseevent WebBrowserConsoleMessage webbrowserconsoleevent WebBrowserCursorChanged webbrowsercursorevent WebBrowserDownloadStarted webbrowserdownloadevent WebBrowserDownloadUpdated webbrowserdownloadevent WebBrowserPointQuery webbrowserpointqueryevent WebBrowserPopup webbrowserpopupcreateevent WebBrowserStatusChanged webbrowsertextevent WebBrowserTitleChanged webbrowsertextevent WebBrowserUrlChanged webbrowserurlevent WebResponse webresponseevent ZUiSliderChanged ZUiSliderEvent HistoryEntryUpdate lightningevent RedoRowsCleared lightningevent # AcquireBasicNetHostInfo Type: acquirenethostinfo # AcquireExtraNetHostInfo Type: acquirenethostinfo # AnimationBlendEnded Type: animationgraphevent # AnimationEnded Type: animationgraphevent # AnimationLooped Type: animationgraphevent # AreaChanged Type: areaevent # PartialStandardErrorResponse Type: asyncprocessevent # PartialStandardOutputResponse Type: asyncprocessevent # MicrophoneCompressedByteData Type: audiobytedataevent # MicrophoneUncompressedFloatData Type: audiofloatdataevent # CastFilterCallback Type: castfilterevent # OperationRedone Type: ChangedHistoryView # OperationUndone Type: ChangedHistoryView # AllObjectsInitialized Type: coginitializerevent # CogPathCogChanged Type: cogpathevent # CollisionEnded Type: collisionevent # CollisionPersisted Type: collisionevent # CollisionStarted Type: collisionevent # GroupCollisionEnded Type: collisiongroupevent # GroupCollisionPersisted Type: collisiongroupevent # GroupCollisionStarted Type: collisiongroupevent # CommandExecute Type: commandevent # ConnectionCompleted Type: connectionevent # ConnectionFailed Type: connectionevent # Disconnected Type: connectionevent # ContextMenuCreated Type: contextmenuevent # CustomAudioNodeSamplesNeeded Type: customaudionodeevent # ComputeCustomJointInfo Type: customjointevent # ApplyCustomPhysicsEffect Type: customphysicseffectevent # CustomPhysicsEffectPrecalculatePhase Type: customphysicseffectevent # AnimationPostUpdate Type: event # CameraControllerUpdated Type: event # ChildrenOrderChanged Type: event # EditSpaces Type: event # GizmoObjectsDuplicated Type: event # RotationBasisGizmoBegin Type: event # RotationBasisGizmoEnd Type: event # RotationBasisGizmoModified Type: event # SelectionChanged Type: event # SelectionFinal Type: event # StandardErrorFinished Type: event # StandardOutputFinished Type: event # ToolActivate Type: event # ToolDeactivate Type: event # ToolDraw Type: event # GameFocusIn Type: gameevent # GameFocusOut Type: gameevent # GameLoad Type: gameevent # GameQuit Type: gameevent # GameRequestQuit Type: gameevent # GameSetup Type: gameevent # GameStarted Type: gameevent # LevelStarted Type: gameevent # ButtonDown Type: gamepadevent # ButtonUp Type: gamepadevent # GamepadStickFlicked Type: gamepadevent # GizmoPreDrag Type: gizmoevent # MouseEnterGizmo Type: gizmoevent # MouseEnterGizmoHierarchy Type: gizmoevent # MouseExitGizmo Type: gizmoevent # MouseExitGizmoHierarchy Type: gizmoevent # GizmoModified Type: gizmoupdateevent # ObjectTransformGizmoStart Type: gizmoupdateevent # EnterView Type: graphicalevent # EnterViewAny Type: graphicalevent # ExitView Type: graphicalevent # ExitViewAll Type: graphicalevent # GraphicalSort Type: graphicalsortevent # Closing Type: handleableevent # Attached Type: hierarchyevent # ChildAttached Type: hierarchyevent # ChildDetached Type: hierarchyevent # Detached Type: hierarchyevent # JointExceedImpulseLimit Type: jointevent # JointLowerLimitReached Type: jointevent # JointUpperLimitReached Type: jointevent # JoystickButtonDown Type: joystickevent # JoystickButtonUp Type: joystickevent # JoystickFound Type: joystickevent # JoystickLost Type: joystickevent # JoystickUpdated Type: joystickevent # HoverKeyDown Type: keyboardevent # HoverKeyPreview Type: keyboardevent # HoverKeyRepeated Type: keyboardevent # HoverKeyUp Type: keyboardevent # KeyDown Type: keyboardevent # KeyRepeated Type: keyboardevent # KeyUp Type: keyboardevent # TextTyped Type: keyboardtextevent # MainWindowTransformUpdated Type: mainwindowtransformevent # ManipulatorToolEnd Type: manipulatortoolevent # ManipulatorToolModified Type: manipulatortoolevent # ManipulatorToolStart Type: manipulatortoolevent # MetaDrop Type: metadropevent # MetaDropTest Type: metadropevent # MetaDropUpdate Type: metadropevent # MIDIModWheel Type: midievent # MIDINoteOff Type: midievent # MIDINoteOn Type: midievent # MIDIOtherControl Type: midievent # MIDIPitchWheel Type: midievent # MIDIVolume Type: midievent # MouseFileDrop Type: mousefiledropevent # NetChannelIncomingPropertyChanged Type: netchannelpropertychange # NetChannelIncomingPropertyInitialized Type: netchannelpropertychange # NetChannelIncomingPropertyUninitialized Type: netchannelpropertychange # NetChannelOutgoingPropertyChanged Type: netchannelpropertychange # NetChannelOutgoingPropertyInitialized Type: netchannelpropertychange # NetChannelOutgoingPropertyUninitialized Type: netchannelpropertychange # NetEventReceived Type: neteventreceived # NetEventSent Type: neteventsent # NetGameStarted Type: netgamestarted # NetHostListDiscovered Type: nethostlistupdate # NetHostListRefreshed Type: nethostlistupdate # NetHostRecordDiscovered Type: nethostrecordevent # NetHostRecordExpired Type: nethostrecordevent # NetHostRecordUpdate Type: nethostrecordevent # NetHostDiscovered Type: nethostupdate # NetHostRefreshed Type: nethostupdate # NetLevelStarted Type: netlevelstarted # NetLinkConnected Type: netlinkconnected # NetLinkDisconnected Type: netlinkdisconnected # NetGameOffline Type: netobjectoffline # NetObjectOffline Type: netobjectoffline # NetSpaceOffline Type: netobjectoffline # NetUserOffline Type: netobjectoffline # NetGameOnline Type: netobjectonline # NetObjectOnline Type: netobjectonline # NetSpaceOnline Type: netobjectonline # NetUserOnline Type: netobjectonline # NetPeerClosed Type: netpeerclosed # NetPeerOpened Type: netpeeropened # NetPeerReceivedConnectRequest Type: netpeerreceivedconnectrequest # NetPeerReceivedConnectResponse Type: netpeerreceivedconnectresponse # NetPeerReceivedUserAddRequest Type: netpeerreceiveduseraddrequest # NetPeerReceivedUserAddResponse Type: netpeerreceiveduseraddresponse # NetPeerSentConnectRequest Type: netpeersentconnectrequest # NetPeerSentConnectResponse Type: netpeersentconnectresponse # NetPeerSentUserAddRequest Type: netpeersentuseraddrequest # NetPeerSentUserAddResponse Type: netpeersentuseraddresponse # NetUserAcquiredObjectOwnership Type: netuseracquiredobjectownership # NetUserLostObjectOwnership Type: netuserlostobjectownership # NetUserOwnerChanged Type: netuserownerchanged # AllParticlesDead Type: objectevent # CogDelayedDestroy Type: objectevent # CogDestroy Type: objectevent # CogNameChanged Type: objectevent # ComponentsModified Type: objectevent # GamepadUpdated Type: objectevent # GamepadsUpdated Type: objectevent # GizmoTargetSet Type: objectevent # JoysticksChanged Type: objectevent # ObjectModified Type: objectevent # ObjectStructureModified Type: objectevent # ParticlesExhausted Type: objectevent # PhysicsUpdateFinished Type: objectevent # RigidBodyAwoke Type: objectevent # RigidBodySlept Type: objectevent # TransformUpdated Type: objectevent # ObjectLinkChanged Type: objectlinkevent # ObjectLinkPointChanged Type: objectlinkpointchangedevent # ObjectRotateGizmoModified Type: objecttransformgizmoevent # ObjectScaleGizmoModified Type: objecttransformgizmoevent # ObjectTransformGizmoEnd Type: objecttransformgizmoevent # ObjectTranslateGizmoModified Type: objecttransformgizmoevent # OperationQueued Type: operationqueueevent # OperationRedo Type: operationqueueevent # OperationUndo Type: operationqueueevent # ParticlesSpawned Type: particleevent # GroupCollisionPreSolve Type: presolveevent # PropertyModified Type: propertyevent # PropertyModifiedIntermediate Type: propertyevent # ReceivedData Type: receiveddataevent # RenderTasksUpdate Type: rendertasksevent # RingGizmoModified Type: ringgizmoevent # RotateGizmoModified Type: rotategizmoupdateevent # RotationBasisAabbQuery Type: rotationbasisgizmoaabbqueryevent # ScaleGizmoModified Type: scalegizmoupdateevent # AddedInstanceToTag Type: soundevent # AudioInterpolationDone Type: soundevent # SoundNodeDisconnected Type: soundevent # TagHasNoInstances Type: soundevent # MusicBar Type: soundinstanceevent # MusicBeat Type: soundinstanceevent # MusicCustomTime Type: soundinstanceevent # MusicEighthNote Type: soundinstanceevent # MusicHalfNote Type: soundinstanceevent # MusicQuarterNote Type: soundinstanceevent # MusicWholeNote Type: soundinstanceevent # SoundCuePostPlay Type: soundinstanceevent # SoundCuePrePlay Type: soundinstanceevent # SoundInstancePlayed Type: soundinstanceevent # SoundLooped Type: soundinstanceevent # SoundStopped Type: soundinstanceevent # QuerySpline Type: splineevent # SplineModified Type: splineevent # SocketError Type: texterrorevent # GetToolInfo Type: tooluievent # TranslateGizmoModified Type: translategizmoupdateevent # UiFocusGained Type: uifocusevent # UiFocusGainedHierarchy Type: uifocusevent # UiFocusGainedPreview Type: uifocusevent # UiFocusLost Type: uifocusevent # UiFocusLostHierarchy Type: uifocusevent # UiFocusReset Type: uifocusevent # UiPostUpdate Type: uitransformupdateevent # UiPreUpdate Type: uitransformupdateevent # CurrentInputDeviceChanged Type: updateevent # EngineUpdate Type: updateevent # FrameUpdate Type: updateevent # LogicUpdate Type: updateevent # PreviewUpdate Type: updateevent # DoubleClick Type: viewportmouseevent # LeftClick Type: viewportmouseevent # LeftMouseDown Type: viewportmouseevent # LeftMouseUp Type: viewportmouseevent # MiddleClick Type: viewportmouseevent # MiddleMouseDown Type: viewportmouseevent # MiddleMouseUp Type: viewportmouseevent # MouseDown Type: viewportmouseevent # MouseDragEnd Type: viewportmouseevent # MouseDragMove Type: viewportmouseevent # MouseDragStart Type: viewportmouseevent # MouseDragUpdate Type: viewportmouseevent # MouseEnter Type: viewportmouseevent # MouseEnterHierarchy Type: viewportmouseevent # MouseEnterPreview Type: viewportmouseevent # MouseExit Type: viewportmouseevent # MouseExitHierarchy Type: viewportmouseevent # MouseHold Type: viewportmouseevent # MouseHover Type: viewportmouseevent # MouseMove Type: viewportmouseevent # MouseScroll Type: viewportmouseevent # MouseUp Type: viewportmouseevent # MouseUpdate Type: viewportmouseevent # RightClick Type: viewportmouseevent # RightMouseDown Type: viewportmouseevent # RightMouseUp Type: viewportmouseevent # SelectToolPreSelect Type: viewportmouseevent # WebBrowserConsoleMessage Type: webbrowserconsoleevent # WebBrowserCursorChanged Type: webbrowsercursorevent # WebBrowserDownloadStarted Type: webbrowserdownloadevent # WebBrowserDownloadUpdated Type: webbrowserdownloadevent # WebBrowserPointQuery Type: webbrowserpointqueryevent # WebBrowserPopup Type: webbrowserpopupcreateevent # WebBrowserStatusChanged Type: webbrowsertextevent # WebBrowserTitleChanged Type: webbrowsertextevent # WebBrowserUrlChanged Type: webbrowserurlevent # WebResponse Type: webresponseevent # ZUiSliderChanged Type: ZUiSliderEvent # HistoryEntryUpdate Type: lightningevent # RedoRowsCleared Type: lightningevent","title":"Event List"},{"location":"reference/flags_reference/","text":"|Flags|| |---| | FileMode | | Members | | StreamCapabilities | #### FileMode FlagName Description Append Read Sequential ShareDelete ShareRead ShareWrite Write #### Members FlagName Description All Extension Inherited InheritedInstance InheritedInstanceStatic InheritedStatic Instance InstanceStatic Static #### StreamCapabilities FlagName Description GetCount None Read Seek SetCount Write","title":"Flags reference"},{"location":"reference/lightning_base_types/","text":"anyhandle anytype array_type asciiencoding boolean boolean2 boolean2x2 boolean2x3 boolean2x4 boolean3 boolean3x2 boolean3x3 boolean3x4 boolean4 boolean4x2 boolean4x3 boolean4x4 boundtype buildevent byte color colors console consoleevent debuggerevent delegateparameter delegateparameterrange delegatetype doubleinteger doublereal errorevent errortype eventdata eventhandler events exception exceptionevent executablestate fatalerrorevent field fieldrange filepath filestream function functionrange gettersetter gettersetterrange [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /]] hashmapkeyrange_key [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /]] hashmapvaluerange_value iencoding indirectiontype integer integer2 integer2x2 integer2x3 integer2x4 integer3 integer3x2 integer3x3 integer3x4 integer4 integer4x2 integer4x3 integer4x4 istream [[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key, value /]] library math member memberrange memoryleakevent multiplemethodsofthesamename multiprimitive null opcodeevent parseevent pluginevent processclass processstartinfo property_type propertyrange quaternion random real real2 real2x2 real2x3 real2x4 real3 real3x2 real3x3 real3x4 real4 real4x2 real4x3 real4x4 reflectionobject rune runeiterator string stringbuilder stringrange stringsplitrange type utf8encoding variable void wrapper","title":"Lightning base types"},{"location":"reference/attribute_reference/function_attribute_reference/","text":"Lightning Attributes C++ Attributes Display Override Static Virtual # Display lightning-attribute allow-static # Override lightning-attribute # Static lightning-attribute allow-static # Virtual lightning-attribute","title":"Function attribute reference"},{"location":"reference/attribute_reference/object_attribute_reference/","text":"Lightning Attributes C++ Attributes Command ComponentInterface Gizmo RunInEditor Shortcut Tags Tool # Command lightning-attribute # ComponentInterface lightning-attribute # Gizmo lightning-attribute # RunInEditor lightning-attribute # Shortcut lightning-attribute # Tags lightning-attribute # Tool lightning-attribute","title":"Object attribute reference"},{"location":"reference/attribute_reference/property_attribute_reference/","text":"Lightning Attributes C++ Attributes Dependency Display Editable Group LocalModificationOverride NetPeerId NetProperty Override Property Range RenamedFrom ResourceProperty RuntimeClone Serialize Serialized ShaderInput Slider Static Virtual # Dependency lightning-attribute # Display lightning-attribute allow-static # Editable lightning-attribute allow-static # Group lightning-attribute allow-static # LocalModificationOverride lightning-attribute # NetPeerId lightning-attribute # NetProperty lightning-attribute # Override lightning-attribute # Property lightning-attribute # Range lightning-attribute allow-static # RenamedFrom lightning-attribute # ResourceProperty lightning-attribute # RuntimeClone lightning-attribute allow-static # Serialize lightning-attribute # Serialized lightning-attribute # ShaderInput lightning-attribute allow-multiple # Slider lightning-attribute allow-static # Static lightning-attribute allow-static # Virtual lightning-attribute","title":"Property attribute reference"},{"location":"reference/class_reference/aabb/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Center ContainsPoint Extents Expand HalfExtents Overlap Max Overlaps Min Set SurfaceArea SetInvalid Volume ZeroOut # Properties # Center : real3 ``` lang=cpp, name=Lightning var Center : Real3 # Extents : real3 ``` lang=cpp, name=Lightning var Extents : Real3 # HalfExtents : real3 ``` lang=cpp, name=Lightning var HalfExtents : Real3 # Max : real3 ``` lang=cpp, name=Lightning var Max : Real3 # Min : real3 ``` lang=cpp, name=Lightning var Min : Real3 # SurfaceArea : real read-only ``` lang=cpp, name=Lightning var SurfaceArea : Real # Volume : real read-only ``` lang=cpp, name=Lightning var Volume : Real # Methods # Aabb : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Aabb() ``` # Aabb : Void constructor Name Type Description p0 aabb ``` lang=cpp, name=Lightning function Aabb(p0 : Aabb) ``` # Aabb : Void constructor Name Type Description center real3 halfExtents real3 ``` lang=cpp, name=Lightning function Aabb(center : Real3, halfExtents : Real3) ``` # ContainsPoint : boolean Does this aabb contain the given point? |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function ContainsPoint(p0 : Real3) : Boolean # Expand : Void Expand this aabb to contain the given aabb. |Name|Type|Description| |---|---|---| |p0| aabb | | lang=cpp, name=Lightning function Expand(p0 : Aabb) # Expand : aabb static Creates an aabb that contains the two given aabbs. |Name|Type|Description| |---|---|---| |p0| aabb | | |p1| aabb | | lang=cpp, name=Lightning function Expand(p0 : Aabb, p1 : Aabb) : Aabb # Expand : aabb static Creates an aabb that contains the given aabb and point. |Name|Type|Description| |---|---|---| |p0| aabb | | |p1| real3 | | lang=cpp, name=Lightning function Expand(p0 : Aabb, p1 : Real3) : Aabb # Expand : Void Expand this aabb to contain the given point. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Expand(p0 : Real3) # Overlap : boolean This function is deprecated. Use Overlaps instead |Name|Type|Description| |---|---|---| |p0| aabb | | lang=cpp, name=Lightning function Overlap(p0 : Aabb) : Boolean # Overlaps : boolean Does this aabb overlap/intersect the given aabb? |Name|Type|Description| |---|---|---| |p0| aabb | | lang=cpp, name=Lightning function Overlaps(p0 : Aabb) : Boolean # Set : Void Name Type Description point real3 ``` lang=cpp, name=Lightning function Set(point : Real3) ``` # Set : Void Name Type Description center real3 halfExtents real3 ``` lang=cpp, name=Lightning function Set(center : Real3, halfExtents : Real3) ``` # SetInvalid : Void Sets this aabb to an invalid aabb (Real3.PositiveMax, Real3.NegativeMin)). This also makes expansion easier. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function SetInvalid() # ZeroOut : Void Name Type Description ``` lang=cpp, name=Lightning function ZeroOut() ```","title":"Aabb"},{"location":"reference/class_reference/acquirenethostinfo/","text":"Event Networking (NOTE) Dispatched when the net peer host is acquiring project-specific host information. Methods Properties Base Classes Derived Classes ReturnHostInfo event # Properties # ReturnHostInfo : eventbundle Return: Our bundled host info event data. ``` lang=cpp, name=Lightning var ReturnHostInfo : EventBundle # Methods","title":"Acquirenethostinfo"},{"location":"reference/class_reference/action/","text":"Engine (NOTE) Base action class. Methods Properties Base Classes Derived Classes Cancel Active referencecountedeventobject actiondelay Completed actionset Started # Properties # Active : boolean read-only The action is queued and not stared or running. ``` lang=cpp, name=Lightning var Active : Boolean # Completed : boolean read-only The action ran until it completed. ``` lang=cpp, name=Lightning var Completed : Boolean # Started : boolean read-only Has the action started? ``` lang=cpp, name=Lightning var Started : Boolean # Methods # Cancel : Void Cancel the action and all child actions. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Cancel()","title":"Action"},{"location":"reference/class_reference/actiondelay/","text":"Engine (NOTE) Delay action. Delays by time in seconds. Methods Properties Base Classes Derived Classes TimeLeft action # Properties # TimeLeft : real ``` lang=cpp, name=Lightning var TimeLeft : Real # Methods","title":"Actiondelay"},{"location":"reference/class_reference/actiongroup/","text":"Engine (NOTE) A group of actions that run in parallel with each other. Methods Properties Base Classes Derived Classes actionset # Properties # Methods","title":"Actiongroup"},{"location":"reference/class_reference/actions/","text":"Engine (NOTE) The collection of actions queued up on an object. Methods Properties Base Classes Derived Classes actionset # Properties # Methods","title":"Actions"},{"location":"reference/class_reference/actionsequence/","text":"Engine (NOTE) A group of actions that run in serial. The first child action will block the second from running and so on. Methods Properties Base Classes Derived Classes actionset # Properties # Methods","title":"Actionsequence"},{"location":"reference/class_reference/actionset/","text":"Engine (NOTE) Base class for ActionGroup and ActionSequence. Stores a set of sub-actions. Methods Properties Base Classes Derived Classes action actiongroup actions actionsequence # Properties # Methods","title":"Actionset"},{"location":"reference/class_reference/actionspace/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # ActionSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ActionSpace() ```","title":"Actionspace"},{"location":"reference/class_reference/actionsystem/","text":"Engine Methods Properties Base Classes Derived Classes system # Properties # Methods","title":"Actionsystem"},{"location":"reference/class_reference/additivesynthnode/","text":"Sound (NOTE) Generates audio using additive synthesis. Methods Properties Base Classes Derived Classes AddHarmonic soundnode NoteOff NoteOn RemoveAllHarmonics StopAllNotes # Properties # Methods # AddHarmonic : Void Adds a new harmonic to the additive synth notes. The first value is the multiplier that will be applied to the base frequency, the second is the volume of this harmonic, and the third (the AdsrEnvelope object) contains the envelope-related values. |Name|Type|Description| |---|---|---| |frequencyMultiplier| real | | |volume| real | | |envelope| adsrenvelope | | |type| SynthWaveType | | lang=cpp, name=Lightning function AddHarmonic(frequencyMultiplier : Real, volume : Real, envelope : AdsrEnvelope, type : SynthWaveType) # NoteOff : Void Stops playing all current notes at the specified MIDI value. |Name|Type|Description| |---|---|---| |midiNote| real | | lang=cpp, name=Lightning function NoteOff(midiNote : Real) # NoteOn : Void Starts playing a new note. The first parameter is the MIDI note value (range is 0 to 127), and the second is the volume modification that should be applied to this note (a value of 1.0 does not change the volume, while 0.0 would be silence). |Name|Type|Description| |---|---|---| |midiNote| real | | |volume| real | | lang=cpp, name=Lightning function NoteOn(midiNote : Real, volume : Real) # RemoveAllHarmonics : Void Removes all current harmonics. You must add at least one harmonic before playing a note. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RemoveAllHarmonics() # StopAllNotes : Void Stops playing all current notes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function StopAllNotes()","title":"Additivesynthnode"},{"location":"reference/class_reference/addnoisenode/","text":"Sound (NOTE) Adds random noise (static) to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes AdditiveCutoff soundnode AdditiveGain MultiplicativeCutoff MultiplicativeGain # Properties # AdditiveCutoff : real The cutoff frequency used for the additive noise component, in Hz. ``` lang=cpp, name=Lightning var AdditiveCutoff : Real # AdditiveGain : real The gain of the additive noise component, in decibels. ``` lang=cpp, name=Lightning var AdditiveGain : Real # MultiplicativeCutoff : real The cutoff frequency used for the multiplicative noise component, in Hz. ``` lang=cpp, name=Lightning var MultiplicativeCutoff : Real # MultiplicativeGain : real The gain of the multiplicative noise component, in decibels. ``` lang=cpp, name=Lightning var MultiplicativeGain : Real # Methods","title":"Addnoisenode"},{"location":"reference/class_reference/addobjectwidget/","text":"Editor Methods Properties Base Classes Derived Classes propertywidget # Properties # Methods","title":"Addobjectwidget"},{"location":"reference/class_reference/addresourcewindow/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Addresourcewindow"},{"location":"reference/class_reference/adsrenvelope/","text":"Sound (NOTE) Used to control harmonics of notes played by the AdditiveSynthNode. Methods Properties Base Classes Derived Classes Constructor AttackTime DecayTime DelayTime ReleaseTime SustainLevel SustainTime # Properties # AttackTime : real ``` lang=cpp, name=Lightning var AttackTime : Real # DecayTime : real ``` lang=cpp, name=Lightning var DecayTime : Real # DelayTime : real ``` lang=cpp, name=Lightning var DelayTime : Real # ReleaseTime : real ``` lang=cpp, name=Lightning var ReleaseTime : Real # SustainLevel : real ``` lang=cpp, name=Lightning var SustainLevel : Real # SustainTime : real ``` lang=cpp, name=Lightning var SustainTime : Real # Methods # AdsrEnvelope : Void constructor Name Type Description ``` lang=cpp, name=Lightning function AdsrEnvelope() ```","title":"Adsrenvelope"},{"location":"reference/class_reference/alternatesearchcompletedevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Alternatesearchcompletedevent"},{"location":"reference/class_reference/anchoringsubtool/","text":"Editor Methods Properties Base Classes Derived Classes AnchoredPointMassColor pointmassselectorsubtool DrawAnchoredPoints # Properties # AnchoredPointMassColor : real4 ``` lang=cpp, name=Lightning var AnchoredPointMassColor : Real4 # DrawAnchoredPoints : boolean ``` lang=cpp, name=Lightning var DrawAnchoredPoints : Boolean # Methods","title":"Anchoringsubtool"},{"location":"reference/class_reference/animation/","text":"Resource Engine (NOTE) The Animation resource class is used to store animations of game objects and their properties. Methods Properties Base Classes Derived Classes Duration Resource # Properties # Duration : real read-only Duration of the animation in seconds. ``` lang=cpp, name=Lightning var Duration : Real # Methods","title":"Animation"},{"location":"reference/class_reference/animationbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor Clips buildercomponent # Properties # Clips : animationclips ``` lang=cpp, name=Lightning var Clips : AnimationClips # Methods # AnimationBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function AnimationBuilder() ```","title":"Animationbuilder"},{"location":"reference/class_reference/animationclip/","text":"ContentMeta Methods Properties Base Classes Derived Classes AnimationIndex Object EndFrame Name StartFrame # Properties # AnimationIndex : integer ``` lang=cpp, name=Lightning var AnimationIndex : Integer # EndFrame : integer ``` lang=cpp, name=Lightning var EndFrame : Integer # Name : string ``` lang=cpp, name=Lightning var Name : String # StartFrame : integer ``` lang=cpp, name=Lightning var StartFrame : Integer # Methods","title":"Animationclip"},{"location":"reference/class_reference/animationclips/","text":"ContentMeta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Animationclips"},{"location":"reference/class_reference/animationeditor/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Animationeditor"},{"location":"reference/class_reference/animationeditordata/","text":"Editor Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Animationeditordata"},{"location":"reference/class_reference/animationgraph/","text":"Component Engine (NOTE) The AnimationGraph component controls animation for an individual game object. It stores all needed per instance (vs what is shared in the animation resource) manages the current time and enumerates the animation sets. The AnimationGraph can animate multiple child objects and properties enabling bone animation, and other hierarchical animations. Methods Properties Base Classes Derived Classes Constructor Active component CreateBasicNode ActiveNode CreateChainNode TimeScale CreateCrossBlendNode CreateDirectBlendNode CreateSelectiveNode IsPlayingInGraph PrintGraph Update # Properties # Active : boolean Is the animGraph animating? ``` lang=cpp, name=Lightning var Active : Boolean # ActiveNode : animationnode The current root animation node. ``` lang=cpp, name=Lightning var ActiveNode : AnimationNode # TimeScale : real A scalar to the entire animation graph. ``` lang=cpp, name=Lightning var TimeScale : Real # Methods # AnimationGraph : Void constructor Constructor / destructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function AnimationGraph() # CreateBasicNode : basicanimation Node creation functions. |Name|Type|Description| |---|---|---| |animation| animation | | |mode| AnimationPlayMode | | lang=cpp, name=Lightning function CreateBasicNode(animation : Animation, mode : AnimationPlayMode) : BasicAnimation # CreateChainNode : chainnode Name Type Description ``` lang=cpp, name=Lightning function CreateChainNode() : ChainNode ``` # CreateCrossBlendNode : crossblend Name Type Description ``` lang=cpp, name=Lightning function CreateCrossBlendNode() : CrossBlend ``` # CreateDirectBlendNode : directblend Name Type Description ``` lang=cpp, name=Lightning function CreateDirectBlendNode() : DirectBlend ``` # CreateSelectiveNode : selectivenode Name Type Description ``` lang=cpp, name=Lightning function CreateSelectiveNode() : SelectiveNode ``` # IsPlayingInGraph : boolean Name Type Description animation animation ``` lang=cpp, name=Lightning function IsPlayingInGraph(animation : Animation) : Boolean ``` # PrintGraph : Void Name Type Description ``` lang=cpp, name=Lightning function PrintGraph() ``` # Update : Void Updates the root node on each from and applies it to the object tree. |Name|Type|Description| |---|---|---| |dt| real | | lang=cpp, name=Lightning function Update(dt : Real)","title":"Animationgraph"},{"location":"reference/class_reference/animationgraphevent/","text":"Event Engine Methods Properties Base Classes Derived Classes Animation event Node PlayMode # Properties # Animation : animation read-only Only set when the animation node has a single animation. ``` lang=cpp, name=Lightning var Animation : Animation # Node : animationnode read-only ``` lang=cpp, name=Lightning var Node : AnimationNode # PlayMode : AnimationPlayMode read-only ``` lang=cpp, name=Lightning var PlayMode : AnimationPlayMode # Methods","title":"Animationgraphevent"},{"location":"reference/class_reference/animationnode/","text":"Engine Methods Properties Base Classes Derived Classes Clone CollapseToPoseOnFinish referencecountedeventobject basicanimation CollapseToPose Duration dualblendchainnode GetNormalizedTime Paused dualblendcrossblend IsActive Time dualblenddirectblend PrintNode TimeScale dualblendselectivenode SetNormalizedTime posenode # Properties # CollapseToPoseOnFinish : boolean Whether or not to collapse to a pose node when finished playing. ``` lang=cpp, name=Lightning var CollapseToPoseOnFinish : Boolean # Duration : real The duration of the node. ``` lang=cpp, name=Lightning var Duration : Real # Paused : boolean Whether or not the node is currently paused. ``` lang=cpp, name=Lightning var Paused : Boolean # Time : real The current time in the node. ``` lang=cpp, name=Lightning var Time : Real # TimeScale : real A scalar to dt when updating the node. ``` lang=cpp, name=Lightning var TimeScale : Real # Methods # Clone : animationnode Name Type Description ``` lang=cpp, name=Lightning function Clone() : AnimationNode ``` # CollapseToPose : Void Collapses all children to a pose node on the next Update. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CollapseToPose() # GetNormalizedTime : real Name Type Description ``` lang=cpp, name=Lightning function GetNormalizedTime() : Real ``` # IsActive : boolean Name Type Description ``` lang=cpp, name=Lightning function IsActive() : Boolean ``` # PrintNode : Void Name Type Description tabs integer ``` lang=cpp, name=Lightning function PrintNode(tabs : Integer) ``` # SetNormalizedTime : Void A value between [0-1]. |Name|Type|Description| |---|---|---| |normalizedTime| real | | lang=cpp, name=Lightning function SetNormalizedTime(normalizedTime : Real)","title":"Animationnode"},{"location":"reference/class_reference/animationsettings/","text":"Editor Methods Properties Base Classes Derived Classes AutoFocus AutoKey EditFps OnionSkinning PlaybackSpeed PreviewMode SnappingX SnappingY TimeDisplay # Properties # AutoFocus : boolean ``` lang=cpp, name=Lightning var AutoFocus : Boolean # AutoKey : boolean ``` lang=cpp, name=Lightning var AutoKey : Boolean # EditFps : integer ``` lang=cpp, name=Lightning var EditFps : Integer # OnionSkinning : boolean ``` lang=cpp, name=Lightning var OnionSkinning : Boolean # PlaybackSpeed : real ``` lang=cpp, name=Lightning var PlaybackSpeed : Real # PreviewMode : integer ``` lang=cpp, name=Lightning var PreviewMode : Integer # SnappingX : boolean ``` lang=cpp, name=Lightning var SnappingX : Boolean # SnappingY : boolean ``` lang=cpp, name=Lightning var SnappingY : Boolean # TimeDisplay : TimeDisplay ``` lang=cpp, name=Lightning var TimeDisplay : TimeDisplay # Methods","title":"Animationsettings"},{"location":"reference/class_reference/animationtrackview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Animationtrackview"},{"location":"reference/class_reference/archetype/","text":"Resource Engine (NOTE) An archetype is a resource containing the serialized data definition of an object. The archetype stores a binary cache of the serialization data and the source file for debugging and for archetype updating. Methods Properties Base Classes Derived Classes StoredType Resource # Properties # StoredType : boundtype An Archetype can be a Cog, Space, or GameSession. It's okay for this to be a raw BoundType* because native types will never be destructed. ``` lang=cpp, name=Lightning var StoredType : BoundType # Methods","title":"Archetype"},{"location":"reference/class_reference/archetyped/","text":"Component Engine Methods Properties Base Classes Derived Classes component # Properties # Methods","title":"Archetyped"},{"location":"reference/class_reference/archetypeinstance/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Archetypeinstance"},{"location":"reference/class_reference/area/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor BottomCenter component GetLocalLocation BottomLeft GetWorldLocation BottomRight LocalOffsetOf Center SetLocalLocation CenterLeft SetWorldLocation CenterRight LocalBottom LocalBottomCenter LocalBottomLeft LocalBottomRight LocalCenter LocalCenterLeft LocalCenterRight LocalLeft LocalRectangle LocalRight LocalTop LocalTopCenter LocalTopLeft LocalTopRight Origin Size TopCenter TopLeft TopRight WorldBottom WorldBottomCenter WorldBottomLeft WorldBottomRight WorldCenter WorldCenterLeft WorldCenterRight WorldLeft WorldRectangle WorldRight WorldTop WorldTopCenter WorldTopLeft WorldTopRight # Properties # BottomCenter : real2 read-only ``` lang=cpp, name=Lightning var BottomCenter : Real2 # BottomLeft : real2 read-only ``` lang=cpp, name=Lightning var BottomLeft : Real2 # BottomRight : real2 read-only ``` lang=cpp, name=Lightning var BottomRight : Real2 # Center : real2 read-only ``` lang=cpp, name=Lightning var Center : Real2 # CenterLeft : real2 read-only ``` lang=cpp, name=Lightning var CenterLeft : Real2 # CenterRight : real2 read-only ``` lang=cpp, name=Lightning var CenterRight : Real2 # LocalBottom : real ``` lang=cpp, name=Lightning var LocalBottom : Real # LocalBottomCenter : real2 read-only ``` lang=cpp, name=Lightning var LocalBottomCenter : Real2 # LocalBottomLeft : real2 read-only ``` lang=cpp, name=Lightning var LocalBottomLeft : Real2 # LocalBottomRight : real2 read-only ``` lang=cpp, name=Lightning var LocalBottomRight : Real2 # LocalCenter : real2 read-only ``` lang=cpp, name=Lightning var LocalCenter : Real2 # LocalCenterLeft : real2 read-only ``` lang=cpp, name=Lightning var LocalCenterLeft : Real2 # LocalCenterRight : real2 read-only ``` lang=cpp, name=Lightning var LocalCenterRight : Real2 # LocalLeft : real ``` lang=cpp, name=Lightning var LocalLeft : Real # LocalRectangle : rectangle Rectangle representing the area relative to parent. ``` lang=cpp, name=Lightning var LocalRectangle : Rectangle # LocalRight : real ``` lang=cpp, name=Lightning var LocalRight : Real # LocalTop : real ``` lang=cpp, name=Lightning var LocalTop : Real # LocalTopCenter : real2 read-only ``` lang=cpp, name=Lightning var LocalTopCenter : Real2 # LocalTopLeft : real2 read-only ``` lang=cpp, name=Lightning var LocalTopLeft : Real2 # LocalTopRight : real2 read-only ``` lang=cpp, name=Lightning var LocalTopRight : Real2 # Origin : Location Location of the Origin of the Area. ``` lang=cpp, name=Lightning var Origin : Location # Size : real2 Size of the Area. ``` lang=cpp, name=Lightning var Size : Real2 # TopCenter : real2 read-only ``` lang=cpp, name=Lightning var TopCenter : Real2 # TopLeft : real2 read-only ``` lang=cpp, name=Lightning var TopLeft : Real2 # TopRight : real2 read-only ``` lang=cpp, name=Lightning var TopRight : Real2 # WorldBottom : real ``` lang=cpp, name=Lightning var WorldBottom : Real # WorldBottomCenter : real2 read-only ``` lang=cpp, name=Lightning var WorldBottomCenter : Real2 # WorldBottomLeft : real2 read-only ``` lang=cpp, name=Lightning var WorldBottomLeft : Real2 # WorldBottomRight : real2 read-only ``` lang=cpp, name=Lightning var WorldBottomRight : Real2 # WorldCenter : real2 read-only ``` lang=cpp, name=Lightning var WorldCenter : Real2 # WorldCenterLeft : real2 read-only ``` lang=cpp, name=Lightning var WorldCenterLeft : Real2 # WorldCenterRight : real2 read-only ``` lang=cpp, name=Lightning var WorldCenterRight : Real2 # WorldLeft : real ``` lang=cpp, name=Lightning var WorldLeft : Real # WorldRectangle : rectangle Rectangle representing the area in world space. ``` lang=cpp, name=Lightning var WorldRectangle : Rectangle # WorldRight : real ``` lang=cpp, name=Lightning var WorldRight : Real # WorldTop : real ``` lang=cpp, name=Lightning var WorldTop : Real # WorldTopCenter : real2 read-only ``` lang=cpp, name=Lightning var WorldTopCenter : Real2 # WorldTopLeft : real2 read-only ``` lang=cpp, name=Lightning var WorldTopLeft : Real2 # WorldTopRight : real2 read-only ``` lang=cpp, name=Lightning var WorldTopRight : Real2 # Methods # Area : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Area() ``` # GetLocalLocation : real2 Name Type Description location Location ``` lang=cpp, name=Lightning function GetLocalLocation(location : Location) : Real2 ``` # GetWorldLocation : real2 Name Type Description location Location ``` lang=cpp, name=Lightning function GetWorldLocation(location : Location) : Real2 ``` # LocalOffsetOf : real2 Offset of the given location in local space. |Name|Type|Description| |---|---|---| |location| Location | | lang=cpp, name=Lightning function LocalOffsetOf(location : Location) : Real2 # SetLocalLocation : Void Name Type Description location Location localTranslation real2 ``` lang=cpp, name=Lightning function SetLocalLocation(location : Location, localTranslation : Real2) ``` # SetWorldLocation : Void Name Type Description location Location worldTranslation real2 ``` lang=cpp, name=Lightning function SetWorldLocation(location : Location, worldTranslation : Real2) ```","title":"Area"},{"location":"reference/class_reference/areaevent/","text":"Event Engine (NOTE) Sent when an area component's size or origin changes. Methods Properties Base Classes Derived Classes Area event # Properties # Area : area The area component that triggered this event. ``` lang=cpp, name=Lightning var Area : Area # Methods","title":"Areaevent"},{"location":"reference/class_reference/arrayhandleofmaterial/","text":"Graphics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : arrayhandleofmaterial read-only ``` lang=cpp, name=Lightning var All : ArrayHandleOfMaterial # Current : material read-only ``` lang=cpp, name=Lightning var Current : Material # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # ArrayHandleOfMaterial : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ArrayHandleOfMaterial() ``` # ArrayHandleOfMaterial : Void constructor Name Type Description p0 arrayhandleofmaterial ``` lang=cpp, name=Lightning function ArrayHandleOfMaterial(p0 : ArrayHandleOfMaterial) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Arrayhandleofmaterial"},{"location":"reference/class_reference/arrayhandleofrendergroup/","text":"Graphics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : arrayhandleofrendergroup read-only ``` lang=cpp, name=Lightning var All : ArrayHandleOfRenderGroup # Current : rendergroup read-only ``` lang=cpp, name=Lightning var Current : RenderGroup # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # ArrayHandleOfRenderGroup : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ArrayHandleOfRenderGroup() ``` # ArrayHandleOfRenderGroup : Void constructor Name Type Description p0 arrayhandleofrendergroup ``` lang=cpp, name=Lightning function ArrayHandleOfRenderGroup(p0 : ArrayHandleOfRenderGroup) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Arrayhandleofrendergroup"},{"location":"reference/class_reference/arrowgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor DualHeads simplegizmobase FilledHeads HeadSize HeadType Length LineDrawWidth SelectRadius # Properties # DualHeads : boolean ``` lang=cpp, name=Lightning var DualHeads : Boolean # FilledHeads : boolean ``` lang=cpp, name=Lightning var FilledHeads : Boolean # HeadSize : real ``` lang=cpp, name=Lightning var HeadSize : Real # HeadType : ArrowHeadType ``` lang=cpp, name=Lightning var HeadType : ArrowHeadType # Length : real ``` lang=cpp, name=Lightning var Length : Real # LineDrawWidth : real ``` lang=cpp, name=Lightning var LineDrawWidth : Real # SelectRadius : real ``` lang=cpp, name=Lightning var SelectRadius : Real # Methods # ArrowGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ArrowGizmo() ```","title":"Arrowgizmo"},{"location":"reference/class_reference/asyncprocess/","text":"Engine (NOTE) A process class that asynchronously reads from standard output and standard error and sends out partial read events. Additionally, the full buffer can be stored for each stream. This makes it possible to read the output of a process in a single-threaded context without having to block on output. Methods Properties Base Classes Derived Classes Close StandardError referencecountedeventobject Create StandardInput IsRunning StandardOutput Start StoreStandardErrorData Terminate StoreStandardOutputData WaitForClose # Properties # StandardError : string read-only The cached total results from standard error. Will be empty if StoreStandardErrorData is false. ``` lang=cpp, name=Lightning var StandardError : String # StandardInput : filestream ``` lang=cpp, name=Lightning var StandardInput : FileStream # StandardOutput : string read-only The cached total results from standard output. Will be empty if StoreStandardOutputData is false. ``` lang=cpp, name=Lightning var StandardOutput : String # StoreStandardErrorData : boolean Should the results from standard error be accumulated and stored? If a lot of data is output it may be good to turn this off and use the partial data callback events instead. ``` lang=cpp, name=Lightning var StoreStandardErrorData : Boolean # StoreStandardOutputData : boolean Should the results from standard output be accumulated and stored? If a lot of data is output it may be good to turn this off and use the partial data callback events instead. ``` lang=cpp, name=Lightning var StoreStandardOutputData : Boolean # Methods # Close : Void Closes the wrapper around the process, does not close the process launched. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Close() # Create : asyncprocess static Construct a new process. This does not start the process. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Create() : AsyncProcess # IsRunning : boolean Returns true if the process is still running, false otherwise. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsRunning() : Boolean # Start : boolean Begins the execution of another process using the given parameters. Throws an exception if the process cannot be started. |Name|Type|Description| |---|---|---| |startInfo| processstartinfo | | lang=cpp, name=Lightning function Start(startInfo : ProcessStartInfo) : Boolean # Terminate : Void Attempts to manually shut down the process. This is not safe for the other process or what it's handling. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Terminate() # WaitForClose : integer Waits for a process to close, this will block until the process closes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function WaitForClose() : Integer # WaitForClose : integer Waits for a process to close up to a given number of milliseconds. This can take up to 3 * milliseconds due to waiting for the output streams to close. |Name|Type|Description| |---|---|---| |milliseconds| integer | | lang=cpp, name=Lightning function WaitForClose(milliseconds : Integer) : Integer","title":"Asyncprocess"},{"location":"reference/class_reference/asyncprocessevent/","text":"Event Engine (NOTE) Sent out when AsyncProcess completes a partial read for a stream or the stream has finished reading all data. Methods Properties Base Classes Derived Classes Constructor Bytes event StreamType # Properties # Bytes : string Bytes being read from a stream. Note: These bytes may not form a valid string if the stream type was non ascii (e.g. utf-8). ``` lang=cpp, name=Lightning var Bytes : String # StreamType : StreamType The type of stream that sent this event. ``` lang=cpp, name=Lightning var StreamType : StreamType # Methods # AsyncProcessEvent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function AsyncProcessEvent() ```","title":"Asyncprocessevent"},{"location":"reference/class_reference/atlas/","text":"Resource Graphics Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Atlas"},{"location":"reference/class_reference/audio/","text":"Sound Methods Properties Base Classes Derived Classes AdditiveSynthNode DispatchMicrophoneCompressedByteData system AddNoiseNode DispatchMicrophoneUncompressedFloatData BandPassNode LatencySetting ChorusNode MuteAllAudio CompressorNode OutputChannels CustomAudioNode PeakInputLevel DelayNode PeakOutputLevel EqualizerNode RMSOutputLevel ExpanderNode SystemVolume FlangerNode GeneratedWaveNode GetNodeGraphInfo GranularSynthNode HighPassNode LowPassNode MicrophoneInputNode ModulationNode PanningNode PitchNode RecordingNode ReverbNode SaveAudioNode SoundBuffer VolumeNode # Properties # DispatchMicrophoneCompressedByteData : boolean ``` lang=cpp, name=Lightning var DispatchMicrophoneCompressedByteData : Boolean # DispatchMicrophoneUncompressedFloatData : boolean ``` lang=cpp, name=Lightning var DispatchMicrophoneUncompressedFloatData : Boolean # LatencySetting : AudioLatency ``` lang=cpp, name=Lightning var LatencySetting : AudioLatency # MuteAllAudio : boolean ``` lang=cpp, name=Lightning var MuteAllAudio : Boolean # OutputChannels : integer read-only ``` lang=cpp, name=Lightning var OutputChannels : Integer # PeakInputLevel : real read-only ``` lang=cpp, name=Lightning var PeakInputLevel : Real # PeakOutputLevel : real read-only ``` lang=cpp, name=Lightning var PeakOutputLevel : Real # RMSOutputLevel : real read-only ``` lang=cpp, name=Lightning var RMSOutputLevel : Real # SystemVolume : real ``` lang=cpp, name=Lightning var SystemVolume : Real # Methods # AdditiveSynthNode : additivesynthnode static Name Type Description ``` lang=cpp, name=Lightning function AdditiveSynthNode() : AdditiveSynthNode ``` # AddNoiseNode : addnoisenode static Name Type Description ``` lang=cpp, name=Lightning function AddNoiseNode() : AddNoiseNode ``` # BandPassNode : bandpassnode static Name Type Description ``` lang=cpp, name=Lightning function BandPassNode() : BandPassNode ``` # ChorusNode : chorusnode static Name Type Description ``` lang=cpp, name=Lightning function ChorusNode() : ChorusNode ``` # CompressorNode : compressornode static Name Type Description ``` lang=cpp, name=Lightning function CompressorNode() : CompressorNode ``` # CustomAudioNode : customaudionode static Name Type Description ``` lang=cpp, name=Lightning function CustomAudioNode() : CustomAudioNode ``` # DelayNode : delaynode static Name Type Description ``` lang=cpp, name=Lightning function DelayNode() : DelayNode ``` # EqualizerNode : equalizernode static Name Type Description ``` lang=cpp, name=Lightning function EqualizerNode() : EqualizerNode ``` # ExpanderNode : expandernode static Name Type Description ``` lang=cpp, name=Lightning function ExpanderNode() : ExpanderNode ``` # FlangerNode : flangernode static Name Type Description ``` lang=cpp, name=Lightning function FlangerNode() : FlangerNode ``` # GeneratedWaveNode : generatedwavenode static Name Type Description ``` lang=cpp, name=Lightning function GeneratedWaveNode() : GeneratedWaveNode ``` # GetNodeGraphInfo : nodeinfolistrange Name Type Description ``` lang=cpp, name=Lightning function GetNodeGraphInfo() : NodeInfoListRange ``` # GranularSynthNode : granularsynthnode static Name Type Description ``` lang=cpp, name=Lightning function GranularSynthNode() : GranularSynthNode ``` # HighPassNode : highpassnode static Name Type Description ``` lang=cpp, name=Lightning function HighPassNode() : HighPassNode ``` # LowPassNode : lowpassnode static Name Type Description ``` lang=cpp, name=Lightning function LowPassNode() : LowPassNode ``` # MicrophoneInputNode : microphoneinputnode static Name Type Description ``` lang=cpp, name=Lightning function MicrophoneInputNode() : MicrophoneInputNode ``` # ModulationNode : modulationnode static Name Type Description ``` lang=cpp, name=Lightning function ModulationNode() : ModulationNode ``` # PanningNode : panningnode static Name Type Description ``` lang=cpp, name=Lightning function PanningNode() : PanningNode ``` # PitchNode : pitchnode static Name Type Description ``` lang=cpp, name=Lightning function PitchNode() : PitchNode ``` # RecordingNode : recordingnode static Name Type Description ``` lang=cpp, name=Lightning function RecordingNode() : RecordingNode ``` # ReverbNode : reverbnode static Name Type Description ``` lang=cpp, name=Lightning function ReverbNode() : ReverbNode ``` # SaveAudioNode : saveaudionode static Name Type Description ``` lang=cpp, name=Lightning function SaveAudioNode() : SaveAudioNode ``` # SoundBuffer : soundbuffer static Name Type Description ``` lang=cpp, name=Lightning function SoundBuffer() : SoundBuffer ``` # VolumeNode : volumenode static Name Type Description ``` lang=cpp, name=Lightning function VolumeNode() : VolumeNode ```","title":"Audio"},{"location":"reference/class_reference/audiobytedataevent/","text":"Event Sound Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/class_reference/audiobytedataevent/#audiodata-array[byte] AudioData]] event # Properties # AudioData : Array[ byte ] ``` lang=cpp, name=Lightning var AudioData : Array[Byte] # Methods","title":"Audiobytedataevent"},{"location":"reference/class_reference/audiocontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Audiocontent"},{"location":"reference/class_reference/audiofloatdataevent/","text":"Event Sound Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/class_reference/audiofloatdataevent/#audiodata-array[real] AudioData]] event Channels # Properties # AudioData : Array[ real ] ``` lang=cpp, name=Lightning var AudioData : Array[Real] # Channels : integer ``` lang=cpp, name=Lightning var Channels : Integer # Methods","title":"Audiofloatdataevent"},{"location":"reference/class_reference/audiooptions/","text":"ContentMeta Methods Properties Base Classes Derived Classes GenerateCue Object GroupCueName StreamingMode # Properties # GenerateCue : AudioCueImport ``` lang=cpp, name=Lightning var GenerateCue : AudioCueImport # GroupCueName : string ``` lang=cpp, name=Lightning var GroupCueName : String # StreamingMode : AudioFileLoadType ``` lang=cpp, name=Lightning var StreamingMode : AudioFileLoadType # Methods","title":"Audiooptions"},{"location":"reference/class_reference/audiosettings/","text":"Component Sound Methods Properties Base Classes Derived Classes Constructor LatencySetting component MinVolumeThreshold MixType MuteAllAudio SystemVolume # Properties # LatencySetting : AudioLatency Using the high latency setting can fix some audio problems (such as clicks and static) but can lead to a slight delay in the audio. ``` lang=cpp, name=Lightning var LatencySetting : AudioLatency # MinVolumeThreshold : real Sets the volume threshold at which sounds will be virtualized (they will continue tracking their position and all data but will not process audio). This is a floating point volume number, not decibels. ``` lang=cpp, name=Lightning var MinVolumeThreshold : Real # MixType : AudioMixTypes Sets the number of channels the audio system uses when creating audio. See the enum descriptions. If your selection is different from the output device, it will be automatically translated to match the number of channels needed for output. ``` lang=cpp, name=Lightning var MixType : AudioMixTypes # MuteAllAudio : boolean When true, audio will be processed normally but will be silent. ``` lang=cpp, name=Lightning var MuteAllAudio : Boolean # SystemVolume : real An overall volume modifier that is applied to all audio produced by Plasma. ``` lang=cpp, name=Lightning var SystemVolume : Real # Methods # AudioSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function AudioSettings() ```","title":"Audiosettings"},{"location":"reference/class_reference/autocompletepopup/","text":"Editor Methods Properties Base Classes Derived Classes popup # Properties # Methods","title":"Autocompletepopup"},{"location":"reference/class_reference/backgroundtaskevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Backgroundtaskevent"},{"location":"reference/class_reference/backgroundtasks/","text":"Editor Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Backgroundtasks"},{"location":"reference/class_reference/bandpassnode/","text":"Sound (NOTE) Applies a band pass filter to audio generated by its input SoundNodes (removes low and high frequencies) Methods Properties Base Classes Derived Classes CentralFrequency soundnode QualityFactor # Properties # CentralFrequency : real The center frequency of the band. Frequencies above and below this band will be attenuated. ``` lang=cpp, name=Lightning var CentralFrequency : Real # QualityFactor : real The Q number of the band pass filter: higher numbers make the band smaller, while smaller numbers make it wider. The default value is 0.669. ``` lang=cpp, name=Lightning var QualityFactor : Real # Methods","title":"Bandpassnode"},{"location":"reference/class_reference/basecastfilter/","text":"Physics (NOTE) Used to filter objects during cast operations. Methods Properties Base Classes Derived Classes IgnoreChildren castfilter IgnoreDynamic IgnoreGhost IgnoreKinematic IgnoreStatic # Properties # IgnoreChildren : boolean This flag is currently only used for SweepCollider tests on PhysicsSpace. This is used to ignore all objects that are a child of the Collider that is being swept. ``` lang=cpp, name=Lightning var IgnoreChildren : Boolean # IgnoreDynamic : boolean Should Colliders with RigidBodies marked Dynamic be ignored during casts? ``` lang=cpp, name=Lightning var IgnoreDynamic : Boolean # IgnoreGhost : boolean Should Colliders marked Ghost be ignored during casts? ``` lang=cpp, name=Lightning var IgnoreGhost : Boolean # IgnoreKinematic : boolean Should Colliders with RigidBodies marked Kinematic be ignored during casts? ``` lang=cpp, name=Lightning var IgnoreKinematic : Boolean # IgnoreStatic : boolean Should Colliders with RigidBodies marked Static be ignored during casts? Note: Collider's with no RigidBody are treated as static. ``` lang=cpp, name=Lightning var IgnoreStatic : Boolean # Methods","title":"Basecastfilter"},{"location":"reference/class_reference/basecollisionevent/","text":"Event Physics (NOTE) Common interface for all collision events. Contains shared methods to access contact information for a collision. Methods Properties Base Classes Derived Classes ContactPointCount event collisionevent ContactPoints collisiongroupevent IsGhost presolveevent Object OtherObject # Properties # ContactPointCount : integer read-only The number of contact points in this collision. ``` lang=cpp, name=Lightning var ContactPointCount : Integer # ContactPoints : contactpointrange read-only A range for iterating through all contact points. ``` lang=cpp, name=Lightning var ContactPoints : ContactPointRange # IsGhost : boolean read-only If this was a ghost collision (detected but not resolved). ``` lang=cpp, name=Lightning var IsGhost : Boolean # Object : cog read-only The object that this event was sent to. ``` lang=cpp, name=Lightning var Object : Cog # OtherObject : cog read-only The other object in this collision. ``` lang=cpp, name=Lightning var OtherObject : Cog # Methods","title":"Basecollisionevent"},{"location":"reference/class_reference/basescrollarea/","text":"Widget Methods Properties Base Classes Derived Classes composite scrollarea texteditor # Properties # Methods","title":"Basescrollarea"},{"location":"reference/class_reference/basesprite/","text":"Component Graphics (NOTE) Common interface for 2D Sprite based graphicals. Methods Properties Base Classes Derived Classes GeometryMode graphical multisprite VertexColor sprite spritetext # Properties # GeometryMode : SpriteGeometryMode How the Sprite should be oriented in 3D space. ``` lang=cpp, name=Lightning var GeometryMode : SpriteGeometryMode # VertexColor : real4 Color attribute of the generated vertices accessible in the vertex shader. ``` lang=cpp, name=Lightning var VertexColor : Real4 # Methods","title":"Basesprite"},{"location":"reference/class_reference/basetextbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes buildercomponent textbuilder lightningfragmentbuilder lightningscriptbuilder # Properties # Methods","title":"Basetextbuilder"},{"location":"reference/class_reference/basicanimation/","text":"Engine Methods Properties Base Classes Derived Classes Animation animationnode PlayMode # Properties # Animation : animation ``` lang=cpp, name=Lightning var Animation : Animation # PlayMode : AnimationPlayMode ``` lang=cpp, name=Lightning var PlayMode : AnimationPlayMode # Methods","title":"Basicanimation"},{"location":"reference/class_reference/basicdirectioneffect/","text":"Component Physics (NOTE) Common interface for all directional force effects. Used to group together all common logic/variables for the force/gravity variants. Methods Properties Base Classes Derived Classes Direction physicseffect forceeffect LocalSpaceDirection gravityeffect Strength WorldDirection # Properties # Direction : real3 The direction that the effect will be applied in (may be in local or world space depending on the LocalSpaceDirection property). ``` lang=cpp, name=Lightning var Direction : Real3 # LocalSpaceDirection : boolean Determines if the direction that the effect is applied is in local or world space. This vector is normalized when calculating forces. ``` lang=cpp, name=Lightning var LocalSpaceDirection : Boolean # Strength : real The magnitude of the force to apply. ``` lang=cpp, name=Lightning var Strength : Real # WorldDirection : real3 read-only The world direction of the effect. If the effect is not in local space then this is the same as Direction. ``` lang=cpp, name=Lightning var WorldDirection : Real3 # Methods","title":"Basicdirectioneffect"},{"location":"reference/class_reference/basicpointeffect/","text":"Component Physics (NOTE) Common interface for all point effects. Used to attract or repel objects towards a central point. The strength of the effect is calculated as an interpolation between two strength values at two radial distances. Methods Properties Base Classes Derived Classes EndCondition physicseffect pointforceeffect InterpolationType pointgravityeffect LocalPositionOffset MaxDistance MinDistance StrengthAtMax StrengthAtMin # Properties # EndCondition : PhysicsEffectEndCondition How the interpolation should be handled after max distance. ClampToMax will clamp to StrengthAtMax. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative). ``` lang=cpp, name=Lightning var EndCondition : PhysicsEffectEndCondition # InterpolationType : PhysicsEffectInterpolationType The type of interpolation used (e.g. Linear, Quadratic) for the effect. ``` lang=cpp, name=Lightning var InterpolationType : PhysicsEffectInterpolationType # LocalPositionOffset : real3 The offset from the transform position (in local space) that the point effect will be applied at. ``` lang=cpp, name=Lightning var LocalPositionOffset : Real3 # MaxDistance : real The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition. ``` lang=cpp, name=Lightning var MaxDistance : Real # MinDistance : real The first distance at which attenuation will start. If an object is under the min distance, StrengthAtMin will be used. If an object is in between min and max, then it will attenuate. ``` lang=cpp, name=Lightning var MinDistance : Real # StrengthAtMax : real The strength that this effect applies at the max distance. ``` lang=cpp, name=Lightning var StrengthAtMax : Real # StrengthAtMin : real The strength that this effect applies at the min distance. ``` lang=cpp, name=Lightning var StrengthAtMin : Real # Methods","title":"Basicpointeffect"},{"location":"reference/class_reference/binarybuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor buildercomponent # Properties # Methods # BinaryBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function BinaryBuilder() ```","title":"Binarybuilder"},{"location":"reference/class_reference/binarycontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Binarycontent"},{"location":"reference/class_reference/bitstream/","text":"Networking (NOTE) Bit-packed data stream. Methods Properties Base Classes Derived Classes Constructor CanReadBoolean CanReadDoubleInteger CanReadDoubleIntegerQuantized CanReadDoubleReal CanReadDoubleRealQuantized CanReadInteger CanReadInteger2 CanReadInteger2Quantized CanReadInteger3 CanReadInteger3Quantized CanReadInteger4 CanReadInteger4Quantized CanReadIntegerQuantized CanReadQuaternion CanReadReal CanReadReal2 CanReadReal2Half CanReadReal2Quantized CanReadReal3 CanReadReal3Half CanReadReal3Quantized CanReadReal4 CanReadReal4Half CanReadReal4Quantized CanReadRealHalf CanReadRealQuantized CanReadString Clear ClearBitsRead ClearBitsWritten GetBitCapacity GetBitsRead GetBitsUnread GetBitsUnwritten GetBitsWritten GetByteCapacity GetBytesRead GetBytesUnread GetBytesUnwritten GetBytesWritten IsEmpty MeasureBoolean MeasureDoubleInteger MeasureDoubleIntegerQuantized MeasureDoubleReal MeasureDoubleRealQuantized MeasureInteger MeasureInteger2 MeasureInteger2Quantized MeasureInteger3 MeasureInteger3Quantized MeasureInteger4 MeasureInteger4Quantized MeasureIntegerQuantized MeasureQuaternion MeasureReal MeasureReal2 MeasureReal2Half MeasureReal2Quantized MeasureReal3 MeasureReal3Half MeasureReal3Quantized MeasureReal4 MeasureReal4Half MeasureReal4Quantized MeasureRealHalf MeasureRealQuantized MeasureString ReadBoolean ReadDoubleInteger ReadDoubleIntegerQuantized ReadDoubleReal ReadDoubleRealQuantized ReadInteger ReadInteger2 ReadInteger2Quantized ReadInteger3 ReadInteger3Quantized ReadInteger4 ReadInteger4Quantized ReadIntegerQuantized ReadQuaternion ReadReal ReadReal2 ReadReal2Half ReadReal2Quantized ReadReal3 ReadReal3Half ReadReal3Quantized ReadReal4 ReadReal4Half ReadReal4Quantized ReadRealHalf ReadRealQuantized ReadString Reserve SetBitsRead SetBitsWritten SetBytesRead SetBytesWritten Unread WriteBoolean WriteDoubleInteger WriteDoubleIntegerQuantized WriteDoubleReal WriteDoubleRealQuantized WriteInteger WriteInteger2 WriteInteger2Quantized WriteInteger3 WriteInteger3Quantized WriteInteger4 WriteInteger4Quantized WriteIntegerQuantized WriteQuaternion WriteReal WriteReal2 WriteReal2Half WriteReal2Quantized WriteReal3 WriteReal3Half WriteReal3Quantized WriteReal4 WriteReal4Half WriteReal4Quantized WriteRealHalf WriteRealQuantized WriteString # Properties # Methods # BitStream : Void constructor Default Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function BitStream() # CanReadBoolean : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadBoolean() : Boolean ``` # CanReadDoubleInteger : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadDoubleInteger() : Boolean ``` # CanReadDoubleIntegerQuantized : boolean Name Type Description doubleinteger doubleinteger ``` lang=cpp, name=Lightning function CanReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger) : Boolean ``` # CanReadDoubleIntegerQuantized : boolean Name Type Description doubleinteger doubleinteger doubleinteger ``` lang=cpp, name=Lightning function CanReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) : Boolean ``` # CanReadDoubleReal : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadDoubleReal() : Boolean ``` # CanReadDoubleRealQuantized : boolean Name Type Description doublereal doublereal ``` lang=cpp, name=Lightning function CanReadDoubleRealQuantized( : DoubleReal, : DoubleReal) : Boolean ``` # CanReadDoubleRealQuantized : boolean Name Type Description doublereal doublereal doublereal ``` lang=cpp, name=Lightning function CanReadDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) : Boolean ``` # CanReadInteger : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadInteger() : Boolean ``` # CanReadInteger2 : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadInteger2() : Boolean ``` # CanReadInteger2Quantized : boolean Name Type Description integer2 integer2 ``` lang=cpp, name=Lightning function CanReadInteger2Quantized( : Integer2, : Integer2) : Boolean ``` # CanReadInteger2Quantized : boolean Name Type Description integer2 integer2 integer2 ``` lang=cpp, name=Lightning function CanReadInteger2Quantized( : Integer2, : Integer2, : Integer2) : Boolean ``` # CanReadInteger3 : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadInteger3() : Boolean ``` # CanReadInteger3Quantized : boolean Name Type Description integer3 integer3 ``` lang=cpp, name=Lightning function CanReadInteger3Quantized( : Integer3, : Integer3) : Boolean ``` # CanReadInteger3Quantized : boolean Name Type Description integer3 integer3 integer3 ``` lang=cpp, name=Lightning function CanReadInteger3Quantized( : Integer3, : Integer3, : Integer3) : Boolean ``` # CanReadInteger4 : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadInteger4() : Boolean ``` # CanReadInteger4Quantized : boolean Name Type Description integer4 integer4 ``` lang=cpp, name=Lightning function CanReadInteger4Quantized( : Integer4, : Integer4) : Boolean ``` # CanReadInteger4Quantized : boolean Name Type Description integer4 integer4 integer4 ``` lang=cpp, name=Lightning function CanReadInteger4Quantized( : Integer4, : Integer4, : Integer4) : Boolean ``` # CanReadIntegerQuantized : boolean Name Type Description integer integer ``` lang=cpp, name=Lightning function CanReadIntegerQuantized( : Integer, : Integer) : Boolean ``` # CanReadIntegerQuantized : boolean Name Type Description integer integer integer ``` lang=cpp, name=Lightning function CanReadIntegerQuantized( : Integer, : Integer, : Integer) : Boolean ``` # CanReadQuaternion : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadQuaternion() : Boolean ``` # CanReadReal : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal() : Boolean ``` # CanReadReal2 : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal2() : Boolean ``` # CanReadReal2Half : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal2Half() : Boolean ``` # CanReadReal2Quantized : boolean Name Type Description real2 real2 ``` lang=cpp, name=Lightning function CanReadReal2Quantized( : Real2, : Real2) : Boolean ``` # CanReadReal2Quantized : boolean Name Type Description real2 real2 real2 ``` lang=cpp, name=Lightning function CanReadReal2Quantized( : Real2, : Real2, : Real2) : Boolean ``` # CanReadReal3 : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal3() : Boolean ``` # CanReadReal3Half : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal3Half() : Boolean ``` # CanReadReal3Quantized : boolean Name Type Description real3 real3 ``` lang=cpp, name=Lightning function CanReadReal3Quantized( : Real3, : Real3) : Boolean ``` # CanReadReal3Quantized : boolean Name Type Description real3 real3 real3 ``` lang=cpp, name=Lightning function CanReadReal3Quantized( : Real3, : Real3, : Real3) : Boolean ``` # CanReadReal4 : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal4() : Boolean ``` # CanReadReal4Half : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadReal4Half() : Boolean ``` # CanReadReal4Quantized : boolean Name Type Description real4 real4 ``` lang=cpp, name=Lightning function CanReadReal4Quantized( : Real4, : Real4) : Boolean ``` # CanReadReal4Quantized : boolean Name Type Description real4 real4 real4 ``` lang=cpp, name=Lightning function CanReadReal4Quantized( : Real4, : Real4, : Real4) : Boolean ``` # CanReadRealHalf : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadRealHalf() : Boolean ``` # CanReadRealQuantized : boolean Name Type Description real real ``` lang=cpp, name=Lightning function CanReadRealQuantized( : Real, : Real) : Boolean ``` # CanReadRealQuantized : boolean Name Type Description real real real ``` lang=cpp, name=Lightning function CanReadRealQuantized( : Real, : Real, : Real) : Boolean ``` # CanReadString : boolean Name Type Description ``` lang=cpp, name=Lightning function CanReadString() : Boolean ``` # Clear : Void Clears all data written and resets the bitstream, optionally freeing reserved memory. |Name|Type|Description| |---|---|---| |freeMemory| boolean | | lang=cpp, name=Lightning function Clear(freeMemory : Boolean) # ClearBitsRead : Void Clears the number of bits read. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearBitsRead() # ClearBitsWritten : Void Clears the number of bits written. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearBitsWritten() # GetBitCapacity : integer Returns the data array capacity in bits. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBitCapacity() : Integer # GetBitsRead : integer Returns the number of bits read. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBitsRead() : Integer # GetBitsUnread : integer Returns the number of bits unread. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBitsUnread() : Integer # GetBitsUnwritten : integer Returns the number of bits unwritten. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBitsUnwritten() : Integer # GetBitsWritten : integer Returns the number of bits written. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBitsWritten() : Integer # GetByteCapacity : integer Returns the data array capacity in bytes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetByteCapacity() : Integer # GetBytesRead : integer Returns the number of bytes read (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBytesRead() : Integer # GetBytesUnread : integer Returns the number of bytes unread (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBytesUnread() : Integer # GetBytesUnwritten : integer Returns the number of bytes unwritten (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBytesUnwritten() : Integer # GetBytesWritten : integer Returns the number of bytes written (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetBytesWritten() : Integer # IsEmpty : boolean Returns true if the BitStream is empty (0 bits written), else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsEmpty() : Boolean # MeasureBoolean : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureBoolean() : Integer ``` # MeasureDoubleInteger : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureDoubleInteger() : Integer ``` # MeasureDoubleIntegerQuantized : integer static Name Type Description doubleinteger doubleinteger ``` lang=cpp, name=Lightning function MeasureDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger) : Integer ``` # MeasureDoubleIntegerQuantized : integer static Name Type Description doubleinteger doubleinteger doubleinteger ``` lang=cpp, name=Lightning function MeasureDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) : Integer ``` # MeasureDoubleReal : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureDoubleReal() : Integer ``` # MeasureDoubleRealQuantized : integer static Name Type Description doublereal doublereal ``` lang=cpp, name=Lightning function MeasureDoubleRealQuantized( : DoubleReal, : DoubleReal) : Integer ``` # MeasureDoubleRealQuantized : integer static Name Type Description doublereal doublereal doublereal ``` lang=cpp, name=Lightning function MeasureDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) : Integer ``` # MeasureInteger : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureInteger() : Integer ``` # MeasureInteger2 : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureInteger2() : Integer ``` # MeasureInteger2Quantized : integer static Name Type Description integer2 integer2 ``` lang=cpp, name=Lightning function MeasureInteger2Quantized( : Integer2, : Integer2) : Integer ``` # MeasureInteger2Quantized : integer static Name Type Description integer2 integer2 integer2 ``` lang=cpp, name=Lightning function MeasureInteger2Quantized( : Integer2, : Integer2, : Integer2) : Integer ``` # MeasureInteger3 : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureInteger3() : Integer ``` # MeasureInteger3Quantized : integer static Name Type Description integer3 integer3 ``` lang=cpp, name=Lightning function MeasureInteger3Quantized( : Integer3, : Integer3) : Integer ``` # MeasureInteger3Quantized : integer static Name Type Description integer3 integer3 integer3 ``` lang=cpp, name=Lightning function MeasureInteger3Quantized( : Integer3, : Integer3, : Integer3) : Integer ``` # MeasureInteger4 : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureInteger4() : Integer ``` # MeasureInteger4Quantized : integer static Name Type Description integer4 integer4 ``` lang=cpp, name=Lightning function MeasureInteger4Quantized( : Integer4, : Integer4) : Integer ``` # MeasureInteger4Quantized : integer static Name Type Description integer4 integer4 integer4 ``` lang=cpp, name=Lightning function MeasureInteger4Quantized( : Integer4, : Integer4, : Integer4) : Integer ``` # MeasureIntegerQuantized : integer static Name Type Description integer integer ``` lang=cpp, name=Lightning function MeasureIntegerQuantized( : Integer, : Integer) : Integer ``` # MeasureIntegerQuantized : integer static Name Type Description integer integer integer ``` lang=cpp, name=Lightning function MeasureIntegerQuantized( : Integer, : Integer, : Integer) : Integer ``` # MeasureQuaternion : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureQuaternion() : Integer ``` # MeasureReal : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal() : Integer ``` # MeasureReal2 : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal2() : Integer ``` # MeasureReal2Half : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal2Half() : Integer ``` # MeasureReal2Quantized : integer static Name Type Description real2 real2 ``` lang=cpp, name=Lightning function MeasureReal2Quantized( : Real2, : Real2) : Integer ``` # MeasureReal2Quantized : integer static Name Type Description real2 real2 real2 ``` lang=cpp, name=Lightning function MeasureReal2Quantized( : Real2, : Real2, : Real2) : Integer ``` # MeasureReal3 : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal3() : Integer ``` # MeasureReal3Half : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal3Half() : Integer ``` # MeasureReal3Quantized : integer static Name Type Description real3 real3 ``` lang=cpp, name=Lightning function MeasureReal3Quantized( : Real3, : Real3) : Integer ``` # MeasureReal3Quantized : integer static Name Type Description real3 real3 real3 ``` lang=cpp, name=Lightning function MeasureReal3Quantized( : Real3, : Real3, : Real3) : Integer ``` # MeasureReal4 : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal4() : Integer ``` # MeasureReal4Half : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureReal4Half() : Integer ``` # MeasureReal4Quantized : integer static Name Type Description real4 real4 ``` lang=cpp, name=Lightning function MeasureReal4Quantized( : Real4, : Real4) : Integer ``` # MeasureReal4Quantized : integer static Name Type Description real4 real4 real4 ``` lang=cpp, name=Lightning function MeasureReal4Quantized( : Real4, : Real4, : Real4) : Integer ``` # MeasureRealHalf : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureRealHalf() : Integer ``` # MeasureRealQuantized : integer static Name Type Description real real ``` lang=cpp, name=Lightning function MeasureRealQuantized( : Real, : Real) : Integer ``` # MeasureRealQuantized : integer static Name Type Description real real real ``` lang=cpp, name=Lightning function MeasureRealQuantized( : Real, : Real, : Real) : Integer ``` # MeasureString : integer static Name Type Description ``` lang=cpp, name=Lightning function MeasureString() : Integer ``` # MeasureString : integer static Name Type Description string ``` lang=cpp, name=Lightning function MeasureString( : String) : Integer ``` # ReadBoolean : boolean Name Type Description ``` lang=cpp, name=Lightning function ReadBoolean() : Boolean ``` # ReadDoubleInteger : doubleinteger Name Type Description ``` lang=cpp, name=Lightning function ReadDoubleInteger() : DoubleInteger ``` # ReadDoubleIntegerQuantized : doubleinteger Name Type Description doubleinteger doubleinteger ``` lang=cpp, name=Lightning function ReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger) : DoubleInteger ``` # ReadDoubleIntegerQuantized : doubleinteger Name Type Description doubleinteger doubleinteger doubleinteger ``` lang=cpp, name=Lightning function ReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) : DoubleInteger ``` # ReadDoubleReal : doublereal Name Type Description ``` lang=cpp, name=Lightning function ReadDoubleReal() : DoubleReal ``` # ReadDoubleRealQuantized : doublereal Name Type Description doublereal doublereal ``` lang=cpp, name=Lightning function ReadDoubleRealQuantized( : DoubleReal, : DoubleReal) : DoubleReal ``` # ReadDoubleRealQuantized : doublereal Name Type Description doublereal doublereal doublereal ``` lang=cpp, name=Lightning function ReadDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) : DoubleReal ``` # ReadInteger : integer Name Type Description ``` lang=cpp, name=Lightning function ReadInteger() : Integer ``` # ReadInteger2 : integer2 Name Type Description ``` lang=cpp, name=Lightning function ReadInteger2() : Integer2 ``` # ReadInteger2Quantized : integer2 Name Type Description integer2 integer2 ``` lang=cpp, name=Lightning function ReadInteger2Quantized( : Integer2, : Integer2) : Integer2 ``` # ReadInteger2Quantized : integer2 Name Type Description integer2 integer2 integer2 ``` lang=cpp, name=Lightning function ReadInteger2Quantized( : Integer2, : Integer2, : Integer2) : Integer2 ``` # ReadInteger3 : integer3 Name Type Description ``` lang=cpp, name=Lightning function ReadInteger3() : Integer3 ``` # ReadInteger3Quantized : integer3 Name Type Description integer3 integer3 ``` lang=cpp, name=Lightning function ReadInteger3Quantized( : Integer3, : Integer3) : Integer3 ``` # ReadInteger3Quantized : integer3 Name Type Description integer3 integer3 integer3 ``` lang=cpp, name=Lightning function ReadInteger3Quantized( : Integer3, : Integer3, : Integer3) : Integer3 ``` # ReadInteger4 : integer4 Name Type Description ``` lang=cpp, name=Lightning function ReadInteger4() : Integer4 ``` # ReadInteger4Quantized : integer4 Name Type Description integer4 integer4 ``` lang=cpp, name=Lightning function ReadInteger4Quantized( : Integer4, : Integer4) : Integer4 ``` # ReadInteger4Quantized : integer4 Name Type Description integer4 integer4 integer4 ``` lang=cpp, name=Lightning function ReadInteger4Quantized( : Integer4, : Integer4, : Integer4) : Integer4 ``` # ReadIntegerQuantized : integer Name Type Description integer integer ``` lang=cpp, name=Lightning function ReadIntegerQuantized( : Integer, : Integer) : Integer ``` # ReadIntegerQuantized : integer Name Type Description integer integer integer ``` lang=cpp, name=Lightning function ReadIntegerQuantized( : Integer, : Integer, : Integer) : Integer ``` # ReadQuaternion : quaternion Name Type Description ``` lang=cpp, name=Lightning function ReadQuaternion() : Quaternion ``` # ReadReal : real Name Type Description ``` lang=cpp, name=Lightning function ReadReal() : Real ``` # ReadReal2 : real2 Name Type Description ``` lang=cpp, name=Lightning function ReadReal2() : Real2 ``` # ReadReal2Half : real2 Name Type Description ``` lang=cpp, name=Lightning function ReadReal2Half() : Real2 ``` # ReadReal2Quantized : real2 Name Type Description real2 real2 ``` lang=cpp, name=Lightning function ReadReal2Quantized( : Real2, : Real2) : Real2 ``` # ReadReal2Quantized : real2 Name Type Description real2 real2 real2 ``` lang=cpp, name=Lightning function ReadReal2Quantized( : Real2, : Real2, : Real2) : Real2 ``` # ReadReal3 : real3 Name Type Description ``` lang=cpp, name=Lightning function ReadReal3() : Real3 ``` # ReadReal3Half : real3 Name Type Description ``` lang=cpp, name=Lightning function ReadReal3Half() : Real3 ``` # ReadReal3Quantized : real3 Name Type Description real3 real3 ``` lang=cpp, name=Lightning function ReadReal3Quantized( : Real3, : Real3) : Real3 ``` # ReadReal3Quantized : real3 Name Type Description real3 real3 real3 ``` lang=cpp, name=Lightning function ReadReal3Quantized( : Real3, : Real3, : Real3) : Real3 ``` # ReadReal4 : real4 Name Type Description ``` lang=cpp, name=Lightning function ReadReal4() : Real4 ``` # ReadReal4Half : real4 Name Type Description ``` lang=cpp, name=Lightning function ReadReal4Half() : Real4 ``` # ReadReal4Quantized : real4 Name Type Description real4 real4 ``` lang=cpp, name=Lightning function ReadReal4Quantized( : Real4, : Real4) : Real4 ``` # ReadReal4Quantized : real4 Name Type Description real4 real4 real4 ``` lang=cpp, name=Lightning function ReadReal4Quantized( : Real4, : Real4, : Real4) : Real4 ``` # ReadRealHalf : real Name Type Description ``` lang=cpp, name=Lightning function ReadRealHalf() : Real ``` # ReadRealQuantized : real Name Type Description real real ``` lang=cpp, name=Lightning function ReadRealQuantized( : Real, : Real) : Real ``` # ReadRealQuantized : real Name Type Description real real real ``` lang=cpp, name=Lightning function ReadRealQuantized( : Real, : Real, : Real) : Real ``` # ReadString : string Name Type Description ``` lang=cpp, name=Lightning function ReadString() : String ``` # Reserve : Void Name Type Description integer ``` lang=cpp, name=Lightning function Reserve( : Integer) ``` # SetBitsRead : Void Name Type Description integer ``` lang=cpp, name=Lightning function SetBitsRead( : Integer) ``` # SetBitsWritten : Void Name Type Description integer ``` lang=cpp, name=Lightning function SetBitsWritten( : Integer) ``` # SetBytesRead : Void Name Type Description integer ``` lang=cpp, name=Lightning function SetBytesRead( : Integer) ``` # SetBytesWritten : Void Name Type Description integer ``` lang=cpp, name=Lightning function SetBytesWritten( : Integer) ``` # Unread : Void Name Type Description integer ``` lang=cpp, name=Lightning function Unread( : Integer) ``` # WriteBoolean : Void Name Type Description boolean ``` lang=cpp, name=Lightning function WriteBoolean( : Boolean) ``` # WriteDoubleInteger : Void Name Type Description doubleinteger ``` lang=cpp, name=Lightning function WriteDoubleInteger( : DoubleInteger) ``` # WriteDoubleIntegerQuantized : Void Name Type Description doubleinteger doubleinteger doubleinteger ``` lang=cpp, name=Lightning function WriteDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) ``` # WriteDoubleIntegerQuantized : Void Name Type Description doubleinteger doubleinteger doubleinteger doubleinteger ``` lang=cpp, name=Lightning function WriteDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger, : DoubleInteger) ``` # WriteDoubleReal : Void Name Type Description doublereal ``` lang=cpp, name=Lightning function WriteDoubleReal( : DoubleReal) ``` # WriteDoubleRealQuantized : Void Name Type Description doublereal doublereal doublereal ``` lang=cpp, name=Lightning function WriteDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) ``` # WriteDoubleRealQuantized : Void Name Type Description doublereal doublereal doublereal doublereal ``` lang=cpp, name=Lightning function WriteDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal, : DoubleReal) ``` # WriteInteger : Void Name Type Description integer ``` lang=cpp, name=Lightning function WriteInteger( : Integer) ``` # WriteInteger2 : Void Name Type Description integer2 ``` lang=cpp, name=Lightning function WriteInteger2( : Integer2) ``` # WriteInteger2Quantized : Void Name Type Description integer2 integer2 integer2 ``` lang=cpp, name=Lightning function WriteInteger2Quantized( : Integer2, : Integer2, : Integer2) ``` # WriteInteger2Quantized : Void Name Type Description integer2 integer2 integer2 integer2 ``` lang=cpp, name=Lightning function WriteInteger2Quantized( : Integer2, : Integer2, : Integer2, : Integer2) ``` # WriteInteger3 : Void Name Type Description integer3 ``` lang=cpp, name=Lightning function WriteInteger3( : Integer3) ``` # WriteInteger3Quantized : Void Name Type Description integer3 integer3 integer3 ``` lang=cpp, name=Lightning function WriteInteger3Quantized( : Integer3, : Integer3, : Integer3) ``` # WriteInteger3Quantized : Void Name Type Description integer3 integer3 integer3 integer3 ``` lang=cpp, name=Lightning function WriteInteger3Quantized( : Integer3, : Integer3, : Integer3, : Integer3) ``` # WriteInteger4 : Void Name Type Description integer4 ``` lang=cpp, name=Lightning function WriteInteger4( : Integer4) ``` # WriteInteger4Quantized : Void Name Type Description integer4 integer4 integer4 ``` lang=cpp, name=Lightning function WriteInteger4Quantized( : Integer4, : Integer4, : Integer4) ``` # WriteInteger4Quantized : Void Name Type Description integer4 integer4 integer4 integer4 ``` lang=cpp, name=Lightning function WriteInteger4Quantized( : Integer4, : Integer4, : Integer4, : Integer4) ``` # WriteIntegerQuantized : Void Name Type Description integer integer integer ``` lang=cpp, name=Lightning function WriteIntegerQuantized( : Integer, : Integer, : Integer) ``` # WriteIntegerQuantized : Void Name Type Description integer integer integer integer ``` lang=cpp, name=Lightning function WriteIntegerQuantized( : Integer, : Integer, : Integer, : Integer) ``` # WriteQuaternion : Void Name Type Description quaternion ``` lang=cpp, name=Lightning function WriteQuaternion( : Quaternion) ``` # WriteReal : Void Name Type Description real ``` lang=cpp, name=Lightning function WriteReal( : Real) ``` # WriteReal2 : Void Name Type Description real2 ``` lang=cpp, name=Lightning function WriteReal2( : Real2) ``` # WriteReal2Half : Void Name Type Description real2 ``` lang=cpp, name=Lightning function WriteReal2Half( : Real2) ``` # WriteReal2Quantized : Void Name Type Description real2 real2 real2 ``` lang=cpp, name=Lightning function WriteReal2Quantized( : Real2, : Real2, : Real2) ``` # WriteReal2Quantized : Void Name Type Description real2 real2 real2 real2 ``` lang=cpp, name=Lightning function WriteReal2Quantized( : Real2, : Real2, : Real2, : Real2) ``` # WriteReal3 : Void Name Type Description real3 ``` lang=cpp, name=Lightning function WriteReal3( : Real3) ``` # WriteReal3Half : Void Name Type Description real3 ``` lang=cpp, name=Lightning function WriteReal3Half( : Real3) ``` # WriteReal3Quantized : Void Name Type Description real3 real3 real3 ``` lang=cpp, name=Lightning function WriteReal3Quantized( : Real3, : Real3, : Real3) ``` # WriteReal3Quantized : Void Name Type Description real3 real3 real3 real3 ``` lang=cpp, name=Lightning function WriteReal3Quantized( : Real3, : Real3, : Real3, : Real3) ``` # WriteReal4 : Void Name Type Description real4 ``` lang=cpp, name=Lightning function WriteReal4( : Real4) ``` # WriteReal4Half : Void Name Type Description real4 ``` lang=cpp, name=Lightning function WriteReal4Half( : Real4) ``` # WriteReal4Quantized : Void Name Type Description real4 real4 real4 ``` lang=cpp, name=Lightning function WriteReal4Quantized( : Real4, : Real4, : Real4) ``` # WriteReal4Quantized : Void Name Type Description real4 real4 real4 real4 ``` lang=cpp, name=Lightning function WriteReal4Quantized( : Real4, : Real4, : Real4, : Real4) ``` # WriteRealHalf : Void Name Type Description real ``` lang=cpp, name=Lightning function WriteRealHalf( : Real) ``` # WriteRealQuantized : Void Name Type Description real real real ``` lang=cpp, name=Lightning function WriteRealQuantized( : Real, : Real, : Real) ``` # WriteRealQuantized : Void Name Type Description real real real real ``` lang=cpp, name=Lightning function WriteRealQuantized( : Real, : Real, : Real, : Real) ``` # WriteString : Void Name Type Description string ``` lang=cpp, name=Lightning function WriteString( : String) ```","title":"Bitstream"},{"location":"reference/class_reference/blendsettings/","text":"Graphics (NOTE) Settings for how pixel shader outputs are combined with the RenderTarget's current values. Methods Properties Base Classes Derived Classes Constructor BlendEquation BlendEquationAlpha BlendMode DestFactor DestFactorAlpha SourceFactor SourceFactorAlpha # Properties # BlendEquation : BlendEquation ``` lang=cpp, name=Lightning var BlendEquation : BlendEquation # BlendEquationAlpha : BlendEquation ``` lang=cpp, name=Lightning var BlendEquationAlpha : BlendEquation # BlendMode : BlendMode ``` lang=cpp, name=Lightning var BlendMode : BlendMode # DestFactor : BlendFactor ``` lang=cpp, name=Lightning var DestFactor : BlendFactor # DestFactorAlpha : BlendFactor ``` lang=cpp, name=Lightning var DestFactorAlpha : BlendFactor # SourceFactor : BlendFactor ``` lang=cpp, name=Lightning var SourceFactor : BlendFactor # SourceFactorAlpha : BlendFactor ``` lang=cpp, name=Lightning var SourceFactorAlpha : BlendFactor # Methods # BlendSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function BlendSettings() ``` # BlendSettings : Void constructor Name Type Description other blendsettings ``` lang=cpp, name=Lightning function BlendSettings(other : BlendSettings) ```","title":"Blendsettings"},{"location":"reference/class_reference/blendsettingsmrt/","text":"Graphics (NOTE) Indexable interface for settings BlendSettings. Methods Properties Base Classes Derived Classes Get threadsafereferencecounted Set # Properties # Methods # Get : blendsettings Get the current BlendSettings for a color target at the given index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : BlendSettings # Set : Void Set the BlendSettings for a color target at the given index. |Name|Type|Description| |---|---|---| |index| integer | | |blendSettings| blendsettings | | lang=cpp, name=Lightning function Set(index : Integer, blendSettings : BlendSettings)","title":"Blendsettingsmrt"},{"location":"reference/class_reference/blockingtaskevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Blockingtaskevent"},{"location":"reference/class_reference/blockingwebrequest/","text":"Networking Methods Properties Base Classes Derived Classes Url eventobject # Properties # Url : string ``` lang=cpp, name=Lightning var Url : String # Methods","title":"Blockingwebrequest"},{"location":"reference/class_reference/bone/","text":"Component Graphics (NOTE) Used by Skeleton to identify child objects whose transforms can be used for mesh skinning. Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # Bone : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Bone() ```","title":"Bone"},{"location":"reference/class_reference/boundingboxbroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase # Properties # Methods","title":"Boundingboxbroadphase"},{"location":"reference/class_reference/boundingspherebroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase # Properties # Methods","title":"Boundingspherebroadphase"},{"location":"reference/class_reference/boxcollider/","text":"Component Physics (NOTE) Defines the collision volume of a box defined by a size on each axis. Methods Properties Base Classes Derived Classes Constructor HalfSize collider Size WorldSize # Properties # HalfSize : real3 The half size (from the center to the upper-right corner) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues). ``` lang=cpp, name=Lightning var HalfSize : Real3 # Size : real3 The size (from min to max) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues). ``` lang=cpp, name=Lightning var Size : Real3 # WorldSize : real3 read-only The size of the box after the transform is applied (scale and rotation). ``` lang=cpp, name=Lightning var WorldSize : Real3 # Methods # BoxCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function BoxCollider() ```","title":"Boxcollider"},{"location":"reference/class_reference/boxparticleemitter/","text":"Component Graphics (NOTE) Emits particles inside a box. Methods Properties Base Classes Derived Classes Constructor particleemittershared # Properties # Methods # BoxParticleEmitter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function BoxParticleEmitter() ```","title":"Boxparticleemitter"},{"location":"reference/class_reference/bugreporterresponse/","text":"Event Editor Methods Properties Base Classes Derived Classes Response event # Properties # Response : string ``` lang=cpp, name=Lightning var Response : String # Methods","title":"Bugreporterresponse"},{"location":"reference/class_reference/buildercomponent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomponent animationbuilder basetextbuilder binarybuilder databuilder fontbuilder meshbuilder physicsmeshbuilder richanimationbuilder soundbuilder spritesourcebuilder texturebuilder # Properties # Methods","title":"Buildercomponent"},{"location":"reference/class_reference/buildinfo/","text":"Engine Methods Properties Base Classes Derived Classes Constructor Object # Properties # Methods # BuildInfo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function BuildInfo() ```","title":"Buildinfo"},{"location":"reference/class_reference/buoyancyeffect/","text":"Component Physics (NOTE) Applies a buoyancy force to an object in a given direction. Methods Properties Base Classes Derived Classes Constructor DebugDrawRuntime physicseffect Density Detail Gravity # Properties # DebugDrawRuntime : boolean Draw the points used to compute the buoyancy during run-time. This helps in debugging, but should be left off during normal run. ``` lang=cpp, name=Lightning var DebugDrawRuntime : Boolean # Density : real The density of the fluid. ``` lang=cpp, name=Lightning var Density : Real # Detail : integer The amount of points to subdivide each object into for sampling (total points is Detail^3) ``` lang=cpp, name=Lightning var Detail : Integer # Gravity : real3 The direction of gravity in world-space. ``` lang=cpp, name=Lightning var Gravity : Real3 # Methods # BuoyancyEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function BuoyancyEffect() ```","title":"Buoyancyeffect"},{"location":"reference/class_reference/buttonbase/","text":"Widget Methods Properties Base Classes Derived Classes composite iconbutton textbutton # Properties # Methods","title":"Buttonbase"},{"location":"reference/class_reference/calltippopup/","text":"Editor Methods Properties Base Classes Derived Classes popup # Properties # Methods","title":"Calltippopup"},{"location":"reference/class_reference/camera/","text":"Component Graphics (NOTE) Represents a viewpoint for rendering. Methods Properties Base Classes Derived Classes Constructor CameraViewportCog component GetFrustum FarPlane FieldOfView NearPlane PerspectiveMode Size WorldDirection WorldTranslation WorldUp # Properties # CameraViewportCog : cog read-only The object that has a CameraViewport component using this Camera, if any. ``` lang=cpp, name=Lightning var CameraViewportCog : Cog # FarPlane : real The far clipping plane, always positive and in the view direction. ``` lang=cpp, name=Lightning var FarPlane : Real # FieldOfView : real The vertical field of view of the Camera, in degrees. Horizontal fov derived from aspect ratio (Hor+). ``` lang=cpp, name=Lightning var FieldOfView : Real # NearPlane : real The near clipping plane, always positive and in the view direction. ``` lang=cpp, name=Lightning var NearPlane : Real # PerspectiveMode : PerspectiveMode How the scene is projected on to the view plane. ``` lang=cpp, name=Lightning var PerspectiveMode : PerspectiveMode # Size : real Size (width and height) of the orthographic projection, in world units. ``` lang=cpp, name=Lightning var Size : Real # WorldDirection : real3 read-only Direction the Camera is facing, in world space. ``` lang=cpp, name=Lightning var WorldDirection : Real3 # WorldTranslation : real3 read-only Translation of the Camera, in world space. ``` lang=cpp, name=Lightning var WorldTranslation : Real3 # WorldUp : real3 read-only The upright direction of the Camera(perpendicular to facing direction), in world space. ``` lang=cpp, name=Lightning var WorldUp : Real3 # Methods # Camera : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Camera() ``` # GetFrustum : frustum Creates a frustum using the Camera's settings along with the given aspect ratio. |Name|Type|Description| |---|---|---| |aspect| real | | lang=cpp, name=Lightning function GetFrustum(aspect : Real) : Frustum","title":"Camera"},{"location":"reference/class_reference/cameraviewport/","text":"Component Gameplay (NOTE) Manages all setup between Camera, Renderer, and viewport UI that is required to define how anything is to be rendered. Methods Properties Base Classes Derived Classes Constructor Camera component ScreenToViewport CameraPath ScreenToWorldPlane FinalTexture ScreenToWorldRay ForwardViewportEvents ScreenToWorldViewPlane Frustum ScreenToWorldZPlane MarginColor ViewPlaneSize MouseWorldRay ViewportTakeFocus NormalizedOffset ViewportToScreen NormalizedSize WorldToScreen RendererPath RenderInEditor RenderInGame RenderOrder RenderToViewport ResolutionOrAspect ViewportHasFocus ViewportOffset ViewportOffsetWithMargin ViewportResolution ViewportResolutionWithMargin ViewportScaling ViewToPerspective WorldToPerspective WorldToView # Properties # Camera : camera read-only Find the Camera component from the CameraPath (or null if it doesn't exist). ``` lang=cpp, name=Lightning var Camera : Camera # CameraPath : cogpath Object with the Camera component to be used for rendering. A Camera can only be used by one CameraViewport, if already used by another usage will be stolen when assigned. ``` lang=cpp, name=Lightning var CameraPath : CogPath # FinalTexture : texture read-only Texture that contains the end result of this CameraViewport's rendering. Must be explicitly written to in renderer script. ``` lang=cpp, name=Lightning var FinalTexture : Texture # ForwardViewportEvents : boolean Forwards mouse events to viewports underneath this viewport. ``` lang=cpp, name=Lightning var ForwardViewportEvents : Boolean # Frustum : frustum read-only Creates a frustum using the CameraViewport's settings (including aspect ratio). If the Camera is null, then this will throw an exception. ``` lang=cpp, name=Lightning var Frustum : Frustum # MarginColor : real4 Color to used for letterbox/scaling margins. ``` lang=cpp, name=Lightning var MarginColor : Real4 # MouseWorldRay : ray read-only Get the world ray starting from the mouse. ``` lang=cpp, name=Lightning var MouseWorldRay : Ray # NormalizedOffset : real2 Offset of the viewport in normalized UI coordinates. ``` lang=cpp, name=Lightning var NormalizedOffset : Real2 # NormalizedSize : real2 Size of viewport in normalized UI coordinates. ``` lang=cpp, name=Lightning var NormalizedSize : Real2 # RendererPath : cogpath Object with renderer script that connects to RenderTasksUpdate that determines what rendering will be done. ``` lang=cpp, name=Lightning var RendererPath : CogPath # RenderInEditor : boolean If rendering will be ran in edit mode. ``` lang=cpp, name=Lightning var RenderInEditor : Boolean # RenderInGame : boolean If rendering will be ran in play game mode. ``` lang=cpp, name=Lightning var RenderInGame : Boolean # RenderOrder : integer The order that rendering should be done relative to other CameraViewports, lowest to highest. ``` lang=cpp, name=Lightning var RenderOrder : Integer # RenderToViewport : boolean If the rendering result in FinalTexture should also be placed on the UI viewport. ``` lang=cpp, name=Lightning var RenderToViewport : Boolean # ResolutionOrAspect : integer2 ``` lang=cpp, name=Lightning var ResolutionOrAspect : Integer2 # ViewportHasFocus : boolean read-only If the viewport created by this CameraViewport, if rendering to one, has focus. ``` lang=cpp, name=Lightning var ViewportHasFocus : Boolean # ViewportOffset : real2 read-only The current offset of the viewport, in pixels. ``` lang=cpp, name=Lightning var ViewportOffset : Real2 # ViewportOffsetWithMargin : real2 read-only The current offset of the viewport's margin, in pixels. ``` lang=cpp, name=Lightning var ViewportOffsetWithMargin : Real2 # ViewportResolution : real2 read-only The current resolution of the viewport. ``` lang=cpp, name=Lightning var ViewportResolution : Real2 # ViewportResolutionWithMargin : real2 read-only The current resolution of the viewport including margin. ``` lang=cpp, name=Lightning var ViewportResolutionWithMargin : Real2 # ViewportScaling : ViewportScaling Method to use for sizing the viewport. ``` lang=cpp, name=Lightning var ViewportScaling : ViewportScaling # ViewToPerspective : real4x4 read-only Transformation that defines how the view frustum is mapped to normalized coordinates, pre W divide. ``` lang=cpp, name=Lightning var ViewToPerspective : Real4x4 # WorldToPerspective : real4x4 read-only Concatenation of the WorldToView and ViewToPerspective transformations. ``` lang=cpp, name=Lightning var WorldToPerspective : Real4x4 # WorldToView : real4x4 read-only Transformation that defines view space as the Camera at the origin and the view direction as -Z. ``` lang=cpp, name=Lightning var WorldToView : Real4x4 # Methods # CameraViewport : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CameraViewport() ``` # ScreenToViewport : real2 Convert a screen point to a point relative to the viewport. |Name|Type|Description| |---|---|---| |screenPoint| real2 | | lang=cpp, name=Lightning function ScreenToViewport(screenPoint : Real2) : Real2 # ScreenToWorldPlane : real3 Convert the screen point to a position on a given plane. |Name|Type|Description| |---|---|---| |screenPoint| real2 | | |worldPlaneNormal| real3 | | |worldPlanePosition| real3 | | lang=cpp, name=Lightning function ScreenToWorldPlane(screenPoint : Real2, worldPlaneNormal : Real3, worldPlanePosition : Real3) : Real3 # ScreenToWorldRay : ray Convert a screen point to a ray. |Name|Type|Description| |---|---|---| |screenPoint| real2 | | lang=cpp, name=Lightning function ScreenToWorldRay(screenPoint : Real2) : Ray # ScreenToWorldViewPlane : real3 Convert the screen point to a position on the view plane at a given depth. |Name|Type|Description| |---|---|---| |screenPoint| real2 | | |viewDepth| real | | lang=cpp, name=Lightning function ScreenToWorldViewPlane(screenPoint : Real2, viewDepth : Real) : Real3 # ScreenToWorldZPlane : real3 Convert the screen point to a position on the z plane at a given depth. |Name|Type|Description| |---|---|---| |screenPoint| real2 | | |worldDepth| real | | lang=cpp, name=Lightning function ScreenToWorldZPlane(screenPoint : Real2, worldDepth : Real) : Real3 # ViewPlaneSize : real2 Size of the screen at a Depth. |Name|Type|Description| |---|---|---| |viewDepth| real | | lang=cpp, name=Lightning function ViewPlaneSize(viewDepth : Real) : Real2 # ViewportTakeFocus : boolean Returns whether or not it succeeded in taking focus. Will always fail if RenderToViewport is false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ViewportTakeFocus() : Boolean # ViewportToScreen : real2 Convert a viewport point to a screen point. |Name|Type|Description| |---|---|---| |viewportPoint| real2 | | lang=cpp, name=Lightning function ViewportToScreen(viewportPoint : Real2) : Real2 # WorldToScreen : real2 Convert a world point to a screen point. |Name|Type|Description| |---|---|---| |worldPoint| real3 | | lang=cpp, name=Lightning function WorldToScreen(worldPoint : Real3) : Real2","title":"Cameraviewport"},{"location":"reference/class_reference/capsulecollider/","text":"Component Physics (NOTE) Defines the collision volume for a capsule defined by a height and radius. A capsule can be thought of as a cylinder with spherical end caps. Methods Properties Base Classes Derived Classes Constructor Direction collider Height Radius ScalingMode WorldCylinderHeight WorldRadius # Properties # Direction : AxisDirection The direction that the height is defined along. Allows the user to change whether the capsule's height is along the local-space x, y, or z axis. ``` lang=cpp, name=Lightning var Direction : AxisDirection # Height : real The local space distance from the center of one sphere to another. ``` lang=cpp, name=Lightning var Height : Real # Radius : real The local space radius of the spheres at the capsule edges. ``` lang=cpp, name=Lightning var Radius : Real # ScalingMode : CapsuleScalingMode How should non-uniform scale affect the capsules size. Should a scale of 2 on the height axis double the total capsule size or should it double the capsule height? ``` lang=cpp, name=Lightning var ScalingMode : CapsuleScalingMode # WorldCylinderHeight : real read-only The full height of the capsule's cylinder after the scale is applied (world distance from one sphere to another). ``` lang=cpp, name=Lightning var WorldCylinderHeight : Real # WorldRadius : real read-only The radius of the sphere caps after scale is applied. ``` lang=cpp, name=Lightning var WorldRadius : Real # Methods # CapsuleCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CapsuleCollider() ```","title":"Capsulecollider"},{"location":"reference/class_reference/carwheelarray/","text":"Physics (NOTE) An array interface to the cog paths of wheels that this car uses. This array is read-only. Methods Properties Base Classes Derived Classes Get Count safeid32object # Properties # Count : integer read-only How many wheels this car owns. ``` lang=cpp, name=Lightning var Count : Integer # Methods # Get : cog Get the cog for a wheel by index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : Cog","title":"Carwheelarray"},{"location":"reference/class_reference/carwheelref/","text":"Physics Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Carwheelref"},{"location":"reference/class_reference/castfilter/","text":"Physics (NOTE) Filter for casting operations in physics. Allows basic filtering such as static or dynamic objects, advanced filters such as collision groups, and custom filters via an event callback. Methods Properties Base Classes Derived Classes Constructor CallbackEventName basecastfilter CallbackObject CollisionGroup IgnoreCog # Properties # CallbackEventName : string The name of the event to invoke on the callback object. ``` lang=cpp, name=Lightning var CallbackEventName : String # CallbackObject : Object An object to invoke a callback on (via the callback name) to see if an object in a cast should be skipped. ``` lang=cpp, name=Lightning var CallbackObject : Object # CollisionGroup : collisiongroup Should this cast behave like it belongs to a collision group? Uses the current space's CollisionTable for filtering logic. ``` lang=cpp, name=Lightning var CollisionGroup : CollisionGroup # IgnoreCog : cog A cog to ignore during casts. ``` lang=cpp, name=Lightning var IgnoreCog : Cog # Methods # CastFilter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CastFilter() ``` # CastFilter : Void constructor Name Type Description castfilter ``` lang=cpp, name=Lightning function CastFilter( : CastFilter) ```","title":"Castfilter"},{"location":"reference/class_reference/castfilterevent/","text":"Event Physics (NOTE) Allows a user to filter out an object during any cast in physics. Methods Properties Base Classes Derived Classes FilterState event Object # Properties # FilterState : CastFilterState When filtering should we accept or reject this cog? Alternatively we can let the default cast filter logic run. ``` lang=cpp, name=Lightning var FilterState : CastFilterState # Object : cog read-only The object being tested in this cast. ``` lang=cpp, name=Lightning var Object : Cog # Methods","title":"Castfilterevent"},{"location":"reference/class_reference/castresult/","text":"Physics (NOTE) A result from a cast operation on a PhysicsSpace. Methods Properties Base Classes Derived Classes Constructor Collider GetLocalPosition Distance Normal ObjectHit WorldPosition # Properties # Collider : collider read-only The collider hit by the cast. ``` lang=cpp, name=Lightning var Collider : Collider # Distance : real read-only The distance from the ray/segment start to the point of intersection. Invalid on a volume cast. ``` lang=cpp, name=Lightning var Distance : Real # Normal : real3 read-only The normal of the object at the intersection point (world space). Invalid on a volume cast. ``` lang=cpp, name=Lightning var Normal : Real3 # ObjectHit : cog read-only The cog hit by the cast. ``` lang=cpp, name=Lightning var ObjectHit : Cog # WorldPosition : real3 read-only Returns the world-space position that the object was hit. Invalid on a volume cast. ``` lang=cpp, name=Lightning var WorldPosition : Real3 # Methods # CastResult : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CastResult() ``` # CastResult : Void constructor Name Type Description rhs castresult ``` lang=cpp, name=Lightning function CastResult(rhs : CastResult) ``` # GetLocalPosition : real3 Returns the local-space position that the object was hit. The point index is used to get the first or last point of intersection. Invalid on volume casts. |Name|Type|Description| |---|---|---| |pointIndex| integer | | lang=cpp, name=Lightning function GetLocalPosition(pointIndex : Integer) : Real3","title":"Castresult"},{"location":"reference/class_reference/castresults/","text":"Physics Methods Properties Base Classes Derived Classes All Clear Empty # Properties # Methods # All : castresultsarrayrange Name Type Description ``` lang=cpp, name=Lightning function All() : CastResultsArrayRange ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Empty : boolean Name Type Description ``` lang=cpp, name=Lightning function Empty() : Boolean ```","title":"Castresults"},{"location":"reference/class_reference/castresultsarrayrange/","text":"Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : castresultsarrayrange read-only ``` lang=cpp, name=Lightning var All : CastResultsArrayRange # Current : castresult read-only ``` lang=cpp, name=Lightning var Current : CastResult # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # CastResultsArrayRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CastResultsArrayRange() ``` # CastResultsArrayRange : Void constructor Name Type Description p0 castresultsarrayrange ``` lang=cpp, name=Lightning function CastResultsArrayRange(p0 : CastResultsArrayRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Castresultsarrayrange"},{"location":"reference/class_reference/castresultsrange/","text":"Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : castresultsrange read-only ``` lang=cpp, name=Lightning var All : CastResultsRange # Current : castresult read-only ``` lang=cpp, name=Lightning var Current : CastResult # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # CastResultsRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CastResultsRange() ``` # CastResultsRange : Void constructor Name Type Description p0 castresultsrange ``` lang=cpp, name=Lightning function CastResultsRange(p0 : CastResultsRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Castresultsrange"},{"location":"reference/class_reference/chainnode/","text":"Engine Methods Properties Base Classes Derived Classes dualblendchainnode # Properties # Methods","title":"Chainnode"},{"location":"reference/class_reference/checkbox/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Checkbox"},{"location":"reference/class_reference/childrendergrouplist/","text":"Graphics Methods Properties Base Classes Derived Classes rendergrouplist # Properties # Methods","title":"Childrendergrouplist"},{"location":"reference/class_reference/chorusnode/","text":"Sound (NOTE) Applies a chorus filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes FeedbackPercent soundnode FeedbackValue MaxDelayMillisec MinDelayMillisec ModulationFrequency OffsetMillisec # Properties # FeedbackPercent : real DEPRECATED The FeedbackValue property should be used instead. ``` lang=cpp, name=Lightning var FeedbackPercent : Real # FeedbackValue : real The percentage of output (0 - 1.0) which is fed back into the filter as input. ``` lang=cpp, name=Lightning var FeedbackValue : Real # MaxDelayMillisec : real The maximum delay reached by the modulation. It will oscillate between the MinDelayMillisec value and this value at the frequency set by the ModulationFrequency property. ``` lang=cpp, name=Lightning var MaxDelayMillisec : Real # MinDelayMillisec : real The minimum delay reached by the modulation. It will oscillate between the this value and the MaxDelayMillisec value at the frequency set by the ModulationFrequency property. ``` lang=cpp, name=Lightning var MinDelayMillisec : Real # ModulationFrequency : real The frequency of the oscillator which varies the modulation. ``` lang=cpp, name=Lightning var ModulationFrequency : Real # OffsetMillisec : real The offset value of the chorus filter, in milliseconds. ``` lang=cpp, name=Lightning var OffsetMillisec : Real # Methods","title":"Chorusnode"},{"location":"reference/class_reference/chrome/","text":"Gameplay Methods Properties Base Classes Derived Classes threadsafeid32eventobject # Properties # Methods","title":"Chrome"},{"location":"reference/class_reference/chromepopupevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Chromepopupevent"},{"location":"reference/class_reference/cog/","text":"Engine (NOTE) Game Object Composition class. This class is the foundational object for all dynamic objects in the game world. The Cog is a piece of logical interactive content and the primary mechanism game systems (Graphics, Physics, Etc.) provide functionality and communicate. A Cog can be anything from physical objects like trees, tanks, players to logical objects like teams, triggers, or AI objects. Methods Properties Base Classes Derived Classes AddComponentByName Actions Object gamesession AddComponentByType Archetype space AttachTo BaseArchetype AttachToPreserveLocal ChildCount ClearArchetype Children Clone ComponentCount Constructor EditorViewportHidden DebugDraw GameSession Destroy LevelSettings Detach Locked DetachPreserveLocal MarkedForDestruction DispatchDown Name DispatchEvent ObjectViewHidden DispatchUp Parent FindAllChildrenByName Persistent FindChildByName RuntimeId FindDirectChildByName Space FindNearestArchetype Transient FindNextInOrder FindNextSibling FindPreviousInOrder FindPreviousSibling FindRoot FindRootArchetype GetComponentByIndex GetComponentByName GetComponentIndex IsAncestorOf IsDescendant IsDescendantOf IsModifiedFromArchetype PlaceAfterSibling PlaceBeforeSibling RemoveComponentByName RemoveComponentByType ReplaceChild SanitizeName UploadToArchetype # Properties # Actions : actions read-only ``` lang=cpp, name=Lightning var Actions : Actions # Archetype : archetype Getter / setter for Archetype. ``` lang=cpp, name=Lightning var Archetype : Archetype # BaseArchetype : archetype read-only Returns the Archetype our Archetype inherits from. ``` lang=cpp, name=Lightning var BaseArchetype : Archetype # ChildCount : integer read-only Returns the amount of children on this Cog. Note that this function has to iterate over all children to calculate the count. ``` lang=cpp, name=Lightning var ChildCount : Integer # Children : hierarchylistrange read-only Returns a range of all direct children on this Cog. ``` lang=cpp, name=Lightning var Children : HierarchyListRange # ComponentCount : integer read-only Returns how many Components are on this Cog. ``` lang=cpp, name=Lightning var ComponentCount : Integer # EditorViewportHidden : boolean Hidden from view used for editor. ``` lang=cpp, name=Lightning var EditorViewportHidden : Boolean # GameSession : gamesession read-only Get the GameSession that owns us and our Space. ``` lang=cpp, name=Lightning var GameSession : GameSession # LevelSettings : cog read-only Get the object named 'LevelSettings', a special convenience object where we can put general functionality for our Level. ``` lang=cpp, name=Lightning var LevelSettings : Cog # Locked : boolean Not able to be modified or selected in the viewport. ``` lang=cpp, name=Lightning var Locked : Boolean # MarkedForDestruction : boolean read-only Has this Cog already been destroyed and is waiting for the frame to end (delayed destruction). This allows us to do custom logic when an object is still not null, but about to be destroyed (e.g. we don't want to render Cogs marked for deletion). ``` lang=cpp, name=Lightning var MarkedForDestruction : Boolean # Name : string Name of the Object. ``` lang=cpp, name=Lightning var Name : String # ObjectViewHidden : boolean If the object needs to not show up in the object view. ``` lang=cpp, name=Lightning var ObjectViewHidden : Boolean # Parent : cog read-only Get the parent of this object in the Hierarchy. ``` lang=cpp, name=Lightning var Parent : Cog # Persistent : boolean Object will not be destroyed on level load or change. ``` lang=cpp, name=Lightning var Persistent : Boolean # RuntimeId : integer read-only Gets a unique integer for this object (used primarily for debugging) ``` lang=cpp, name=Lightning var RuntimeId : Integer # Space : space read-only Returns the Space that this object lives in. ``` lang=cpp, name=Lightning var Space : Space # Transient : boolean Object will not be saved. ``` lang=cpp, name=Lightning var Transient : Boolean # Methods # AddComponentByName : boolean Add a component by name. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function AddComponentByName(name : String) : Boolean # AddComponentByType : boolean Add a component of the given type. |Name|Type|Description| |---|---|---| |componentType| boundtype | | lang=cpp, name=Lightning function AddComponentByType(componentType : BoundType) : Boolean # AttachTo : boolean Attach to a parent object and compute the new transform so that the objects are relative. |Name|Type|Description| |---|---|---| |parent| cog | | lang=cpp, name=Lightning function AttachTo(parent : Cog) : Boolean # AttachToPreserveLocal : boolean Attach to a parent object. |Name|Type|Description| |---|---|---| |parent| cog | | lang=cpp, name=Lightning function AttachToPreserveLocal(parent : Cog) : Boolean # ClearArchetype : Void Removes our association with the current Archetype. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearArchetype() # Clone : cog Clones this cog. The cloned object will be parented to this objects parent (if it exists). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clone() : Cog # Cog : Void constructor Constructor / destructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Cog() # DebugDraw : Void Calls DebugDraw on all components in this cog. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DebugDraw() # Destroy : Void Queues the cog up for delayed destruction (at the end of the frame). If the object is marked as Protected, this will do nothing. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Destroy() # Detach : Void Detach from a parent object and compute the new transform so that the objects are relative. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Detach() # DetachPreserveLocal : Void Detach from a parent object. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DetachPreserveLocal() # DispatchDown : Void Dispatches an event down the tree on all children recursively (pre-order traversal) |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | lang=cpp, name=Lightning function DispatchDown(eventId : String, event : Event) # DispatchEvent : Void Dispatches an event on this object. |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | lang=cpp, name=Lightning function DispatchEvent(eventId : String, event : Event) # DispatchUp : Void Dispatches an event up the tree on each parent recursively (pre-order traversal) |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | lang=cpp, name=Lightning function DispatchUp(eventId : String, event : Event) # FindAllChildrenByName : hierarchynamerange Returns a range of all children with the given name. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindAllChildrenByName(name : String) : HierarchyNameRange # FindChildByName : cog Depth first search of all children. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindChildByName(name : String) : Cog # FindDirectChildByName : cog Checks only direct children. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindDirectChildByName(name : String) : Cog # FindNearestArchetype : cog Same as FindNearestParentArchetype except that it includes this Cog. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindNearestArchetype() : Cog # FindNextInOrder : cog Finds the next Cog in depth first post-order. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindNextInOrder() : Cog # FindNextSibling : cog Returns the sibling Cog after this in the parents child list. Returns null if it's the last child. If the Cog doesn't have a parent, it will return the Cog after it in the Space. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindNextSibling() : Cog # FindPreviousInOrder : cog Finds the previous Cog in reverse depth first post-order (the opposite of FindNextInOrder). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindPreviousInOrder() : Cog # FindPreviousSibling : cog Returns the sibling Cog before this in the parents child list. Returns null if it's the first child. If the Cog doesn't have a parent, it will return the Cog before it in the Space. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindPreviousSibling() : Cog # FindRoot : cog Searches up the hierarchy for the root Cog. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindRoot() : Cog # FindRootArchetype : cog Finds the top most Archetype in the Hierarchy. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FindRootArchetype() : Cog # GetComponentByIndex : component Returns the Component at the given index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetComponentByIndex(index : Integer) : Component # GetComponentByName : component Finds the Components with the given type name. |Name|Type|Description| |---|---|---| |componentTypeName| string | | lang=cpp, name=Lightning function GetComponentByName(componentTypeName : String) : Component # GetComponentIndex : integer Finds the index of the given Component type. Returns uint max if the Component didn't exist. |Name|Type|Description| |---|---|---| |componentType| boundtype | | lang=cpp, name=Lightning function GetComponentIndex(componentType : BoundType) : Integer # IsAncestorOf : boolean Returns whether or not we are an ancestor of the given Cog. |Name|Type|Description| |---|---|---| |descendant| cog | | lang=cpp, name=Lightning function IsAncestorOf(descendant : Cog) : Boolean # IsDescendant : boolean Returns whether or not the given cog is a descendant of us. |Name|Type|Description| |---|---|---| |cog| cog | | lang=cpp, name=Lightning function IsDescendant(cog : Cog) : Boolean # IsDescendantOf : boolean Returns whether or not we are a descendant of the given Cog. |Name|Type|Description| |---|---|---| |ancestor| cog | | lang=cpp, name=Lightning function IsDescendantOf(ancestor : Cog) : Boolean # IsModifiedFromArchetype : boolean Returns whether or not we have any local modifications from our Archetype. This does not account for properties with LocalModificationOverride (such as Transform modifications). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsModifiedFromArchetype() : Boolean # PlaceAfterSibling : Void Moves this Cog after the given sibling. Assumes they have the same parent. |Name|Type|Description| |---|---|---| |sibling| cog | | lang=cpp, name=Lightning function PlaceAfterSibling(sibling : Cog) # PlaceBeforeSibling : Void Moves this Cog before the given sibling. Assumes they have the same parent. |Name|Type|Description| |---|---|---| |sibling| cog | | lang=cpp, name=Lightning function PlaceBeforeSibling(sibling : Cog) # RemoveComponentByName : boolean Remove a component by name. Returns true if the component existed. |Name|Type|Description| |---|---|---| |typeName| string | | lang=cpp, name=Lightning function RemoveComponentByName(typeName : String) : Boolean # RemoveComponentByType : boolean Remove a component by type. Returns true if the component existed. |Name|Type|Description| |---|---|---| |componentType| boundtype | | lang=cpp, name=Lightning function RemoveComponentByType(componentType : BoundType) : Boolean # ReplaceChild : Void Places the new child at the same place as the old child in the Hierarchy. This detaches but does not destroy the old child. |Name|Type|Description| |---|---|---| |oldChild| cog | | |newChild| cog | | lang=cpp, name=Lightning function ReplaceChild(oldChild : Cog, newChild : Cog) # SanitizeName : string static Cleans an object name of invalid runes. |Name|Type|Description| |---|---|---| |newName| string | | lang=cpp, name=Lightning function SanitizeName(newName : String) : String # UploadToArchetype : Void Upload this objects data to the archetype and marks this object as not modified. This function does not rebuild all other Cogs with the same Archetype. See ArchetypeRebuilder for more information about how to rebuild Archetypes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UploadToArchetype()","title":"Cog"},{"location":"reference/class_reference/cogarchetypeextension/","text":"Engine Methods Properties Base Classes Derived Classes editorpropertyextension # Properties # Methods","title":"Cogarchetypeextension"},{"location":"reference/class_reference/cogarchetypepropertyfilter/","text":"Engine Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Cogarchetypepropertyfilter"},{"location":"reference/class_reference/cogcommand/","text":"Editor Methods Properties Base Classes Derived Classes command # Properties # Methods","title":"Cogcommand"},{"location":"reference/class_reference/cogcomponentmeta/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject # Properties # Methods","title":"Cogcomponentmeta"},{"location":"reference/class_reference/coghashsetrange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : coghashsetrange read-only ``` lang=cpp, name=Lightning var All : CogHashSetRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # CogHashSetRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CogHashSetRange() ``` # CogHashSetRange : Void constructor Name Type Description p0 coghashsetrange ``` lang=cpp, name=Lightning function CogHashSetRange(p0 : CogHashSetRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Coghashsetrange"},{"location":"reference/class_reference/coginitializer/","text":"Engine Methods Properties Base Classes Derived Classes DispatchEvent GameSession safeid32eventobject Parent Space # Properties # GameSession : gamesession read-only ``` lang=cpp, name=Lightning var GameSession : GameSession # Parent : cog read-only ``` lang=cpp, name=Lightning var Parent : Cog # Space : space read-only ``` lang=cpp, name=Lightning var Space : Space # Methods # DispatchEvent : Void Name Type Description p0 string p1 event ``` lang=cpp, name=Lightning function DispatchEvent(p0 : String, p1 : Event) ```","title":"Coginitializer"},{"location":"reference/class_reference/coginitializerevent/","text":"Event Engine Methods Properties Base Classes Derived Classes CogInitializer event # Properties # CogInitializer : coginitializer ``` lang=cpp, name=Lightning var CogInitializer : CogInitializer # Methods","title":"Coginitializerevent"},{"location":"reference/class_reference/cogmetadatainheritance/","text":"Engine Methods Properties Base Classes Derived Classes metadatainheritanceroot # Properties # Methods","title":"Cogmetadatainheritance"},{"location":"reference/class_reference/cogmetadisplay/","text":"Engine Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Cogmetadisplay"},{"location":"reference/class_reference/cogmetaoperations/","text":"Engine Methods Properties Base Classes Derived Classes metaoperations # Properties # Methods","title":"Cogmetaoperations"},{"location":"reference/class_reference/cogmetaserialization/","text":"Engine Methods Properties Base Classes Derived Classes metaserialization # Properties # Methods","title":"Cogmetaserialization"},{"location":"reference/class_reference/cogmetatransform/","text":"Engine Methods Properties Base Classes Derived Classes metatransform # Properties # Methods","title":"Cogmetatransform"},{"location":"reference/class_reference/cognamerange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : cognamerange read-only ``` lang=cpp, name=Lightning var All : CogNameRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # CogNameRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CogNameRange() ``` # CogNameRange : Void constructor Name Type Description p0 cognamerange ``` lang=cpp, name=Lightning function CogNameRange(p0 : CogNameRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Cognamerange"},{"location":"reference/class_reference/cogpath/","text":"Engine Methods Properties Base Classes Derived Classes Clone Cog Object Constructor DirectCog ComputePath ErrorOnDirectLinkFail Refresh ErrorOnPathCantCompute RefreshIfNull ErrorOnResolveToNull Resolve Path PathPreference0 PathPreference1 PathPreference2 RelativeTo UpdateCogOnInitialize UpdateCogOnPathChange UpdatePathOnCogChange # Properties # Cog : cog Setting the cog manually may recompute the path if the option is set Getting the cog will attempt to resolve the cog if we don't already have one (or if the path options is set, it will always resolve) ``` lang=cpp, name=Lightning var Cog : Cog # DirectCog : cog Setting the cog manually may recompute the path if the option is set Getting the cog will return whatever cog we already resolved, or null (it will not attempt to resolve) ``` lang=cpp, name=Lightning var DirectCog : Cog # ErrorOnDirectLinkFail : boolean Is it an exception/notification if a direct link to the object cannot be resolved? ``` lang=cpp, name=Lightning var ErrorOnDirectLinkFail : Boolean # ErrorOnPathCantCompute : boolean Is it an exception/notification if the path to an object cannot be computed? ``` lang=cpp, name=Lightning var ErrorOnPathCantCompute : Boolean # ErrorOnResolveToNull : boolean Is an exception thrown if you try to access the Cog when it's invalid or not found? ``` lang=cpp, name=Lightning var ErrorOnResolveToNull : Boolean # Path : string Setting the path will invalidate the object until the next call to GetCog. ``` lang=cpp, name=Lightning var Path : String # PathPreference0 : CogPathPreference ``` lang=cpp, name=Lightning var PathPreference0 : CogPathPreference # PathPreference1 : CogPathPreference ``` lang=cpp, name=Lightning var PathPreference1 : CogPathPreference # PathPreference2 : CogPathPreference ``` lang=cpp, name=Lightning var PathPreference2 : CogPathPreference # RelativeTo : cog The cog that we compute paths relative to. ``` lang=cpp, name=Lightning var RelativeTo : Cog # UpdateCogOnInitialize : boolean Whether the cog path attempts to resolve an object when the object is fully initialized. ``` lang=cpp, name=Lightning var UpdateCogOnInitialize : Boolean # UpdateCogOnPathChange : boolean When we set the cog path, should we try and resolve the object (this also detects parse errors) ``` lang=cpp, name=Lightning var UpdateCogOnPathChange : Boolean # UpdatePathOnCogChange : boolean When we set the cog, should we try and recompute a path to the object? ``` lang=cpp, name=Lightning var UpdatePathOnCogChange : Boolean # Methods # Clone : cogpath Creates a new copy of a cog path (since cog paths are reference counted and shared) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clone() : CogPath # CogPath : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CogPath() ``` # CogPath : Void constructor Name Type Description cogpath ``` lang=cpp, name=Lightning function CogPath( : CogPath) ``` # CogPath : Void constructor Name Type Description path string ``` lang=cpp, name=Lightning function CogPath(path : String) ``` # ComputePath : string static Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string. |Name|Type|Description| |---|---|---| |from| cog | | |to| cog | | |pref| CogPathPreference | | lang=cpp, name=Lightning function ComputePath(from : Cog, to : Cog, pref : CogPathPreference) : String # Refresh : boolean Returns true if the object changes, false otherwise. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Refresh() : Boolean # RefreshIfNull : boolean Returns true if the object changes, false otherwise. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RefreshIfNull() : Boolean # Resolve : cog static Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert. |Name|Type|Description| |---|---|---| |startFrom| cog | | |path| string | | lang=cpp, name=Lightning function Resolve(startFrom : Cog, path : String) : Cog","title":"Cogpath"},{"location":"reference/class_reference/cogpathevent/","text":"Event Engine Methods Properties Base Classes Derived Classes CogPath event # Properties # CogPath : cogpath ``` lang=cpp, name=Lightning var CogPath : CogPath # Methods","title":"Cogpathevent"},{"location":"reference/class_reference/cogpathmetaserialization/","text":"Engine Methods Properties Base Classes Derived Classes metaserialization # Properties # Methods","title":"Cogpathmetaserialization"},{"location":"reference/class_reference/cogreplaceevent/","text":"Event Engine Methods Properties Base Classes Derived Classes datareplaceevent # Properties # Methods","title":"Cogreplaceevent"},{"location":"reference/class_reference/cogserializationfilter/","text":"Engine Methods Properties Base Classes Derived Classes serializationfilter # Properties # Methods","title":"Cogserializationfilter"},{"location":"reference/class_reference/collider/","text":"Component Physics (NOTE) A collider controls how collision detection is performed for an object. A collider also gives mass properties to a RigidBody(via the material and volume). If there is no RigidBody associated with this collider then it is considered static. Note: colliders without RigidBodies should not be moved at run-time! Methods Properties Base Classes Derived Classes ComputeVolume ActiveBody component boxcollider GetPointVelocity CollisionGroup capsulecollider ContactCount convexmeshcollider Contacts cylindercollider Ghost ellipsoidcollider JointCount heightmapcollider Joints meshcollider Material multiconvexmeshcollider Offset spherecollider SendsEvents WorldAabb WorldBoundingSphere # Properties # ActiveBody : rigidbody read-only The rigid body that \"owns\" this collider. This is the body that forces/impulses/etc... should be applied to. ``` lang=cpp, name=Lightning var ActiveBody : RigidBody # CollisionGroup : collisiongroup The collision group is a tag used to alter collision behavior based upon the space's CollisionTable. ``` lang=cpp, name=Lightning var CollisionGroup : CollisionGroup # ContactCount : integer read-only The current number of contacts/collisions with this collider. ``` lang=cpp, name=Lightning var ContactCount : Integer # Contacts : contactrange read-only A range of all contacts for this collider. ``` lang=cpp, name=Lightning var Contacts : ContactRange # Ghost : boolean Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions. ``` lang=cpp, name=Lightning var Ghost : Boolean # JointCount : integer read-only The number of joints attached to this collider. ``` lang=cpp, name=Lightning var JointCount : Integer # Joints : jointrange read-only A range of all joints attached to this collider. ``` lang=cpp, name=Lightning var Joints : JointRange # Material : physicsmaterial The material used to determine the density, restitution, and friction of this collider. ``` lang=cpp, name=Lightning var Material : PhysicsMaterial # Offset : real3 Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model. ``` lang=cpp, name=Lightning var Offset : Real3 # SendsEvents : boolean Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events. ``` lang=cpp, name=Lightning var SendsEvents : Boolean # WorldAabb : aabb read-only Returns the world-space axis aligned bounding box (Aabb) of this collider. ``` lang=cpp, name=Lightning var WorldAabb : Aabb # WorldBoundingSphere : sphere read-only Returns the world-space bounding sphere of this collider. ``` lang=cpp, name=Lightning var WorldBoundingSphere : Sphere # Methods # ComputeVolume : real Compute the world-space volume of this collider. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ComputeVolume() : Real # GetPointVelocity : real3 Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns plasma. |Name|Type|Description| |---|---|---| |worldPoint| real3 | | lang=cpp, name=Lightning function GetPointVelocity(worldPoint : Real3) : Real3","title":"Collider"},{"location":"reference/class_reference/collisionendblock/","text":"Physics (NOTE) CollisionFilterBlock for CollisionEnded events. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock # Properties # Methods # CollisionEndBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CollisionEndBlock() ```","title":"Collisionendblock"},{"location":"reference/class_reference/collisionevent/","text":"Event Physics (NOTE) Information about a collision in physics. Sent when collisions start, persist, or end. Methods Properties Base Classes Derived Classes FirstPoint basecollisionevent # Properties # FirstPoint : contactpoint read-only Convenience function to return the first ContactPoint. Some logic only cares about one point of information. In a more general case all points should be iterated over. ``` lang=cpp, name=Lightning var FirstPoint : ContactPoint # Methods","title":"Collisionevent"},{"location":"reference/class_reference/collisionfilter/","text":"Physics (NOTE) A filter for storing the relationship between a pair of groups. Stores flags for the kind of filter this is, as well as what events to send out and to whom. Methods Properties Base Classes Derived Classes Constructor CollisionFlag safeid32eventobject CollisionGroupA CollisionGroupB # Properties # CollisionFlag : CollisionFilterCollisionFlags The collision state between the two types. Controls whether the types skip detection, skip resolution, or resolve as normal. ``` lang=cpp, name=Lightning var CollisionFlag : CollisionFilterCollisionFlags # CollisionGroupA : collisiongroup read-only ``` lang=cpp, name=Lightning var CollisionGroupA : CollisionGroup # CollisionGroupB : collisiongroup read-only ``` lang=cpp, name=Lightning var CollisionGroupB : CollisionGroup # Methods # CollisionFilter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CollisionFilter() ```","title":"Collisionfilter"},{"location":"reference/class_reference/collisionfilterblock/","text":"Physics (NOTE) Used to specify which collision group events should be sent out for a CollisionFilter. Allows customizing who gets events (in the filter pair) and what event name is sent out. Methods Properties Base Classes Derived Classes BlockType safeid32object collisionendblock EventOverride collisionpersistedblock SendEventsToA collisionstartblock SendEventsToB presolveblock SendEventsToSpace # Properties # BlockType : CollisionFilterBlockType read-only What type of collision filter block is this? ``` lang=cpp, name=Lightning var BlockType : CollisionFilterBlockType # EventOverride : string What event name to send out when this block triggers. If left empty the default name will be used (e.g. GroupCollisionStarted). ``` lang=cpp, name=Lightning var EventOverride : String # SendEventsToA : boolean Does the first object in the filter get this event type sent to it? ``` lang=cpp, name=Lightning var SendEventsToA : Boolean # SendEventsToB : boolean Does the second object in the filter get this event type sent to it? ``` lang=cpp, name=Lightning var SendEventsToB : Boolean # SendEventsToSpace : boolean Does the active space of the objects get this event type sent to it? ``` lang=cpp, name=Lightning var SendEventsToSpace : Boolean # Methods","title":"Collisionfilterblock"},{"location":"reference/class_reference/collisiongroup/","text":"Resource Physics (NOTE) Represents a label for a Collider to be used with a CollisionTable. Methods Properties Base Classes Derived Classes CreateRuntime dataresource RuntimeClone # Properties # Methods # CreateRuntime : collisiongroup static Creates a CollisionGroup for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : CollisionGroup # RuntimeClone : collisiongroup Creates a clone of this CollisionGroup for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : CollisionGroup","title":"Collisiongroup"},{"location":"reference/class_reference/collisiongroupevent/","text":"Event Physics (NOTE) An event sent out when specified by a CollisionFilter in a CollisionTable. Used to hook up events based upon certain CollisionGroup types colliding. Methods Properties Base Classes Derived Classes FirstPoint basecollisionevent TypeAName TypeBName # Properties # FirstPoint : contactpoint read-only ``` lang=cpp, name=Lightning var FirstPoint : ContactPoint # TypeAName : string read-only Returns the CollisionGroup name of object A. ``` lang=cpp, name=Lightning var TypeAName : String # TypeBName : string read-only Returns the CollisionGroup name of object B. ``` lang=cpp, name=Lightning var TypeBName : String # Methods","title":"Collisiongroupevent"},{"location":"reference/class_reference/collisionpersistedblock/","text":"Physics (NOTE) CollisionFilterBlock for CollisionPersisted events. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock # Properties # Methods # CollisionPersistedBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CollisionPersistedBlock() ```","title":"Collisionpersistedblock"},{"location":"reference/class_reference/collisionstartblock/","text":"Physics (NOTE) CollisionFilterBlock for CollisionStarted events. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock # Properties # Methods # CollisionStartBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CollisionStartBlock() ```","title":"Collisionstartblock"},{"location":"reference/class_reference/collisiontable/","text":"Resource Physics (NOTE) Defines filter pairs between CollisionGroups. These filters are used to control if collision detection and resolution happens between Colliders. Additionally, CollisionFilterBlocks can be defined on filters to send out extra events. Methods Properties Base Classes Derived Classes CreateRuntime dataresource FindFilter RuntimeClone # Properties # Methods # CreateRuntime : collisiontable static Creates a CollisionTable for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : CollisionTable # FindFilter : collisionfilter Finds the filter between the pair of collision groups. |Name|Type|Description| |---|---|---| |groupA| collisiongroup | | |groupB| collisiongroup | | lang=cpp, name=Lightning function FindFilter(groupA : CollisionGroup, groupB : CollisionGroup) : CollisionFilter # RuntimeClone : collisiontable Creates a clone of this CollisionTable for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : CollisionTable","title":"Collisiontable"},{"location":"reference/class_reference/colorevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Colorevent"},{"location":"reference/class_reference/colorgradient/","text":"Resource Engine (NOTE) Specifies a range of colors that are interpolated when sampled. Methods Properties Base Classes Derived Classes Sample dataresource # Properties # Methods # Sample : real4 Sample the curve at the given t. |Name|Type|Description| |---|---|---| |t| real | | lang=cpp, name=Lightning function Sample(t : Real) : Real4","title":"Colorgradient"},{"location":"reference/class_reference/colorscheme/","text":"Editor Methods Properties Base Classes Derived Classes Save ActiveScheme eventobject Background ClassName Comment Default Error FunctionName Gutter GutterText Keyword LineSelection Link Number Operator SaveName Selection SpecialWords StringLiteral TextMatchHighlight TextMatchIndicator TextMatchOutlineAlpha Whitespace # Properties # ActiveScheme : string ``` lang=cpp, name=Lightning var ActiveScheme : String # Background : real4 ``` lang=cpp, name=Lightning var Background : Real4 # ClassName : real4 ``` lang=cpp, name=Lightning var ClassName : Real4 # Comment : real4 ``` lang=cpp, name=Lightning var Comment : Real4 # Default : real4 ``` lang=cpp, name=Lightning var Default : Real4 # Error : real4 ``` lang=cpp, name=Lightning var Error : Real4 # FunctionName : real4 ``` lang=cpp, name=Lightning var FunctionName : Real4 # Gutter : real4 ``` lang=cpp, name=Lightning var Gutter : Real4 # GutterText : real4 ``` lang=cpp, name=Lightning var GutterText : Real4 # Keyword : real4 ``` lang=cpp, name=Lightning var Keyword : Real4 # LineSelection : real4 ``` lang=cpp, name=Lightning var LineSelection : Real4 # Link : real4 ``` lang=cpp, name=Lightning var Link : Real4 # Number : real4 ``` lang=cpp, name=Lightning var Number : Real4 # Operator : real4 ``` lang=cpp, name=Lightning var Operator : Real4 # SaveName : string ``` lang=cpp, name=Lightning var SaveName : String # Selection : real4 ``` lang=cpp, name=Lightning var Selection : Real4 # SpecialWords : real4 ``` lang=cpp, name=Lightning var SpecialWords : Real4 # StringLiteral : real4 ``` lang=cpp, name=Lightning var StringLiteral : Real4 # TextMatchHighlight : real4 ``` lang=cpp, name=Lightning var TextMatchHighlight : Real4 # TextMatchIndicator : real4 ``` lang=cpp, name=Lightning var TextMatchIndicator : Real4 # TextMatchOutlineAlpha : real ``` lang=cpp, name=Lightning var TextMatchOutlineAlpha : Real # Whitespace : real4 ``` lang=cpp, name=Lightning var Whitespace : Real4 # Methods # Save : Void Name Type Description ``` lang=cpp, name=Lightning function Save() ```","title":"Colorscheme"},{"location":"reference/class_reference/colortargetmrt/","text":"Graphics (NOTE) Indexable interface for settings ColorTargets. Methods Properties Base Classes Derived Classes Set threadsafereferencecounted # Properties # Methods # Set : Void Set the RenderTarget to use for the given index. |Name|Type|Description| |---|---|---| |index| integer | | |colorTarget| rendertarget | | lang=cpp, name=Lightning function Set(index : Integer, colorTarget : RenderTarget)","title":"Colortargetmrt"},{"location":"reference/class_reference/combobox/","text":"Widget Methods Properties Base Classes Derived Classes composite stringcombobox # Properties # Methods","title":"Combobox"},{"location":"reference/class_reference/command/","text":"Editor Methods Properties Base Classes Derived Classes safeid32eventobject cogcommand # Properties # Methods","title":"Command"},{"location":"reference/class_reference/commandevent/","text":"Event Widget Methods Properties Base Classes Derived Classes Space objectevent # Properties # Space : space read-only Gives context to where the command was executed. ``` lang=cpp, name=Lightning var Space : Space # Methods","title":"Commandevent"},{"location":"reference/class_reference/commandexecuter/","text":"Widget Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Commandexecuter"},{"location":"reference/class_reference/commandmanager/","text":"Widget Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Commandmanager"},{"location":"reference/class_reference/commandupdateevent/","text":"Event Widget Methods Properties Base Classes Derived Classes objectevent # Properties # Methods","title":"Commandupdateevent"},{"location":"reference/class_reference/component/","text":"Component Engine (NOTE) A component is an atomic piece of functionality that is composed into a Cog to form game objects. Methods Properties Base Classes Derived Classes Constructor GameSession Object actionspace DebugDraw LevelSettings animationgraph Owner archetyped Space area audiosettings bone camera cameraviewport collider ComponentProxy contentconfig creationtool customcollisioneventtracker debugsettings defaultgamesetup developerconfig dynamicmotor editorcameracontroller editorconfig editorflags editorsettings frameratesettings gizmo gizmocreator gizmodrag gizmospace GjkDebug graphical graphicsspace griddraw heightmap HeightMapAabbChecker HeightMapDebugDrawer heightmaptool hierarchy hierarchyspline ignorespaceeffects joint jointconfigoverride jointdebugdrawconfig jointlimit jointmotor jointspring LauncherConfig LauncherLegacySettings linkid mainconfig manipulatortool massoverride MeshDebug mousecapture named netobject objectconnectingtool objectlink objectlinkanchor objecttransformgizmo objecttransformtool orientation orientationbasisgizmo particleanimator particleemitter physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsspace projectdescription projectsettings randomcontext reactive reactivespace recentprojects region revolutebasisgizmo rigidbody rotategizmo rotationbasisgizmo scalegizmo selectionicon selecttool sharedcontent simpleanimation simplegizmobase simplesocket simplesound skeleton soundemitter soundlistener soundspace spaceobjects SpringSystem SpringTools texteditorconfig tileeditor2d tilemap TimeOfImpactDebug timespace transform translategizmo uilayout uiwidgetcomponenthierarchy userconfig webrequester windowlaunchsettings lightningcomponent lightningpluginconfig # Properties # GameSession : gamesession read-only Get the GameSession that owns us and our space. ``` lang=cpp, name=Lightning var GameSession : GameSession # LevelSettings : cog read-only Get the object named 'LevelSettings', a special object where we can put components for our level. ``` lang=cpp, name=Lightning var LevelSettings : Cog # Owner : cog read-only Get the Cog this Component is owned by (not the parent of this composition). ``` lang=cpp, name=Lightning var Owner : Cog # Space : space read-only The Space where the object is located. ``` lang=cpp, name=Lightning var Space : Space # Methods # Component : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Component() # DebugDraw : Void Base debug draw for a component. Special for the each type of component. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DebugDraw()","title":"Component"},{"location":"reference/class_reference/composite/","text":"Widget Methods Properties Base Classes Derived Classes widget addresourcewindow animationeditor animationtrackview basescrollarea BugReporter buttonbase checkbox combobox editorviewport floatingcomposite gamewidget generalsearchview heightmapimporter hotkeyeditor importbutton inplacetexteditor itemlist label LauncherOpenProjectComposite libraryview listbox mainpropertyview menubar menubaritem modal multiconvexmesheditor multidock multilinetext objectview previewwidget progressbar propertyview propertywidget rendergrouphierarchies resourcetemplatedisplay resourcetemplatesearch resourcetypesearch rootwidget searchview searchviewelement selectorbutton slider splitter spritepreview spritesheetimporter spritesourceeditor stresstestdialog tabarea textbox textcheckbox tilepalettesprite tilepaletteview tileview tileviewwidget toolcontrol tooltip treerow viewport webbrowserwidget weightedcomposite window # Properties # Methods","title":"Composite"},{"location":"reference/class_reference/compressornode/","text":"Sound Methods Properties Base Classes Derived Classes AttackMillisec soundnode InputGainDecibels KneeWidth OutputGainDecibels Ratio ReleaseMillisec ThresholdDecibels # Properties # AttackMillisec : real The time for the compressor to ramp to full effect after the input reaches the threshold. ``` lang=cpp, name=Lightning var AttackMillisec : Real # InputGainDecibels : real The volume adjustment applied to the audio input, in decibels. ``` lang=cpp, name=Lightning var InputGainDecibels : Real # KneeWidth : real The knee width of the compressor, in decibels. ``` lang=cpp, name=Lightning var KneeWidth : Real # OutputGainDecibels : real The volume adjustment applied to the compressor output, in decibels. ``` lang=cpp, name=Lightning var OutputGainDecibels : Real # Ratio : real The ratio of the volume reduction applied by the compressor. ``` lang=cpp, name=Lightning var Ratio : Real # ReleaseMillisec : real The time for the compressor to ramp from full effect to off after the input drops below the threshold. ``` lang=cpp, name=Lightning var ReleaseMillisec : Real # ThresholdDecibels : real The threshold, in decibels, at which the volume of the input is affected by the compressor. ``` lang=cpp, name=Lightning var ThresholdDecibels : Real # Methods","title":"Compressornode"},{"location":"reference/class_reference/conflictoptions/","text":"ContentMeta Methods Properties Base Classes Derived Classes Action Object # Properties # Action : ConflictAction ``` lang=cpp, name=Lightning var Action : ConflictAction # Methods","title":"Conflictoptions"},{"location":"reference/class_reference/connectiondata/","text":"Networking Methods Properties Base Classes Derived Classes Address Host Incoming Index Port # Properties # Address : integer ``` lang=cpp, name=Lightning var Address : Integer # Host : string ``` lang=cpp, name=Lightning var Host : String # Incoming : boolean ``` lang=cpp, name=Lightning var Incoming : Boolean # Index : integer ``` lang=cpp, name=Lightning var Index : Integer # Port : integer ``` lang=cpp, name=Lightning var Port : Integer # Methods","title":"Connectiondata"},{"location":"reference/class_reference/connectionevent/","text":"Event Networking Methods Properties Base Classes Derived Classes Address event receiveddataevent Host Incoming Index Port # Properties # Address : integer ``` lang=cpp, name=Lightning var Address : Integer # Host : string ``` lang=cpp, name=Lightning var Host : String # Incoming : boolean ``` lang=cpp, name=Lightning var Incoming : Boolean # Index : integer ``` lang=cpp, name=Lightning var Index : Integer # Port : integer ``` lang=cpp, name=Lightning var Port : Integer # Methods","title":"Connectionevent"},{"location":"reference/class_reference/consoletextevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Consoletextevent"},{"location":"reference/class_reference/consoleui/","text":"Editor Methods Properties Base Classes Derived Classes texteditor # Properties # Methods","title":"Consoleui"},{"location":"reference/class_reference/constraintconfigblock/","text":"Physics (NOTE) A block of information for solving a joint (or constraint) type. This is used to configure how one joint is solved independently of another joint. Methods Properties Base Classes Derived Classes AngularBaumgarte safeid32object contactblock AngularErrorCorrection customjointblock LinearBaumgarte fixedanglejointblock LinearErrorCorrection gearjointblock PositionCorrectionType linearaxisjointblock Slop manipulatorjointblock phygunjointblock positionjointblock prismaticjoint2dblock prismaticjointblock pulleyjointblock relativevelocityjointblock revolutejoint2dblock revolutejointblock stickjointblock universaljointblock uprightjointblock weldjointblock wheeljoint2dblock wheeljointblock # Properties # AngularBaumgarte : real The exponential constant for correcting angular error with a penalty impulse. ``` lang=cpp, name=Lightning var AngularBaumgarte : Real # AngularErrorCorrection : real The max amount of error that can be corrected by the angular portion of any constraint in one frame (only for PostStabilization). ``` lang=cpp, name=Lightning var AngularErrorCorrection : Real # LinearBaumgarte : real The exponential constant for correcting linear error with a penalty impulse. ``` lang=cpp, name=Lightning var LinearBaumgarte : Real # LinearErrorCorrection : real The max amount of error that can be corrected by the linear portion of any constraint in one frame (only for PostStabilization). ``` lang=cpp, name=Lightning var LinearErrorCorrection : Real # PositionCorrectionType : ConstraintPositionCorrection What method should be used to fix errors in joints. ``` lang=cpp, name=Lightning var PositionCorrectionType : ConstraintPositionCorrection # Slop : real The amount of error allowed before position correction takes effect. ``` lang=cpp, name=Lightning var Slop : Real # Methods","title":"Constraintconfigblock"},{"location":"reference/class_reference/contactblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # ContactBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContactBlock() ```","title":"Contactblock"},{"location":"reference/class_reference/contactgraphedge/","text":"Physics (NOTE) A bi-directional graph edge between a collider and a contact. Exposes some internals to Contact which currently can't be exposed. Methods Properties Base Classes Derived Classes Constructor ContactPointCount BaseConstraintGraphEdge ContactPoints FirstPoint IsGhost Object OtherObject # Properties # ContactPointCount : integer read-only How many points of contact were in this collision. ``` lang=cpp, name=Lightning var ContactPointCount : Integer # ContactPoints : contactpointrange read-only Returns a range of all contact points in the collision. ``` lang=cpp, name=Lightning var ContactPoints : ContactPointRange # FirstPoint : contactpoint read-only Convenience function to return the first ContactPoint. Some logic only cares about one point of information. In a more general case all points should be iterated over. ``` lang=cpp, name=Lightning var FirstPoint : ContactPoint # IsGhost : boolean read-only Was this a ghost collision? ``` lang=cpp, name=Lightning var IsGhost : Boolean # Object : cog read-only ``` lang=cpp, name=Lightning var Object : Cog # OtherObject : cog read-only ``` lang=cpp, name=Lightning var OtherObject : Cog # Methods # ContactGraphEdge : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContactGraphEdge() ``` # ContactGraphEdge : Void constructor Name Type Description contactgraphedge ``` lang=cpp, name=Lightning function ContactGraphEdge( : ContactGraphEdge) ```","title":"Contactgraphedge"},{"location":"reference/class_reference/contactpoint/","text":"Physics (NOTE) Information about one point of contact in a collision. This is useful for evaluating info about the collision after it happened such as where the objects hit. WARNING: Do not hold onto this after an event is sent out. Methods Properties Base Classes Derived Classes Constructor ComplexImpulse FrictionImpulse LocalPoint NormalImpulse OtherLocalPoint Penetration RelativeVelocity WorldNormalTowardsOther WorldPoint # Properties # ComplexImpulse : real3 read-only The total impulse this object applied (only for more complicated logic). The impulse is a Vector3 of the values (normal, friction1, friction2). ``` lang=cpp, name=Lightning var ComplexImpulse : Real3 # FrictionImpulse : real read-only The total friction impulse that this object applied. ``` lang=cpp, name=Lightning var FrictionImpulse : Real # LocalPoint : real3 read-only The point in local space of myself in this collision. ``` lang=cpp, name=Lightning var LocalPoint : Real3 # NormalImpulse : real read-only The total impulse that this object applied in the direction of the normal. ``` lang=cpp, name=Lightning var NormalImpulse : Real # OtherLocalPoint : real3 read-only The point in local space of the other object in this collision. ``` lang=cpp, name=Lightning var OtherLocalPoint : Real3 # Penetration : real read-only The penetration of this contact point in the direction of the normal. Note: penetration is always positive and is not flipped for object A or object B. ``` lang=cpp, name=Lightning var Penetration : Real # RelativeVelocity : real read-only The relative velocity of this point in the direction of the normal. The relative point velocity is defined as Dot(p1 - p0, n) where p1 and p0 are the velocities of the contact points in the collision of myself and the other object respectively. This value can be used to see how fast the objects are now separating. Also, in pre-collision this value can be used to approximate the impulse of the collision since the impulse values will not have been calculated yet in pre-collision. ``` lang=cpp, name=Lightning var RelativeVelocity : Real # WorldNormalTowardsOther : real3 read-only The world space normal that points from myself towards the other object. ``` lang=cpp, name=Lightning var WorldNormalTowardsOther : Real3 # WorldPoint : real3 read-only The point in world space of this contact point. ``` lang=cpp, name=Lightning var WorldPoint : Real3 # Methods # ContactPoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContactPoint() ``` # ContactPoint : Void constructor Name Type Description contactpoint ``` lang=cpp, name=Lightning function ContactPoint( : ContactPoint) ```","title":"Contactpoint"},{"location":"reference/class_reference/contactpointrange/","text":"Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : contactpointrange read-only ``` lang=cpp, name=Lightning var All : ContactPointRange # Current : contactpoint read-only ``` lang=cpp, name=Lightning var Current : ContactPoint # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # ContactPointRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContactPointRange() ``` # ContactPointRange : Void constructor Name Type Description p0 contactpointrange ``` lang=cpp, name=Lightning function ContactPointRange(p0 : ContactPointRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Contactpointrange"},{"location":"reference/class_reference/contactrange/","text":"Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : contactrange read-only ``` lang=cpp, name=Lightning var All : ContactRange # Current : contactgraphedge read-only ``` lang=cpp, name=Lightning var Current : ContactGraphEdge # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # ContactRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContactRange() ``` # ContactRange : Void constructor Name Type Description p0 contactrange ``` lang=cpp, name=Lightning function ContactRange(p0 : ContactRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Contactrange"},{"location":"reference/class_reference/contentcomponent/","text":"ContentMeta Methods Properties Base Classes Derived Classes eventobject buildercomponent contentcopyright contenteditoroptions contenthistory contentnotes contenttags generatedarchetype geometryimport resourcetemplate texturecontent textureinfo # Properties # Methods","title":"Contentcomponent"},{"location":"reference/class_reference/contentcomposition/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentitem audiocontent binarycontent datacontent fontcontent geometrycontent imagecontent textcontent # Properties # Methods","title":"Contentcomposition"},{"location":"reference/class_reference/contentconfig/","text":"Component Engine (NOTE) Configuration component for content system. Used to find content paths and what default libraries to load. Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # ContentConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContentConfig() ```","title":"Contentconfig"},{"location":"reference/class_reference/contenteditoroptions/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor ShowInEditor contentcomponent # Properties # ShowInEditor : boolean ``` lang=cpp, name=Lightning var ShowInEditor : Boolean # Methods # ContentEditorOptions : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContentEditorOptions() ```","title":"Contenteditoroptions"},{"location":"reference/class_reference/contenthistory/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor Revisions contentcomponent # Properties # Revisions : revisions ``` lang=cpp, name=Lightning var Revisions : Revisions # Methods # ContentHistory : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContentHistory() ```","title":"Contenthistory"},{"location":"reference/class_reference/contentitem/","text":"ContentMeta Methods Properties Base Classes Derived Classes Name eventobject contentcomposition # Properties # Name : string read-only ``` lang=cpp, name=Lightning var Name : String # Methods","title":"Contentitem"},{"location":"reference/class_reference/contentitemmetaoperations/","text":"ContentMeta Methods Properties Base Classes Derived Classes metaoperations # Properties # Methods","title":"Contentitemmetaoperations"},{"location":"reference/class_reference/contentlibrary/","text":"ContentMeta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Contentlibrary"},{"location":"reference/class_reference/contentlibraryreference/","text":"Engine Methods Properties Base Classes Derived Classes ContentLibraryName safeid32object # Properties # ContentLibraryName : string ``` lang=cpp, name=Lightning var ContentLibraryName : String # Methods","title":"Contentlibraryreference"},{"location":"reference/class_reference/contentlibraryreferencearray/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Contentlibraryreferencearray"},{"location":"reference/class_reference/contentnotes/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor Notes contentcomponent # Properties # Notes : string ``` lang=cpp, name=Lightning var Notes : String # Methods # ContentNotes : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContentNotes() ```","title":"Contentnotes"},{"location":"reference/class_reference/contentpackage/","text":"Editor Methods Properties Base Classes Derived Classes Author eventobject Description Name Tags # Properties # Author : string ``` lang=cpp, name=Lightning var Author : String # Description : string ``` lang=cpp, name=Lightning var Description : String # Name : string ``` lang=cpp, name=Lightning var Name : String # Tags : string ``` lang=cpp, name=Lightning var Tags : String # Methods","title":"Contentpackage"},{"location":"reference/class_reference/contentsystem/","text":"ContentMeta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Contentsystem"},{"location":"reference/class_reference/contentsystemevent/","text":"Event ContentMeta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Contentsystemevent"},{"location":"reference/class_reference/contenttags/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor contentcomponent # Properties # Methods # ContentTags : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContentTags() ```","title":"Contenttags"},{"location":"reference/class_reference/contextmenuentry/","text":"Widget Methods Properties Base Classes Derived Classes AddCommandByName Icon safeid32eventobject contextmenuentrycommand AddDivider Name contextmenuentrydivider AddEntry contextmenuentrymenu Constructor Entries GetEntry RemoveEntry # Properties # Icon : string ``` lang=cpp, name=Lightning var Icon : String # Name : string ``` lang=cpp, name=Lightning var Name : String # Methods # AddCommandByName : contextmenuentry Name Type Description commandName string ``` lang=cpp, name=Lightning function AddCommandByName(commandName : String) : ContextMenuEntry ``` # AddDivider : contextmenuentry Name Type Description ``` lang=cpp, name=Lightning function AddDivider() : ContextMenuEntry ``` # AddEntry : contextmenuentry Adds a new entry with the provided name with an icon if one is provided to this menu entries children. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function AddEntry(name : String) : ContextMenuEntry # ContextMenuEntry : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContextMenuEntry() ``` # Entries : contextmenuentrychildrenrange Name Type Description ``` lang=cpp, name=Lightning function Entries() : ContextMenuEntryChildrenRange ``` # GetEntry : contextmenuentry Returns the children entry with the provided name if it exists and null otherwise. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function GetEntry(name : String) : ContextMenuEntry # RemoveEntry : Void Remove the entry with the provided name from this menu entries children. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function RemoveEntry(name : String)","title":"Contextmenuentry"},{"location":"reference/class_reference/contextmenuentrychildrenrange/","text":"Widget Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : contextmenuentrychildrenrange read-only ``` lang=cpp, name=Lightning var All : ContextMenuEntryChildrenRange # Current : contextmenuentry read-only ``` lang=cpp, name=Lightning var Current : ContextMenuEntry # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # ContextMenuEntryChildrenRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContextMenuEntryChildrenRange() ``` # ContextMenuEntryChildrenRange : Void constructor Name Type Description p0 contextmenuentrychildrenrange ``` lang=cpp, name=Lightning function ContextMenuEntryChildrenRange(p0 : ContextMenuEntryChildrenRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Contextmenuentrychildrenrange"},{"location":"reference/class_reference/contextmenuentrycommand/","text":"Widget Methods Properties Base Classes Derived Classes Constructor CommandName contextmenuentry # Properties # CommandName : string ``` lang=cpp, name=Lightning var CommandName : String # Methods # ContextMenuEntryCommand : Void constructor Name Type Description commandName string ``` lang=cpp, name=Lightning function ContextMenuEntryCommand(commandName : String) ```","title":"Contextmenuentrycommand"},{"location":"reference/class_reference/contextmenuentrydivider/","text":"Widget Methods Properties Base Classes Derived Classes Constructor contextmenuentry # Properties # Methods # ContextMenuEntryDivider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ContextMenuEntryDivider() ```","title":"Contextmenuentrydivider"},{"location":"reference/class_reference/contextmenuentrymenu/","text":"Widget Methods Properties Base Classes Derived Classes Constructor MenuName contextmenuentry # Properties # MenuName : string ``` lang=cpp, name=Lightning var MenuName : String # Methods # ContextMenuEntryMenu : Void constructor Name Type Description menuName string ``` lang=cpp, name=Lightning function ContextMenuEntryMenu(menuName : String) ```","title":"Contextmenuentrymenu"},{"location":"reference/class_reference/contextmenuevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Contextmenuevent"},{"location":"reference/class_reference/convexmesh/","text":"Resource Physics (NOTE) A convex mesh meant for use with dynamic rigid bodies. Computes efficient contact information compared to a regular physics mesh. This mesh also defines a volume which means mass properties can be computed. Methods Properties Base Classes Derived Classes Constructor genericphysicsmesh CreateRuntime RuntimeClone # Properties # Methods # ConvexMesh : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ConvexMesh() ``` # CreateRuntime : convexmesh static Creates a ConvexMesh for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : ConvexMesh # RuntimeClone : convexmesh Creates a clone of this mesh for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : ConvexMesh","title":"Convexmesh"},{"location":"reference/class_reference/convexmeshcollider/","text":"Component Physics (NOTE) Defines the collision volume for a convex mesh ( ConvexMesh resource). This collider has a volume and hence is able to work with a RigidBody. Methods Properties Base Classes Derived Classes Constructor ConvexMesh collider # Properties # ConvexMesh : convexmesh The convex mesh resource that defines the collision volume of this collider. ``` lang=cpp, name=Lightning var ConvexMesh : ConvexMesh # Methods # ConvexMeshCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ConvexMeshCollider() ```","title":"Convexmeshcollider"},{"location":"reference/class_reference/createdestroytool/","text":"Editor Methods Properties Base Classes Derived Classes BaseHeight heightmapsubtool PerlinAmplitude PerlinFrequency UsePerlinNoise # Properties # BaseHeight : real ``` lang=cpp, name=Lightning var BaseHeight : Real # PerlinAmplitude : real ``` lang=cpp, name=Lightning var PerlinAmplitude : Real # PerlinFrequency : real ``` lang=cpp, name=Lightning var PerlinFrequency : Real # UsePerlinNoise : boolean ``` lang=cpp, name=Lightning var UsePerlinNoise : Boolean # Methods","title":"Createdestroytool"},{"location":"reference/class_reference/creationtool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor Depth component DepthPlane ObjectToSpawn Offset PlacementMode Raycaster SnapDistance Snapping # Properties # Depth : real ``` lang=cpp, name=Lightning var Depth : Real # DepthPlane : real ``` lang=cpp, name=Lightning var DepthPlane : Real # ObjectToSpawn : archetype ``` lang=cpp, name=Lightning var ObjectToSpawn : Archetype # Offset : real3 ``` lang=cpp, name=Lightning var Offset : Real3 # PlacementMode : Placement ``` lang=cpp, name=Lightning var PlacementMode : Placement # Raycaster : raycaster ``` lang=cpp, name=Lightning var Raycaster : Raycaster # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # Snapping : boolean ``` lang=cpp, name=Lightning var Snapping : Boolean # Methods # CreationTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CreationTool() ```","title":"Creationtool"},{"location":"reference/class_reference/crossblend/","text":"Engine Methods Properties Base Classes Derived Classes SetNormalizedTimeScale Mode dualblendcrossblend SyncCadence TimeScaleFrom TimeScaleTo Type # Properties # Mode : AnimationBlendMode ``` lang=cpp, name=Lightning var Mode : AnimationBlendMode # TimeScaleFrom : real ``` lang=cpp, name=Lightning var TimeScaleFrom : Real # TimeScaleTo : real ``` lang=cpp, name=Lightning var TimeScaleTo : Real # Type : AnimationBlendType ``` lang=cpp, name=Lightning var Type : AnimationBlendType # Methods # SetNormalizedTimeScale : Void Name Type Description p0 real p1 real p2 real ``` lang=cpp, name=Lightning function SetNormalizedTimeScale(p0 : Real, p1 : Real, p2 : Real) ``` # SyncCadence : Void Name Type Description ``` lang=cpp, name=Lightning function SyncCadence() ```","title":"Crossblend"},{"location":"reference/class_reference/curvecontrolpoint/","text":"Editor Methods Properties Base Classes Derived Classes curvedraggable # Properties # Methods","title":"Curvecontrolpoint"},{"location":"reference/class_reference/curvedraggable/","text":"Editor Methods Properties Base Classes Derived Classes widget curvecontrolpoint curvetangent # Properties # Methods","title":"Curvedraggable"},{"location":"reference/class_reference/curveevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Curveevent"},{"location":"reference/class_reference/curvetangent/","text":"Editor Methods Properties Base Classes Derived Classes curvedraggable # Properties # Methods","title":"Curvetangent"},{"location":"reference/class_reference/customaudionode/","text":"Sound (NOTE) Uses a SoundBuffer to send audio data directly to the audio engine. Methods Properties Base Classes Derived Classes SendBuffer Channels soundnode SendMicCompressedData MinimumBufferSize SendMicUncompressedData SystemSampleRate SendPartialBuffer # Properties # Channels : integer The number of audio channels that will be in the buffer. ``` lang=cpp, name=Lightning var Channels : Integer # MinimumBufferSize : integer read-only The minimum number of samples that should be sent when a NeedMoreSamples event is received. ``` lang=cpp, name=Lightning var MinimumBufferSize : Integer # SystemSampleRate : integer read-only The sample rate currently being used by the audio system. ``` lang=cpp, name=Lightning var SystemSampleRate : Integer # Methods # SendBuffer : Void Sends a buffer of audio samples to the audio system for output. |Name|Type|Description| |---|---|---| |buffer| soundbuffer | | lang=cpp, name=Lightning function SendBuffer(buffer : SoundBuffer) # SendMicCompressedData : Void Name Type Description Array[ byte ] ``` lang=cpp, name=Lightning function SendMicCompressedData( : Array[Byte]) ``` # SendMicUncompressedData : Void Name Type Description Array[ real ] ``` lang=cpp, name=Lightning function SendMicUncompressedData( : Array[Real]) ``` # SendPartialBuffer : Void Sends a partial buffer of audio samples to the audio system for output. |Name|Type|Description| |---|---|---| |buffer| soundbuffer | | |startAtIndex| integer | | |howManySamples| integer | | lang=cpp, name=Lightning function SendPartialBuffer(buffer : SoundBuffer, startAtIndex : Integer, howManySamples : Integer)","title":"Customaudionode"},{"location":"reference/class_reference/customaudionodeevent/","text":"Event Sound Methods Properties Base Classes Derived Classes SamplesNeeded event # Properties # SamplesNeeded : integer ``` lang=cpp, name=Lightning var SamplesNeeded : Integer # Methods","title":"Customaudionodeevent"},{"location":"reference/class_reference/customcollisioneventtracker/","text":"Component Physics (NOTE) Allows a user to send out collision events that do not originate from the physics system. This includes determining when to send start/persisted/end events. This is primarily intended for use with a swept character controller where you never actually come into contact with objects. The objects you would have hit can be added to this so that the same logic can be used for swept and non-swept collision. Methods Properties Base Classes Derived Classes AddCollision component Constructor SendEvents # Properties # Methods # AddCollision : Void Add a collision for this frame between ourself and the passed in collider. |Name|Type|Description| |---|---|---| |otherCollider| collider | | |worldPoint| real3 | | |worldNormalTowardsOther| real3 | | lang=cpp, name=Lightning function AddCollision(otherCollider : Collider, worldPoint : Real3, worldNormalTowardsOther : Real3) # CustomCollisionEventTracker : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CustomCollisionEventTracker() ``` # SendEvents : Void Send out all of the events that have been queued up. This includes determining what should be started/persisted/ended events. These events are sent with the prefix that is passed in, e.g. if you pass in 'Collision' then CollisionStarted, CollisionPersisted, and CollisionEnded will be the event names. |Name|Type|Description| |---|---|---| |eventPrefix| string | | lang=cpp, name=Lightning function SendEvents(eventPrefix : String)","title":"Customcollisioneventtracker"},{"location":"reference/class_reference/customconstraintinfo/","text":"Physics (NOTE) Information to represent a constraint to be solved. The main information that needs to be set here is the Jacobian and error. A constraint will enforce that the relative velocities along the Jacobian are equal to plasma (ignoring error correction or motors). Methods Properties Base Classes Derived Classes ComputeMotor Active referencecountedeventobject ComputeSpring Angular0 DetachFromOwner Angular1 IsOwned Baumgarte SetErrorAndBias Bias SetJacobian EffectiveMass Error Gamma Impulse Linear0 Linear1 MaxImpulse MinImpulse Owner SolvePosition # Properties # Active : boolean Is this constraint currently active? ``` lang=cpp, name=Lightning var Active : Boolean # Angular0 : real3 Angular portion of objectA's Jacobian. ``` lang=cpp, name=Lightning var Angular0 : Real3 # Angular1 : real3 Angular portion of objectB's Jacobian. ``` lang=cpp, name=Lightning var Angular1 : Real3 # Baumgarte : real The baumgarte term used to correct error. This should typically be set in initialization (per constraint) and then left alone. Default value is 5. ``` lang=cpp, name=Lightning var Baumgarte : Real # Bias : real The bias is used to apply energy into the system. Typically, bias is combined with Error and Baumgarte to fix error. Bias is also used for motors and springs to drive the constraint. ``` lang=cpp, name=Lightning var Bias : Real # EffectiveMass : real The effective mass of the constraint. This is typically set by calling SetJacobian. ``` lang=cpp, name=Lightning var EffectiveMass : Real # Error : real The error of the constraint. This should typically be set via the SetError function. ``` lang=cpp, name=Lightning var Error : Real # Gamma : real Gamma is used to soften constraints. This should typically never be manually set. Instead, it is set when configuring the constraint to act like a spring. ``` lang=cpp, name=Lightning var Gamma : Real # Impulse : real The total accumulated impulse of this constraint. If you want to not use warm-starting then clear this value every frame. ``` lang=cpp, name=Lightning var Impulse : Real # Linear0 : real3 Linear portion of objectA's Jacobian. ``` lang=cpp, name=Lightning var Linear0 : Real3 # Linear1 : real3 Linear portion of objectB's Jacobian. ``` lang=cpp, name=Lightning var Linear1 : Real3 # MaxImpulse : real The max impulse magnitude allowed for the constraint. ``` lang=cpp, name=Lightning var MaxImpulse : Real # MinImpulse : real The min impulse magnitude allowed for the constraint. ``` lang=cpp, name=Lightning var MinImpulse : Real # Owner : customjoint read-only What joint currently owns this constraint. ``` lang=cpp, name=Lightning var Owner : CustomJoint # SolvePosition : boolean Should this constraint solve position directly or use baumgarte correction? Toggling SolvePosition should be done before setting any other values (ideally in initialization). Setting a constraint to be a motor or a spring will turn off position correction as an error bias must be used to solve those scenarios. ``` lang=cpp, name=Lightning var SolvePosition : Boolean # Methods # ComputeMotor : Void Sets this constraint as a motor (i.e. a constraint that drives movement along the Jacobian direction at a certain speed). The motor has a min and max impulse value that can be solved (typically -value, +value). If you set this as a motor, you should do so last. Motors should typically be their own constraint unlike springs. |Name|Type|Description| |---|---|---| |targetSpeed| real | | |minImpulse| real | | |maxImpulse| real | | lang=cpp, name=Lightning function ComputeMotor(targetSpeed : Real, minImpulse : Real, maxImpulse : Real) # ComputeSpring : Void Given the currently set mass and error, fix the constraint to be soft (i.e. solve the constraint like a spring). The spring fixes the constraint using the given frequency (oscillations per second) and damping ratio (0 is no damping, 1 is critical damping). |Name|Type|Description| |---|---|---| |frequencyHz| real | | |dampRatio| real | | lang=cpp, name=Lightning function ComputeSpring(frequencyHz : Real, dampRatio : Real) # DetachFromOwner : Void Remove this constraint from whatever joint owns it. This is equivalent to \"this.Owner.RemoveConstraint(this)\". |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DetachFromOwner() # IsOwned : boolean Is this constraint currently owned by a joint? (Equivalent to \"this.Owner != null\"). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsOwned() : Boolean # SetErrorAndBias : Void Set the position error of the constraint. This also sets the bias of the constraint (used to actually correct the error). If you want to set this constraint as a motor you should not call this function (or call it first). If you want to set this as a spring then make sure you call this first. |Name|Type|Description| |---|---|---| |error| real | | lang=cpp, name=Lightning function SetErrorAndBias(error : Real) # SetJacobian : Void Set the Jacobian of this constraint (and the effective mass). |Name|Type|Description| |---|---|---| |linear0| real3 | | |angular0| real3 | | |linear1| real3 | | |angular1| real3 | | lang=cpp, name=Lightning function SetJacobian(linear0 : Real3, angular0 : Real3, linear1 : Real3, angular1 : Real3)","title":"Customconstraintinfo"},{"location":"reference/class_reference/customjoint/","text":"Component Physics (NOTE) A customizable joint that can be configured in script. The user can create constraints belonging to this joint and set the required values to solve them. Some basic constraint understanding is required. To compute constraints you should listen to Events.ComputeCustomJointInfo. Methods Properties Base Classes Derived Classes AddConstraint ConstraintCount joint ClearConstraints CreateConstraint Constructor GetConstraint RemoveConstraint # Properties # ConstraintCount : integer read-only Returns how many constraints this joint owns. ``` lang=cpp, name=Lightning var ConstraintCount : Integer # Methods # AddConstraint : Void Add a constraint to this joint. This will assert if a joint already owns this constraint. |Name|Type|Description| |---|---|---| |constraint| customconstraintinfo | | lang=cpp, name=Lightning function AddConstraint(constraint : CustomConstraintInfo) # ClearConstraints : Void Clear all constraints from this joint (so none will solve). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearConstraints() # CreateConstraint : customconstraintinfo Create a constraint that is attached to this joint. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateConstraint() : CustomConstraintInfo # CustomJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CustomJoint() ``` # GetConstraint : customconstraintinfo Returns the constraint at the given index. Will assert if the index is outside the constraint count range. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetConstraint(index : Integer) : CustomConstraintInfo # RemoveConstraint : Void If the given constraint belongs to this joint then remove it from the constraints to solve. |Name|Type|Description| |---|---|---| |constraint| customconstraintinfo | | lang=cpp, name=Lightning function RemoveConstraint(constraint : CustomConstraintInfo)","title":"Customjoint"},{"location":"reference/class_reference/customjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # CustomJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CustomJointBlock() ```","title":"Customjointblock"},{"location":"reference/class_reference/customjointevent/","text":"Event Physics (NOTE) Sent by CustomJoint before solving constraints. Used to configure constraints before the physics system begins solving. Methods Properties Base Classes Derived Classes Dt event Owner # Properties # Dt : real The current frame's delta time. Use to setup the constraint if necessary. ``` lang=cpp, name=Lightning var Dt : Real # Owner : customjoint The joint that sent this event. ``` lang=cpp, name=Lightning var Owner : CustomJoint # Methods","title":"Customjointevent"},{"location":"reference/class_reference/customphysicseffect/","text":"Component Physics (NOTE) A physics effect that sends events out so users can apply custom logic for forces. Methods Properties Base Classes Derived Classes Constructor physicseffect # Properties # Methods # CustomPhysicsEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CustomPhysicsEffect() ```","title":"Customphysicseffect"},{"location":"reference/class_reference/customphysicseffectevent/","text":"Event Physics (NOTE) Event data for applying custom physics effects. Methods Properties Base Classes Derived Classes Constructor Dt event Effect RigidBody # Properties # Dt : real The timestep of the current physics frame (in seconds). ``` lang=cpp, name=Lightning var Dt : Real # Effect : customphysicseffect The effect that sent out this event. ``` lang=cpp, name=Lightning var Effect : CustomPhysicsEffect # RigidBody : rigidbody The RigidBody to apply forces to. ``` lang=cpp, name=Lightning var RigidBody : RigidBody # Methods # CustomPhysicsEffectEvent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CustomPhysicsEffectEvent() ```","title":"Customphysicseffectevent"},{"location":"reference/class_reference/cylindercollider/","text":"Component Physics (NOTE) Defines the collision volume for a cylinder defined by a height and radius. Methods Properties Base Classes Derived Classes Constructor Direction collider Height Radius WorldHeight WorldRadius # Properties # Direction : AxisDirection The direction that the height is defined along. Allows the user to change whether the cylinder's height is along the x, y, or z axis. ``` lang=cpp, name=Lightning var Direction : AxisDirection # Height : real The local space distance from the top of the cylinder to the bottom. ``` lang=cpp, name=Lightning var Height : Real # Radius : real The local space radius of the cylinder. ``` lang=cpp, name=Lightning var Radius : Real # WorldHeight : real read-only The full height of the cylinder after scale is applied. ``` lang=cpp, name=Lightning var WorldHeight : Real # WorldRadius : real read-only The radius of the cylinder after scale is applied. ``` lang=cpp, name=Lightning var WorldRadius : Real # Methods # CylinderCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function CylinderCollider() ```","title":"Cylindercollider"},{"location":"reference/class_reference/databuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes buildercomponent lightningpluginbuilder # Properties # Methods","title":"Databuilder"},{"location":"reference/class_reference/datacontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Datacontent"},{"location":"reference/class_reference/dataevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Dataevent"},{"location":"reference/class_reference/datareplaceevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event cogreplaceevent # Properties # Methods","title":"Datareplaceevent"},{"location":"reference/class_reference/dataresource/","text":"Resource Engine (NOTE) A resource that is stored in our serialization data format and is directly edited by the editor. Methods Properties Base Classes Derived Classes Resource collisiongroup collisiontable colorgradient material netchannelconfig netpropertyconfig physicsmaterial physicssolverconfig rendergroup resourcetable samplecurve soundattenuator soundcue soundtag lightningpluginsource # Properties # Methods","title":"Dataresource"},{"location":"reference/class_reference/dataresourceinheritance/","text":"Engine Methods Properties Base Classes Derived Classes metadatainheritanceroot # Properties # Methods","title":"Dataresourceinheritance"},{"location":"reference/class_reference/debugarc/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color End Mid OnTop Start ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # End : real3 ``` lang=cpp, name=Lightning var End : Real3 # Mid : real3 ``` lang=cpp, name=Lightning var Mid : Real3 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Start : real3 ``` lang=cpp, name=Lightning var Start : Real3 # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugArc : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugArc() ``` # DebugArc : Void constructor Name Type Description start real3 mid real3 end real3 ``` lang=cpp, name=Lightning function DebugArc(start : Real3, mid : Real3, end : Real3) ```","title":"Debugarc"},{"location":"reference/class_reference/debugbox/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color Filled HalfExtents OnTop Position Rotation ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # Filled : boolean ``` lang=cpp, name=Lightning var Filled : Boolean # HalfExtents : real2 ``` lang=cpp, name=Lightning var HalfExtents : Real2 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Rotation : quaternion ``` lang=cpp, name=Lightning var Rotation : Quaternion # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugBox : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugBox() ``` # DebugBox : Void constructor Name Type Description aabb aabb ``` lang=cpp, name=Lightning function DebugBox(aabb : Aabb) ``` # DebugBox : Void constructor Name Type Description position real3 halfExtents real ``` lang=cpp, name=Lightning function DebugBox(position : Real3, halfExtents : Real) ``` # DebugBox : Void constructor Name Type Description position real3 halfExtents real rotation quaternion ``` lang=cpp, name=Lightning function DebugBox(position : Real3, halfExtents : Real, rotation : Quaternion) ``` # DebugBox : Void constructor Name Type Description position real3 halfExtents real2 ``` lang=cpp, name=Lightning function DebugBox(position : Real3, halfExtents : Real2) ``` # DebugBox : Void constructor Name Type Description position real3 halfExtents real2 rotation quaternion ``` lang=cpp, name=Lightning function DebugBox(position : Real3, halfExtents : Real2, rotation : Quaternion) ```","title":"Debugbox"},{"location":"reference/class_reference/debugcapsule/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color End OnTop Radius Start ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # End : real3 ``` lang=cpp, name=Lightning var End : Real3 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # Start : real3 ``` lang=cpp, name=Lightning var Start : Real3 # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugCapsule : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugCapsule() ``` # DebugCapsule : Void constructor Name Type Description start real3 end real3 radius real ``` lang=cpp, name=Lightning function DebugCapsule(start : Real3, end : Real3, radius : Real) ``` # DebugCapsule : Void constructor Name Type Description position real3 axis real3 height real radius real ``` lang=cpp, name=Lightning function DebugCapsule(position : Real3, axis : Real3, height : Real, radius : Real) ```","title":"Debugcapsule"},{"location":"reference/class_reference/debugcircle/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Axis Color OnTop Position Radius ViewAligned ViewScaled ViewScaleOffset # Properties # Axis : real3 ``` lang=cpp, name=Lightning var Axis : Real3 # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugCircle : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugCircle() ``` # DebugCircle : Void constructor Name Type Description position real3 axis real3 radius real ``` lang=cpp, name=Lightning function DebugCircle(position : Real3, axis : Real3, radius : Real) ```","title":"Debugcircle"},{"location":"reference/class_reference/debugcone/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color Direction Length OnTop Position Radius ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # Direction : real3 ``` lang=cpp, name=Lightning var Direction : Real3 # Length : real ``` lang=cpp, name=Lightning var Length : Real # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugCone : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugCone() ``` # DebugCone : Void constructor Name Type Description position real3 direction real3 length real radius real ``` lang=cpp, name=Lightning function DebugCone(position : Real3, direction : Real3, length : Real, radius : Real) ```","title":"Debugcone"},{"location":"reference/class_reference/debugcylinder/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color End OnTop Radius Start ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # End : real3 ``` lang=cpp, name=Lightning var End : Real3 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # Start : real3 ``` lang=cpp, name=Lightning var Start : Real3 # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugCylinder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugCylinder() ``` # DebugCylinder : Void constructor Name Type Description start real3 end real3 radius real ``` lang=cpp, name=Lightning function DebugCylinder(start : Real3, end : Real3, radius : Real) ``` # DebugCylinder : Void constructor Name Type Description position real3 axis real3 height real radius real ``` lang=cpp, name=Lightning function DebugCylinder(position : Real3, axis : Real3, height : Real, radius : Real) ```","title":"Debugcylinder"},{"location":"reference/class_reference/debugdraw/","text":"Engine Methods Properties Base Classes Derived Classes Add # Properties # Methods # Add : Void static Name Type Description debugarc ``` lang=cpp, name=Lightning function Add( : DebugArc) ``` # Add : Void static Name Type Description debugbox ``` lang=cpp, name=Lightning function Add( : DebugBox) ``` # Add : Void static Name Type Description debugcapsule ``` lang=cpp, name=Lightning function Add( : DebugCapsule) ``` # Add : Void static Name Type Description debugcircle ``` lang=cpp, name=Lightning function Add( : DebugCircle) ``` # Add : Void static Name Type Description debugcone ``` lang=cpp, name=Lightning function Add( : DebugCone) ``` # Add : Void static Name Type Description debugcylinder ``` lang=cpp, name=Lightning function Add( : DebugCylinder) ``` # Add : Void static Name Type Description debugfrustum ``` lang=cpp, name=Lightning function Add( : DebugFrustum) ``` # Add : Void static Name Type Description debugline ``` lang=cpp, name=Lightning function Add( : DebugLine) ``` # Add : Void static Name Type Description debuglinecross ``` lang=cpp, name=Lightning function Add( : DebugLineCross) ``` # Add : Void static Name Type Description debugobb ``` lang=cpp, name=Lightning function Add( : DebugObb) ``` # Add : Void static Name Type Description debugsphere ``` lang=cpp, name=Lightning function Add( : DebugSphere) ``` # Add : Void static Name Type Description debugtext ``` lang=cpp, name=Lightning function Add( : DebugText) ``` # Add : Void static Name Type Description debugtriangle ``` lang=cpp, name=Lightning function Add( : DebugTriangle) ``` # Add : Void static Name Type Description space debugarc ``` lang=cpp, name=Lightning function Add( : Space, : DebugArc) ``` # Add : Void static Name Type Description space debugbox ``` lang=cpp, name=Lightning function Add( : Space, : DebugBox) ``` # Add : Void static Name Type Description space debugcapsule ``` lang=cpp, name=Lightning function Add( : Space, : DebugCapsule) ``` # Add : Void static Name Type Description space debugcircle ``` lang=cpp, name=Lightning function Add( : Space, : DebugCircle) ``` # Add : Void static Name Type Description space debugcone ``` lang=cpp, name=Lightning function Add( : Space, : DebugCone) ``` # Add : Void static Name Type Description space debugcylinder ``` lang=cpp, name=Lightning function Add( : Space, : DebugCylinder) ``` # Add : Void static Name Type Description space debugfrustum ``` lang=cpp, name=Lightning function Add( : Space, : DebugFrustum) ``` # Add : Void static Name Type Description space debugline ``` lang=cpp, name=Lightning function Add( : Space, : DebugLine) ``` # Add : Void static Name Type Description space debuglinecross ``` lang=cpp, name=Lightning function Add( : Space, : DebugLineCross) ``` # Add : Void static Name Type Description space debugobb ``` lang=cpp, name=Lightning function Add( : Space, : DebugObb) ``` # Add : Void static Name Type Description space debugsphere ``` lang=cpp, name=Lightning function Add( : Space, : DebugSphere) ``` # Add : Void static Name Type Description space debugtext ``` lang=cpp, name=Lightning function Add( : Space, : DebugText) ``` # Add : Void static Name Type Description space debugtriangle ``` lang=cpp, name=Lightning function Add( : Space, : DebugTriangle) ```","title":"Debugdraw"},{"location":"reference/class_reference/debugengineevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Debugengineevent"},{"location":"reference/class_reference/debugfrustum/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color OnTop ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugFrustum : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugFrustum() ``` # DebugFrustum : Void constructor Name Type Description p0 frustum ``` lang=cpp, name=Lightning function DebugFrustum(p0 : Frustum) ```","title":"Debugfrustum"},{"location":"reference/class_reference/debuggraphical/","text":"Component Graphics Methods Properties Base Classes Derived Classes graphical debuggraphicalprimitive debuggraphicaltext # Properties # Methods","title":"Debuggraphical"},{"location":"reference/class_reference/debuggraphicalprimitive/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor debuggraphical debuggraphicalthickline # Properties # Methods # DebugGraphicalPrimitive : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugGraphicalPrimitive() ```","title":"Debuggraphicalprimitive"},{"location":"reference/class_reference/debuggraphicaltext/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor debuggraphical # Properties # Methods # DebugGraphicalText : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugGraphicalText() ```","title":"Debuggraphicaltext"},{"location":"reference/class_reference/debuggraphicalthickline/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor debuggraphicalprimitive # Properties # Methods # DebugGraphicalThickLine : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugGraphicalThickLine() ```","title":"Debuggraphicalthickline"},{"location":"reference/class_reference/debugline/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor BoxHeads Color DualHeads End Filled HeadSize OnTop Start ViewAligned ViewScaled ViewScaleOffset # Properties # BoxHeads : boolean ``` lang=cpp, name=Lightning var BoxHeads : Boolean # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # DualHeads : boolean ``` lang=cpp, name=Lightning var DualHeads : Boolean # End : real3 ``` lang=cpp, name=Lightning var End : Real3 # Filled : boolean ``` lang=cpp, name=Lightning var Filled : Boolean # HeadSize : real ``` lang=cpp, name=Lightning var HeadSize : Real # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Start : real3 ``` lang=cpp, name=Lightning var Start : Real3 # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugLine : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugLine() ``` # DebugLine : Void constructor Name Type Description ray ray ``` lang=cpp, name=Lightning function DebugLine(ray : Ray) ``` # DebugLine : Void constructor Name Type Description ray ray t real ``` lang=cpp, name=Lightning function DebugLine(ray : Ray, t : Real) ``` # DebugLine : Void constructor Name Type Description start real3 end real3 ``` lang=cpp, name=Lightning function DebugLine(start : Real3, end : Real3) ``` # DebugLine : Void constructor Name Type Description start real3 end real3 headSize real ``` lang=cpp, name=Lightning function DebugLine(start : Real3, end : Real3, headSize : Real) ``` # DebugLine : Void constructor Name Type Description segment segment ``` lang=cpp, name=Lightning function DebugLine(segment : Segment) ```","title":"Debugline"},{"location":"reference/class_reference/debuglinecross/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color HalfExtents OnTop Position ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # HalfExtents : real ``` lang=cpp, name=Lightning var HalfExtents : Real # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugLineCross : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugLineCross() ``` # DebugLineCross : Void constructor Name Type Description position real3 halfExtents real ``` lang=cpp, name=Lightning function DebugLineCross(position : Real3, halfExtents : Real) ```","title":"Debuglinecross"},{"location":"reference/class_reference/debugobb/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color Corners Filled HalfExtents OnTop Position Rotation ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # Corners : boolean ``` lang=cpp, name=Lightning var Corners : Boolean # Filled : boolean ``` lang=cpp, name=Lightning var Filled : Boolean # HalfExtents : real3 ``` lang=cpp, name=Lightning var HalfExtents : Real3 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Rotation : quaternion ``` lang=cpp, name=Lightning var Rotation : Quaternion # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugObb : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugObb() ``` # DebugObb : Void constructor Name Type Description aabb aabb ``` lang=cpp, name=Lightning function DebugObb(aabb : Aabb) ``` # DebugObb : Void constructor Name Type Description position real3 halfExtents real ``` lang=cpp, name=Lightning function DebugObb(position : Real3, halfExtents : Real) ``` # DebugObb : Void constructor Name Type Description position real3 halfExtents real rotation quaternion ``` lang=cpp, name=Lightning function DebugObb(position : Real3, halfExtents : Real, rotation : Quaternion) ``` # DebugObb : Void constructor Name Type Description position real3 halfExtents real3 ``` lang=cpp, name=Lightning function DebugObb(position : Real3, halfExtents : Real3) ``` # DebugObb : Void constructor Name Type Description position real3 halfExtents real3 rotation quaternion ``` lang=cpp, name=Lightning function DebugObb(position : Real3, halfExtents : Real3, rotation : Quaternion) ``` # DebugObb : Void constructor Name Type Description position real3 halfExtents real3 rotation real3x3 ``` lang=cpp, name=Lightning function DebugObb(position : Real3, halfExtents : Real3, rotation : Real3x3) ```","title":"Debugobb"},{"location":"reference/class_reference/debugsettings/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor MaxDebugObjects component # Properties # MaxDebugObjects : integer Maximum number of debug objects allowed at any one time to prevent accidentally running out of memory. ``` lang=cpp, name=Lightning var MaxDebugObjects : Integer # Methods # DebugSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugSettings() ```","title":"Debugsettings"},{"location":"reference/class_reference/debugsphere/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color Colored OnTop Position Radius ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # Colored : boolean ``` lang=cpp, name=Lightning var Colored : Boolean # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugSphere : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugSphere() ``` # DebugSphere : Void constructor Name Type Description sphere debugsphere ``` lang=cpp, name=Lightning function DebugSphere(sphere : DebugSphere) ``` # DebugSphere : Void constructor Name Type Description position real3 radius real ``` lang=cpp, name=Lightning function DebugSphere(position : Real3, radius : Real) ```","title":"Debugsphere"},{"location":"reference/class_reference/debugtext/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Centered Color OnTop Position Rotation Text TextHeight ViewAligned ViewScaled ViewScaleOffset # Properties # Centered : boolean ``` lang=cpp, name=Lightning var Centered : Boolean # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Rotation : quaternion ``` lang=cpp, name=Lightning var Rotation : Quaternion # Text : string ``` lang=cpp, name=Lightning var Text : String # TextHeight : real ``` lang=cpp, name=Lightning var TextHeight : Real # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugText : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugText() ``` # DebugText : Void constructor Name Type Description position real3 textHeight real text string ``` lang=cpp, name=Lightning function DebugText(position : Real3, textHeight : Real, text : String) ```","title":"Debugtext"},{"location":"reference/class_reference/debugtriangle/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Color Filled OnTop Point0 Point1 Point2 ViewAligned ViewScaled ViewScaleOffset # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # Filled : boolean ``` lang=cpp, name=Lightning var Filled : Boolean # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Point0 : real3 ``` lang=cpp, name=Lightning var Point0 : Real3 # Point1 : real3 ``` lang=cpp, name=Lightning var Point1 : Real3 # Point2 : real3 ``` lang=cpp, name=Lightning var Point2 : Real3 # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # ViewScaled : boolean ``` lang=cpp, name=Lightning var ViewScaled : Boolean # ViewScaleOffset : real3 ``` lang=cpp, name=Lightning var ViewScaleOffset : Real3 # Methods # DebugTriangle : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DebugTriangle() ``` # DebugTriangle : Void constructor Name Type Description p0 real3 p1 real3 p2 real3 ``` lang=cpp, name=Lightning function DebugTriangle(p0 : Real3, p1 : Real3, p2 : Real3) ```","title":"Debugtriangle"},{"location":"reference/class_reference/defaultgamesetup/","text":"Component Gameplay (NOTE) Create the starting space and load the starting level into that space. Methods Properties Base Classes Derived Classes Constructor LoadEditingLevel component StartingLevel StartingSpace # Properties # LoadEditingLevel : boolean ``` lang=cpp, name=Lightning var LoadEditingLevel : Boolean # StartingLevel : level ``` lang=cpp, name=Lightning var StartingLevel : Level # StartingSpace : archetype ``` lang=cpp, name=Lightning var StartingSpace : Archetype # Methods # DefaultGameSetup : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DefaultGameSetup() ```","title":"Defaultgamesetup"},{"location":"reference/class_reference/definitionset/","text":"Resource Graphics Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Definitionset"},{"location":"reference/class_reference/delaynode/","text":"Sound (NOTE) Applies a delay filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateWetPercent Delay soundnode InterpolateWetValue FeedbackPercent FeedbackValue WetPercent WetValue # Properties # Delay : real The length of the delay, in seconds. ``` lang=cpp, name=Lightning var Delay : Real # FeedbackPercent : real DEPRECATED The FeedbackValue property should be used instead. ``` lang=cpp, name=Lightning var FeedbackPercent : Real # FeedbackValue : real The percentage of output (from 0 to 1.0f) which is fed back into the filter as input, creating an echo-like effect. ``` lang=cpp, name=Lightning var FeedbackValue : Real # WetPercent : real DEPRECATED The WetValue property should be used instead. ``` lang=cpp, name=Lightning var WetPercent : Real # WetValue : real The percentage of the node's output (0 - 1.0) which has the delay filter applied to it. ``` lang=cpp, name=Lightning var WetValue : Real # Methods # InterpolateWetPercent : Void DEPRECATED The InterpolateWetValue method should be used instead. |Name|Type|Description| |---|---|---| |wetPercent| real | | |time| real | | lang=cpp, name=Lightning function InterpolateWetPercent(wetPercent : Real, time : Real) # InterpolateWetValue : Void Interpolates the WetValue property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |wetPercent| real | | |time| real | | lang=cpp, name=Lightning function InterpolateWetValue(wetPercent : Real, time : Real)","title":"Delaynode"},{"location":"reference/class_reference/depthsettings/","text":"Graphics (NOTE) Settings for how the depth buffer should control pixel output. Methods Properties Base Classes Derived Classes Constructor DepthCompareFunc DepthFailOp DepthFailOpBackFace DepthMode DepthPassOp DepthPassOpBackFace StencilCompareFunc StencilCompareFuncBackFace StencilFailOp StencilFailOpBackFace StencilMode StencilReadMask StencilReadMaskBackFace StencilTestValue StencilTestValueBackFace StencilWriteMask StencilWriteMaskBackFace # Properties # DepthCompareFunc : TextureCompareFunc ``` lang=cpp, name=Lightning var DepthCompareFunc : TextureCompareFunc # DepthFailOp : StencilOp ``` lang=cpp, name=Lightning var DepthFailOp : StencilOp # DepthFailOpBackFace : StencilOp ``` lang=cpp, name=Lightning var DepthFailOpBackFace : StencilOp # DepthMode : DepthMode ``` lang=cpp, name=Lightning var DepthMode : DepthMode # DepthPassOp : StencilOp ``` lang=cpp, name=Lightning var DepthPassOp : StencilOp # DepthPassOpBackFace : StencilOp ``` lang=cpp, name=Lightning var DepthPassOpBackFace : StencilOp # StencilCompareFunc : TextureCompareFunc ``` lang=cpp, name=Lightning var StencilCompareFunc : TextureCompareFunc # StencilCompareFuncBackFace : TextureCompareFunc ``` lang=cpp, name=Lightning var StencilCompareFuncBackFace : TextureCompareFunc # StencilFailOp : StencilOp ``` lang=cpp, name=Lightning var StencilFailOp : StencilOp # StencilFailOpBackFace : StencilOp ``` lang=cpp, name=Lightning var StencilFailOpBackFace : StencilOp # StencilMode : StencilMode ``` lang=cpp, name=Lightning var StencilMode : StencilMode # StencilReadMask : byte Bit mask for buffer value and test value when being compared. ``` lang=cpp, name=Lightning var StencilReadMask : Byte # StencilReadMaskBackFace : byte Bit mask for buffer value and test value when being compared, for triangle back faces if in separate mode. ``` lang=cpp, name=Lightning var StencilReadMaskBackFace : Byte # StencilTestValue : byte Value that will be used to compare against the stencil buffer for all pixels. ``` lang=cpp, name=Lightning var StencilTestValue : Byte # StencilTestValueBackFace : byte Value that will be used to compare against the stencil buffer for all pixels, for triangle back faces if in separate mode. ``` lang=cpp, name=Lightning var StencilTestValueBackFace : Byte # StencilWriteMask : byte Bit mask for which bits in the buffer can be modified. ``` lang=cpp, name=Lightning var StencilWriteMask : Byte # StencilWriteMaskBackFace : byte Bit mask for which bits in the buffer can be modified, for triangle back faces if in separate mode. ``` lang=cpp, name=Lightning var StencilWriteMaskBackFace : Byte # Methods # DepthSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DepthSettings() ``` # DepthSettings : Void constructor Name Type Description other depthsettings ``` lang=cpp, name=Lightning function DepthSettings(other : DepthSettings) ```","title":"Depthsettings"},{"location":"reference/class_reference/developerconfig/","text":"Component Engine (NOTE) Configuration component that Contains developer settings. Used to indicate a user is a developer. Methods Properties Base Classes Derived Classes Constructor CanModifyReadOnlyResources component DoubleEscapeQuit ProxyObjectsInPreviews # Properties # CanModifyReadOnlyResources : boolean Allows editing and saving of read only resources. ``` lang=cpp, name=Lightning var CanModifyReadOnlyResources : Boolean # DoubleEscapeQuit : boolean Double escape to close the engine. ``` lang=cpp, name=Lightning var DoubleEscapeQuit : Boolean # ProxyObjectsInPreviews : boolean Whether or not script objects are proxied in the preview windows. ``` lang=cpp, name=Lightning var ProxyObjectsInPreviews : Boolean # Methods # DeveloperConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DeveloperConfig() ```","title":"Developerconfig"},{"location":"reference/class_reference/directblend/","text":"Engine Methods Properties Base Classes Derived Classes dualblenddirectblend # Properties # Methods","title":"Directblend"},{"location":"reference/class_reference/directproperty/","text":"Editor Methods Properties Base Classes Derived Classes propertywidget # Properties # Methods","title":"Directproperty"},{"location":"reference/class_reference/docklayout/","text":"Widget Methods Properties Base Classes Derived Classes layout # Properties # Methods","title":"Docklayout"},{"location":"reference/class_reference/document/","text":"Editor Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Document"},{"location":"reference/class_reference/documentationlibrary/","text":"Engine Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Documentationlibrary"},{"location":"reference/class_reference/documenteditor/","text":"Editor Methods Properties Base Classes Derived Classes texteditor # Properties # Methods","title":"Documenteditor"},{"location":"reference/class_reference/documentmanager/","text":"Editor Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Documentmanager"},{"location":"reference/class_reference/documentresource/","text":"Resource Engine (NOTE) Resource that can be edited as text and is searchable. Methods Properties Base Classes Derived Classes Resource textblock lightningdocumentresource # Properties # Methods","title":"Documentresource"},{"location":"reference/class_reference/drageffect/","text":"Component Physics (NOTE) Applies drag or damping forces to slow down an object's linear and angular velocity. Drag is computed as a simple linear approximation of the drag force. Damping is a linear approximation of a drag acceleration. This means that damping affects all objects the same (mass independent). Methods Properties Base Classes Derived Classes Constructor AngularDamping physicseffect AngularDrag LinearDamping LinearDrag # Properties # AngularDamping : real Angular damping coefficient for applying an angular drag acceleration (accel = -kw). Note: this affects objects the same regardless of mass. ``` lang=cpp, name=Lightning var AngularDamping : Real # AngularDrag : real The angular drag coefficient for applying an angular drag force (T = -kw). ``` lang=cpp, name=Lightning var AngularDrag : Real # LinearDamping : real Linear damping coefficient for applying a linear drag acceleration (accel = -bv). Note: this affects objects the same regardless of mass. ``` lang=cpp, name=Lightning var LinearDamping : Real # LinearDrag : real The linear drag coefficient for applying a linear drag force (F = -bv). ``` lang=cpp, name=Lightning var LinearDrag : Real # Methods # DragEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DragEffect() ```","title":"Drageffect"},{"location":"reference/class_reference/dragselectsubtool/","text":"Editor Methods Properties Base Classes Derived Classes springsubtool selectorspringsubtool # Properties # Methods","title":"Dragselectsubtool"},{"location":"reference/class_reference/dualblendchainnode/","text":"Engine Methods Properties Base Classes Derived Classes From animationnode chainnode To # Properties # From : animationnode ``` lang=cpp, name=Lightning var From : AnimationNode # To : animationnode ``` lang=cpp, name=Lightning var To : AnimationNode # Methods","title":"Dualblendchainnode"},{"location":"reference/class_reference/dualblendcrossblend/","text":"Engine Methods Properties Base Classes Derived Classes From animationnode crossblend To # Properties # From : animationnode ``` lang=cpp, name=Lightning var From : AnimationNode # To : animationnode ``` lang=cpp, name=Lightning var To : AnimationNode # Methods","title":"Dualblendcrossblend"},{"location":"reference/class_reference/dualblenddirectblend/","text":"Engine Methods Properties Base Classes Derived Classes From animationnode directblend To # Properties # From : animationnode ``` lang=cpp, name=Lightning var From : AnimationNode # To : animationnode ``` lang=cpp, name=Lightning var To : AnimationNode # Methods","title":"Dualblenddirectblend"},{"location":"reference/class_reference/dualblendselectivenode/","text":"Engine Methods Properties Base Classes Derived Classes From animationnode selectivenode To # Properties # From : animationnode ``` lang=cpp, name=Lightning var From : AnimationNode # To : animationnode ``` lang=cpp, name=Lightning var To : AnimationNode # Methods","title":"Dualblendselectivenode"},{"location":"reference/class_reference/dynamicaabbtreebroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase # Properties # Methods","title":"Dynamicaabbtreebroadphase"},{"location":"reference/class_reference/dynamicbroadphasepropertyextension/","text":"SpatialPartition Methods Properties Base Classes Derived Classes editorindexedstringarray # Properties # Methods","title":"Dynamicbroadphasepropertyextension"},{"location":"reference/class_reference/dynamicmotor/","text":"Component Physics (NOTE) Controls an object's movement using joints. This allows creating a physics based character controller that reacts to physics (joints, forces, collisions, etc...). The motor controls relative velocity with respect to a target object frame. Methods Properties Base Classes Derived Classes Constructor Active component MoveInDirection MaxMoveImpulse SetReferenceFrameToObject SetReferenceFrameToWorld # Properties # Active : boolean Should physics restrict the movement of this object? ``` lang=cpp, name=Lightning var Active : Boolean # MaxMoveImpulse : real What is the max impulse allowed for controlling movement. ``` lang=cpp, name=Lightning var MaxMoveImpulse : Real # Methods # DynamicMotor : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DynamicMotor() ``` # MoveInDirection : Void Attempts to move the body in the given direction. |Name|Type|Description| |---|---|---| |direction| real3 | | |up| real3 | | lang=cpp, name=Lightning function MoveInDirection(direction : Real3, up : Real3) # SetReferenceFrameToObject : Void Compute the relative velocity with respect to a target object. Used to control movement on moving platforms. |Name|Type|Description| |---|---|---| |object| cog | | lang=cpp, name=Lightning function SetReferenceFrameToObject(object : Cog) # SetReferenceFrameToWorld : Void Compute relative velocity with respect to the world. Used to signify that an absolute world speed is desired. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function SetReferenceFrameToWorld()","title":"Dynamicmotor"},{"location":"reference/class_reference/edgedocklayout/","text":"Widget Methods Properties Base Classes Derived Classes layout # Properties # Methods","title":"Edgedocklayout"},{"location":"reference/class_reference/editingamefilter/","text":"Networking Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Editingamefilter"},{"location":"reference/class_reference/editor/","text":"Editor Methods Properties Base Classes Derived Classes AddResource Actions multidock editormain AddResourceType EditGameSession CreateDockableWindow EditLevel DisplayGameSession EditSpace EditGameSpaces OperationQueue EditResource ProjectCog ExecuteCommand Selection PauseGame PlayGame PlayNewGame PlaySingleGame SelectPrimary SelectTool SetFocus SetGamePaused SetMainPropertyViewObject StepGame StopGame ToggleGamePaused ZoomOnGame # Properties # Actions : actions read-only ``` lang=cpp, name=Lightning var Actions : Actions # EditGameSession : gamesession read-only ``` lang=cpp, name=Lightning var EditGameSession : GameSession # EditLevel : level read-only ``` lang=cpp, name=Lightning var EditLevel : Level # EditSpace : space read-only ``` lang=cpp, name=Lightning var EditSpace : Space # OperationQueue : operationqueue read-only ``` lang=cpp, name=Lightning var OperationQueue : OperationQueue # ProjectCog : cog read-only ``` lang=cpp, name=Lightning var ProjectCog : Cog # Selection : metaselection read-only ``` lang=cpp, name=Lightning var Selection : MetaSelection # Methods # AddResource : Void Name Type Description ``` lang=cpp, name=Lightning function AddResource() ``` # AddResourceType : Void Name Type Description p0 boundtype p1 string ``` lang=cpp, name=Lightning function AddResourceType(p0 : BoundType, p1 : String) ``` # CreateDockableWindow : Void Name Type Description p0 string p1 cameraviewport p2 real2 p3 boolean p4 DockArea ``` lang=cpp, name=Lightning function CreateDockableWindow(p0 : String, p1 : CameraViewport, p2 : Real2, p3 : Boolean, p4 : DockArea) ``` # DisplayGameSession : Void Name Type Description p0 string p1 gamesession ``` lang=cpp, name=Lightning function DisplayGameSession(p0 : String, p1 : GameSession) ``` # EditGameSpaces : Void Name Type Description ``` lang=cpp, name=Lightning function EditGameSpaces() ``` # EditResource : Void Name Type Description p0 Resource ``` lang=cpp, name=Lightning function EditResource(p0 : Resource) ``` # ExecuteCommand : Void Name Type Description p0 string ``` lang=cpp, name=Lightning function ExecuteCommand(p0 : String) ``` # PauseGame : Void Name Type Description ``` lang=cpp, name=Lightning function PauseGame() ``` # PlayGame : gamesession Name Type Description p0 PlayGameOptions p1 boolean p2 boolean ``` lang=cpp, name=Lightning function PlayGame(p0 : PlayGameOptions, p1 : Boolean, p2 : Boolean) : GameSession ``` # PlayNewGame : gamesession Name Type Description ``` lang=cpp, name=Lightning function PlayNewGame() : GameSession ``` # PlaySingleGame : gamesession Name Type Description ``` lang=cpp, name=Lightning function PlaySingleGame() : GameSession ``` # SelectPrimary : Void Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function SelectPrimary(p0 : AnyHandle) ``` # SelectTool : Void Name Type Description p0 string ``` lang=cpp, name=Lightning function SelectTool(p0 : String) ``` # SetFocus : Void Name Type Description p0 space ``` lang=cpp, name=Lightning function SetFocus(p0 : Space) ``` # SetGamePaused : Void Name Type Description p0 boolean ``` lang=cpp, name=Lightning function SetGamePaused(p0 : Boolean) ``` # SetMainPropertyViewObject : Void Name Type Description p0 Object ``` lang=cpp, name=Lightning function SetMainPropertyViewObject(p0 : Object) ``` # StepGame : Void Name Type Description ``` lang=cpp, name=Lightning function StepGame() ``` # StopGame : Void Name Type Description ``` lang=cpp, name=Lightning function StopGame() ``` # ToggleGamePaused : Void Name Type Description ``` lang=cpp, name=Lightning function ToggleGamePaused() ``` # ZoomOnGame : Void Name Type Description p0 gamesession ``` lang=cpp, name=Lightning function ZoomOnGame(p0 : GameSession) ```","title":"Editor"},{"location":"reference/class_reference/editorcameracontroller/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor ControlMode component Reset HorizontalAngle LookDistance LookTarget MoveSensitivity VerticalAngle # Properties # ControlMode : ControlMode ``` lang=cpp, name=Lightning var ControlMode : ControlMode # HorizontalAngle : real ``` lang=cpp, name=Lightning var HorizontalAngle : Real # LookDistance : real ``` lang=cpp, name=Lightning var LookDistance : Real # LookTarget : real3 ``` lang=cpp, name=Lightning var LookTarget : Real3 # MoveSensitivity : real ``` lang=cpp, name=Lightning var MoveSensitivity : Real # VerticalAngle : real ``` lang=cpp, name=Lightning var VerticalAngle : Real # Methods # EditorCameraController : Void constructor Name Type Description ``` lang=cpp, name=Lightning function EditorCameraController() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ```","title":"Editorcameracontroller"},{"location":"reference/class_reference/editorconfig/","text":"Component Engine (NOTE) Configuration for the editor. Methods Properties Base Classes Derived Classes Constructor PlasmaHubUsername component # Properties # PlasmaHubUsername : string ``` lang=cpp, name=Lightning var PlasmaHubUsername : String # Methods # EditorConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function EditorConfig() ```","title":"Editorconfig"},{"location":"reference/class_reference/editorevent/","text":"Event Editor Methods Properties Base Classes Derived Classes Editor event # Properties # Editor : editor ``` lang=cpp, name=Lightning var Editor : Editor # Methods","title":"Editorevent"},{"location":"reference/class_reference/editorflags/","text":"Component Engine Methods Properties Base Classes Derived Classes component # Properties # Methods","title":"Editorflags"},{"location":"reference/class_reference/editorindexedstringarray/","text":"Meta Methods Properties Base Classes Derived Classes editorpropertyextension dynamicbroadphasepropertyextension StaticBroadphasePropertyExtension # Properties # Methods","title":"Editorindexedstringarray"},{"location":"reference/class_reference/editormain/","text":"Editor Methods Properties Base Classes Derived Classes editor # Properties # Methods","title":"Editormain"},{"location":"reference/class_reference/editorpackageloader/","text":"Editor Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Editorpackageloader"},{"location":"reference/class_reference/editorpropertyextension/","text":"Meta Methods Properties Base Classes Derived Classes metaattribute cogarchetypeextension CompositionLabelExtension editorindexedstringarray editorrange editorrotationbasis metaeditorresource # Properties # Methods","title":"Editorpropertyextension"},{"location":"reference/class_reference/editorrange/","text":"Meta Methods Properties Base Classes Derived Classes Increment editorpropertyextension editorslider Max Min # Properties # Increment : real ``` lang=cpp, name=Lightning var Increment : Real # Max : real ``` lang=cpp, name=Lightning var Max : Real # Min : real ``` lang=cpp, name=Lightning var Min : Real # Methods","title":"Editorrange"},{"location":"reference/class_reference/editorrotationbasis/","text":"Meta Methods Properties Base Classes Derived Classes editorpropertyextension # Properties # Methods","title":"Editorrotationbasis"},{"location":"reference/class_reference/editorsettings/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor AutoUpdateContentChanges component ViewCube ViewCubeSize # Properties # AutoUpdateContentChanges : boolean ``` lang=cpp, name=Lightning var AutoUpdateContentChanges : Boolean # ViewCube : boolean Show/hide the orientation view cube. ``` lang=cpp, name=Lightning var ViewCube : Boolean # ViewCubeSize : real Size in pixels of the viewport the view cube is shown in. ``` lang=cpp, name=Lightning var ViewCubeSize : Real # Methods # EditorSettings : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function EditorSettings()","title":"Editorsettings"},{"location":"reference/class_reference/editorslider/","text":"Meta Methods Properties Base Classes Derived Classes editorrange # Properties # Methods","title":"Editorslider"},{"location":"reference/class_reference/editorviewport/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Editorviewport"},{"location":"reference/class_reference/edittext/","text":"Widget Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Edittext"},{"location":"reference/class_reference/ellipsoidcollider/","text":"Component Physics (NOTE) Defines the collision volume for an ellipsoid (3 dimensional ellipse) defined by three radius values. Methods Properties Base Classes Derived Classes Constructor Radii collider WorldRadii # Properties # Radii : real3 The x, y, and z radius of the ellipsoid. ``` lang=cpp, name=Lightning var Radii : Real3 # WorldRadii : real3 read-only The radii of the ellipsoid after transform is applied (scale and rotation). ``` lang=cpp, name=Lightning var WorldRadii : Real3 # Methods # EllipsoidCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function EllipsoidCollider() ```","title":"Ellipsoidcollider"},{"location":"reference/class_reference/engine/","text":"Engine Methods Properties Base Classes Derived Classes CrashEngine GameSessions eventobject CreateGameSession CreateGameSessionFromArchetype DebugBreak GetCurrentInputDevice RebuildArchetypes Terminate # Properties # GameSessions : gamesessionrange read-only ``` lang=cpp, name=Lightning var GameSessions : GameSessionRange # Methods # CrashEngine : Void Name Type Description ``` lang=cpp, name=Lightning function CrashEngine() ``` # CreateGameSession : gamesession Name Type Description ``` lang=cpp, name=Lightning function CreateGameSession() : GameSession ``` # CreateGameSessionFromArchetype : gamesession Name Type Description p0 archetype ``` lang=cpp, name=Lightning function CreateGameSessionFromArchetype(p0 : Archetype) : GameSession ``` # DebugBreak : Void Name Type Description ``` lang=cpp, name=Lightning function DebugBreak() ``` # GetCurrentInputDevice : InputDevice Name Type Description ``` lang=cpp, name=Lightning function GetCurrentInputDevice() : InputDevice ``` # RebuildArchetypes : Void Name Type Description p0 archetype ``` lang=cpp, name=Lightning function RebuildArchetypes(p0 : Archetype) ``` # Terminate : Void Name Type Description ``` lang=cpp, name=Lightning function Terminate() ```","title":"Engine"},{"location":"reference/class_reference/environment/","text":"Engine Methods Properties Base Classes Derived Classes GetEnvironmentalVariable CommandLine Object GetParsedArgument # Properties # CommandLine : string ``` lang=cpp, name=Lightning var CommandLine : String # Methods # GetEnvironmentalVariable : string Name Type Description p0 string ``` lang=cpp, name=Lightning function GetEnvironmentalVariable(p0 : String) : String ``` # GetParsedArgument : string Name Type Description p0 string ``` lang=cpp, name=Lightning function GetParsedArgument(p0 : String) : String ```","title":"Environment"},{"location":"reference/class_reference/equalizernode/","text":"Sound (NOTE) Applied volume changes to specific frequency bands in the audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateAllBands Band1Gain soundnode Band2Gain Band3Gain HighPassGain LowPassGain # Properties # Band1Gain : real The volume adjustment applied to frequencies within the band centered at 150 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. ``` lang=cpp, name=Lightning var Band1Gain : Real # Band2Gain : real The volume adjustment applied to frequencies within the band centered at 600 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. ``` lang=cpp, name=Lightning var Band2Gain : Real # Band3Gain : real The volume adjustment applied to frequencies within the band centered at 2500 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. ``` lang=cpp, name=Lightning var Band3Gain : Real # HighPassGain : real The volume adjustment applied to frequencies above 5000 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. ``` lang=cpp, name=Lightning var HighPassGain : Real # LowPassGain : real The volume adjustment applied to frequencies below 80 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. ``` lang=cpp, name=Lightning var LowPassGain : Real # Methods # InterpolateAllBands : Void Sets the volume adjustment of all bands (the parameters in order are low pass, band 1, band 2, band 3, high pass) over the number of seconds passed in as the final parameter. |Name|Type|Description| |---|---|---| |lowPass| real | | |band1| real | | |band2| real | | |band3| real | | |highPass| real | | |timeToInterpolate| real | | lang=cpp, name=Lightning function InterpolateAllBands(lowPass : Real, band1 : Real, band2 : Real, band3 : Real, highPass : Real, timeToInterpolate : Real)","title":"Equalizernode"},{"location":"reference/class_reference/event/","text":"Event Meta (NOTE) Base event class. All events types inherit from this class. Methods Properties Base Classes Derived Classes Terminate EventId ThreadSafeId32Object acquirenethostinfo alternatesearchcompletedevent animationgraphevent areaevent asyncprocessevent audiobytedataevent audiofloatdataevent backgroundtaskevent basecollisionevent blockingtaskevent bugreporterresponse castfilterevent chromepopupevent coginitializerevent cogpathevent colorevent CommandCaptureContextEvent connectionevent consoletextevent contentsystemevent contextmenuevent curveevent customaudionodeevent customjointevent customphysicseffectevent dataevent datareplaceevent debugengineevent editorevent fileeditevent focusevent gameevent gamepadevent gizmoevent gizmoraytestevent graphicalevent graphicalsortevent handleableevent heightmapevent hierarchyevent highlightborderevent inputdeviceevent jointevent joystickevent keyboardevent keyboardtextevent keyframeevent mainwindowtransformevent messageboxevent metadropevent metalibraryevent midievent modalbuttonevent modalconfirmevent mouseevent netchannelpropertychange neteventreceived neteventsent netgamestarted nethostlistupdate nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobjectoffline netobjectonline netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged notifyevent objectevent objectlinkevent objectlinkpointchangedevent objectpollevent operationqueueevent osfileselection osmouseevent oswindowevent particleevent postaddresourceevent progressevent propertyevent querymodifiedsaveevent RegisterCppNetProperties rendertasksevent resourceevent resourcelistevent savingevent searchviewevent selectionchangedevent selecttoolfrustumevent sendableevent shaderinputsevent soundevent soundinstanceevent splineevent tabmodifiedevent tabrenamedevent tagevent texteditorevent textevent textupdatedevent tileviewevent toolgizmoevent tooluievent trackevent treeevent treeviewheaderaddedevent typeevent uifocusevent uitransformupdateevent updateevent valueevent webbrowserevent webresponseevent lightningcompiledevent lightningcompileevent lightningcompilefragmentevent lightningevent lightningprecompilationevent # Properties # EventId : string read-only ``` lang=cpp, name=Lightning var EventId : String # Methods # Terminate : Void Stops the event from being sent to any other connections. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Terminate()","title":"Event"},{"location":"reference/class_reference/eventbundle/","text":"Networking (NOTE) Event Bundle. Serialized event storage container. Methods Properties Base Classes Derived Classes AddEvent GameSession Object Clear IsEmpty Constructor GetEvents RemoveEvent # Properties # GameSession : gamesession Returns the game session. ``` lang=cpp, name=Lightning var GameSession : GameSession # IsEmpty : boolean read-only Returns true if the event bundle is empty (doesn't contain any events), else false. ``` lang=cpp, name=Lightning var IsEmpty : Boolean # Methods # AddEvent : boolean Adds the event to back of the event bundle. Returns true if successful, else false (an event of that type has already been added). |Name|Type|Description| |---|---|---| |event| event | | lang=cpp, name=Lightning function AddEvent(event : Event) : Boolean # Clear : Void Clears the event bundle. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function EventBundle() # EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |event| event | | lang=cpp, name=Lightning function EventBundle(event : Event) # EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |rhs| eventbundle | | lang=cpp, name=Lightning function EventBundle(rhs : EventBundle) # EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |gameSession| gamesession | | lang=cpp, name=Lightning function EventBundle(gameSession : GameSession) # EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |gameSession| gamesession | | |event| event | | lang=cpp, name=Lightning function EventBundle(gameSession : GameSession, event : Event) # GetEvents : eventrange Returns all the events that have been added to the event bundle. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetEvents() : EventRange # RemoveEvent : boolean Removes the event specified from the event bundle. Returns true if successful, else false (an event of that type has already been added). |Name|Type|Description| |---|---|---| |event| event | | lang=cpp, name=Lightning function RemoveEvent(event : Event) : Boolean # RemoveEvent : boolean Removes the event specified from the event bundle. Returns true if successful, else false (an event of that type has already been added). |Name|Type|Description| |---|---|---| || string | | lang=cpp, name=Lightning function RemoveEvent( : String) : Boolean","title":"Eventbundle"},{"location":"reference/class_reference/eventdirectorywatcher/","text":"Engine Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Eventdirectorywatcher"},{"location":"reference/class_reference/eventobject/","text":"Meta Methods Properties Base Classes Derived Classes Object animationeditordata backgroundtasks blockingwebrequest colorscheme commandmanager contentcomponent contentitem contentpackage contentsystem document documentationlibrary documentmanager editorpackageloader engine eventdirectorywatcher gamepad gamepads importoptions job joystick joysticks keyboard LauncherDebuggerCommunication LauncherSingletonCommunication mouse multiconvexmeshpropertyviewinfo multimanager referencecountedeventobject referencecountedsafeid32eventobject referencecountedsafeid64eventobject referencecountedthreadsafeid32eventobject referencecountedthreadsafeid64eventobject resourcesystem richanimation safeid32eventobject safeid64eventobject shortcuts simpledebuggerlistener springpointproxy stresstest system tcpsocket threadsafeid32eventobject threadsafeid64eventobject tool tracknode tweakables webbrowsermanager widget widgetmanager lightningobject # Properties # Methods","title":"Eventobject"},{"location":"reference/class_reference/eventrange/","text":"Networking Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : eventrange read-only ``` lang=cpp, name=Lightning var All : EventRange # Current : event read-only ``` lang=cpp, name=Lightning var Current : Event # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # EventRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function EventRange() ``` # EventRange : Void constructor Name Type Description p0 eventrange ``` lang=cpp, name=Lightning function EventRange(p0 : EventRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Eventrange"},{"location":"reference/class_reference/expandernode/","text":"Sound Methods Properties Base Classes Derived Classes AttackMillisec soundnode InputGainDecibels KneeWidth OutputGainDecibels Ratio ReleaseMillisec ThresholdDecibels # Properties # AttackMillisec : real The time for the expander to ramp to full effect after the input reaches the threshold. ``` lang=cpp, name=Lightning var AttackMillisec : Real # InputGainDecibels : real The volume adjustment applied to the audio input, in decibels. ``` lang=cpp, name=Lightning var InputGainDecibels : Real # KneeWidth : real The knee width of the expander, in decibels. ``` lang=cpp, name=Lightning var KneeWidth : Real # OutputGainDecibels : real The volume adjustment applied to the expander output, in decibels. ``` lang=cpp, name=Lightning var OutputGainDecibels : Real # Ratio : real The ratio of the volume reduction applied by the expander. ``` lang=cpp, name=Lightning var Ratio : Real # ReleaseMillisec : real The time for the expander to ramp from full effect to off after the input goes above the threshold. ``` lang=cpp, name=Lightning var ReleaseMillisec : Real # ThresholdDecibels : real The threshold, in decibels, at which the volume of the input is affected by the expander. ``` lang=cpp, name=Lightning var ThresholdDecibels : Real # Methods","title":"Expandernode"},{"location":"reference/class_reference/factory/","text":"Engine Methods Properties Base Classes Derived Classes system # Properties # Methods","title":"Factory"},{"location":"reference/class_reference/fileeditevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Fileeditevent"},{"location":"reference/class_reference/filllayout/","text":"Widget Methods Properties Base Classes Derived Classes layout # Properties # Methods","title":"Filllayout"},{"location":"reference/class_reference/fixedanglejoint/","text":"Component Physics (NOTE) Locks the orientation of two objects together. Used when two objects should always rotate in unison. Typically not used by itself, but useful as a proof of concept for joints that use this functionality internally. Limits, motors, and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max angle on every axis that the objects must be between. Motor: A motor will attempt to drive the rotation on every axis forward. Spring: A spring will make the rotations on every axis at the bounds springy. Methods Properties Base Classes Derived Classes Constructor LocalBasisA joint LocalBasisB # Properties # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # Methods # FixedAngleJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FixedAngleJoint() ```","title":"Fixedanglejoint"},{"location":"reference/class_reference/fixedanglejointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # FixedAngleJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FixedAngleJointBlock() ```","title":"Fixedanglejointblock"},{"location":"reference/class_reference/flangernode/","text":"Sound (NOTE) Applies a flanger filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes FeedbackPercent soundnode FeedbackValue MaxDelayMillisec ModulationFrequency # Properties # FeedbackPercent : real DEPRECATED The FeedbackValue property should be used instead. ``` lang=cpp, name=Lightning var FeedbackPercent : Real # FeedbackValue : real The percentage of output (0 - 1.0) which is fed back into the filter as input. ``` lang=cpp, name=Lightning var FeedbackValue : Real # MaxDelayMillisec : real The maximum delay reached by the modulation. It will oscillate between 0 and this value at the frequency set by the ModulationFrequency property. ``` lang=cpp, name=Lightning var MaxDelayMillisec : Real # ModulationFrequency : real The frequency of the oscillator which varies the modulation. ``` lang=cpp, name=Lightning var ModulationFrequency : Real # Methods","title":"Flangernode"},{"location":"reference/class_reference/flattentool/","text":"Editor Methods Properties Base Classes Derived Classes Height heightmanipulationtool SampleNormal SampleOnMouseDown SlopeNormal # Properties # Height : real ``` lang=cpp, name=Lightning var Height : Real # SampleNormal : boolean ``` lang=cpp, name=Lightning var SampleNormal : Boolean # SampleOnMouseDown : boolean ``` lang=cpp, name=Lightning var SampleOnMouseDown : Boolean # SlopeNormal : real3 ``` lang=cpp, name=Lightning var SlopeNormal : Real3 # Methods","title":"Flattentool"},{"location":"reference/class_reference/floatingcomposite/","text":"Editor Methods Properties Base Classes Derived Classes composite popup # Properties # Methods","title":"Floatingcomposite"},{"location":"reference/class_reference/floweffect/","text":"Component Physics (NOTE) Applies a force to make an object move at a target speed in a given direction. This can also be used to pull the object towards the center of the flow (the axis in the flow direction centered at the effect). Used to model a river or a tractor beam. Methods Properties Base Classes Derived Classes Constructor AttractSpeed physicseffect AttractToFlowCenter FlowDirection FlowSpeed LocalForce MaxAttractForce MaxFlowForce WorldFlowDirection # Properties # AttractSpeed : real The target speed for an object to be pulled towards the center of the flow. ``` lang=cpp, name=Lightning var AttractSpeed : Real # AttractToFlowCenter : boolean Determines if the flow field will attract objects towards the center of the field. This can be used to create a tractor beam effect that will keep the object inside of the flow field. ``` lang=cpp, name=Lightning var AttractToFlowCenter : Boolean # FlowDirection : real3 The direction that the field is flowing. This can be defined in world or local space. ``` lang=cpp, name=Lightning var FlowDirection : Real3 # FlowSpeed : real The target speed of objects in the flow field. ``` lang=cpp, name=Lightning var FlowSpeed : Real # LocalForce : boolean Determines if the flow direction is in the local space of the object. ``` lang=cpp, name=Lightning var LocalForce : Boolean # MaxAttractForce : real The max force that can be used to reach the target attract speed. ``` lang=cpp, name=Lightning var MaxAttractForce : Real # MaxFlowForce : real The max force that can be used to reach the target flow speed. ``` lang=cpp, name=Lightning var MaxFlowForce : Real # WorldFlowDirection : real3 read-only The direction that the field is flowing in world space. ``` lang=cpp, name=Lightning var WorldFlowDirection : Real3 # Methods # FlowEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FlowEffect() ```","title":"Floweffect"},{"location":"reference/class_reference/focusevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Focusevent"},{"location":"reference/class_reference/font/","text":"Resource Graphics Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Font"},{"location":"reference/class_reference/fontbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes buildercomponent # Properties # Methods","title":"Fontbuilder"},{"location":"reference/class_reference/fontcontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Fontcontent"},{"location":"reference/class_reference/forceeffect/","text":"Component Physics (NOTE) A force effect that is applied in a given direction (local or world space). This is used to create force regions that will push objects in a given direction. This can also be used on a rigid body to push an object in it's forward direction (e.g a missile) if applied locally. Note: this is always applied at the center of mass of the object. If a more rocket like effect is desired see ThrustEffect. Methods Properties Base Classes Derived Classes Constructor basicdirectioneffect # Properties # Methods # ForceEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ForceEffect() ```","title":"Forceeffect"},{"location":"reference/class_reference/formattedinplacetext/","text":"Editor Methods Properties Base Classes Derived Classes Constructor # Properties # Methods # FormattedInPlaceText : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FormattedInPlaceText() ``` # FormattedInPlaceText : Void constructor Name Type Description p0 formattedinplacetext ``` lang=cpp, name=Lightning function FormattedInPlaceText(p0 : FormattedInPlaceText) ```","title":"Formattedinplacetext"},{"location":"reference/class_reference/frameratesettings/","text":"Component Engine (NOTE) Settings for how the frame rate of the engine should be controlled. Methods Properties Base Classes Derived Classes Constructor FrameRate component LimitFrameRate VerticalSync # Properties # FrameRate : integer How many frames per second the engine should be limited at. ``` lang=cpp, name=Lightning var FrameRate : Integer # LimitFrameRate : boolean If the engine should limit the frame rate. ``` lang=cpp, name=Lightning var LimitFrameRate : Boolean # VerticalSync : boolean If the frame rate should sync with the monitor's refresh rate, superseded by LimitFrameRate. ``` lang=cpp, name=Lightning var VerticalSync : Boolean # Methods # FrameRateSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FrameRateSettings() ```","title":"Frameratesettings"},{"location":"reference/class_reference/frustum/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Get GetAabb Set # Properties # Methods # Frustum : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Frustum() ``` # Frustum : Void constructor Name Type Description p0 frustum ``` lang=cpp, name=Lightning function Frustum(p0 : Frustum) ``` # Get : plane Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Plane ``` # GetAabb : aabb Name Type Description ``` lang=cpp, name=Lightning function GetAabb() : Aabb ``` # Set : Void Name Type Description p0 integer p1 plane ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Plane) ```","title":"Frustum"},{"location":"reference/class_reference/gameevent/","text":"Event Engine (NOTE) Event type used by the GameSession. Methods Properties Base Classes Derived Classes Game event Handled LevelName Space # Properties # Game : gamesession GameSession Object. ``` lang=cpp, name=Lightning var Game : GameSession # Handled : boolean Has this event been handled? Used to for the engine to poll for Request Quit and other operations. ``` lang=cpp, name=Lightning var Handled : Boolean # LevelName : string ``` lang=cpp, name=Lightning var LevelName : String # Space : space Space related to his event. ``` lang=cpp, name=Lightning var Space : Space # Methods","title":"Gameevent"},{"location":"reference/class_reference/gamepad/","text":"Engine (NOTE) Game pad is a object for getting game pad input. Methods Properties Base Classes Derived Classes IsButtonHeld GamepadIndex eventobject IsButtonPressed IsActive IsButtonReleased LeftStick TimeButtonHeld LeftStickDelta Vibrate LeftTrigger RightStick RightStickDelta RightTrigger # Properties # GamepadIndex : integer Index of this gamepad. ``` lang=cpp, name=Lightning var GamepadIndex : Integer # IsActive : boolean Is this controller turned on and plugged in. ``` lang=cpp, name=Lightning var IsActive : Boolean # LeftStick : real2 Current offset [-1,1] from the center of the left stick. ``` lang=cpp, name=Lightning var LeftStick : Real2 # LeftStickDelta : real2 Change in the left stick this frame. ``` lang=cpp, name=Lightning var LeftStickDelta : Real2 # LeftTrigger : real Value of how much the Left Trigger is down. Range [0,1]. ``` lang=cpp, name=Lightning var LeftTrigger : Real # RightStick : real2 Current offset [-1,1] from the center of the right stick. ``` lang=cpp, name=Lightning var RightStick : Real2 # RightStickDelta : real2 Change in the right stick this frame. ``` lang=cpp, name=Lightning var RightStickDelta : Real2 # RightTrigger : real Value of how much the Right Trigger is down. Range [0,1]. ``` lang=cpp, name=Lightning var RightTrigger : Real # Methods # IsButtonHeld : boolean Is the button currently being held down. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function IsButtonHeld(index : Integer) : Boolean # IsButtonPressed : boolean Has the button just been pressed this frame. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function IsButtonPressed(index : Integer) : Boolean # IsButtonReleased : boolean Is the button just been released. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function IsButtonReleased(index : Integer) : Boolean # TimeButtonHeld : real How long has this button been held down. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function TimeButtonHeld(index : Integer) : Real # Vibrate : Void Vibrate this controller for a given time. Speed is a value between plasma and one. |Name|Type|Description| |---|---|---| |time| real | | |LeftSpeed| real | | |RightSpeed| real | | lang=cpp, name=Lightning function Vibrate(time : Real, LeftSpeed : Real, RightSpeed : Real)","title":"Gamepad"},{"location":"reference/class_reference/gamepadevent/","text":"Event Engine (NOTE) Gamepad events are send when a game pad button state is changed. Methods Properties Base Classes Derived Classes Button event FlickDirection FlickedStick Gamepad # Properties # Button : integer Button that was just pressed down or released up. ``` lang=cpp, name=Lightning var Button : Integer # FlickDirection : real2 The direction of the stick that was flicked (normalized) ``` lang=cpp, name=Lightning var FlickDirection : Real2 # FlickedStick : FlickedStick When responding to the 'GamepadStickFlicked' event, this will be set to the stick that was flicked. ``` lang=cpp, name=Lightning var FlickedStick : FlickedStick # Gamepad : gamepad Gamepad that generated this event. ``` lang=cpp, name=Lightning var Gamepad : Gamepad # Methods","title":"Gamepadevent"},{"location":"reference/class_reference/gamepads/","text":"Engine (NOTE) Gamepads is a collection of gamepads. Methods Properties Base Classes Derived Classes GetGamePad MaxGamepadCount eventobject PauseVibration ResumeVibration # Properties # MaxGamepadCount : integer read-only Gets the maximum number of supported gamepads. ``` lang=cpp, name=Lightning var MaxGamepadCount : Integer # Methods # GetGamePad : gamepad Get the gamepad for a given index from [0, GamepadCount]. |Name|Type|Description| |---|---|---| |gamepadIndex| integer | | lang=cpp, name=Lightning function GetGamePad(gamepadIndex : Integer) : Gamepad # PauseVibration : Void Pause Vibration on all gamepads. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function PauseVibration() # ResumeVibration : Void Resume vibration on all gamepads. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ResumeVibration()","title":"Gamepads"},{"location":"reference/class_reference/gamesession/","text":"Engine (NOTE) The GameSession manages all spaces and data for a a game. Methods Properties Base Classes Derived Classes CreateNamedSpace AllSpaces cog CreateSpace Focused FindAllSpacesByName FullScreen FindSpaceByName Paused Constructor Resolution IsEditorMode Pause Quit RequestQuit Start # Properties # AllSpaces : spacemapvaluerange read-only ``` lang=cpp, name=Lightning var AllSpaces : SpaceMapValueRange # Focused : boolean read-only ``` lang=cpp, name=Lightning var Focused : Boolean # FullScreen : boolean read-only ``` lang=cpp, name=Lightning var FullScreen : Boolean # Paused : boolean Controls if the game session is paused which prevents updates to all spaces owned by this game. ``` lang=cpp, name=Lightning var Paused : Boolean # Resolution : real2 read-only ``` lang=cpp, name=Lightning var Resolution : Real2 # Methods # CreateNamedSpace : space Create a space from an archetype with the given name. |Name|Type|Description| |---|---|---| |name| string | | |archetype| archetype | | lang=cpp, name=Lightning function CreateNamedSpace(name : String, archetype : Archetype) : Space # CreateSpace : space Create a space in the game. Use the archetype's name. |Name|Type|Description| |---|---|---| |archetype| archetype | | lang=cpp, name=Lightning function CreateSpace(archetype : Archetype) : Space # FindAllSpacesByName : spacemapvaluerange Name Type Description name string ``` lang=cpp, name=Lightning function FindAllSpacesByName(name : String) : SpaceMapValueRange ``` # FindSpaceByName : space Find a named space. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindSpaceByName(name : String) : Space # GameSession : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GameSession() ``` # IsEditorMode : boolean Name Type Description ``` lang=cpp, name=Lightning function IsEditorMode() : Boolean ``` # Pause : Void Pauses the game session which prevents updates to all spaces owned by this game. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Pause() # Quit : Void Quit the game and exit the engine if not in editor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Quit() # RequestQuit : Void Request to quit sending out the GameRequestQuit event. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RequestQuit() # Start : Void Start the game. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Start()","title":"Gamesession"},{"location":"reference/class_reference/gamesessionrange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : gamesessionrange read-only ``` lang=cpp, name=Lightning var All : GameSessionRange # Current : gamesession read-only ``` lang=cpp, name=Lightning var Current : GameSession # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # GameSessionRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GameSessionRange() ``` # GameSessionRange : Void constructor Name Type Description p0 gamesessionrange ``` lang=cpp, name=Lightning function GameSessionRange(p0 : GameSessionRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Gamesessionrange"},{"location":"reference/class_reference/gamewidget/","text":"Gameplay Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Gamewidget"},{"location":"reference/class_reference/gearjoint/","text":"Component Physics (NOTE) A gear connects two joints on two objects together. Either joint can be a prismatic or a revolute. A gear ratio is used to bind the two joints together. Limits, motors, and springs should not be used on this. Methods Properties Base Classes Derived Classes Constructor Constant joint JointA JointAPath JointB JointBPath Ratio # Properties # Constant : real The initial offset of the gear ratio. ``` lang=cpp, name=Lightning var Constant : Real # JointA : cog The joint connected to ObjectA that the gear operates on. ``` lang=cpp, name=Lightning var JointA : Cog # JointAPath : cogpath The joint connected to ObjectA that the gear operates on. ``` lang=cpp, name=Lightning var JointAPath : CogPath # JointB : cog The joint connected to ObjectB that the gear operates on. ``` lang=cpp, name=Lightning var JointB : Cog # JointBPath : cogpath The joint connected to ObjectB that the gear operates on. ``` lang=cpp, name=Lightning var JointBPath : CogPath # Ratio : real The gear ratio that the two constraints are bound with. ``` lang=cpp, name=Lightning var Ratio : Real # Methods # GearJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GearJoint() ```","title":"Gearjoint"},{"location":"reference/class_reference/gearjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # GearJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GearJointBlock() ```","title":"Gearjointblock"},{"location":"reference/class_reference/generalsearchview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Generalsearchview"},{"location":"reference/class_reference/generatedarchetype/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor contentcomponent # Properties # Methods # GeneratedArchetype : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GeneratedArchetype() ```","title":"Generatedarchetype"},{"location":"reference/class_reference/generatedwavenode/","text":"Sound (NOTE) Plays audio using the specified type of generated wave. Methods Properties Base Classes Derived Classes InterpolateDecibels Decibels soundnode InterpolateVolume SquareWavePulseValue InterpolateWaveFrequency Volume Play WaveFrequency Stop WaveType # Properties # Decibels : real The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0. ``` lang=cpp, name=Lightning var Decibels : Real # SquareWavePulseValue : real The percentage of the square wave (from 0 to 1.0) which should be up. This will have no effect if a different wave type is chosen. ``` lang=cpp, name=Lightning var SquareWavePulseValue : Real # Volume : real The volume adjustment that will be applied to the sound when it plays. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible. ``` lang=cpp, name=Lightning var Volume : Real # WaveFrequency : real The frequency of the generated sound wave. This value will have no effect if the Noise type is chosen. ``` lang=cpp, name=Lightning var WaveFrequency : Real # WaveType : SynthWaveType The type of sound wave used to generate the audio. Possible types are Sine, Square, Saw, Triangle, and Noise (randomly generated white noise). ``` lang=cpp, name=Lightning var WaveType : SynthWaveType # Methods # InterpolateDecibels : Void Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateDecibels(decibels : Real, interpolationTime : Real) # InterpolateVolume : Void Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateVolume(volume : Real, interpolationTime : Real) # InterpolateWaveFrequency : Void Interpolates the WaveFrequency property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. This method will have no effect if the Noise type is chosen. |Name|Type|Description| |---|---|---| |frequency| real | | |time| real | | lang=cpp, name=Lightning function InterpolateWaveFrequency(frequency : Real, time : Real) # Play : Void Starts playing the generated audio. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Play() # Stop : Void Stops playing the generated audio. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Stop()","title":"Generatedwavenode"},{"location":"reference/class_reference/genericphysicsmesh/","text":"Resource Physics (NOTE) Base class of mesh type physics resources. Stores the actual mesh (no optimization structures) and information about the mesh such as mass and inertia. Methods Properties Base Classes Derived Classes UpdateAndNotifyIfModified Indices Resource convexmesh Validate Vertices physicsmesh # Properties # Indices : physicsmeshindexdata read-only The index buffer data of this mesh. ``` lang=cpp, name=Lightning var Indices : PhysicsMeshIndexData # Vertices : physicsmeshvertexdata read-only The vertex buffer data of this mesh. ``` lang=cpp, name=Lightning var Vertices : PhysicsMeshVertexData # Methods # UpdateAndNotifyIfModified : Void Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more (some derived types may have a mid-phase, etc...) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UpdateAndNotifyIfModified() # Validate : boolean Check if the mesh is valid. Optionally throw a script exception if it is invalid. |Name|Type|Description| |---|---|---| |throwExceptionIfInvalid| boolean | | lang=cpp, name=Lightning function Validate(throwExceptionIfInvalid : Boolean) : Boolean","title":"Genericphysicsmesh"},{"location":"reference/class_reference/geometrycontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Geometrycontent"},{"location":"reference/class_reference/geometryimport/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor ChangeBasis contentcomponent CollapsePivots OriginOffset ScaleFactor XBasisTo YBasisTo ZBasisTo # Properties # ChangeBasis : boolean ``` lang=cpp, name=Lightning var ChangeBasis : Boolean # CollapsePivots : boolean ``` lang=cpp, name=Lightning var CollapsePivots : Boolean # OriginOffset : real3 ``` lang=cpp, name=Lightning var OriginOffset : Real3 # ScaleFactor : real ``` lang=cpp, name=Lightning var ScaleFactor : Real # XBasisTo : BasisType ``` lang=cpp, name=Lightning var XBasisTo : BasisType # YBasisTo : BasisType ``` lang=cpp, name=Lightning var YBasisTo : BasisType # ZBasisTo : BasisType ``` lang=cpp, name=Lightning var ZBasisTo : BasisType # Methods # GeometryImport : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GeometryImport() ```","title":"Geometryimport"},{"location":"reference/class_reference/geometryoptions/","text":"ContentMeta Methods Properties Base Classes Derived Classes ChangeBasis Object CollapsePivots CreateArchetype FlipWindingOrder GenerateSmoothNormals GenerateTangentSpace ImportAnimations ImportMeshes ImportTextures InvertUvYAxis OriginOffset PhysicsImport ScaleConversion ScaleFactor SmoothingAngleDegreesThreshold XBasisTo YBasisTo ZBasisTo # Properties # ChangeBasis : boolean ``` lang=cpp, name=Lightning var ChangeBasis : Boolean # CollapsePivots : boolean ``` lang=cpp, name=Lightning var CollapsePivots : Boolean # CreateArchetype : boolean ``` lang=cpp, name=Lightning var CreateArchetype : Boolean # FlipWindingOrder : boolean ``` lang=cpp, name=Lightning var FlipWindingOrder : Boolean # GenerateSmoothNormals : boolean ``` lang=cpp, name=Lightning var GenerateSmoothNormals : Boolean # GenerateTangentSpace : boolean ``` lang=cpp, name=Lightning var GenerateTangentSpace : Boolean # ImportAnimations : boolean ``` lang=cpp, name=Lightning var ImportAnimations : Boolean # ImportMeshes : boolean ``` lang=cpp, name=Lightning var ImportMeshes : Boolean # ImportTextures : boolean ``` lang=cpp, name=Lightning var ImportTextures : Boolean # InvertUvYAxis : boolean ``` lang=cpp, name=Lightning var InvertUvYAxis : Boolean # OriginOffset : real3 ``` lang=cpp, name=Lightning var OriginOffset : Real3 # PhysicsImport : PhysicsImport ``` lang=cpp, name=Lightning var PhysicsImport : PhysicsImport # ScaleConversion : ScaleConversion ``` lang=cpp, name=Lightning var ScaleConversion : ScaleConversion # ScaleFactor : real ``` lang=cpp, name=Lightning var ScaleFactor : Real # SmoothingAngleDegreesThreshold : real ``` lang=cpp, name=Lightning var SmoothingAngleDegreesThreshold : Real # XBasisTo : BasisType ``` lang=cpp, name=Lightning var XBasisTo : BasisType # YBasisTo : BasisType ``` lang=cpp, name=Lightning var YBasisTo : BasisType # ZBasisTo : BasisType ``` lang=cpp, name=Lightning var ZBasisTo : BasisType # Methods","title":"Geometryoptions"},{"location":"reference/class_reference/geometryresourceentry/","text":"ContentMeta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Geometryresourceentry"},{"location":"reference/class_reference/gizmo/","text":"Component Editor (NOTE) Registers itself with the GizmoSpace. This allows GizmoSpace to keep track of which Gizmo the mouse is over, as well as send other input events directly to Gizmos. Methods Properties Base Classes Derived Classes Constructor Active component EditingObject ForwardEventsToChildren MouseOver # Properties # Active : boolean If set to false, it will not receive input events. ``` lang=cpp, name=Lightning var Active : Boolean # EditingObject : cog read-only Needed? ``` lang=cpp, name=Lightning var EditingObject : Cog # ForwardEventsToChildren : boolean You may want to manually forward the input events to specific children. ``` lang=cpp, name=Lightning var ForwardEventsToChildren : Boolean # MouseOver : boolean read-only Whether or not the mouse is currently over the gizmo. ``` lang=cpp, name=Lightning var MouseOver : Boolean # Methods # Gizmo : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Gizmo()","title":"Gizmo"},{"location":"reference/class_reference/gizmocreator/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor GizmoArchetype component # Properties # GizmoArchetype : archetype ``` lang=cpp, name=Lightning var GizmoArchetype : Archetype # Methods # GizmoCreator : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GizmoCreator() ```","title":"Gizmocreator"},{"location":"reference/class_reference/gizmodrag/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor AutoDrag component DragActive DragDistance DragMode GrabMode GrabPoint LineDirection NormalInWorld PlaneNormal # Properties # AutoDrag : boolean ``` lang=cpp, name=Lightning var AutoDrag : Boolean # DragActive : boolean read-only ``` lang=cpp, name=Lightning var DragActive : Boolean # DragDistance : real ``` lang=cpp, name=Lightning var DragDistance : Real # DragMode : GizmoDragMode ``` lang=cpp, name=Lightning var DragMode : GizmoDragMode # GrabMode : GizmoGrabMode ``` lang=cpp, name=Lightning var GrabMode : GizmoGrabMode # GrabPoint : real3 read-only ``` lang=cpp, name=Lightning var GrabPoint : Real3 # LineDirection : real3 ``` lang=cpp, name=Lightning var LineDirection : Real3 # NormalInWorld : boolean ``` lang=cpp, name=Lightning var NormalInWorld : Boolean # PlaneNormal : real3 ``` lang=cpp, name=Lightning var PlaneNormal : Real3 # Methods # GizmoDrag : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GizmoDrag() ```","title":"Gizmodrag"},{"location":"reference/class_reference/gizmoevent/","text":"Event Editor Methods Properties Base Classes Derived Classes Finished event gizmoupdateevent Gizmo objecttransformgizmoevent OperationQueue Source ViewportMouseEvent # Properties # Finished : boolean read-only ``` lang=cpp, name=Lightning var Finished : Boolean # Gizmo : cog read-only ``` lang=cpp, name=Lightning var Gizmo : Cog # OperationQueue : operationqueue read-only ``` lang=cpp, name=Lightning var OperationQueue : OperationQueue # Source : component read-only ``` lang=cpp, name=Lightning var Source : Component # ViewportMouseEvent : viewportmouseevent read-only ``` lang=cpp, name=Lightning var ViewportMouseEvent : ViewportMouseEvent # Methods","title":"Gizmoevent"},{"location":"reference/class_reference/gizmoraytestevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Gizmoraytestevent"},{"location":"reference/class_reference/gizmospace/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # GizmoSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GizmoSpace() ```","title":"Gizmospace"},{"location":"reference/class_reference/gizmoupdateevent/","text":"Event Editor Methods Properties Base Classes Derived Classes ConstrainedWorldDelta gizmoevent ringgizmoevent ConstrainedWorldMovement rotategizmoupdateevent InitialGrabPoint scalegizmoupdateevent MouseWorldDelta translategizmoupdateevent MouseWorldMovement # Properties # ConstrainedWorldDelta : real3 ``` lang=cpp, name=Lightning var ConstrainedWorldDelta : Real3 # ConstrainedWorldMovement : real3 ``` lang=cpp, name=Lightning var ConstrainedWorldMovement : Real3 # InitialGrabPoint : real3 ``` lang=cpp, name=Lightning var InitialGrabPoint : Real3 # MouseWorldDelta : real3 ``` lang=cpp, name=Lightning var MouseWorldDelta : Real3 # MouseWorldMovement : real3 ``` lang=cpp, name=Lightning var MouseWorldMovement : Real3 # Methods","title":"Gizmoupdateevent"},{"location":"reference/class_reference/granularsynthnode/","text":"Sound Methods Properties Base Classes Derived Classes Play BufferScanRate soundnode SetSound GrainDelay Stop GrainDelayVariance GrainLength GrainLengthVariance GrainPanningValue GrainPanningVariance GrainResampleRate GrainResampleRateVariance GrainVolume GrainVolumeVariance RandomLocationValue WindowAttack WindowRelease WindowType # Properties # BufferScanRate : real The rate at which the synthesizer scans the buffer as it creates grains. A value of 1.0 will move through the audio data at the same rate as it would normally be played, 0.5 will move at half speed, and -1.0 will move at normal speed backward. A value of 0.0 will make the synthesizer repeat the same audio continuously. ``` lang=cpp, name=Lightning var BufferScanRate : Real # GrainDelay : integer The number of milliseconds to wait before playing another grain. ``` lang=cpp, name=Lightning var GrainDelay : Integer # GrainDelayVariance : integer The variance for randomizing the grain delay, in milliseconds. ``` lang=cpp, name=Lightning var GrainDelayVariance : Integer # GrainLength : integer The length of a grain, in milliseconds. ``` lang=cpp, name=Lightning var GrainLength : Integer # GrainLengthVariance : integer The variance for randomizing the grain length, in milliseconds. ``` lang=cpp, name=Lightning var GrainLengthVariance : Integer # GrainPanningValue : real The value used to pan the grains left or right. A value of 0 will be heard equally from the left and right, 1.0 will be heard only on the right, and -1.0 will be only left. ``` lang=cpp, name=Lightning var GrainPanningValue : Real # GrainPanningVariance : real The variance for randomizing the grain panning value. ``` lang=cpp, name=Lightning var GrainPanningVariance : Real # GrainResampleRate : real The rate at which grains resample their audio data. A value of 1.0 will play normally, 0.5 will play at half speed, and -1.0 will play at normal speed backward. Cannot be 0. ``` lang=cpp, name=Lightning var GrainResampleRate : Real # GrainResampleRateVariance : real The variance for randomizing the grain resample rate. ``` lang=cpp, name=Lightning var GrainResampleRateVariance : Real # GrainVolume : real The volume modifier applied to the grains. ``` lang=cpp, name=Lightning var GrainVolume : Real # GrainVolumeVariance : real The variance for randomizing the grain volume. ``` lang=cpp, name=Lightning var GrainVolumeVariance : Real # RandomLocationValue : real The value for controlling how many grains have randomized starting positions in the audio. A value of 0 will be completely sequential, while 1.0 will be completely random. ``` lang=cpp, name=Lightning var RandomLocationValue : Real # WindowAttack : integer The window attack time, in milliseconds. Does not have an effect on some windows. ``` lang=cpp, name=Lightning var WindowAttack : Integer # WindowRelease : integer The window release time, in milliseconds. Does not have an effect on some windows. ``` lang=cpp, name=Lightning var WindowRelease : Integer # WindowType : GranularSynthWindows The type of window, or volume envelope, used for each grain. ``` lang=cpp, name=Lightning var WindowType : GranularSynthWindows # Methods # Play : Void Starts playing new grains. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Play() # SetSound : Void Sets the Sound resource that will be used for the grains, along with an optional start and stop time. If the stopTime is 0.0, all audio from the Sound will be used. |Name|Type|Description| |---|---|---| |sound| sound | | |startTime| real | | |stopTime| real | | lang=cpp, name=Lightning function SetSound(sound : Sound, startTime : Real, stopTime : Real) # Stop : Void Stops playing new grains but continues to play current ones. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Stop()","title":"Granularsynthnode"},{"location":"reference/class_reference/graphical/","text":"Component Graphics (NOTE) Base interface for components that require rendering. Methods Properties Base Classes Derived Classes GroupSortValue component basesprite LocalAabbCenter debuggraphical LocalAabbHalfExtents heightmapmodel Material model OverrideBoundingBox particlesystem ShaderInputs skinnedmodel ViewCulling VisibilityEvents Visible WorldAabb # Properties # GroupSortValue : integer Can be used by a RenderGroup to define draw order, from lowest to highest. ``` lang=cpp, name=Lightning var GroupSortValue : Integer # LocalAabbCenter : real3 Center of the bounding box defined in local space, world transform will be applied. ``` lang=cpp, name=Lightning var LocalAabbCenter : Real3 # LocalAabbHalfExtents : real3 Half extents of the bounding box defined in local space, world transform will be applied. ``` lang=cpp, name=Lightning var LocalAabbHalfExtents : Real3 # Material : material The composition of shader fragments that determines how the graphical is rendered. ``` lang=cpp, name=Lightning var Material : Material # OverrideBoundingBox : boolean Manually set the bounding box that is used for frustum culling. ``` lang=cpp, name=Lightning var OverrideBoundingBox : Boolean # ShaderInputs : shaderinputs List of shader inputs to be manually overridden only on this object. ``` lang=cpp, name=Lightning var ShaderInputs : ShaderInputs # ViewCulling : boolean If the graphical should not be drawn when its bounding volume is outside of the view frustum. ``` lang=cpp, name=Lightning var ViewCulling : Boolean # VisibilityEvents : boolean If object receives events when entering/exiting the view of an active camera. ``` lang=cpp, name=Lightning var VisibilityEvents : Boolean # Visible : boolean If the graphical should be drawn. ``` lang=cpp, name=Lightning var Visible : Boolean # WorldAabb : aabb read-only The world space axis aligned bounding volume that is used for frustum culling. ``` lang=cpp, name=Lightning var WorldAabb : Aabb # Methods","title":"Graphical"},{"location":"reference/class_reference/graphicalentry/","text":"Graphics Methods Properties Base Classes Derived Classes SetGraphicalSortValue Cog # Properties # Cog : cog read-only ``` lang=cpp, name=Lightning var Cog : Cog # Methods # SetGraphicalSortValue : Void Name Type Description p0 integer ``` lang=cpp, name=Lightning function SetGraphicalSortValue(p0 : Integer) ```","title":"Graphicalentry"},{"location":"reference/class_reference/graphicalentryrange/","text":"Graphics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : graphicalentryrange read-only ``` lang=cpp, name=Lightning var All : GraphicalEntryRange # Current : graphicalentry read-only ``` lang=cpp, name=Lightning var Current : GraphicalEntry # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # GraphicalEntryRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GraphicalEntryRange() ``` # GraphicalEntryRange : Void constructor Name Type Description p0 graphicalentryrange ``` lang=cpp, name=Lightning function GraphicalEntryRange(p0 : GraphicalEntryRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Graphicalentryrange"},{"location":"reference/class_reference/graphicalevent/","text":"Event Graphics (NOTE) Event for changes of visibility state. Methods Properties Base Classes Derived Classes ViewingObject event # Properties # ViewingObject : cog The viewing CameraViewport for EnterView/ExitView. ``` lang=cpp, name=Lightning var ViewingObject : Cog # Methods","title":"Graphicalevent"},{"location":"reference/class_reference/graphicalrangeinterface/","text":"Graphics (NOTE) A list for custom specifying which Graphicals and in what draw order for a RenderPass. Methods Properties Base Classes Derived Classes Add Count Clear Constructor # Properties # Count : integer read-only Current number of Graphicals in the list. ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Add a Graphical to the list. |Name|Type|Description| |---|---|---| |graphical| graphical | | lang=cpp, name=Lightning function Add(graphical : Graphical) # Clear : Void Remove all Graphicals from the list. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # GraphicalRangeInterface : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GraphicalRangeInterface() ``` # GraphicalRangeInterface : Void constructor Name Type Description graphicalrangeinterface ``` lang=cpp, name=Lightning function GraphicalRangeInterface( : GraphicalRangeInterface) ```","title":"Graphicalrangeinterface"},{"location":"reference/class_reference/graphicalsortevent/","text":"Event Graphics Methods Properties Base Classes Derived Classes GraphicalEntries event RenderGroup # Properties # GraphicalEntries : graphicalentryrange read-only ``` lang=cpp, name=Lightning var GraphicalEntries : GraphicalEntryRange # RenderGroup : rendergroup read-only ``` lang=cpp, name=Lightning var RenderGroup : RenderGroup # Methods","title":"Graphicalsortevent"},{"location":"reference/class_reference/graphics/","text":"Graphics Methods Properties Base Classes Derived Classes DriverSupport # Properties # DriverSupport : graphicsdriversupport read-only static ``` lang=cpp, name=Lightning var DriverSupport : GraphicsDriverSupport # Methods","title":"Graphics"},{"location":"reference/class_reference/graphicsdriversupport/","text":"Graphics Methods Properties Base Classes Derived Classes MultiTargetBlend SamplerObjects TextureCompression # Properties # MultiTargetBlend : boolean read-only ``` lang=cpp, name=Lightning var MultiTargetBlend : Boolean # SamplerObjects : boolean read-only ``` lang=cpp, name=Lightning var SamplerObjects : Boolean # TextureCompression : boolean read-only ``` lang=cpp, name=Lightning var TextureCompression : Boolean # Methods","title":"Graphicsdriversupport"},{"location":"reference/class_reference/graphicsengine/","text":"Graphics Methods Properties Base Classes Derived Classes system # Properties # Methods","title":"Graphicsengine"},{"location":"reference/class_reference/graphicsraycastprovider/","text":"Graphics Methods Properties Base Classes Derived Classes Constructor MultiSelectGraphical raycastprovider VisibleOnly # Properties # MultiSelectGraphical : boolean ``` lang=cpp, name=Lightning var MultiSelectGraphical : Boolean # VisibleOnly : boolean ``` lang=cpp, name=Lightning var VisibleOnly : Boolean # Methods # GraphicsRaycastProvider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GraphicsRaycastProvider() ```","title":"Graphicsraycastprovider"},{"location":"reference/class_reference/graphicsspace/","text":"Component Graphics (NOTE) Core space component that manages all interactions between graphics related objects. Methods Properties Base Classes Derived Classes Constructor Active component RandomSeed Seed # Properties # Active : boolean If graphics for this Space should be running. ``` lang=cpp, name=Lightning var Active : Boolean # RandomSeed : boolean If the random number generator used by graphics objects should be seeded randomly. ``` lang=cpp, name=Lightning var RandomSeed : Boolean # Seed : integer Value to seed the random number generator with. ``` lang=cpp, name=Lightning var Seed : Integer # Methods # GraphicsSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GraphicsSpace() ```","title":"Graphicsspace"},{"location":"reference/class_reference/gravityeffect/","text":"Component Physics (NOTE) A constant acceleration that is applied in the given direction (mass is ignored). This is useful for creating gravity (either on the entire world or in a region) that will push/pull objects in a given direction at a constant acceleration. Methods Properties Base Classes Derived Classes Constructor basicdirectioneffect # Properties # Methods # GravityEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GravityEffect() ```","title":"Gravityeffect"},{"location":"reference/class_reference/griddraw/","text":"Component Editor (NOTE) A component used for drawing a grid. Methods Properties Base Classes Derived Classes Constructor Active component AlwaysDrawInEditor Axis CellSize DrawAxisOrigins DrawInGame FollowEditorCamera GridColor GridHighlight HalfCellOffset HighlightInterval Lines # Properties # Active : boolean ``` lang=cpp, name=Lightning var Active : Boolean # AlwaysDrawInEditor : boolean Always draw the grid in editor (not just when it's selected) ``` lang=cpp, name=Lightning var AlwaysDrawInEditor : Boolean # Axis : AxisDirection ``` lang=cpp, name=Lightning var Axis : AxisDirection # CellSize : real The deltas in the grid (how far apart we draw grid lines) ``` lang=cpp, name=Lightning var CellSize : Real # DrawAxisOrigins : boolean Changes the line color to. ``` lang=cpp, name=Lightning var DrawAxisOrigins : Boolean # DrawInGame : boolean Draw the grid in the game. ``` lang=cpp, name=Lightning var DrawInGame : Boolean # FollowEditorCamera : boolean Move with the editor camera? ``` lang=cpp, name=Lightning var FollowEditorCamera : Boolean # GridColor : real4 Color of grid lines. ``` lang=cpp, name=Lightning var GridColor : Real4 # GridHighlight : real4 ``` lang=cpp, name=Lightning var GridHighlight : Real4 # HalfCellOffset : boolean Is the grid offset by half a unit? ``` lang=cpp, name=Lightning var HalfCellOffset : Boolean # HighlightInterval : integer How often should cells be activated. ``` lang=cpp, name=Lightning var HighlightInterval : Integer # Lines : integer The number of lines to draw. ``` lang=cpp, name=Lightning var Lines : Integer # Methods # GridDraw : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GridDraw() ```","title":"Griddraw"},{"location":"reference/class_reference/gridlayout/","text":"Widget Methods Properties Base Classes Derived Classes layout # Properties # Methods","title":"Gridlayout"},{"location":"reference/class_reference/handleableevent/","text":"Event Widget (NOTE) Basic event that can be \"handled\" to override default engine behavior. Methods Properties Base Classes Derived Classes Handled event windowtabevent # Properties # Handled : boolean ``` lang=cpp, name=Lightning var Handled : Boolean # Methods","title":"Handleableevent"},{"location":"reference/class_reference/heightmanipulationtool/","text":"Editor Methods Properties Base Classes Derived Classes FeatherRadius heightmapsubtool flattentool Radius raiselowertool smoothsharpentool # Properties # FeatherRadius : real ``` lang=cpp, name=Lightning var FeatherRadius : Real # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # Methods","title":"Heightmanipulationtool"},{"location":"reference/class_reference/heightmap/","text":"Component Engine (NOTE) A common class that represents height map data. Methods Properties Base Classes Derived Classes Constructor Source component UnitsPerPatch # Properties # Source : heightmapsource read-only Get source for height map. ``` lang=cpp, name=Lightning var Source : HeightMapSource # UnitsPerPatch : real Gets/sets the number of units per patch. ``` lang=cpp, name=Lightning var UnitsPerPatch : Real # Methods # HeightMap : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function HeightMap()","title":"Heightmap"},{"location":"reference/class_reference/heightmapcollider/","text":"Component Physics (NOTE) Defines collision for a height map. Methods Properties Base Classes Derived Classes ClearCachedEdgeAdjacency Thickness collider Constructor # Properties # Thickness : real How thick the surface of the height map is. Used to avoid tunneling problems. ``` lang=cpp, name=Lightning var Thickness : Real # Methods # ClearCachedEdgeAdjacency : Void Clear the cached information used to avoid catching edges. Typically called internally by physics, but is exposed for manual triggering. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearCachedEdgeAdjacency() # HeightMapCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HeightMapCollider() ```","title":"Heightmapcollider"},{"location":"reference/class_reference/heightmapevent/","text":"Event Engine (NOTE) Used by any height map event. Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Heightmapevent"},{"location":"reference/class_reference/heightmapimporter/","text":"Editor Methods Properties Base Classes Derived Classes BaseHeight composite ImportMode MaxHeightRange MinHeightRange Name PatchColumns PatchRows PatchSize # Properties # BaseHeight : real ``` lang=cpp, name=Lightning var BaseHeight : Real # ImportMode : ImportMode ``` lang=cpp, name=Lightning var ImportMode : ImportMode # MaxHeightRange : real ``` lang=cpp, name=Lightning var MaxHeightRange : Real # MinHeightRange : real ``` lang=cpp, name=Lightning var MinHeightRange : Real # Name : string ``` lang=cpp, name=Lightning var Name : String # PatchColumns : integer ``` lang=cpp, name=Lightning var PatchColumns : Integer # PatchRows : integer ``` lang=cpp, name=Lightning var PatchRows : Integer # PatchSize : integer ``` lang=cpp, name=Lightning var PatchSize : Integer # Methods","title":"Heightmapimporter"},{"location":"reference/class_reference/heightmapmodel/","text":"Component Graphics (NOTE) Generates a graphical mesh from every patch of height data in the HeightMap component. Methods Properties Base Classes Derived Classes Constructor graphical # Properties # Methods # HeightMapModel : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HeightMapModel() ```","title":"Heightmapmodel"},{"location":"reference/class_reference/heightmapsource/","text":"Resource Engine (NOTE) HeightMapSource stores data needed for height maps. Data is stored on PatchData which are indexed by x,y. Each PatchData stores layers that represent different data. The primary layer is height and paint values but additional layers can be added to store data like foliage or custom game data. Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Heightmapsource"},{"location":"reference/class_reference/heightmapsubtool/","text":"Editor Methods Properties Base Classes Derived Classes Object createdestroytool heightmanipulationtool weightpaintertool # Properties # Methods","title":"Heightmapsubtool"},{"location":"reference/class_reference/heightmaptool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor CellIndexType component CurrentTool ShowCellIndex ShowPatchIndex SubTool # Properties # CellIndexType : CellIndexType ``` lang=cpp, name=Lightning var CellIndexType : CellIndexType # CurrentTool : HeightTool ``` lang=cpp, name=Lightning var CurrentTool : HeightTool # ShowCellIndex : boolean ``` lang=cpp, name=Lightning var ShowCellIndex : Boolean # ShowPatchIndex : boolean ``` lang=cpp, name=Lightning var ShowPatchIndex : Boolean # SubTool : heightmapsubtool ``` lang=cpp, name=Lightning var SubTool : HeightMapSubTool # Methods # HeightMapTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HeightMapTool() ```","title":"Heightmaptool"},{"location":"reference/class_reference/heightpatch/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Heightpatch"},{"location":"reference/class_reference/hidebasefilter/","text":"Graphics Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Hidebasefilter"},{"location":"reference/class_reference/hierarchy/","text":"Component Engine (NOTE) Component that gives an game object the ability to have child objects and Contains a list of children. Methods Properties Base Classes Derived Classes Constructor Children component # Properties # Children : hierarchylistrange read-only ``` lang=cpp, name=Lightning var Children : HierarchyListRange # Methods # Hierarchy : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Hierarchy() ```","title":"Hierarchy"},{"location":"reference/class_reference/hierarchycomposition/","text":"Engine Methods Properties Base Classes Derived Classes metacomposition # Properties # Methods","title":"Hierarchycomposition"},{"location":"reference/class_reference/hierarchyevent/","text":"Event Engine Methods Properties Base Classes Derived Classes Child event Parent # Properties # Child : cog ``` lang=cpp, name=Lightning var Child : Cog # Parent : cog ``` lang=cpp, name=Lightning var Parent : Cog # Methods","title":"Hierarchyevent"},{"location":"reference/class_reference/hierarchylistrange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : hierarchylistrange read-only ``` lang=cpp, name=Lightning var All : HierarchyListRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HierarchyListRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HierarchyListRange() ``` # HierarchyListRange : Void constructor Name Type Description p0 hierarchylistrange ``` lang=cpp, name=Lightning function HierarchyListRange(p0 : HierarchyListRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Hierarchylistrange"},{"location":"reference/class_reference/hierarchylistreverserange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : hierarchylistreverserange read-only ``` lang=cpp, name=Lightning var All : HierarchyListReverseRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HierarchyListReverseRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HierarchyListReverseRange() ``` # HierarchyListReverseRange : Void constructor Name Type Description p0 hierarchylistreverserange ``` lang=cpp, name=Lightning function HierarchyListReverseRange(p0 : HierarchyListReverseRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Hierarchylistreverserange"},{"location":"reference/class_reference/hierarchynamerange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : hierarchynamerange read-only ``` lang=cpp, name=Lightning var All : HierarchyNameRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HierarchyNameRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HierarchyNameRange() ``` # HierarchyNameRange : Void constructor Name Type Description p0 hierarchynamerange ``` lang=cpp, name=Lightning function HierarchyNameRange(p0 : HierarchyNameRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Hierarchynamerange"},{"location":"reference/class_reference/hierarchyrange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : hierarchyrange read-only ``` lang=cpp, name=Lightning var All : HierarchyRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HierarchyRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HierarchyRange() ``` # HierarchyRange : Void constructor Name Type Description p0 hierarchyrange ``` lang=cpp, name=Lightning function HierarchyRange(p0 : HierarchyRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Hierarchyrange"},{"location":"reference/class_reference/hierarchyspline/","text":"Component Engine (NOTE) A spline that builds its control points from all child cogs that have Transforms. Methods Properties Base Classes Derived Classes ForceRebuild Closed component Constructor DebugDrawSpline RebuildIfModified Error Spline SplineColor SplineType # Properties # Closed : boolean Does the spline loop back on itself? ``` lang=cpp, name=Lightning var Closed : Boolean # DebugDrawSpline : boolean Should the spline draw every frame? Mainly used for debugging purposes. ``` lang=cpp, name=Lightning var DebugDrawSpline : Boolean # Error : real The max number of units that a line segment is allowed to deviate from the curve. ``` lang=cpp, name=Lightning var Error : Real # Spline : spline read-only The internal spline data. ``` lang=cpp, name=Lightning var Spline : Spline # SplineColor : real4 What color should that spline be drawn with. ``` lang=cpp, name=Lightning var SplineColor : Real4 # SplineType : SplineType The kind of spline (Linear, BSpline, CatmullRom). Determines how the control points affect the curve. ``` lang=cpp, name=Lightning var SplineType : SplineType # Methods # ForceRebuild : Void Forcibly rebuilds the baked points for the spline. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ForceRebuild() # HierarchySpline : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HierarchySpline() ``` # RebuildIfModified : Void Rebuild the baked points if there are any changes to the spline's control points. This should never need to be manually called. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RebuildIfModified()","title":"Hierarchyspline"},{"location":"reference/class_reference/highlightborderevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Highlightborderevent"},{"location":"reference/class_reference/highpassnode/","text":"Sound (NOTE) Applies a high pass filter to audio generated by its input SoundNodes (removes low frequencies) Methods Properties Base Classes Derived Classes CutoffFrequency soundnode # Properties # CutoffFrequency : real Frequencies below this number in the node's input will be attenuated. Setting this value to 20.0 or lower will skip all filter calculations. ``` lang=cpp, name=Lightning var CutoffFrequency : Real # Methods","title":"Highpassnode"},{"location":"reference/class_reference/hotkeyeditor/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Hotkeyeditor"},{"location":"reference/class_reference/ibroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes AvlDynamicAabbTreeBroadPhase boundingboxbroadphase boundingspherebroadphase dynamicaabbtreebroadphase nsquaredbroadphase sapbroadphase staticaabbtreebroadphase # Properties # Methods","title":"Ibroadphase"},{"location":"reference/class_reference/iconbutton/","text":"Widget Methods Properties Base Classes Derived Classes buttonbase toggleiconbutton # Properties # Methods","title":"Iconbutton"},{"location":"reference/class_reference/ignorespaceeffects/","text":"Component Physics (NOTE) Allows a cog to ignore certain effect types (such as gravity or drag) that are being applied to the entire space (effects on Space or LevelSettings). Methods Properties Base Classes Derived Classes GetIgnoreState IgnoreBuoyancy component Constructor IgnoreCustom SetIgnoreState IgnoreDrag IgnoreFlow IgnoreForce IgnoreGravity IgnorePointForce IgnorePointGravity IgnoreThrust IgnoreTorque IgnoreVortex IgnoreWind # Properties # IgnoreBuoyancy : boolean Whether or not to ignore buoyancy effects. ``` lang=cpp, name=Lightning var IgnoreBuoyancy : Boolean # IgnoreCustom : boolean Whether or not to ignore custom effects. ``` lang=cpp, name=Lightning var IgnoreCustom : Boolean # IgnoreDrag : boolean Whether or not to ignore drag effects. ``` lang=cpp, name=Lightning var IgnoreDrag : Boolean # IgnoreFlow : boolean Whether or not to ignore flow effects. ``` lang=cpp, name=Lightning var IgnoreFlow : Boolean # IgnoreForce : boolean Whether or not to ignore force effects. ``` lang=cpp, name=Lightning var IgnoreForce : Boolean # IgnoreGravity : boolean Whether or not to ignore gravity effects. ``` lang=cpp, name=Lightning var IgnoreGravity : Boolean # IgnorePointForce : boolean Whether or not to ignore point force effects. ``` lang=cpp, name=Lightning var IgnorePointForce : Boolean # IgnorePointGravity : boolean Whether or not to ignore point gravity effects. ``` lang=cpp, name=Lightning var IgnorePointGravity : Boolean # IgnoreThrust : boolean Whether or not to ignore thrust effects. ``` lang=cpp, name=Lightning var IgnoreThrust : Boolean # IgnoreTorque : boolean Whether or not to ignore torque effects. ``` lang=cpp, name=Lightning var IgnoreTorque : Boolean # IgnoreVortex : boolean Whether or not to ignore vortex effects. ``` lang=cpp, name=Lightning var IgnoreVortex : Boolean # IgnoreWind : boolean Whether or not to ignore wind effects. ``` lang=cpp, name=Lightning var IgnoreWind : Boolean # Methods # GetIgnoreState : boolean Should the given effect type be ignored? |Name|Type|Description| |---|---|---| |effectType| PhysicsEffectType | | lang=cpp, name=Lightning function GetIgnoreState(effectType : PhysicsEffectType) : Boolean # IgnoreSpaceEffects : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IgnoreSpaceEffects() ``` # SetIgnoreState : Void Set if an effect type should be ignored. |Name|Type|Description| |---|---|---| |effectType| PhysicsEffectType | | |ignore| boolean | | lang=cpp, name=Lightning function SetIgnoreState(effectType : PhysicsEffectType, ignore : Boolean)","title":"Ignorespaceeffects"},{"location":"reference/class_reference/imagecontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Imagecontent"},{"location":"reference/class_reference/imagedefinition/","text":"Resource Graphics Methods Properties Base Classes Derived Classes sliceddefinition # Properties # Methods","title":"Imagedefinition"},{"location":"reference/class_reference/imageoptions/","text":"ContentMeta Methods Properties Base Classes Derived Classes ImportImages Object # Properties # ImportImages : ImageImport ``` lang=cpp, name=Lightning var ImportImages : ImageImport # Methods","title":"Imageoptions"},{"location":"reference/class_reference/imagewidget/","text":"Widget Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Imagewidget"},{"location":"reference/class_reference/importbutton/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Importbutton"},{"location":"reference/class_reference/importoptions/","text":"ContentMeta Methods Properties Base Classes Derived Classes AudioOptions eventobject ConflictOptions GeometryOptions ImageOptions # Properties # AudioOptions : audiooptions ``` lang=cpp, name=Lightning var AudioOptions : AudioOptions # ConflictOptions : conflictoptions ``` lang=cpp, name=Lightning var ConflictOptions : ConflictOptions # GeometryOptions : geometryoptions ``` lang=cpp, name=Lightning var GeometryOptions : GeometryOptions # ImageOptions : imageoptions ``` lang=cpp, name=Lightning var ImageOptions : ImageOptions # Methods","title":"Importoptions"},{"location":"reference/class_reference/indexbuffer/","text":"Graphics (NOTE) Indices used to define non-sequential primitive construction from vertices, such as shared vertices. Methods Properties Base Classes Derived Classes Add Count safeid32 Clear Get # Properties # Count : integer Number of vertex indices currently in buffer. Can be set manually to invoke vertex shading that number of times, with or without vertex data. ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Add a vertex index to the buffer. |Name|Type|Description| |---|---|---| |value| integer | | lang=cpp, name=Lightning function Add(value : Integer) # Clear : Void Clears all stored indices so that new ones can be added. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # Get : integer Returns the vertex index that is stored at the given index of this buffer. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : Integer","title":"Indexbuffer"},{"location":"reference/class_reference/indexedhalfedge/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor FaceIndex safeid32object TwinIndex VertexIndex # Properties # FaceIndex : integer read-only ``` lang=cpp, name=Lightning var FaceIndex : Integer # TwinIndex : integer read-only ``` lang=cpp, name=Lightning var TwinIndex : Integer # VertexIndex : integer read-only ``` lang=cpp, name=Lightning var VertexIndex : Integer # Methods # IndexedHalfEdge : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdge() ``` # IndexedHalfEdge : Void constructor Name Type Description p0 indexedhalfedge ``` lang=cpp, name=Lightning function IndexedHalfEdge(p0 : IndexedHalfEdge) ```","title":"Indexedhalfedge"},{"location":"reference/class_reference/indexedhalfedgeface/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor Edges safeid32object # Properties # Edges : indexedhalfedgefaceedgeindexarray read-only ``` lang=cpp, name=Lightning var Edges : IndexedHalfEdgeFaceEdgeIndexArray # Methods # IndexedHalfEdgeFace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdgeFace() ``` # IndexedHalfEdgeFace : Void constructor Name Type Description p0 indexedhalfedgeface ``` lang=cpp, name=Lightning function IndexedHalfEdgeFace(p0 : IndexedHalfEdgeFace) ```","title":"Indexedhalfedgeface"},{"location":"reference/class_reference/indexedhalfedgefaceedgeindexarray/","text":"Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count # Properties # All : indexedhalfedgefaceedgeindexarrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeFaceEdgeIndexArrayRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Get : integer Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : Integer ```","title":"Indexedhalfedgefaceedgeindexarray"},{"location":"reference/class_reference/indexedhalfedgefaceedgeindexarrayrange/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : indexedhalfedgefaceedgeindexarrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeFaceEdgeIndexArrayRange # Current : integer read-only ``` lang=cpp, name=Lightning var Current : Integer # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # IndexedHalfEdgeFaceEdgeIndexArrayRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdgeFaceEdgeIndexArrayRange() ``` # IndexedHalfEdgeFaceEdgeIndexArrayRange : Void constructor Name Type Description p0 indexedhalfedgefaceedgeindexarrayrange ``` lang=cpp, name=Lightning function IndexedHalfEdgeFaceEdgeIndexArrayRange(p0 : IndexedHalfEdgeFaceEdgeIndexArrayRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Indexedhalfedgefaceedgeindexarrayrange"},{"location":"reference/class_reference/indexedhalfedgemesh/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor Edges referencecountedobject Faces Vertices # Properties # Edges : indexedhalfedgemeshedgearray read-only ``` lang=cpp, name=Lightning var Edges : IndexedHalfEdgeMeshEdgeArray # Faces : indexedhalfedgemeshfacearray read-only ``` lang=cpp, name=Lightning var Faces : IndexedHalfEdgeMeshFaceArray # Vertices : indexedhalfedgemeshvertexarray read-only ``` lang=cpp, name=Lightning var Vertices : IndexedHalfEdgeMeshVertexArray # Methods # IndexedHalfEdgeMesh : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdgeMesh() ``` # IndexedHalfEdgeMesh : Void constructor Name Type Description p0 indexedhalfedgemesh ``` lang=cpp, name=Lightning function IndexedHalfEdgeMesh(p0 : IndexedHalfEdgeMesh) ```","title":"Indexedhalfedgemesh"},{"location":"reference/class_reference/indexedhalfedgemeshedgearray/","text":"Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count # Properties # All : indexedhalfedgemeshedgearrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeMeshEdgeArrayRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Get : indexedhalfedge Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : IndexedHalfEdge ```","title":"Indexedhalfedgemeshedgearray"},{"location":"reference/class_reference/indexedhalfedgemeshedgearrayrange/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : indexedhalfedgemeshedgearrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeMeshEdgeArrayRange # Current : indexedhalfedge read-only ``` lang=cpp, name=Lightning var Current : IndexedHalfEdge # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # IndexedHalfEdgeMeshEdgeArrayRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdgeMeshEdgeArrayRange() ``` # IndexedHalfEdgeMeshEdgeArrayRange : Void constructor Name Type Description p0 indexedhalfedgemeshedgearrayrange ``` lang=cpp, name=Lightning function IndexedHalfEdgeMeshEdgeArrayRange(p0 : IndexedHalfEdgeMeshEdgeArrayRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Indexedhalfedgemeshedgearrayrange"},{"location":"reference/class_reference/indexedhalfedgemeshfacearray/","text":"Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count # Properties # All : indexedhalfedgemeshfacearrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeMeshFaceArrayRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Get : indexedhalfedgeface Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : IndexedHalfEdgeFace ```","title":"Indexedhalfedgemeshfacearray"},{"location":"reference/class_reference/indexedhalfedgemeshfacearrayrange/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : indexedhalfedgemeshfacearrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeMeshFaceArrayRange # Current : indexedhalfedgeface read-only ``` lang=cpp, name=Lightning var Current : IndexedHalfEdgeFace # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # IndexedHalfEdgeMeshFaceArrayRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdgeMeshFaceArrayRange() ``` # IndexedHalfEdgeMeshFaceArrayRange : Void constructor Name Type Description p0 indexedhalfedgemeshfacearrayrange ``` lang=cpp, name=Lightning function IndexedHalfEdgeMeshFaceArrayRange(p0 : IndexedHalfEdgeMeshFaceArrayRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Indexedhalfedgemeshfacearrayrange"},{"location":"reference/class_reference/indexedhalfedgemeshvertexarray/","text":"Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count # Properties # All : indexedhalfedgemeshvertexarrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeMeshVertexArrayRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Get : real3 Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : Real3 ```","title":"Indexedhalfedgemeshvertexarray"},{"location":"reference/class_reference/indexedhalfedgemeshvertexarrayrange/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : indexedhalfedgemeshvertexarrayrange read-only ``` lang=cpp, name=Lightning var All : IndexedHalfEdgeMeshVertexArrayRange # Current : real3 read-only ``` lang=cpp, name=Lightning var Current : Real3 # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # IndexedHalfEdgeMeshVertexArrayRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IndexedHalfEdgeMeshVertexArrayRange() ``` # IndexedHalfEdgeMeshVertexArrayRange : Void constructor Name Type Description p0 indexedhalfedgemeshvertexarrayrange ``` lang=cpp, name=Lightning function IndexedHalfEdgeMeshVertexArrayRange(p0 : IndexedHalfEdgeMeshVertexArrayRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Indexedhalfedgemeshvertexarrayrange"},{"location":"reference/class_reference/inplacetexteditor/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Inplacetexteditor"},{"location":"reference/class_reference/inputdeviceevent/","text":"Event Engine (NOTE) An event to inform which input device is being used by the user. Methods Properties Base Classes Derived Classes Device event LastDevice # Properties # Device : InputDevice ``` lang=cpp, name=Lightning var Device : InputDevice # LastDevice : InputDevice ``` lang=cpp, name=Lightning var LastDevice : InputDevice # Methods","title":"Inputdeviceevent"},{"location":"reference/class_reference/ipaddress/","text":"Meta (NOTE) IPv4/IPv6 network host identifier Provided for convenience Note: This class is not slice-able, it has extra data. Methods Properties Base Classes Derived Classes Clear Hash SocketAddress Constructor Host InternetProtocol IsValid Port PortString String # Properties # Hash : integer read-only ``` lang=cpp, name=Lightning var Hash : Integer # Host : string Returns the valid IP address host as a numeric string, else String() ``` lang=cpp, name=Lightning var Host : String # InternetProtocol : InternetProtocol read-only Returns the valid IP address protocol version, else InternetProtocol::Unspecified. ``` lang=cpp, name=Lightning var InternetProtocol : InternetProtocol # IsValid : boolean read-only Returns true if this is a non-empty IPv4/IPv6 address, else false. ``` lang=cpp, name=Lightning var IsValid : Boolean # Port : integer Returns the valid IP address port, else 0. ``` lang=cpp, name=Lightning var Port : Integer # PortString : string read-only Returns the valid IP address port as a numeric string, else String() ``` lang=cpp, name=Lightning var PortString : String # String : string read-only Returns the valid IP address as a numeric \"host:port\" string, else String() ``` lang=cpp, name=Lightning var String : String # Methods # Clear : Void Clears the IP address. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # IpAddress : Void constructor Creates an empty IP address. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IpAddress() # IpAddress : Void constructor Copy Constructors. |Name|Type|Description| |---|---|---| |rhs| ipaddress | | lang=cpp, name=Lightning function IpAddress(rhs : IpAddress) # IpAddress : Void constructor Creates an empty IP address. |Name|Type|Description| |---|---|---| |host| string | | |port| integer | | lang=cpp, name=Lightning function IpAddress(host : String, port : Integer) # IpAddress : Void constructor Creates an empty IP address. |Name|Type|Description| |---|---|---| |host| string | | |port| integer | | |internetProtocol| InternetProtocol | | lang=cpp, name=Lightning function IpAddress(host : String, port : Integer, internetProtocol : InternetProtocol)","title":"Ipaddress"},{"location":"reference/class_reference/item/","text":"Editor Methods Properties Base Classes Derived Classes weightedcomposite # Properties # Methods","title":"Item"},{"location":"reference/class_reference/itemgroup/","text":"Editor Methods Properties Base Classes Derived Classes weightedcomposite # Properties # Methods","title":"Itemgroup"},{"location":"reference/class_reference/itemlist/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Itemlist"},{"location":"reference/class_reference/job/","text":"Engine Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Job"},{"location":"reference/class_reference/joint/","text":"Component Physics (NOTE) Joints connect two objects together with one or more constraints. A constraint is a mathematical rule that restricts object movement, typically defined in terms of the position and velocities of the objects involved. Methods Properties Base Classes Derived Classes GetCog Active component customjoint GetOtherObject AutoSnaps fixedanglejoint Constructor CollideConnected gearjoint MaxImpulse linearaxisjoint SendsEvents manipulatorjoint phygunjoint positionjoint prismaticjoint prismaticjoint2d pulleyjoint relativevelocityjoint revolutejoint revolutejoint2d stickjoint universaljoint uprightjoint weldjoint wheeljoint wheeljoint2d # Properties # Active : boolean Determines if this joint is currently active. Used for runtime enabling/disabling of joints. ``` lang=cpp, name=Lightning var Active : Boolean # AutoSnaps : boolean Determines if this joint will automatically delete itself if any of its constraints reach the max impulse value. This will still send an event if it snaps. ``` lang=cpp, name=Lightning var AutoSnaps : Boolean # CollideConnected : boolean Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide. ``` lang=cpp, name=Lightning var CollideConnected : Boolean # MaxImpulse : real The maximum impulse (instantaneous force) that this joint can apply to correct itself. ``` lang=cpp, name=Lightning var MaxImpulse : Real # SendsEvents : boolean Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events. ``` lang=cpp, name=Lightning var SendsEvents : Boolean # Methods # GetCog : cog Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetCog(index : Integer) : Cog # GetOtherObject : cog If the passed in object is ObjectA, returns ObjectB. Provides easier logic for traversing across joints. |Name|Type|Description| |---|---|---| |cog| cog | | lang=cpp, name=Lightning function GetOtherObject(cog : Cog) : Cog # Joint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Joint() ```","title":"Joint"},{"location":"reference/class_reference/jointconfigoverride/","text":"Component Physics (NOTE) Overrides a joint's configuration values of slop, linear/angular Baumgarte, and linear/angular error correction. Slop is the amount of error allowed before position correction takes effect. Baumgarte is used to correct error with a penalty impulse. Baumgarte is split into linear and angular portions because of stability. Error correction is only used when the joint is solved with post stabilization. Methods Properties Base Classes Derived Classes Constructor AngularBaumgarte component AngularErrorCorrection LinearBaumgarte LinearErrorCorrection PositionCorrectionType Slop # Properties # AngularBaumgarte : real The exponential constant for correcting angular error with a penalty impulse. ``` lang=cpp, name=Lightning var AngularBaumgarte : Real # AngularErrorCorrection : real The max amount of error that can be corrected by the angular portion of any constraint in one frame (only for PostStabilization). ``` lang=cpp, name=Lightning var AngularErrorCorrection : Real # LinearBaumgarte : real The exponential constant for correcting linear error with a penalty impulse. ``` lang=cpp, name=Lightning var LinearBaumgarte : Real # LinearErrorCorrection : real The max amount of error that can be corrected by the linear portion of any constraint in one frame (only for PostStabilization). ``` lang=cpp, name=Lightning var LinearErrorCorrection : Real # PositionCorrectionType : ConstraintPositionCorrection The kind of position correction that this joint should use. ``` lang=cpp, name=Lightning var PositionCorrectionType : ConstraintPositionCorrection # Slop : real The amount of error allowed before position correction takes effect. ``` lang=cpp, name=Lightning var Slop : Real # Methods # JointConfigOverride : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointConfigOverride() ```","title":"Jointconfigoverride"},{"location":"reference/class_reference/jointcreator/","text":"Physics (NOTE) A helper class to create joints of various configurations. Each joint is configured from two points. Any other specific joint properties are calculated from these two points. Methods Properties Base Classes Derived Classes AddJointLimit AttachToCommonParent AddJointMotor AttachToWorld AddJointSpring AutoSnaps Create OverrideLength CreateLocalPoints UseCenter CreateWorldPoints Constructor # Properties # AttachToCommonParent : boolean Should the cog of the joint be added as a child of the common parent of the two given cogs? Useful for putting the joint in the same hierarchy so that archetypes can be created. ``` lang=cpp, name=Lightning var AttachToCommonParent : Boolean # AttachToWorld : boolean Used to create a connection to a dummy object. Instead of connecting to object B, the connection will be between object A and \"the world\". ``` lang=cpp, name=Lightning var AttachToWorld : Boolean # AutoSnaps : boolean Should the joint auto-snap when the force limit is reached? ``` lang=cpp, name=Lightning var AutoSnaps : Boolean # OverrideLength : boolean Should the length of the joint be overridden or computed from the two points? Mainly used for StickJoint. ``` lang=cpp, name=Lightning var OverrideLength : Boolean # UseCenter : boolean Should the center of each object be used instead of the given points? ``` lang=cpp, name=Lightning var UseCenter : Boolean # Methods # AddJointLimit : jointlimit Add a JointLimit to the given joint cog. |Name|Type|Description| |---|---|---| |joint| cog | | lang=cpp, name=Lightning function AddJointLimit(joint : Cog) : JointLimit # AddJointMotor : jointmotor Add a JointMotor to the given joint cog. |Name|Type|Description| |---|---|---| |joint| cog | | lang=cpp, name=Lightning function AddJointMotor(joint : Cog) : JointMotor # AddJointSpring : jointspring Add a JointSpring to the given joint cog. |Name|Type|Description| |---|---|---| |joint| cog | | lang=cpp, name=Lightning function AddJointSpring(joint : Cog) : JointSpring # Create : cog Create a joint (by archetype) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointArchetype| archetype | | lang=cpp, name=Lightning function Create(objectA : Cog, objectB : Cog, jointArchetype : Archetype) : Cog # Create : cog Create a joint (by component name) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointName| string | | lang=cpp, name=Lightning function Create(objectA : Cog, objectB : Cog, jointName : String) : Cog # CreateLocalPoints : cog Create a joint (by archetype) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointArchetype| archetype | | |localPointA| real3 | | |localPointB| real3 | | lang=cpp, name=Lightning function CreateLocalPoints(objectA : Cog, objectB : Cog, jointArchetype : Archetype, localPointA : Real3, localPointB : Real3) : Cog # CreateLocalPoints : cog Create a joint (by component name) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointName| string | | |localPointA| real3 | | |localPointB| real3 | | lang=cpp, name=Lightning function CreateLocalPoints(objectA : Cog, objectB : Cog, jointName : String, localPointA : Real3, localPointB : Real3) : Cog # CreateWorldPoints : cog Create a joint (by archetype) attached to the two given cogs. Both world points on the joint are set to the same world point value. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointArchetype| archetype | | |bothWorldPoints| real3 | | lang=cpp, name=Lightning function CreateWorldPoints(objectA : Cog, objectB : Cog, jointArchetype : Archetype, bothWorldPoints : Real3) : Cog # CreateWorldPoints : cog Create a joint (by archetype) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointArchetype| archetype | | |worldPointA| real3 | | |worldPointB| real3 | | lang=cpp, name=Lightning function CreateWorldPoints(objectA : Cog, objectB : Cog, jointArchetype : Archetype, worldPointA : Real3, worldPointB : Real3) : Cog # CreateWorldPoints : cog Create a joint (by component name) attached to the two given cogs. Both world points on the joint are set to the same world point value. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointName| string | | |bothWorldPoints| real3 | | lang=cpp, name=Lightning function CreateWorldPoints(objectA : Cog, objectB : Cog, jointName : String, bothWorldPoints : Real3) : Cog # CreateWorldPoints : cog Create a joint (by component name) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA| cog | | |objectB| cog | | |jointName| string | | |worldPointA| real3 | | |worldPointB| real3 | | lang=cpp, name=Lightning function CreateWorldPoints(objectA : Cog, objectB : Cog, jointName : String, worldPointA : Real3, worldPointB : Real3) : Cog # JointCreator : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointCreator() ```","title":"Jointcreator"},{"location":"reference/class_reference/jointdebugdrawconfig/","text":"Component Physics (NOTE) Allows the user to override parameters for debug drawing of joints. Primarily used to debug draw from different object perspectives and to change the size of drawn data. Methods Properties Base Classes Derived Classes Constructor Active component Detail ObjectAPerspective ObjectBPerspective Size # Properties # Active : boolean Whether or not this component is active. ``` lang=cpp, name=Lightning var Active : Boolean # Detail : real The amount of detail to use when drawing. For example, the detail on a RevoluteJoint will increase the number of lines used to draw the arc of a circle. ``` lang=cpp, name=Lightning var Detail : Real # ObjectAPerspective : boolean If we draw the joint's debug info from the perspective of ObjectA. Typically used when ObjectA is marked as a static object and ObjectB has free movement. ``` lang=cpp, name=Lightning var ObjectAPerspective : Boolean # ObjectBPerspective : boolean If we draw the joint's debug info from the perspective of ObjectB. Typically used when ObjectB is marked as a static object and ObjectA has free movement. ``` lang=cpp, name=Lightning var ObjectBPerspective : Boolean # Size : real A size modifier for the debug drawing. 1 is the base size. ``` lang=cpp, name=Lightning var Size : Real # Methods # JointDebugDrawConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointDebugDrawConfig() ```","title":"Jointdebugdrawconfig"},{"location":"reference/class_reference/jointevent/","text":"Event Physics (NOTE) Sent out when a joint reaches some condition. Currently sent out when a limit is reached or an impulse's limit is exceeded. Methods Properties Base Classes Derived Classes Joint event JointCog ObjectA ObjectB # Properties # Joint : joint read-only The Joint that triggered the event. ``` lang=cpp, name=Lightning var Joint : Joint # JointCog : cog read-only The Cog of the Joint that signaled the event. ``` lang=cpp, name=Lightning var JointCog : Cog # ObjectA : cog read-only ObjectA on the Joint. ``` lang=cpp, name=Lightning var ObjectA : Cog # ObjectB : cog read-only ObjectB on the Joint. ``` lang=cpp, name=Lightning var ObjectB : Cog # Methods","title":"Jointevent"},{"location":"reference/class_reference/jointgraphedge/","text":"Physics (NOTE) A bi-directional graph edge between a collider and a joint. Exposes convenience functions for iterating over the graph. Methods Properties Base Classes Derived Classes Constructor Joint BaseJointGraphEdge< joint > Object OtherObject Owner Valid # Properties # Joint : joint read-only ``` lang=cpp, name=Lightning var Joint : Joint # Object : cog read-only ``` lang=cpp, name=Lightning var Object : Cog # OtherObject : cog read-only ``` lang=cpp, name=Lightning var OtherObject : Cog # Owner : cog read-only ``` lang=cpp, name=Lightning var Owner : Cog # Valid : boolean read-only ``` lang=cpp, name=Lightning var Valid : Boolean # Methods # JointGraphEdge : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointGraphEdge() ``` # JointGraphEdge : Void constructor Name Type Description jointgraphedge ``` lang=cpp, name=Lightning function JointGraphEdge( : JointGraphEdge) ```","title":"Jointgraphedge"},{"location":"reference/class_reference/jointlimit/","text":"Component Physics (NOTE) Defines limit properties for a joint. Used to add a min/max bounds to a joint. When the joint is in between the min/max bounds, the \"limited\" portion will be ignored (The stick will not solve when it is in between the bounds, making it a rope). See each joint for a description of how it reacts to a limit. Methods Properties Base Classes Derived Classes Constructor Active component AtomIds LowerLimit UpperLimit # Properties # Active : boolean Determines if this limit is currently active. ``` lang=cpp, name=Lightning var Active : Boolean # AtomIds : integer Signifies what atoms on the joint this affects. For internal use. ``` lang=cpp, name=Lightning var AtomIds : Integer # LowerLimit : real The lower bound for this limit. ``` lang=cpp, name=Lightning var LowerLimit : Real # UpperLimit : real The upper bound for this limit. ``` lang=cpp, name=Lightning var UpperLimit : Real # Methods # JointLimit : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointLimit() ```","title":"Jointlimit"},{"location":"reference/class_reference/jointmotor/","text":"Component Physics (NOTE) Defines motor properties for a joint. Used to add energy to a joint. A motor defines a desired speed to move at as well as a max impulse that can be applied to reach that speed in a timestep. See each joint for a description of how it reacts to a motor. Methods Properties Base Classes Derived Classes Constructor Active component AtomIds MaxImpulse Reverse Speed # Properties # Active : boolean Determines if this motor is currently active. ``` lang=cpp, name=Lightning var Active : Boolean # AtomIds : integer Signifies what atoms on the joint this affects. For internal use. ``` lang=cpp, name=Lightning var AtomIds : Integer # MaxImpulse : real The maximum impulse that the motor can apply each frame to reach the target speed. ``` lang=cpp, name=Lightning var MaxImpulse : Real # Reverse : boolean Determines if this motor should move in reverse. This is a convenient way to reverse a motor without having to negate the speed. ``` lang=cpp, name=Lightning var Reverse : Boolean # Speed : real The desired speed for this motor. ``` lang=cpp, name=Lightning var Speed : Real # Methods # JointMotor : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointMotor() ```","title":"Jointmotor"},{"location":"reference/class_reference/jointrange/","text":"Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : jointrange read-only ``` lang=cpp, name=Lightning var All : JointRange # Current : jointgraphedge read-only ``` lang=cpp, name=Lightning var Current : JointGraphEdge # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # JointRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointRange() ``` # JointRange : Void constructor Name Type Description p0 jointrange ``` lang=cpp, name=Lightning function JointRange(p0 : JointRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Jointrange"},{"location":"reference/class_reference/jointspring/","text":"Component Physics (NOTE) Defines spring properties for a joint. Used to make a joint soft and therefore behave spring-like. A joint spring has a frequency in hertz at which to oscillate as well as a damping ratio. The ratio should vary from 0 to 1 where 0 is no damping and 1 is critical damping. See each joint for a description of how it reacts to a spring. Methods Properties Base Classes Derived Classes Constructor Active component AtomIds DampingRatio FrequencyHz # Properties # Active : boolean Determines if this spring is active. ``` lang=cpp, name=Lightning var Active : Boolean # AtomIds : integer Signifies what atoms on the joint this affects. For internal use. ``` lang=cpp, name=Lightning var AtomIds : Integer # DampingRatio : real The damping ratio of this spring. The value should range from 0 to 1 where 0 is no damping and 1 is critical damping. ``` lang=cpp, name=Lightning var DampingRatio : Real # FrequencyHz : real The oscillation frequency of the spring in Hertz (cycles per second). ``` lang=cpp, name=Lightning var FrequencyHz : Real # Methods # JointSpring : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointSpring() ```","title":"Jointspring"},{"location":"reference/class_reference/jointtool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor AttachToCommonParent objectconnectingtool AttachToWorld AutoSnaps JointType Length MaxImpulse OverrideLength UseCenter # Properties # AttachToCommonParent : boolean ``` lang=cpp, name=Lightning var AttachToCommonParent : Boolean # AttachToWorld : boolean ``` lang=cpp, name=Lightning var AttachToWorld : Boolean # AutoSnaps : boolean ``` lang=cpp, name=Lightning var AutoSnaps : Boolean # JointType : JointToolTypes ``` lang=cpp, name=Lightning var JointType : JointToolTypes # Length : real ``` lang=cpp, name=Lightning var Length : Real # MaxImpulse : real ``` lang=cpp, name=Lightning var MaxImpulse : Real # OverrideLength : boolean ``` lang=cpp, name=Lightning var OverrideLength : Boolean # UseCenter : boolean ``` lang=cpp, name=Lightning var UseCenter : Boolean # Methods # JointTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JointTool() ```","title":"Jointtool"},{"location":"reference/class_reference/joystick/","text":"Engine (NOTE) A Joystick is associated with a hardware joystick, and provides the ability to query axes and buttons. Methods Properties Base Classes Derived Classes Calibrating AxisCount eventobject EndCalibration ButtonCount GetAxisIndex DisabledValue GetAxisName IsActive GetAxisValue Name GetAxisValueByName GetButtonValue LoadInputMapping SaveInputMapping StartCalibration # Properties # AxisCount : integer read-only ``` lang=cpp, name=Lightning var AxisCount : Integer # ButtonCount : integer read-only Get the number of buttons or axes. ``` lang=cpp, name=Lightning var ButtonCount : Integer # DisabledValue : real read-only static A value that means a joystick axis is invalid. For example when a HAT-switch is not pressed down, it will return this value. ``` lang=cpp, name=Lightning var DisabledValue : Real # IsActive : boolean read-only Gets whether or not the joystick is active. ``` lang=cpp, name=Lightning var IsActive : Boolean # Name : string read-only Get the name of the Joystick. ``` lang=cpp, name=Lightning var Name : String # Methods # Calibrating : boolean Name Type Description ``` lang=cpp, name=Lightning function Calibrating() : Boolean ``` # EndCalibration : Void Name Type Description ``` lang=cpp, name=Lightning function EndCalibration() ``` # GetAxisIndex : integer Name Type Description name string ``` lang=cpp, name=Lightning function GetAxisIndex(name : String) : Integer ``` # GetAxisName : string Name Type Description index integer ``` lang=cpp, name=Lightning function GetAxisName(index : Integer) : String ``` # GetAxisValue : real Queries an axes and returns a value between [-1, 1]. The valid range of axes is between 0 and 'GetMaxAxes'. If the axis is not valid, then the value returned is 0. If the axis is disabled, then the value returned is Joystick.DisabledValue. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetAxisValue(index : Integer) : Real # GetAxisValueByName : real Name Type Description name string ``` lang=cpp, name=Lightning function GetAxisValueByName(name : String) : Real ``` # GetButtonValue : boolean Queries a button and returns true if it is down, false if it is up The valid range of buttons is between 0 and 'GetMaxButtons' If the button is not valid, then the value returned is false. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetButtonValue(index : Integer) : Boolean # LoadInputMapping : Void Load an input mapping. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function LoadInputMapping(name : String) # SaveInputMapping : Void Name Type Description name string ``` lang=cpp, name=Lightning function SaveInputMapping(name : String) ``` # StartCalibration : Void Name Type Description ``` lang=cpp, name=Lightning function StartCalibration() ```","title":"Joystick"},{"location":"reference/class_reference/joystickevent/","text":"Event Engine (NOTE) Joystick events are sent when a game pad button state is changed. Methods Properties Base Classes Derived Classes Button event Joystick # Properties # Button : integer The button that was just pressed or released. ``` lang=cpp, name=Lightning var Button : Integer # Joystick : joystick The joystick that generated this event. ``` lang=cpp, name=Lightning var Joystick : Joystick # Methods","title":"Joystickevent"},{"location":"reference/class_reference/joystickrange/","text":"Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : joystickrange read-only ``` lang=cpp, name=Lightning var All : JoystickRange # Current : joystick read-only ``` lang=cpp, name=Lightning var Current : Joystick # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # JoystickRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function JoystickRange() ``` # JoystickRange : Void constructor Name Type Description p0 joystickrange ``` lang=cpp, name=Lightning function JoystickRange(p0 : JoystickRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Joystickrange"},{"location":"reference/class_reference/joysticks/","text":"Engine (NOTE) Joysticks is a collection of all joysticks available. Methods Properties Base Classes Derived Classes JoystickCount eventobject Joysticks # Properties # JoystickCount : integer read-only Get the number of joysticks. ``` lang=cpp, name=Lightning var JoystickCount : Integer # Joysticks : joystickrange read-only ``` lang=cpp, name=Lightning var Joysticks : JoystickRange # Methods","title":"Joysticks"},{"location":"reference/class_reference/keyboard/","text":"Engine (NOTE) Keyboard representing the physical keyboard. Methods Properties Base Classes Derived Classes GetKeyName eventobject IsAnyKeyDown IsAnyNonModifierDown KeyIsDown KeyIsPressed KeyIsReleased KeyIsUp ToKey ToSymbol Valid # Properties # Methods # GetKeyName : string Gets a string name of a particular key. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function GetKeyName(key : Keys) : String # IsAnyKeyDown : boolean Is any key in the 'Keys' enum down (not including 'Keys::Unknown', e.g. PrintScreen). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsAnyKeyDown() : Boolean # IsAnyNonModifierDown : boolean Excluding Ctrl, Shift, and Alt - is any key in the 'Keys' enum down (not including 'Keys::Unknown', e.g. PrintScreen). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsAnyNonModifierDown() : Boolean # KeyIsDown : boolean Is the particular currently down. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function KeyIsDown(key : Keys) : Boolean # KeyIsPressed : boolean Was the key pressed this frame. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function KeyIsPressed(key : Keys) : Boolean # KeyIsReleased : boolean Was the key released this frame. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function KeyIsReleased(key : Keys) : Boolean # KeyIsUp : boolean Is the particular currently up. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function KeyIsUp(key : Keys) : Boolean # ToKey : Keys Counterpart to 'ToSymbol'. Converts a key's name or symbol to the key value. Returns Keys::Unknown if key is not found. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function ToKey(key : String) : Keys # ToSymbol : string Convert key value to it's actual name or keyboard symbol, if it has one. Returns \"Unknown\" String if key is not found. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function ToSymbol(key : Keys) : String # ToSymbol : string Convert a key name to it's keyboard symbol, if it has one. Returns input String if key is not found. |Name|Type|Description| |---|---|---| |keyName| string | | lang=cpp, name=Lightning function ToSymbol(keyName : String) : String # Valid : boolean Validate that the key is a Keys::Enum that is not 'Unknown', or 'None', or an integer value that doesn't map to a known Keys::Enum value. |Name|Type|Description| |---|---|---| |key| Keys | | lang=cpp, name=Lightning function Valid(key : Keys) : Boolean # Valid : boolean Validate that the input string can be mapped back to an enum. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function Valid(key : String) : Boolean","title":"Keyboard"},{"location":"reference/class_reference/keyboardevent/","text":"Event Engine (NOTE) Represents information about key state changes. Methods Properties Base Classes Derived Classes AltPressed event CtrlPressed HandledEvent Key Keyboard ModifierPressed OsKey ShiftPressed SpacePressed State # Properties # AltPressed : boolean ``` lang=cpp, name=Lightning var AltPressed : Boolean # CtrlPressed : boolean ``` lang=cpp, name=Lightning var CtrlPressed : Boolean # HandledEvent : boolean ``` lang=cpp, name=Lightning var HandledEvent : Boolean # Key : Keys ``` lang=cpp, name=Lightning var Key : Keys # Keyboard : keyboard read-only Get the keyboard that generated this event. ``` lang=cpp, name=Lightning var Keyboard : Keyboard # ModifierPressed : boolean read-only ``` lang=cpp, name=Lightning var ModifierPressed : Boolean # OsKey : integer ``` lang=cpp, name=Lightning var OsKey : Integer # ShiftPressed : boolean ``` lang=cpp, name=Lightning var ShiftPressed : Boolean # SpacePressed : boolean ``` lang=cpp, name=Lightning var SpacePressed : Boolean # State : KeyState ``` lang=cpp, name=Lightning var State : KeyState # Methods","title":"Keyboardevent"},{"location":"reference/class_reference/keyboardtextevent/","text":"Event Engine (NOTE) Gives the actual key value being typed. For example, holding Shift + 'a' will give 'A'. Methods Properties Base Classes Derived Classes Rune event # Properties # Rune : rune ``` lang=cpp, name=Lightning var Rune : Rune # Methods","title":"Keyboardtextevent"},{"location":"reference/class_reference/keyframeevent/","text":"Event ContentMeta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Keyframeevent"},{"location":"reference/class_reference/label/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Label"},{"location":"reference/class_reference/layout/","text":"Widget Methods Properties Base Classes Derived Classes DoLayout Padding docklayout Measure edgedocklayout filllayout gridlayout ratiolayout stacklayout # Properties # Padding : thickness ``` lang=cpp, name=Lightning var Padding : Thickness # Methods # DoLayout : real2 Name Type Description p0 composite p1 layoutarea ``` lang=cpp, name=Lightning function DoLayout(p0 : Composite, p1 : LayoutArea) : Real2 ``` # Measure : real2 Name Type Description p0 composite p1 layoutarea ``` lang=cpp, name=Lightning function Measure(p0 : Composite, p1 : LayoutArea) : Real2 ```","title":"Layout"},{"location":"reference/class_reference/layoutarea/","text":"Widget Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Layoutarea"},{"location":"reference/class_reference/level/","text":"Resource Engine (NOTE) A level is resource that stores a set of objects that can be loaded into a space. Level is different from most resource types in that it does not really store the level data on the object but always loads the data from the file system. Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Level"},{"location":"reference/class_reference/libraryview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Libraryview"},{"location":"reference/class_reference/linearaxisjoint/","text":"Component Physics (NOTE) Legacy. A linear axis joint is used to keep an object locked on a plane that is defined by a normal. This was made to help make a dynamic character controller. Instead of locking translation along a plane, the constraint can be turned off with a motor attached to it which will drive movement in the direction of the plane normal. This can then be thought of as a \"move in direction\" constraint. Methods Properties Base Classes Derived Classes Constructor WorldAxis joint # Properties # WorldAxis : real3 The axis in world space that is constrained. ``` lang=cpp, name=Lightning var WorldAxis : Real3 # Methods # LinearAxisJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LinearAxisJoint() ```","title":"Linearaxisjoint"},{"location":"reference/class_reference/linearaxisjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # LinearAxisJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LinearAxisJointBlock() ```","title":"Linearaxisjointblock"},{"location":"reference/class_reference/linearparticleanimator/","text":"Component Graphics (NOTE) Basic Particle Animation Effects. Methods Properties Base Classes Derived Classes Constructor Dampening particleanimator Force Growth RandomForce Torque Twist # Properties # Dampening : real Velocity dampening. ``` lang=cpp, name=Lightning var Dampening : Real # Force : real3 Constance force applied to particles. ``` lang=cpp, name=Lightning var Force : Real3 # Growth : real Rate of particle size growth. ``` lang=cpp, name=Lightning var Growth : Real # RandomForce : real3 Random force applied to particles. ``` lang=cpp, name=Lightning var RandomForce : Real3 # Torque : real Force that applies spin. ``` lang=cpp, name=Lightning var Torque : Real # Twist : real3 Twist applies a twisting/tornado force to the particles. ``` lang=cpp, name=Lightning var Twist : Real3 # Methods # LinearParticleAnimator : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LinearParticleAnimator() ```","title":"Linearparticleanimator"},{"location":"reference/class_reference/linkid/","text":"Component Engine Methods Properties Base Classes Derived Classes component # Properties # Methods","title":"Linkid"},{"location":"reference/class_reference/listbox/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Listbox"},{"location":"reference/class_reference/localmodifications/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Localmodifications"},{"location":"reference/class_reference/lowpassnode/","text":"Sound (NOTE) Applies a low pass filter to audio generated by its input SoundNodes (removes high frequencies) Methods Properties Base Classes Derived Classes CutoffFrequency soundnode # Properties # CutoffFrequency : real Frequencies above this number in the node's input will be attenuated. Setting this value to 20,000.00 or higher will skip all filter calculations. ``` lang=cpp, name=Lightning var CutoffFrequency : Real # Methods","title":"Lowpassnode"},{"location":"reference/class_reference/mainconfig/","text":"Component Engine (NOTE) Main configuration component. Methods Properties Base Classes Derived Classes Constructor ApplicationName component BuildDate BuildVersion # Properties # ApplicationName : string read-only ``` lang=cpp, name=Lightning var ApplicationName : String # BuildDate : string read-only ``` lang=cpp, name=Lightning var BuildDate : String # BuildVersion : string read-only ``` lang=cpp, name=Lightning var BuildVersion : String # Methods # MainConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MainConfig() ```","title":"Mainconfig"},{"location":"reference/class_reference/mainpropertyview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Mainpropertyview"},{"location":"reference/class_reference/mainwindow/","text":"Widget Methods Properties Base Classes Derived Classes rootwidget # Properties # Methods","title":"Mainwindow"},{"location":"reference/class_reference/mainwindowtransformevent/","text":"Event Widget Methods Properties Base Classes Derived Classes NewScreenPosition event NewScreenSize OldScreenPosition OldScreenSize TargetWindow # Properties # NewScreenPosition : real2 read-only ``` lang=cpp, name=Lightning var NewScreenPosition : Real2 # NewScreenSize : real2 read-only ``` lang=cpp, name=Lightning var NewScreenSize : Real2 # OldScreenPosition : real2 read-only ``` lang=cpp, name=Lightning var OldScreenPosition : Real2 # OldScreenSize : real2 read-only ``` lang=cpp, name=Lightning var OldScreenSize : Real2 # TargetWindow : oswindow read-only ``` lang=cpp, name=Lightning var TargetWindow : OsWindow # Methods","title":"Mainwindowtransformevent"},{"location":"reference/class_reference/manipulatorjoint/","text":"Component Physics (NOTE) Legacy. A position joint that is designed to manipulate one object. The only difference between this and the position joint is that the manipulator always draws itself, draws differently, and configures the max impulse differently. Methods Properties Base Classes Derived Classes Constructor LocalPoint joint TargetPoint WorldPoint # Properties # LocalPoint : real3 The local space point on the object that the joint is connected to. ``` lang=cpp, name=Lightning var LocalPoint : Real3 # TargetPoint : real3 The point in world space that the object's point is being moved towards. ``` lang=cpp, name=Lightning var TargetPoint : Real3 # WorldPoint : real3 The world space point on the object that the joint is connected to. ``` lang=cpp, name=Lightning var WorldPoint : Real3 # Methods # ManipulatorJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ManipulatorJoint() ```","title":"Manipulatorjoint"},{"location":"reference/class_reference/manipulatorjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # ManipulatorJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ManipulatorJointBlock() ```","title":"Manipulatorjointblock"},{"location":"reference/class_reference/manipulatortool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor DuplicateOnCtrlDrag component GrabMode HoverColor IncludeMode SizeBoxCollider SnapDistance Snapping ToolColor # Properties # DuplicateOnCtrlDrag : boolean ``` lang=cpp, name=Lightning var DuplicateOnCtrlDrag : Boolean # GrabMode : GizmoGrab ``` lang=cpp, name=Lightning var GrabMode : GizmoGrab # HoverColor : real4 ``` lang=cpp, name=Lightning var HoverColor : Real4 # IncludeMode : IncludeMode ``` lang=cpp, name=Lightning var IncludeMode : IncludeMode # SizeBoxCollider : boolean ``` lang=cpp, name=Lightning var SizeBoxCollider : Boolean # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # Snapping : boolean ``` lang=cpp, name=Lightning var Snapping : Boolean # ToolColor : real4 ``` lang=cpp, name=Lightning var ToolColor : Real4 # Methods # ManipulatorTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ManipulatorTool() ```","title":"Manipulatortool"},{"location":"reference/class_reference/manipulatortoolevent/","text":"Event Editor Methods Properties Base Classes Derived Classes EndWorldRectangle viewportmouseevent Finished GrabLocation OperationQueue StartWorldRectangle # Properties # EndWorldRectangle : rectangle ``` lang=cpp, name=Lightning var EndWorldRectangle : Rectangle # Finished : boolean read-only ``` lang=cpp, name=Lightning var Finished : Boolean # GrabLocation : Location read-only ``` lang=cpp, name=Lightning var GrabLocation : Location # OperationQueue : operationqueue read-only ``` lang=cpp, name=Lightning var OperationQueue : OperationQueue # StartWorldRectangle : rectangle read-only ``` lang=cpp, name=Lightning var StartWorldRectangle : Rectangle # Methods","title":"Manipulatortoolevent"},{"location":"reference/class_reference/massoverride/","text":"Component Physics (NOTE) Takes a snap shot of the current mass and inertia and overrides the object's mass so it can be resized while keeping it's old mass. Methods Properties Base Classes Derived Classes Constructor Active component RecomputeMass AutoComputeCenterOfMass AutoComputeInertia InverseMass LocalCenterOfMass LocalInverseInertiaTensor Mass # Properties # Active : boolean Determines whether the RigidBody on this Cog will use the cached or actual mass and inertia. ``` lang=cpp, name=Lightning var Active : Boolean # AutoComputeCenterOfMass : boolean Should the center of mass be auto computed or overwritten (via script). ``` lang=cpp, name=Lightning var AutoComputeCenterOfMass : Boolean # AutoComputeInertia : boolean Should the inertia tensor be auto computed or overwritten (via script). ``` lang=cpp, name=Lightning var AutoComputeInertia : Boolean # InverseMass : real The cached inverse mass of this object. ``` lang=cpp, name=Lightning var InverseMass : Real # LocalCenterOfMass : real3 The center of mass in local space to override with. When set, the center of mass will be locked to this value until AutoComputeCenterOfMass is set to true. ``` lang=cpp, name=Lightning var LocalCenterOfMass : Real3 # LocalInverseInertiaTensor : real3x3 The inverse inertia tensor this object is saved with. ``` lang=cpp, name=Lightning var LocalInverseInertiaTensor : Real3x3 # Mass : real Overrides the mass of this body. Inertia is updated as a ratio of the new mass to the old mass. ``` lang=cpp, name=Lightning var Mass : Real # Methods # MassOverride : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MassOverride() ``` # RecomputeMass : Void Takes a new snapshot of the current mass and inertia. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RecomputeMass()","title":"Massoverride"},{"location":"reference/class_reference/material/","text":"Resource Graphics (NOTE) A composition of shader fragments that defines a shader program that is used when rendering Graphicals. Methods Properties Base Classes Derived Classes RuntimeClone CompositionLabel dataresource ReferencedByList RenderGroups # Properties # CompositionLabel : integer read-only ``` lang=cpp, name=Lightning var CompositionLabel : Integer # ReferencedByList : rendergrouplist read-only ``` lang=cpp, name=Lightning var ReferencedByList : RenderGroupList # RenderGroups : rendergrouplist read-only ``` lang=cpp, name=Lightning var RenderGroups : RenderGroupList # Methods # RuntimeClone : material Creates an anonymous copy that can be independently modified, destroyed when all references are gone. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : Material","title":"Material"},{"location":"reference/class_reference/materialblock/","text":"Graphics Methods Properties Base Classes Derived Classes Constructor Object materialblockproxy # Properties # Methods # MaterialBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MaterialBlock() ``` # MaterialBlock : Void constructor Name Type Description p0 materialblock ``` lang=cpp, name=Lightning function MaterialBlock(p0 : MaterialBlock) ```","title":"Materialblock"},{"location":"reference/class_reference/materialblockproxy/","text":"Graphics Methods Properties Base Classes Derived Classes materialblock # Properties # Methods","title":"Materialblockproxy"},{"location":"reference/class_reference/materialfactory/","text":"Graphics Methods Properties Base Classes Derived Classes metacomposition # Properties # Methods","title":"Materialfactory"},{"location":"reference/class_reference/materiallist/","text":"Graphics Methods Properties Base Classes Derived Classes Add safeid32eventobject All Remove # Properties # Methods # Add : Void Adds the Material to this RenderGroups's list. Runtime resources only. |Name|Type|Description| |---|---|---| |material| material | | lang=cpp, name=Lightning function Add(material : Material) # All : arrayhandleofmaterial Range of all resources in the list. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function All() : ArrayHandleOfMaterial # Remove : Void Removes the Material from this RenderGroups's list. Runtime resources only. |Name|Type|Description| |---|---|---| |material| material | | lang=cpp, name=Lightning function Remove(material : Material)","title":"Materiallist"},{"location":"reference/class_reference/menubar/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Menubar"},{"location":"reference/class_reference/menubaritem/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Menubaritem"},{"location":"reference/class_reference/mesh/","text":"Resource Graphics (NOTE) Data that represents a mesh in the way that is intended to be used by graphics hardware. Methods Properties Base Classes Derived Classes CreateRuntime Indices Resource RuntimeClone PrimitiveType Upload Vertices UploadNoRayCastInfo UploadNoRayCastInfoOrAabb # Properties # Indices : indexbuffer read-only Indices used to define non-sequential primitive construction from vertices, such as shared vertices. ``` lang=cpp, name=Lightning var Indices : IndexBuffer # PrimitiveType : PrimitiveType The type of primitives to be made with the vertex data. ``` lang=cpp, name=Lightning var PrimitiveType : PrimitiveType # Vertices : vertexbuffer read-only Vertex data and attribute semantics for defining data that can be uploaded to the gpu. ``` lang=cpp, name=Lightning var Vertices : VertexBuffer # Methods # CreateRuntime : mesh static Makes an anonymous Mesh resource that can be defined by script and uploaded to the gpu. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : Mesh # RuntimeClone : mesh Creates a clone of this Mesh. As a clone is expected to be modified, an upload function must be called before this mesh can be used. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : Mesh # Upload : Void Upload vertex buffer and index buffer data to the gpu. This will also build the aabb and information needed for raycasting. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Upload() # UploadNoRayCastInfo : Void Same as Upload except raycasting information will not be built. This avoids a possible spike when a custom mesh will never need to be raycasted against. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UploadNoRayCastInfo() # UploadNoRayCastInfoOrAabb : Void Same as Upload except raycasting information and the aabb will not be built. This should be used when the user is manually setting an aabb or frustum culling is disabled. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UploadNoRayCastInfoOrAabb()","title":"Mesh"},{"location":"reference/class_reference/meshbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor FlipNormals buildercomponent FlipWindingOrder GenerateSmoothNormals GenerateTangentSpace InvertUvYAxis SmoothingAngleDegreesThreshold # Properties # FlipNormals : boolean ``` lang=cpp, name=Lightning var FlipNormals : Boolean # FlipWindingOrder : boolean ``` lang=cpp, name=Lightning var FlipWindingOrder : Boolean # GenerateSmoothNormals : boolean ``` lang=cpp, name=Lightning var GenerateSmoothNormals : Boolean # GenerateTangentSpace : boolean ``` lang=cpp, name=Lightning var GenerateTangentSpace : Boolean # InvertUvYAxis : boolean ``` lang=cpp, name=Lightning var InvertUvYAxis : Boolean # SmoothingAngleDegreesThreshold : real ``` lang=cpp, name=Lightning var SmoothingAngleDegreesThreshold : Real # Methods # MeshBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MeshBuilder() ```","title":"Meshbuilder"},{"location":"reference/class_reference/meshcollider/","text":"Component Physics (NOTE) Defines the collision for a generic mesh from a collection of triangles ( PhysicsMesh resource). This collider type is not expected to have a dynamic or kinematic RigidBody. Methods Properties Base Classes Derived Classes Constructor DrawEdges collider DrawFaceNormals DrawFaces PhysicsMesh # Properties # DrawEdges : boolean Whether to debug draw the edges of each triangle. ``` lang=cpp, name=Lightning var DrawEdges : Boolean # DrawFaceNormals : boolean Whether to debug draw the normals of each triangle. ``` lang=cpp, name=Lightning var DrawFaceNormals : Boolean # DrawFaces : boolean Whether to debug draw the faces of each triangle. ``` lang=cpp, name=Lightning var DrawFaces : Boolean # PhysicsMesh : physicsmesh The mesh resource used to define collision. This mesh is just a surface mesh of triangles (no volume is defined). ``` lang=cpp, name=Lightning var PhysicsMesh : PhysicsMesh # Methods # MeshCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MeshCollider() ```","title":"Meshcollider"},{"location":"reference/class_reference/meshparticleemitter/","text":"Component Graphics (NOTE) Emits particles on a mesh surface. Methods Properties Base Classes Derived Classes Constructor Mesh particleemittershared MeshEmitMode NormalExtrude # Properties # Mesh : mesh Mesh used for this Model. ``` lang=cpp, name=Lightning var Mesh : Mesh # MeshEmitMode : MeshEmitMode ``` lang=cpp, name=Lightning var MeshEmitMode : MeshEmitMode # NormalExtrude : real Moved the spawn position along the normal scaled by this amount. ``` lang=cpp, name=Lightning var NormalExtrude : Real # Methods # MeshParticleEmitter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MeshParticleEmitter() ```","title":"Meshparticleemitter"},{"location":"reference/class_reference/messageboxevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Messageboxevent"},{"location":"reference/class_reference/metaarray/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject metaarraywrapper plasmametaarrayanimationclips plasmametaarraycontentlibraryreferencearray plasmametaarraynetpropertyinfos plasmametaarrayrevisions plasmametaarraysounds plasmametaarraysoundtags # Properties # Methods","title":"Metaarray"},{"location":"reference/class_reference/metaarraywrapper/","text":"Meta Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Metaarraywrapper"},{"location":"reference/class_reference/metaattribute/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject editorpropertyextension metacustomui metadependency metaeditorgizmo metaeditorscriptobject metagroup metainterface metanetproperty metapropertyfilter metapropertyrename metascriptshortcutattribute metascripttagattribute metashaderinput # Properties # Methods","title":"Metaattribute"},{"location":"reference/class_reference/metacomposition/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject CogMetaComposition CogPathMetaComposition CollisionFilterMetaComposition ContentMetaComposition EngineMetaComposition EventBundleMetaComposition hierarchycomposition materialfactory metacompositionwrapper PhysicsSolverConfigMetaComposition RaycasterMetaComposition # Properties # Methods","title":"Metacomposition"},{"location":"reference/class_reference/metacompositionwrapper/","text":"Editor Methods Properties Base Classes Derived Classes metacomposition # Properties # Methods","title":"Metacompositionwrapper"},{"location":"reference/class_reference/metacustomui/","text":"Meta Methods Properties Base Classes Derived Classes metaattribute # Properties # Methods","title":"Metacustomui"},{"location":"reference/class_reference/metadatainheritance/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject ComponentMetaDataInheritance metadatainheritanceroot # Properties # Methods","title":"Metadatainheritance"},{"location":"reference/class_reference/metadatainheritanceroot/","text":"Meta Methods Properties Base Classes Derived Classes metadatainheritance cogmetadatainheritance dataresourceinheritance # Properties # Methods","title":"Metadatainheritanceroot"},{"location":"reference/class_reference/metadependency/","text":"Engine Methods Properties Base Classes Derived Classes metaattribute # Properties # Methods","title":"Metadependency"},{"location":"reference/class_reference/metadisplay/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetadisplay resourcedisplayfunctions resourcepackagedisplay soundattenuatordisplay soundcuedisplay sounddisplay soundemitterdisplay soundentrydisplay soundtagdisplay soundtagentrydisplay stringnamedisplay typenamedisplay # Properties # Methods","title":"Metadisplay"},{"location":"reference/class_reference/metadropevent/","text":"Event Editor (NOTE) MetaDropEvent for dropping MetaObjects. Methods Properties Base Classes Derived Classes Failed event Handled MouseEvent MouseOverObject Object Position Result Testing ViewportMouseEvent # Properties # Failed : boolean ``` lang=cpp, name=Lightning var Failed : Boolean # Handled : boolean ``` lang=cpp, name=Lightning var Handled : Boolean # MouseEvent : mouseevent read-only ``` lang=cpp, name=Lightning var MouseEvent : MouseEvent # MouseOverObject : anyhandle read-only ``` lang=cpp, name=Lightning var MouseOverObject : AnyHandle # Object : anyhandle read-only ``` lang=cpp, name=Lightning var Object : AnyHandle # Position : real2 ``` lang=cpp, name=Lightning var Position : Real2 # Result : string ``` lang=cpp, name=Lightning var Result : String # Testing : boolean ``` lang=cpp, name=Lightning var Testing : Boolean # ViewportMouseEvent : viewportmouseevent read-only ``` lang=cpp, name=Lightning var ViewportMouseEvent : ViewportMouseEvent # Methods","title":"Metadropevent"},{"location":"reference/class_reference/metaeditorgizmo/","text":"Meta Methods Properties Base Classes Derived Classes GizmoArchetype metaattribute # Properties # GizmoArchetype : string ``` lang=cpp, name=Lightning var GizmoArchetype : String # Methods","title":"Metaeditorgizmo"},{"location":"reference/class_reference/metaeditorresource/","text":"Meta Methods Properties Base Classes Derived Classes AllowAdd editorpropertyextension AllowNone FilterTag SearchPreview # Properties # AllowAdd : boolean ``` lang=cpp, name=Lightning var AllowAdd : Boolean # AllowNone : boolean ``` lang=cpp, name=Lightning var AllowNone : Boolean # FilterTag : string ``` lang=cpp, name=Lightning var FilterTag : String # SearchPreview : boolean ``` lang=cpp, name=Lightning var SearchPreview : Boolean # Methods","title":"Metaeditorresource"},{"location":"reference/class_reference/metaeditorscriptobject/","text":"Engine Methods Properties Base Classes Derived Classes AutoRegister metaattribute # Properties # AutoRegister : boolean ``` lang=cpp, name=Lightning var AutoRegister : Boolean # Methods","title":"Metaeditorscriptobject"},{"location":"reference/class_reference/metagroup/","text":"Meta Methods Properties Base Classes Derived Classes Name metaattribute # Properties # Name : string ``` lang=cpp, name=Lightning var Name : String # Methods","title":"Metagroup"},{"location":"reference/class_reference/metainterface/","text":"Engine Methods Properties Base Classes Derived Classes metaattribute # Properties # Methods","title":"Metainterface"},{"location":"reference/class_reference/metalibraryevent/","text":"Event Meta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Metalibraryevent"},{"location":"reference/class_reference/metanetproperty/","text":"Networking Methods Properties Base Classes Derived Classes NetChannelConfig metaattribute NetPropertyConfig # Properties # NetChannelConfig : string ``` lang=cpp, name=Lightning var NetChannelConfig : String # NetPropertyConfig : string ``` lang=cpp, name=Lightning var NetPropertyConfig : String # Methods","title":"Metanetproperty"},{"location":"reference/class_reference/metaoperations/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetaoperations ComponentMetaOperations contentitemmetaoperations resourcemetaoperations # Properties # Methods","title":"Metaoperations"},{"location":"reference/class_reference/metaowner/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject # Properties # Methods","title":"Metaowner"},{"location":"reference/class_reference/metapropertybasicfilter/","text":"Meta Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Metapropertybasicfilter"},{"location":"reference/class_reference/metapropertyeditor/","text":"Editor Methods Properties Base Classes Derived Classes referencecountedeventobject # Properties # Methods","title":"Metapropertyeditor"},{"location":"reference/class_reference/metapropertyfilter/","text":"Meta Methods Properties Base Classes Derived Classes metaattribute cogarchetypepropertyfilter editingamefilter hidebasefilter metapropertybasicfilter PropertyFilterArithmeticTypes PropertyFilterBoolean PropertyFilterDoubleInteger PropertyFilterDoubleReal PropertyFilterFloatingPointTypes PropertyFilterInteger PropertyFilterInteger2 PropertyFilterInteger3 PropertyFilterInteger4 PropertyFilterMultiPrimitiveTypes PropertyFilterOther PropertyFilterQuaternion PropertyFilterReal PropertyFilterReal2 PropertyFilterReal3 PropertyFilterReal4 PropertyFilterString showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter # Properties # Methods","title":"Metapropertyfilter"},{"location":"reference/class_reference/metapropertyrename/","text":"Meta Methods Properties Base Classes Derived Classes metaattribute # Properties # Methods","title":"Metapropertyrename"},{"location":"reference/class_reference/metaresource/","text":"Engine Methods Properties Base Classes Derived Classes referencecountedeventobject # Properties # Methods","title":"Metaresource"},{"location":"reference/class_reference/metascriptshortcutattribute/","text":"Widget Methods Properties Base Classes Derived Classes Alt metaattribute Ctrl Key Shift # Properties # Alt : boolean ``` lang=cpp, name=Lightning var Alt : Boolean # Ctrl : boolean ``` lang=cpp, name=Lightning var Ctrl : Boolean # Key : string ``` lang=cpp, name=Lightning var Key : String # Shift : boolean ``` lang=cpp, name=Lightning var Shift : Boolean # Methods","title":"Metascriptshortcutattribute"},{"location":"reference/class_reference/metascripttagattribute/","text":"Widget Methods Properties Base Classes Derived Classes Tags metaattribute # Properties # Tags : string ``` lang=cpp, name=Lightning var Tags : String # Methods","title":"Metascripttagattribute"},{"location":"reference/class_reference/metaselection/","text":"Meta Methods Properties Base Classes Derived Classes Add All referencecountedeventobject Clear Primary Contains Count Empty FinalSelectionChanged Remove Replace SelectOnly # Properties # All : metaselectionrange read-only ``` lang=cpp, name=Lightning var All : MetaSelectionRange # Primary : anyhandle ``` lang=cpp, name=Lightning var Primary : AnyHandle # Methods # Add : Void Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function Add(p0 : AnyHandle) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Contains : boolean Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function Contains(p0 : AnyHandle) : Boolean ``` # Count : integer Name Type Description ``` lang=cpp, name=Lightning function Count() : Integer ``` # Empty : boolean Name Type Description ``` lang=cpp, name=Lightning function Empty() : Boolean ``` # FinalSelectionChanged : Void Name Type Description ``` lang=cpp, name=Lightning function FinalSelectionChanged() ``` # Remove : Void Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function Remove(p0 : AnyHandle) ``` # Replace : Void Name Type Description p0 anyhandle p1 anyhandle ``` lang=cpp, name=Lightning function Replace(p0 : AnyHandle, p1 : AnyHandle) ``` # SelectOnly : Void Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function SelectOnly(p0 : AnyHandle) ```","title":"Metaselection"},{"location":"reference/class_reference/metaselectionrange/","text":"Meta Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : metaselectionrange read-only ``` lang=cpp, name=Lightning var All : MetaSelectionRange # Current : anyhandle read-only ``` lang=cpp, name=Lightning var Current : AnyHandle # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MetaSelectionRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MetaSelectionRange() ``` # MetaSelectionRange : Void constructor Name Type Description p0 metaselectionrange ``` lang=cpp, name=Lightning function MetaSelectionRange(p0 : MetaSelectionRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Metaselectionrange"},{"location":"reference/class_reference/metaserialization/","text":"Serialization Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetaserialization cogpathmetaserialization EnumMetaSerialization metastringserialization PrimitiveMetaSerializationBoolean PrimitiveMetaSerializationInteger PrimitiveMetaSerializationInteger2 PrimitiveMetaSerializationInteger3 PrimitiveMetaSerializationInteger4 PrimitiveMetaSerializationMat2 PrimitiveMetaSerializationMat3 PrimitiveMetaSerializationMat4 PrimitiveMetaSerializationQuat PrimitiveMetaSerializationReal PrimitiveMetaSerializationReal2 PrimitiveMetaSerializationReal3 PrimitiveMetaSerializationReal4 PrimitiveMetaSerializationString resourcemetaserialization # Properties # Methods","title":"Metaserialization"},{"location":"reference/class_reference/metaserializedproperty/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject # Properties # Methods","title":"Metaserializedproperty"},{"location":"reference/class_reference/metashaderinput/","text":"Meta Methods Properties Base Classes Derived Classes FragmentName metaattribute InputName # Properties # FragmentName : string ``` lang=cpp, name=Lightning var FragmentName : String # InputName : string ``` lang=cpp, name=Lightning var InputName : String # Methods","title":"Metashaderinput"},{"location":"reference/class_reference/metastringserialization/","text":"Serialization Methods Properties Base Classes Derived Classes metaserialization # Properties # Methods","title":"Metastringserialization"},{"location":"reference/class_reference/metatransform/","text":"Meta Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetatransform rotationbasisgizmometatransform transformmetatransform # Properties # Methods","title":"Metatransform"},{"location":"reference/class_reference/microphoneinputnode/","text":"Sound (NOTE) Receives input from a microphone and passes the audio data to its output SoundNodes. Methods Properties Base Classes Derived Classes Active soundnode Volume # Properties # Active : boolean Microphone input will only be played while the Active property is set to True. ``` lang=cpp, name=Lightning var Active : Boolean # Volume : real The volume modifier applied to all audio data received from the microphone. ``` lang=cpp, name=Lightning var Volume : Real # Methods","title":"Microphoneinputnode"},{"location":"reference/class_reference/midievent/","text":"Event Sound (NOTE) Sent when a MIDI message is received from a connected device. Methods Properties Base Classes Derived Classes Channel event MIDINumber Value # Properties # Channel : real ``` lang=cpp, name=Lightning var Channel : Real # MIDINumber : real ``` lang=cpp, name=Lightning var MIDINumber : Real # Value : real ``` lang=cpp, name=Lightning var Value : Real # Methods","title":"Midievent"},{"location":"reference/class_reference/modal/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Modal"},{"location":"reference/class_reference/modalbuttonevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Modalbuttonevent"},{"location":"reference/class_reference/modalconfirmevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Modalconfirmevent"},{"location":"reference/class_reference/model/","text":"Component Graphics (NOTE) Renders a mesh. Methods Properties Base Classes Derived Classes Constructor Mesh graphical # Properties # Mesh : mesh Mesh that the graphical will render. ``` lang=cpp, name=Lightning var Mesh : Mesh # Methods # Model : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Model() ```","title":"Model"},{"location":"reference/class_reference/modulationnode/","text":"Sound (NOTE) Applies either ring or amplitude modulation to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes Frequency soundnode UseAmplitudeModulation WetPercent WetValue # Properties # Frequency : real The frequency of the sine wave used for the modulation. ``` lang=cpp, name=Lightning var Frequency : Real # UseAmplitudeModulation : boolean If this property is true, the node will apply amplitude modulation (multiply the audio input with a unipolar sine wave with values from 0.0 to 1.0). If false, the node will apply ring modulation (multiply the input with a bipolar sine wave with values from -1.0 to 1.0). ``` lang=cpp, name=Lightning var UseAmplitudeModulation : Boolean # WetPercent : real DEPRECATED The WetValue property should be used instead. ``` lang=cpp, name=Lightning var WetPercent : Real # WetValue : real The percentage of the input (0 - 1.0) which should have the modulation applied to it. ``` lang=cpp, name=Lightning var WetValue : Real # Methods","title":"Modulationnode"},{"location":"reference/class_reference/mouse/","text":"Engine (NOTE) Mouse object for Display System. Methods Properties Base Classes Derived Classes IsButtonDown ClientPosition eventobject ToggleTrapped Cursor CursorMovement RawMovement Trapped # Properties # ClientPosition : real2 read-only The position of the mouse cursor relative to the application's top-left corner in pixels. ``` lang=cpp, name=Lightning var ClientPosition : Real2 # Cursor : Cursor Set the cursor of the mouse. ``` lang=cpp, name=Lightning var Cursor : Cursor # CursorMovement : real2 read-only The movement of the mouse in pixels. ``` lang=cpp, name=Lightning var CursorMovement : Real2 # RawMovement : real2 High precision raw movement of the mouse. ``` lang=cpp, name=Lightning var RawMovement : Real2 # Trapped : boolean Trap the mouse preventing it from moving. ``` lang=cpp, name=Lightning var Trapped : Boolean # Methods # IsButtonDown : boolean Is a mouse button currently down? |Name|Type|Description| |---|---|---| |button| MouseButtons | | lang=cpp, name=Lightning function IsButtonDown(button : MouseButtons) : Boolean # ToggleTrapped : Void Toggles if the mouse is currently trapped. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToggleTrapped()","title":"Mouse"},{"location":"reference/class_reference/mousecapture/","text":"Component Gameplay Methods Properties Base Classes Derived Classes Capture IsCaptured component Constructor ReleaseCapture # Properties # IsCaptured : boolean read-only Returns whether or not this has an active mouse capture. ``` lang=cpp, name=Lightning var IsCaptured : Boolean # Methods # Capture : boolean Starts the mouse manipulation. All mouse events will now only go to the owner of this Component. Returns whether or not the manipulation can be started. |Name|Type|Description| |---|---|---| |e| viewportmouseevent | | lang=cpp, name=Lightning function Capture(e : ViewportMouseEvent) : Boolean # MouseCapture : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MouseCapture() ``` # ReleaseCapture : Void Releases the mouse manipulation. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ReleaseCapture() # ReleaseCapture : Void Releases the mouse manipulation. |Name|Type|Description| |---|---|---| |e| viewportmouseevent | | lang=cpp, name=Lightning function ReleaseCapture(e : ViewportMouseEvent)","title":"Mousecapture"},{"location":"reference/class_reference/mousedragevent/","text":"Event Widget Methods Properties Base Classes Derived Classes mouseevent # Properties # Methods","title":"Mousedragevent"},{"location":"reference/class_reference/mouseevent/","text":"Event Widget (NOTE) Mouse events for actions concerning the mouse. Methods Properties Base Classes Derived Classes IsButtonUp AltPressed event mousedragevent Button mousefiledropevent ButtonDown viewportmouseevent CtrlPressed HandledEvent Mouse Movement Position Scroll ShiftPressed # Properties # AltPressed : boolean ``` lang=cpp, name=Lightning var AltPressed : Boolean # Button : MouseButtons ``` lang=cpp, name=Lightning var Button : MouseButtons # ButtonDown : boolean State of all the mouse buttons. ``` lang=cpp, name=Lightning var ButtonDown : Boolean # CtrlPressed : boolean ``` lang=cpp, name=Lightning var CtrlPressed : Boolean # HandledEvent : boolean ``` lang=cpp, name=Lightning var HandledEvent : Boolean # Mouse : mouse read-only ``` lang=cpp, name=Lightning var Mouse : Mouse # Movement : real2 ``` lang=cpp, name=Lightning var Movement : Real2 # Position : real2 ``` lang=cpp, name=Lightning var Position : Real2 # Scroll : real2 ``` lang=cpp, name=Lightning var Scroll : Real2 # ShiftPressed : boolean ``` lang=cpp, name=Lightning var ShiftPressed : Boolean # Methods # IsButtonUp : boolean Name Type Description button MouseButtons ``` lang=cpp, name=Lightning function IsButtonUp(button : MouseButtons) : Boolean ```","title":"Mouseevent"},{"location":"reference/class_reference/mousefiledropevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/class_reference/mousefiledropevent/#files-array[string] Files]] mouseevent # Properties # Files : Array[ string ] ``` lang=cpp, name=Lightning var Files : Array[String] # Methods","title":"Mousefiledropevent"},{"location":"reference/class_reference/mousemanipulation/","text":"Widget Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Mousemanipulation"},{"location":"reference/class_reference/multiconvexmesh/","text":"Resource Physics (NOTE) Represents a collection of convex meshes that was decomposed from a mesh. Methods Properties Base Classes Derived Classes CreateRuntime Modified Resource RuntimeClone SubMeshes UpdateAndNotifyIfModified Valid Validate Vertices # Properties # Modified : boolean read-only Is the resource currently modified? ``` lang=cpp, name=Lightning var Modified : Boolean # SubMeshes : multiconvexmeshsubmeshdata read-only A collection of sub-convex meshes. ``` lang=cpp, name=Lightning var SubMeshes : MultiConvexMeshSubMeshData # Valid : boolean read-only Is the resource correctly setup? Typically involves a mis-match in indices and vertices. ``` lang=cpp, name=Lightning var Valid : Boolean # Vertices : multiconvexmeshvertexdata read-only The vertex buffer data of this mesh. ``` lang=cpp, name=Lightning var Vertices : MultiConvexMeshVertexData # Methods # CreateRuntime : multiconvexmesh static Creates a MultiConvexMesh for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : MultiConvexMesh # RuntimeClone : multiconvexmesh Creates a clone of this mesh for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : MultiConvexMesh # UpdateAndNotifyIfModified : Void Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UpdateAndNotifyIfModified() # Validate : boolean Check if the mesh is valid. Optionally throw a script exception if it is invalid. |Name|Type|Description| |---|---|---| |throwExceptionIfInvalid| boolean | | lang=cpp, name=Lightning function Validate(throwExceptionIfInvalid : Boolean) : Boolean","title":"Multiconvexmesh"},{"location":"reference/class_reference/multiconvexmeshcollider/","text":"Component Physics (NOTE) Defines a collection of sub-convex meshes. This allows a non-convex object to be broken up into several convex pieces for efficient collision detection and use with rigid bodies. Methods Properties Base Classes Derived Classes Constructor Mesh collider # Properties # Mesh : multiconvexmesh The MultiConvexMesh resource that defines collision. ``` lang=cpp, name=Lightning var Mesh : MultiConvexMesh # Methods # MultiConvexMeshCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiConvexMeshCollider() ```","title":"Multiconvexmeshcollider"},{"location":"reference/class_reference/multiconvexmesheditor/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Multiconvexmesheditor"},{"location":"reference/class_reference/multiconvexmeshindexdata/","text":"Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set # Properties # All : multiconvexmeshindexrange read-only ``` lang=cpp, name=Lightning var All : MultiConvexMeshIndexRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Name Type Description integer ``` lang=cpp, name=Lightning function Add( : Integer) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Get : integer Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : Integer ``` # Set : Void Name Type Description integer integer ``` lang=cpp, name=Lightning function Set( : Integer, : Integer) ```","title":"Multiconvexmeshindexdata"},{"location":"reference/class_reference/multiconvexmeshindexrange/","text":"Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : multiconvexmeshindexrange read-only ``` lang=cpp, name=Lightning var All : MultiConvexMeshIndexRange # Current : integer read-only ``` lang=cpp, name=Lightning var Current : Integer # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MultiConvexMeshIndexRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiConvexMeshIndexRange() ``` # MultiConvexMeshIndexRange : Void constructor Name Type Description p0 multiconvexmeshindexrange ``` lang=cpp, name=Lightning function MultiConvexMeshIndexRange(p0 : MultiConvexMeshIndexRange) ```","title":"Multiconvexmeshindexrange"},{"location":"reference/class_reference/multiconvexmeshpoint/","text":"Editor Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Multiconvexmeshpoint"},{"location":"reference/class_reference/multiconvexmeshpropertyviewinfo/","text":"Editor (NOTE) Structure bound to the property view for the main editor. Contains the different settings that the user can modify. Methods Properties Base Classes Derived Classes AutoCompute AutoComputeMethod eventobject Constructor AutoComputeMode ClearColor DrawMode MeshThickness OuterContourColor SimplificationThreshold SpriteSource SurfaceLevelThreshold # Properties # AutoComputeMethod : MultiConvexMeshAutoComputeMethod What method of auto-computing should be used? Most likely 'pixel' is the mode that should be used. ``` lang=cpp, name=Lightning var AutoComputeMethod : MultiConvexMeshAutoComputeMethod # AutoComputeMode : MultiConvexMeshAutoComputeMode Should the auto-computed mesh be calculated from the alpha or the intensity of the sprite? ``` lang=cpp, name=Lightning var AutoComputeMode : MultiConvexMeshAutoComputeMode # ClearColor : real4 The clear color of the viewport used to render. ``` lang=cpp, name=Lightning var ClearColor : Real4 # DrawMode : MultiConvexMeshDrawMode How should the collection of meshes be drawn? ``` lang=cpp, name=Lightning var DrawMode : MultiConvexMeshDrawMode # MeshThickness : real Since the mesh is on a 2d plane, they need some thickness for their z-depth. This controls how thick the meshes are. ``` lang=cpp, name=Lightning var MeshThickness : Real # OuterContourColor : real4 The color to draw edges with. ``` lang=cpp, name=Lightning var OuterContourColor : Real4 # SimplificationThreshold : real A threshold to control when vertices should be removed (simplified). This value is related to the area of a triangle. ``` lang=cpp, name=Lightning var SimplificationThreshold : Real # SpriteSource : spritesource The sprite source used as a reference for drawing the mesh. Note: this is not always what's visible as the user can drag in archetypes to view as well. ``` lang=cpp, name=Lightning var SpriteSource : SpriteSource # SurfaceLevelThreshold : real When the sprite is sampled using the AutoComputeMode, what value should be used to determine where a surface is. ``` lang=cpp, name=Lightning var SurfaceLevelThreshold : Real # Methods # AutoCompute : Void Resets the points of the mesh to an approximation for the current sprite. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function AutoCompute() # MultiConvexMeshPropertyViewInfo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiConvexMeshPropertyViewInfo() ```","title":"Multiconvexmeshpropertyviewinfo"},{"location":"reference/class_reference/multiconvexmeshsubmeshdata/","text":"Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get RemoveAt # Properties # All : multiconvexmeshsubmeshrange read-only ``` lang=cpp, name=Lightning var All : MultiConvexMeshSubMeshRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : subconvexmesh Create and add a new SubConvexMesh. Returns the new mesh for modification. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Add() : SubConvexMesh # Clear : Void Clears all sub-meshes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # Get : subconvexmesh Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : SubConvexMesh ``` # RemoveAt : Void Remove the sub-mesh at the given index. |Name|Type|Description| |---|---|---| |arrayIndex| integer | | lang=cpp, name=Lightning function RemoveAt(arrayIndex : Integer)","title":"Multiconvexmeshsubmeshdata"},{"location":"reference/class_reference/multiconvexmeshsubmeshrange/","text":"Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : multiconvexmeshsubmeshrange read-only ``` lang=cpp, name=Lightning var All : MultiConvexMeshSubMeshRange # Current : subconvexmesh read-only ``` lang=cpp, name=Lightning var Current : SubConvexMesh # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MultiConvexMeshSubMeshRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiConvexMeshSubMeshRange() ``` # MultiConvexMeshSubMeshRange : Void constructor Name Type Description p0 multiconvexmeshsubmeshrange ``` lang=cpp, name=Lightning function MultiConvexMeshSubMeshRange(p0 : MultiConvexMeshSubMeshRange) ```","title":"Multiconvexmeshsubmeshrange"},{"location":"reference/class_reference/multiconvexmeshvertexdata/","text":"Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set # Properties # All : multiconvexmeshvertexrange read-only ``` lang=cpp, name=Lightning var All : MultiConvexMeshVertexRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Name Type Description real3 ``` lang=cpp, name=Lightning function Add( : Real3) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Get : real3 Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : Real3 ``` # Set : Void Name Type Description integer real3 ``` lang=cpp, name=Lightning function Set( : Integer, : Real3) ```","title":"Multiconvexmeshvertexdata"},{"location":"reference/class_reference/multiconvexmeshvertexrange/","text":"Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : multiconvexmeshvertexrange read-only ``` lang=cpp, name=Lightning var All : MultiConvexMeshVertexRange # Current : real3 read-only ``` lang=cpp, name=Lightning var Current : Real3 # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MultiConvexMeshVertexRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiConvexMeshVertexRange() ``` # MultiConvexMeshVertexRange : Void constructor Name Type Description p0 multiconvexmeshvertexrange ``` lang=cpp, name=Lightning function MultiConvexMeshVertexRange(p0 : MultiConvexMeshVertexRange) ```","title":"Multiconvexmeshvertexrange"},{"location":"reference/class_reference/multidock/","text":"Widget Methods Properties Base Classes Derived Classes composite editor # Properties # Methods","title":"Multidock"},{"location":"reference/class_reference/multilinetext/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Multilinetext"},{"location":"reference/class_reference/multimanager/","text":"Widget Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Multimanager"},{"location":"reference/class_reference/multirendertarget/","text":"Graphics (NOTE) Interface for configuring multiple color target outputs. Methods Properties Base Classes Derived Classes BlendSettings threadsafereferencecounted BlendSettings0 BlendSettings1 BlendSettings2 BlendSettings3 BlendSettings4 BlendSettings5 BlendSettings6 BlendSettings7 ColorTarget ColorTarget0 ColorTarget1 ColorTarget2 ColorTarget3 ColorTarget4 ColorTarget5 ColorTarget6 ColorTarget7 # Properties # BlendSettings : blendsettingsmrt read-only ``` lang=cpp, name=Lightning var BlendSettings : BlendSettingsMrt # BlendSettings0 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings0 : BlendSettings # BlendSettings1 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings1 : BlendSettings # BlendSettings2 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings2 : BlendSettings # BlendSettings3 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings3 : BlendSettings # BlendSettings4 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings4 : BlendSettings # BlendSettings5 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings5 : BlendSettings # BlendSettings6 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings6 : BlendSettings # BlendSettings7 : blendsettings ``` lang=cpp, name=Lightning var BlendSettings7 : BlendSettings # ColorTarget : colortargetmrt read-only ``` lang=cpp, name=Lightning var ColorTarget : ColorTargetMrt # ColorTarget0 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget0 : RenderTarget # ColorTarget1 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget1 : RenderTarget # ColorTarget2 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget2 : RenderTarget # ColorTarget3 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget3 : RenderTarget # ColorTarget4 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget4 : RenderTarget # ColorTarget5 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget5 : RenderTarget # ColorTarget6 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget6 : RenderTarget # ColorTarget7 : rendertarget ``` lang=cpp, name=Lightning var ColorTarget7 : RenderTarget # Methods","title":"Multirendertarget"},{"location":"reference/class_reference/multisprite/","text":"Component Graphics Methods Properties Base Classes Derived Classes All AnimationActive basesprite Clear AnimationSpeed Get Constructor Set # Properties # AnimationActive : boolean ``` lang=cpp, name=Lightning var AnimationActive : Boolean # AnimationSpeed : real ``` lang=cpp, name=Lightning var AnimationSpeed : Real # Methods # All : multispriteentryrange Name Type Description ``` lang=cpp, name=Lightning function All() : MultiSpriteEntryRange ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Get : multispriteentry Name Type Description p0 integer2 ``` lang=cpp, name=Lightning function Get(p0 : Integer2) : MultiSpriteEntry ``` # MultiSprite : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiSprite() ``` # Set : Void Name Type Description p0 integer2 p1 spritesource ``` lang=cpp, name=Lightning function Set(p0 : Integer2, p1 : SpriteSource) ```","title":"Multisprite"},{"location":"reference/class_reference/multispriteentry/","text":"Graphics Methods Properties Base Classes Derived Classes Constructor Index SpriteSource # Properties # Index : integer2 read-only ``` lang=cpp, name=Lightning var Index : Integer2 # SpriteSource : spritesource read-only ``` lang=cpp, name=Lightning var SpriteSource : SpriteSource # Methods # MultiSpriteEntry : Void constructor Name Type Description p0 multispriteentry ``` lang=cpp, name=Lightning function MultiSpriteEntry(p0 : MultiSpriteEntry) ```","title":"Multispriteentry"},{"location":"reference/class_reference/multispriteentryrange/","text":"Graphics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : multispriteentryrange read-only ``` lang=cpp, name=Lightning var All : MultiSpriteEntryRange # Current : multispriteentry read-only ``` lang=cpp, name=Lightning var Current : MultiSpriteEntry # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MultiSpriteEntryRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MultiSpriteEntryRange() ``` # MultiSpriteEntryRange : Void constructor Name Type Description p0 multispriteentryrange ``` lang=cpp, name=Lightning function MultiSpriteEntryRange(p0 : MultiSpriteEntryRange) ```","title":"Multispriteentryrange"},{"location":"reference/class_reference/named/","text":"Component Engine Methods Properties Base Classes Derived Classes component # Properties # Methods","title":"Named"},{"location":"reference/class_reference/netchannel/","text":"Networking (NOTE) Network Channel. Manages the replication of a set of properties on the network. Methods Properties Base Classes Derived Classes GetNetProperty Authority safeid32object HasNetProperty ChangeFlag ReplicateNow IsNapping TakeNap IsScheduled WakeUp LastChangeTimePassed LastChangeTimestamp Name NetChannelType # Properties # Authority : Authority Controls which peer has the authority to observe and replicate property changes. (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time. The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client. However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client. ``` lang=cpp, name=Lightning var Authority : Authority # ChangeFlag : boolean Manual change flag (checked upon manual change observation). ``` lang=cpp, name=Lightning var ChangeFlag : Boolean # IsNapping : boolean read-only Returns true if the net channel is currently napping (performing change detection on longer intervals), else false. ``` lang=cpp, name=Lightning var IsNapping : Boolean # IsScheduled : boolean read-only Returns true if this net channel is scheduled for change observation, else false. ``` lang=cpp, name=Lightning var IsScheduled : Boolean # LastChangeTimePassed : real read-only Elapsed time passed since this net channel was last changed, else 0. ``` lang=cpp, name=Lightning var LastChangeTimePassed : Real # LastChangeTimestamp : real read-only Timestamp indicating when this net channel was last changed, else 0. ``` lang=cpp, name=Lightning var LastChangeTimestamp : Real # Name : string read-only Net channel name. ``` lang=cpp, name=Lightning var Name : String # NetChannelType : netchanneltype read-only Operating net channel type. ``` lang=cpp, name=Lightning var NetChannelType : NetChannelType # Methods # GetNetProperty : netproperty [Client/Server] Returns the specified net property, else nullptr. |Name|Type|Description| |---|---|---| |component| component | | |propertyName| string | | lang=cpp, name=Lightning function GetNetProperty(component : Component, propertyName : String) : NetProperty # HasNetProperty : boolean [Client/Server] Returns true if the net object has the specified net property, else false. |Name|Type|Description| |---|---|---| |component| component | | |propertyName| string | | lang=cpp, name=Lightning function HasNetProperty(component : Component, propertyName : String) : Boolean # ReplicateNow : boolean Replicates net property changes immediately (only if changes are detected). Will also update nap state as configured. Returns true if changes were replicated, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ReplicateNow() : Boolean # TakeNap : Void Forces the net channel to start napping immediately. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TakeNap() # WakeUp : Void Forces the net channel to stop napping immediately. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function WakeUp()","title":"Netchannel"},{"location":"reference/class_reference/netchannelconfig/","text":"Resource Networking (NOTE) Network Channel Configuration. Defines a configuration for the replication of a set of properties on the network. Methods Properties Base Classes Derived Classes AcceptIncomingChanges dataresource AccurateTimestampOnChange AllowNapping AllowRelay AuthorityDefault AuthorityMode AwakeDetectionInterval AwakeDuration DetectionMode DetectOutgoingChanges EventOnIncomingPropertyChange EventOnOutgoingPropertyChange NapDetectionInterval ReliabilityMode ReplicateOnOffline ReplicateOnOnline SerializationMode TransferMode # Properties # AcceptIncomingChanges : boolean Controls whether or not net channels should accept incoming changes. ``` lang=cpp, name=Lightning var AcceptIncomingChanges : Boolean # AccurateTimestampOnChange : boolean Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value. (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting) ``` lang=cpp, name=Lightning var AccurateTimestampOnChange : Boolean # AllowNapping : boolean Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while. ``` lang=cpp, name=Lightning var AllowNapping : Boolean # AllowRelay : boolean Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received. (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow) ``` lang=cpp, name=Lightning var AllowRelay : Boolean # AuthorityDefault : Authority Controls which peer has the authority to observe and replicate property changes on each net channel by default. (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time. The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client. However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client. ``` lang=cpp, name=Lightning var AuthorityDefault : Authority # AuthorityMode : AuthorityMode Controls when net channels can modify their change authority. (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) ``` lang=cpp, name=Lightning var AuthorityMode : AuthorityMode # AwakeDetectionInterval : integer Controls the frame interval in which awake net channels are observed for changes. ``` lang=cpp, name=Lightning var AwakeDetectionInterval : Integer # AwakeDuration : integer Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake. ``` lang=cpp, name=Lightning var AwakeDuration : Integer # DetectionMode : DetectionMode Controls how net channel changes are detected. (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons) ``` lang=cpp, name=Lightning var DetectionMode : DetectionMode # DetectOutgoingChanges : boolean Controls whether or not net channels should detect outgoing changes. ``` lang=cpp, name=Lightning var DetectOutgoingChanges : Boolean # EventOnIncomingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted. ``` lang=cpp, name=Lightning var EventOnIncomingPropertyChange : Boolean # EventOnOutgoingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected. ``` lang=cpp, name=Lightning var EventOnOutgoingPropertyChange : Boolean # NapDetectionInterval : integer Controls the frame interval in which napping net channels are observed for changes. ``` lang=cpp, name=Lightning var NapDetectionInterval : Integer # ReliabilityMode : ReliabilityMode Controls whether or not net channel changes will be retransmitted should they get lost over the network. (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted) ``` lang=cpp, name=Lightning var ReliabilityMode : ReliabilityMode # ReplicateOnOffline : boolean Controls whether or not the net channel will be replicated when the net object goes offline. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event. ``` lang=cpp, name=Lightning var ReplicateOnOffline : Boolean # ReplicateOnOnline : boolean Controls whether or not the net channel will be replicated when the net object comes online. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event. ``` lang=cpp, name=Lightning var ReplicateOnOnline : Boolean # SerializationMode : SerializationMode Controls how net channels are serialized. (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) ``` lang=cpp, name=Lightning var SerializationMode : SerializationMode # TransferMode : TransferMode Controls how net channel changes are to be ordered and released once received. (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) ``` lang=cpp, name=Lightning var TransferMode : TransferMode # Methods","title":"Netchannelconfig"},{"location":"reference/class_reference/netchannelpropertychange/","text":"Event Networking (NOTE) Dispatched after an outgoing/incoming net channel property change is detected during a particular replication phase. Methods Properties Base Classes Derived Classes ChannelName event ComponentName Direction Object PropertyName ReplicationPhase Timestamp # Properties # ChannelName : string read-only The changed net channel. ``` lang=cpp, name=Lightning var ChannelName : String # ComponentName : string read-only The component which declared the changed net property. ``` lang=cpp, name=Lightning var ComponentName : String # Direction : TransmissionDirection read-only The change direction. ``` lang=cpp, name=Lightning var Direction : TransmissionDirection # Object : cog read-only The changed net object. ``` lang=cpp, name=Lightning var Object : Cog # PropertyName : string read-only The changed net property. ``` lang=cpp, name=Lightning var PropertyName : String # ReplicationPhase : ReplicationPhase read-only The replication phase. ``` lang=cpp, name=Lightning var ReplicationPhase : ReplicationPhase # Timestamp : real read-only The time this change occurred. ``` lang=cpp, name=Lightning var Timestamp : Real # Methods","title":"Netchannelpropertychange"},{"location":"reference/class_reference/netchanneltype/","text":"Networking (NOTE) Network Channel Type. Configures the replication of a set of properties on the network. Methods Properties Base Classes Derived Classes ResetConfig AcceptIncomingChanges safeid32object SetConfig AccurateTimestampOnChange AllowNapping AllowRelay AuthorityDefault AuthorityMode AwakeDetectionInterval AwakeDuration DetectionMode DetectOutgoingChanges EventOnIncomingPropertyChange EventOnOutgoingPropertyChange Name NapDetectionInterval ReliabilityMode ReplicateOnOffline ReplicateOnOnline SerializationMode TransferMode # Properties # AcceptIncomingChanges : boolean Controls whether or not net channels should accept incoming changes. ``` lang=cpp, name=Lightning var AcceptIncomingChanges : Boolean # AccurateTimestampOnChange : boolean Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value. (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting) ``` lang=cpp, name=Lightning var AccurateTimestampOnChange : Boolean # AllowNapping : boolean Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while. ``` lang=cpp, name=Lightning var AllowNapping : Boolean # AllowRelay : boolean Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received. (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow) ``` lang=cpp, name=Lightning var AllowRelay : Boolean # AuthorityDefault : Authority Controls which peer has the authority to observe and replicate property changes on each net channel by default. (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time. The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client. However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client. ``` lang=cpp, name=Lightning var AuthorityDefault : Authority # AuthorityMode : AuthorityMode Controls when net channels can modify their change authority. (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var AuthorityMode : AuthorityMode # AwakeDetectionInterval : integer Controls the frame interval in which awake net channels are observed for changes. (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var AwakeDetectionInterval : Integer # AwakeDuration : integer Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake. ``` lang=cpp, name=Lightning var AwakeDuration : Integer # DetectionMode : DetectionMode Controls how net channel changes are detected. (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons) ``` lang=cpp, name=Lightning var DetectionMode : DetectionMode # DetectOutgoingChanges : boolean Controls whether or not net channels should detect outgoing changes. ``` lang=cpp, name=Lightning var DetectOutgoingChanges : Boolean # EventOnIncomingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted. ``` lang=cpp, name=Lightning var EventOnIncomingPropertyChange : Boolean # EventOnOutgoingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected. ``` lang=cpp, name=Lightning var EventOnOutgoingPropertyChange : Boolean # Name : string read-only Net channel type name. ``` lang=cpp, name=Lightning var Name : String # NapDetectionInterval : integer Controls the frame interval in which napping net channels are observed for changes. (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var NapDetectionInterval : Integer # ReliabilityMode : ReliabilityMode Controls whether or not net channel changes will be retransmitted should they get lost over the network. (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted) ``` lang=cpp, name=Lightning var ReliabilityMode : ReliabilityMode # ReplicateOnOffline : boolean Controls whether or not the net channel will be replicated when the net object goes offline. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event. (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var ReplicateOnOffline : Boolean # ReplicateOnOnline : boolean Controls whether or not the net channel will be replicated when the net object comes online. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event. (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var ReplicateOnOnline : Boolean # SerializationMode : SerializationMode Controls how net channels are serialized. (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var SerializationMode : SerializationMode # TransferMode : TransferMode Controls how net channel changes are to be ordered and released once received. (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) (Cannot be modified at game runtime) ``` lang=cpp, name=Lightning var TransferMode : TransferMode # Methods # ResetConfig : Void Resets all configuration settings. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ResetConfig() # SetConfig : Void Sets all configuration settings according to the specified NetChannelConfig resource. |Name|Type|Description| |---|---|---| |netChannelConfig| netchannelconfig | | lang=cpp, name=Lightning function SetConfig(netChannelConfig : NetChannelConfig)","title":"Netchanneltype"},{"location":"reference/class_reference/neteventreceived/","text":"Event Networking (NOTE) Dispatched before a received net event is dispatched. Methods Properties Base Classes Derived Classes Destination event NetEvent ReturnAllow TheirNetPeerId # Properties # Destination : cog read-only Dispatch destination object (null if the net object could not be found locally). ``` lang=cpp, name=Lightning var Destination : Cog # NetEvent : event read-only Network event received. ``` lang=cpp, name=Lightning var NetEvent : Event # ReturnAllow : boolean Return: Allow the received network event to be dispatched on the destination object? ``` lang=cpp, name=Lightning var ReturnAllow : Boolean # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # Methods","title":"Neteventreceived"},{"location":"reference/class_reference/neteventsent/","text":"Event Networking (NOTE) Dispatched after a dispatched net event is sent. Methods Properties Base Classes Derived Classes Destination event NetEvent TheirNetPeerId # Properties # Destination : cog read-only Dispatch destination object. ``` lang=cpp, name=Lightning var Destination : Cog # NetEvent : event read-only Network event sent. ``` lang=cpp, name=Lightning var NetEvent : Event # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # Methods","title":"Neteventsent"},{"location":"reference/class_reference/netgamestarted/","text":"Event Networking (NOTE) Dispatched after fully joining or hosting a network game. Methods Properties Base Classes Derived Classes GameSession event # Properties # GameSession : gamesession read-only Network game session. ``` lang=cpp, name=Lightning var GameSession : GameSession # Methods","title":"Netgamestarted"},{"location":"reference/class_reference/nethost/","text":"Networking (NOTE) Describes a network host. Methods Properties Base Classes Derived Classes BasicHostInfo safeid32 ExtraHostInfo IpAddress Latency Network RoundTripTime # Properties # BasicHostInfo : eventbundle read-only Basic host info (limited to 480 bytes). ``` lang=cpp, name=Lightning var BasicHostInfo : EventBundle # ExtraHostInfo : eventbundle read-only Extra host info. ``` lang=cpp, name=Lightning var ExtraHostInfo : EventBundle # IpAddress : ipaddress read-only Host's IP address. ``` lang=cpp, name=Lightning var IpAddress : IpAddress # Latency : integer read-only Returns the estimated latency ((RTT/2)) in milliseconds from our peer to this host. ``` lang=cpp, name=Lightning var Latency : Integer # Network : Network read-only Host's network residence. ``` lang=cpp, name=Lightning var Network : Network # RoundTripTime : integer read-only Returns the round-trip time (RTT) in milliseconds from our peer to this host. ``` lang=cpp, name=Lightning var RoundTripTime : Integer # Methods","title":"Nethost"},{"location":"reference/class_reference/nethostlistupdate/","text":"Event Networking (NOTE) Dispatched when a host discovery operation update occurs. Methods Properties Base Classes Derived Classes Network event # Properties # Network : Network read-only Operation target network. ``` lang=cpp, name=Lightning var Network : Network # Methods","title":"Nethostlistupdate"},{"location":"reference/class_reference/nethostrange/","text":"Networking Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : nethostrange read-only ``` lang=cpp, name=Lightning var All : NetHostRange # Current : nethost read-only ``` lang=cpp, name=Lightning var Current : NetHost # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # NetHostRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function NetHostRange() ``` # NetHostRange : Void constructor Name Type Description p0 nethostrange ``` lang=cpp, name=Lightning function NetHostRange(p0 : NetHostRange) ```","title":"Nethostrange"},{"location":"reference/class_reference/nethostrecord/","text":"Networking (NOTE) NetHostRecord. A record that contains the basic information of a game server. After a certain lifetime records expire on the master server. Methods Properties Base Classes Derived Classes BasicHostInfo safeid32 IpAddress Lifetime # Properties # BasicHostInfo : eventbundle read-only The info published along with their record. Contains game server specific data. ``` lang=cpp, name=Lightning var BasicHostInfo : EventBundle # IpAddress : ipaddress read-only The IpAddress associated with this record. This is who published it. ``` lang=cpp, name=Lightning var IpAddress : IpAddress # Lifetime : real read-only How long has this record been alive in seconds? ``` lang=cpp, name=Lightning var Lifetime : Real # Methods","title":"Nethostrecord"},{"location":"reference/class_reference/nethostrecordevent/","text":"Event Networking (NOTE) Dispatched when a NetHostRecord is discovered, Updated, or Expired. Methods Properties Base Classes Derived Classes HostRecord event # Properties # HostRecord : nethostrecord read-only Host discovered or refreshed (will contain the first host updated if this is a list update). ``` lang=cpp, name=Lightning var HostRecord : NetHostRecord # Methods","title":"Nethostrecordevent"},{"location":"reference/class_reference/nethostupdate/","text":"Event Networking (NOTE) Dispatched when a host discovery operation update occurs. Methods Properties Base Classes Derived Classes Host event Network RefreshResult ResponseTime # Properties # Host : nethost read-only Host discovered or refreshed (will contain the first host updated if this is a list update). ``` lang=cpp, name=Lightning var Host : NetHost # Network : Network read-only Operation target network. ``` lang=cpp, name=Lightning var Network : Network # RefreshResult : NetRefreshResult read-only Whether or not the operation completed successfully. ``` lang=cpp, name=Lightning var RefreshResult : NetRefreshResult # ResponseTime : real read-only Operation response time (from request to completion). ``` lang=cpp, name=Lightning var ResponseTime : Real # Methods","title":"Nethostupdate"},{"location":"reference/class_reference/netlevelstarted/","text":"Event Networking (NOTE) Dispatched after fully loading and synchronizing a level in a net space. Methods Properties Base Classes Derived Classes GameSession event LevelName Space # Properties # GameSession : gamesession read-only Network game session. ``` lang=cpp, name=Lightning var GameSession : GameSession # LevelName : string read-only Current level name. ``` lang=cpp, name=Lightning var LevelName : String # Space : space read-only Network space. ``` lang=cpp, name=Lightning var Space : Space # Methods","title":"Netlevelstarted"},{"location":"reference/class_reference/netlinkconnected/","text":"Event Networking (NOTE) Dispatched after sending or receiving a connect confirmation. Methods Properties Base Classes Derived Classes Direction event TheirIpAddress TheirNetPeerId # Properties # Direction : TransmissionDirection read-only Transmission direction. ``` lang=cpp, name=Lightning var Direction : TransmissionDirection # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # Methods","title":"Netlinkconnected"},{"location":"reference/class_reference/netlinkdisconnected/","text":"Event Networking (NOTE) Dispatched after sending or receiving a disconnect notice. Their net peer ID is released and link is destroyed immediately after this. Methods Properties Base Classes Derived Classes Direction event DisconnectReason RequestBundle TheirIpAddress TheirNetPeerId # Properties # Direction : TransmissionDirection read-only Transmission direction. ``` lang=cpp, name=Lightning var Direction : TransmissionDirection # DisconnectReason : DisconnectReason read-only Disconnect reason. ``` lang=cpp, name=Lightning var DisconnectReason : DisconnectReason # RequestBundle : eventbundle read-only Bundled request event data. ``` lang=cpp, name=Lightning var RequestBundle : EventBundle # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # Methods","title":"Netlinkdisconnected"},{"location":"reference/class_reference/netobject/","text":"Component Networking (NOTE) Network Object. Manages the replication of a single object on the network. Methods Properties Base Classes Derived Classes DispatchBroadcast AcceptIncomingChanges component netpeer DispatchLocal AccurateTimestampOnChange netspace DispatchLocalAndBroadcast AccurateTimestampOnOffline netuser DispatchLocalAndRemote AccurateTimestampOnOnline DispatchRemote AllowNapping Forget AutomaticChannel GetNetChannel DetectOutgoingChanges HasNetChannel IsClient IsOwnedByPeer IsClientAndMine IsOwnedByUser IsClientButNotMine Constructor IsClientOrOffline ReplicateNow IsClientOrServer SelectRemote IsMine SetNetUserOwnerDown IsNapping SetNetUserOwnerUp IsNotMine TakeNap IsNotOwnedByAUser WakeUp IsOffline IsOfflineAndMine IsOfflineButNotMine IsOnline IsOwnedByAUser IsServer IsServerAndMine IsServerButNotMine IsServerOrOffline LastChangeTimePassed LastChangeTimestamp NetObjectId NetPropertyInfos NetUserOwner NetUserOwnerPath NetUserOwnerPeerId NetUserOwnerUserId OfflineTimePassed OfflineTimestamp OnlineTimePassed OnlineTimestamp Role # Properties # AcceptIncomingChanges : boolean Controls whether or not net channels on this net object may accept incoming changes. ``` lang=cpp, name=Lightning var AcceptIncomingChanges : Boolean # AccurateTimestampOnChange : boolean Controls whether or not the net object will serialize an accurate timestamp value when changed (on any net channel), or will instead accept an estimated timestamp value. (Enabling this will override the corresponding net channel type setting for all net channels added to this net object) ``` lang=cpp, name=Lightning var AccurateTimestampOnChange : Boolean # AccurateTimestampOnOffline : boolean Controls whether or not the net object will serialize an accurate timestamp value when taken offline, or will instead accept an estimated timestamp value. ``` lang=cpp, name=Lightning var AccurateTimestampOnOffline : Boolean # AccurateTimestampOnOnline : boolean Controls whether or not the net object will serialize an accurate timestamp value when brought online, or will instead accept an estimated timestamp value. ``` lang=cpp, name=Lightning var AccurateTimestampOnOnline : Boolean # AllowNapping : boolean Controls whether or not net channels on this net object may nap (perform change detection on longer intervals) if they haven't changed in a while. ``` lang=cpp, name=Lightning var AllowNapping : Boolean # AutomaticChannel : netchannelconfig Returns the automatic net channel configuration resource (assigned to net properties unless another channel is specified). ``` lang=cpp, name=Lightning var AutomaticChannel : NetChannelConfig # DetectOutgoingChanges : boolean Controls whether or not net channels on this net object may detect outgoing changes. ``` lang=cpp, name=Lightning var DetectOutgoingChanges : Boolean # IsClient : boolean read-only Returns true if our open peer's network role is client, else false. ``` lang=cpp, name=Lightning var IsClient : Boolean # IsClientAndMine : boolean read-only Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsClientAndMine : Boolean # IsClientButNotMine : boolean read-only Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsClientButNotMine : Boolean # IsClientOrOffline : boolean read-only Returns true if our open peer's network role is client or offline, else false. ``` lang=cpp, name=Lightning var IsClientOrOffline : Boolean # IsClientOrServer : boolean read-only Returns true if our open peer's network role is client or server, else false. ``` lang=cpp, name=Lightning var IsClientOrServer : Boolean # IsMine : boolean read-only Returns true if the net object is conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsMine : Boolean # IsNapping : boolean read-only Returns true if all net channels on this net object are napping (performing change detection on longer intervals), else false. ``` lang=cpp, name=Lightning var IsNapping : Boolean # IsNotMine : boolean read-only Returns true if the net object is not conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsNotMine : Boolean # IsNotOwnedByAUser : boolean read-only Returns true if the net object is not conceptually owned by a user, else false. ``` lang=cpp, name=Lightning var IsNotOwnedByAUser : Boolean # IsOffline : boolean read-only Returns true if our open peer's network role is offline, else false. ``` lang=cpp, name=Lightning var IsOffline : Boolean # IsOfflineAndMine : boolean read-only Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsOfflineAndMine : Boolean # IsOfflineButNotMine : boolean read-only Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsOfflineButNotMine : Boolean # IsOnline : boolean read-only Returns true if the net object is online, else false. ``` lang=cpp, name=Lightning var IsOnline : Boolean # IsOwnedByAUser : boolean read-only Returns true if the net object is conceptually owned by a user, else false. ``` lang=cpp, name=Lightning var IsOwnedByAUser : Boolean # IsServer : boolean read-only Returns true if our open peer's network role is server, else false. ``` lang=cpp, name=Lightning var IsServer : Boolean # IsServerAndMine : boolean read-only Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsServerAndMine : Boolean # IsServerButNotMine : boolean read-only Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false. ``` lang=cpp, name=Lightning var IsServerButNotMine : Boolean # IsServerOrOffline : boolean read-only Returns true if our open peer's network role is server or offline, else false. ``` lang=cpp, name=Lightning var IsServerOrOffline : Boolean # LastChangeTimePassed : real read-only Elapsed time passed since this net object was last changed, else 0. ``` lang=cpp, name=Lightning var LastChangeTimePassed : Real # LastChangeTimestamp : real read-only Timestamp indicating when this net object was last changed, else 0. ``` lang=cpp, name=Lightning var LastChangeTimestamp : Real # NetObjectId : integer read-only Returns the net object ID (set if the net object is live), else 0. ``` lang=cpp, name=Lightning var NetObjectId : Integer # NetPropertyInfos : netpropertyinfos Net property infos added through the property grid. ``` lang=cpp, name=Lightning var NetPropertyInfos : NetPropertyInfos # NetUserOwner : cog Returns the network user this object conceptually belongs to, else nullptr. ``` lang=cpp, name=Lightning var NetUserOwner : Cog # NetUserOwnerPath : cogpath read-only Path to the network user this object conceptually belongs to, else empty cog path. ``` lang=cpp, name=Lightning var NetUserOwnerPath : CogPath # NetUserOwnerPeerId : integer read-only Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0. ``` lang=cpp, name=Lightning var NetUserOwnerPeerId : Integer # NetUserOwnerUserId : integer read-only Returns the network user identifier of the user this object conceptually belongs to, else 0. ``` lang=cpp, name=Lightning var NetUserOwnerUserId : Integer # OfflineTimePassed : real read-only Elapsed time passed since this net object was taken offline, else 0. ``` lang=cpp, name=Lightning var OfflineTimePassed : Real # OfflineTimestamp : real read-only Timestamp indicating when this net object was taken offline, else 0. ``` lang=cpp, name=Lightning var OfflineTimestamp : Real # OnlineTimePassed : real read-only Elapsed time passed since this net object was brought online, else 0. ``` lang=cpp, name=Lightning var OnlineTimePassed : Real # OnlineTimestamp : real read-only Timestamp indicating when this net object was brought online, else 0. ``` lang=cpp, name=Lightning var OnlineTimestamp : Real # Role : NetRole read-only Returns our open peer's network role (client, server, offline), else Role::Unspecified. ``` lang=cpp, name=Lightning var Role : NetRole # Methods # DispatchBroadcast : Void Dispatches the net event on the net object for all remote peers. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | lang=cpp, name=Lightning function DispatchBroadcast(eventId : String, event : Event) # DispatchLocal : Void Dispatches the net event on the net object for the local peer. |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | lang=cpp, name=Lightning function DispatchLocal(eventId : String, event : Event) # DispatchLocalAndBroadcast : Void Dispatches the net event on the net object for the local peer and for all remote peers. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | lang=cpp, name=Lightning function DispatchLocalAndBroadcast(eventId : String, event : Event) # DispatchLocalAndRemote : Void Dispatches the net event on the net object for the local peer and for the remote peer. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | |netPeerId| integer | | lang=cpp, name=Lightning function DispatchLocalAndRemote(eventId : String, event : Event, netPeerId : Integer) # DispatchRemote : Void Dispatches the net event on the net object for the remote peer. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId| string | | |event| event | | |netPeerId| integer | | lang=cpp, name=Lightning function DispatchRemote(eventId : String, event : Event, netPeerId : Integer) # Forget : boolean [Client] Forgets the online net object locally. [Server] Forgets the online net object locally and remotely for all relevant peers. Effectively removes the net object from the network system without destroying it. Returns true if successful, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Forget() : Boolean # GetNetChannel : netchannel [Client/Server] Returns the specified net channel, else nullptr. |Name|Type|Description| |---|---|---| |netChannelName| string | | lang=cpp, name=Lightning function GetNetChannel(netChannelName : String) : NetChannel # HasNetChannel : boolean [Client/Server] Returns true if the net object has the specified net channel, else false. |Name|Type|Description| |---|---|---| |netChannelName| string | | lang=cpp, name=Lightning function HasNetChannel(netChannelName : String) : Boolean # IsOwnedByPeer : boolean Returns true if the net object is conceptually owned by a user added by the specified peer, else false. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function IsOwnedByPeer(netPeerId : Integer) : Boolean # IsOwnedByUser : boolean Returns true if the net object is conceptually owned by the specified user, else false. |Name|Type|Description| |---|---|---| |cog| cog | | lang=cpp, name=Lightning function IsOwnedByUser(cog : Cog) : Boolean # NetObject : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function NetObject() # ReplicateNow : boolean [Client/Server] Replicates all net channels' property changes immediately (only where changes are detected). Will also update nap state as configured. Returns true if changes were replicated, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ReplicateNow() : Boolean # SelectRemote : boolean [Client/Server] Selects the remote net object on the first opposite-role peer found running in another game session instance on the engine. Will fail if the net object is not online, or not found remotely. Returns true if successful, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function SelectRemote() : Boolean # SetNetUserOwnerDown : Void [Server/Offline] Sets the owning network user on this object and down the tree on all children recursively (pre-order traversal). |Name|Type|Description| |---|---|---| |cog| cog | | lang=cpp, name=Lightning function SetNetUserOwnerDown(cog : Cog) # SetNetUserOwnerUp : Void [Server/Offline] Sets the owning network user on this object and up the tree on each parent recursively (pre-order traversal). |Name|Type|Description| |---|---|---| |cog| cog | | lang=cpp, name=Lightning function SetNetUserOwnerUp(cog : Cog) # TakeNap : Void Forces all net channels on this net object to start napping immediately. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TakeNap() # WakeUp : Void Forces all net channels on this net object to stop napping immediately. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function WakeUp()","title":"Netobject"},{"location":"reference/class_reference/netobjectoffline/","text":"Event Networking (NOTE) Dispatched before the net object is taken offline. Methods Properties Base Classes Derived Classes GameSession event IsEndOfLifespan Object Space # Properties # GameSession : gamesession read-only Network game session. ``` lang=cpp, name=Lightning var GameSession : GameSession # IsEndOfLifespan : boolean read-only Is this the end of the object's lifespan? ``` lang=cpp, name=Lightning var IsEndOfLifespan : Boolean # Object : cog read-only Network object. ``` lang=cpp, name=Lightning var Object : Cog # Space : space read-only Network space. ``` lang=cpp, name=Lightning var Space : Space # Methods","title":"Netobjectoffline"},{"location":"reference/class_reference/netobjectonline/","text":"Event Networking (NOTE) Dispatched after the net object is brought online. Methods Properties Base Classes Derived Classes GameSession event IsStartOfLifespan Object Space # Properties # GameSession : gamesession read-only Network game session. ``` lang=cpp, name=Lightning var GameSession : GameSession # IsStartOfLifespan : boolean read-only Is this the start of the object's lifespan? ``` lang=cpp, name=Lightning var IsStartOfLifespan : Boolean # Object : cog read-only Network object. ``` lang=cpp, name=Lightning var Object : Cog # Space : space read-only Network space. ``` lang=cpp, name=Lightning var Space : Space # Methods","title":"Netobjectonline"},{"location":"reference/class_reference/netpeer/","text":"Component Networking (NOTE) Network Peer. Acts as a host on the network. Manages network object state and event replication. Methods Properties Base Classes Derived Classes AddUser BasicHostInfoTimeout netobject CancelHostRequests ExtraHostInfoTimeout ClearHostList FrameFillSkip ClearHostLists FrameFillWarning Close HostPingInterval ConnectLink HostPortRangeEnd DisconnectAllLinks HostPortRangeStart DisconnectLink Info DiscoverHostList InternetDiscoverable GetHostByAddress InternetHostListTimeout GetHostByIndex InternetHostPublishInterval GetHostList InternetHostRecordLifetime GetLinkCreationDirection InternetSameIpHostRecordLimit GetLinkInternetProtocol Ipv4Address GetLinkIpAddress Ipv4Host GetLinkNetPeerId Ipv4Port GetLinkState IsOpen GetLinkStatus LanDiscoverable GetNetObject LinkCount GetNetSpace NetObjectCount GetOurIpAddressFromLink NetPeerId GetUser NetSpaceCount GetUsersAddedByPeer NetUserCount Constructor UserCount Open Users OpenClient UsersAddedByMyPeer OpenOffline OpenServer RefreshHost RefreshHostList RemoveUser SubscribeToMasterServer UnsubscribeFromMasterServer # Properties # BasicHostInfoTimeout : real [Client/Server] Determines the amount of time the client is willing to wait for. ``` lang=cpp, name=Lightning var BasicHostInfoTimeout : Real # ExtraHostInfoTimeout : real [Client/Server] Determines the amount of time the client will wait for extra host info from a server. ``` lang=cpp, name=Lightning var ExtraHostInfoTimeout : Real # FrameFillSkip : real Controls when to skip change replication for the current frame because of remaining outgoing bandwidth utilization ratio on any given link. ``` lang=cpp, name=Lightning var FrameFillSkip : Real # FrameFillWarning : real Controls when the user will be warned of their current frame's outgoing bandwidth utilization ratio on any given link. ``` lang=cpp, name=Lightning var FrameFillWarning : Real # HostPingInterval : real [Client/Server] The time between (potentially) redundant pings from a net peer. ``` lang=cpp, name=Lightning var HostPingInterval : Real # HostPortRangeEnd : integer Configures the inclusive range of ports used to host this game. ``` lang=cpp, name=Lightning var HostPortRangeEnd : Integer # HostPortRangeStart : integer Configures the inclusive range of ports used to host this game. ``` lang=cpp, name=Lightning var HostPortRangeStart : Integer # Info : string read-only Current peer identifier information display string. Provided for logging and debugging convenience. Contains the peer's local IP address, network role, and net peer ID. ``` lang=cpp, name=Lightning var Info : String # InternetDiscoverable : boolean Configures the server peer to be discoverable on the internet. ``` lang=cpp, name=Lightning var InternetDiscoverable : Boolean # InternetHostListTimeout : real [Client/Server] Determines the amount of time the client is willing to wait to get a host list from master server. ``` lang=cpp, name=Lightning var InternetHostListTimeout : Real # InternetHostPublishInterval : real Controls how often the internet discoverable peer sends a host record message to its master server subscriptions. ``` lang=cpp, name=Lightning var InternetHostPublishInterval : Real # InternetHostRecordLifetime : real Controls the lifetime of every host record stored on the master server. ``` lang=cpp, name=Lightning var InternetHostRecordLifetime : Real # InternetSameIpHostRecordLimit : integer Controls how many host records from the same IP address may be stored on the master server (used to prevent flood attacks). ``` lang=cpp, name=Lightning var InternetSameIpHostRecordLimit : Integer # Ipv4Address : ipaddress read-only Returns the peer's local IPv4 address, else IpAddress(). Set if the peer is open with an IPv4 socket. ``` lang=cpp, name=Lightning var Ipv4Address : IpAddress # Ipv4Host : string read-only Returns the peer's local IPv4 address host as a numeric address string, else String(). ``` lang=cpp, name=Lightning var Ipv4Host : String # Ipv4Port : integer read-only Returns the peer's local IPv4 address port, else String(). ``` lang=cpp, name=Lightning var Ipv4Port : Integer # IsOpen : boolean read-only Returns true if the peer is open, else false. ``` lang=cpp, name=Lightning var IsOpen : Boolean # LanDiscoverable : boolean Configures the server peer to be discoverable on the local area network. ``` lang=cpp, name=Lightning var LanDiscoverable : Boolean # LinkCount : integer read-only [Client/Server] Returns the number of connected network links managed by this peer. ``` lang=cpp, name=Lightning var LinkCount : Integer # NetObjectCount : integer read-only Returns the number of net objects in this game session (but not including the net peer itself). ``` lang=cpp, name=Lightning var NetObjectCount : Integer # NetPeerId : integer read-only Returns the open peer's unique network identifier, else 0. [Server/Offline] This will always be plasma. [Client] This will be non-plasma once connected to a server, else plasma. ``` lang=cpp, name=Lightning var NetPeerId : Integer # NetSpaceCount : integer read-only Returns the number of net spaces in this game session. ``` lang=cpp, name=Lightning var NetSpaceCount : Integer # NetUserCount : integer read-only Returns the number of net users in this game session. ``` lang=cpp, name=Lightning var NetUserCount : Integer # UserCount : integer read-only Returns the number of added network users. ``` lang=cpp, name=Lightning var UserCount : Integer # Users : netuserrange read-only Returns all added network users. ``` lang=cpp, name=Lightning var Users : NetUserRange # UsersAddedByMyPeer : netuserrange read-only Returns the network users added by our local peer. ``` lang=cpp, name=Lightning var UsersAddedByMyPeer : NetUserRange # Methods # AddUser : boolean Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame). Listen to the NetUser event interface to handle the results. Returns true if the request was successfully initiated, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function AddUser() : Boolean # AddUser : boolean Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame). Listen to the NetUser event interface to handle the results. Returns true if the request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |requestEvent| event | | lang=cpp, name=Lightning function AddUser(requestEvent : Event) : Boolean # AddUser : boolean Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame). Listen to the NetUser event interface to handle the results. Returns true if the request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |requestBundle| eventbundle | | lang=cpp, name=Lightning function AddUser(requestBundle : EventBundle) : Boolean # CancelHostRequests : Void Cancels all host discovery and refresh requests currently in progress (the operations will be considered unsuccessful). Listen to the NetHost event interface to handle the results. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CancelHostRequests() # ClearHostList : Void Clears the given network's host list. |Name|Type|Description| |---|---|---| |network| Network | | lang=cpp, name=Lightning function ClearHostList(network : Network) # ClearHostLists : Void Name Type Description ``` lang=cpp, name=Lightning function ClearHostLists() ``` # Close : Void Closes the peer (safe to call multiple times). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Close() # ConnectLink : boolean [Client] Initiates a connect attempt with the remote peer (delayed until end of frame). Listen to the NetLink event interface to handle the results. Returns true if a connect request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | lang=cpp, name=Lightning function ConnectLink(ipAddress : IpAddress) : Boolean # ConnectLink : boolean [Client] Initiates a connect attempt with the remote peer (delayed until end of frame). Listen to the NetLink event interface to handle the results. Returns true if a connect request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | |requestEvent| event | | lang=cpp, name=Lightning function ConnectLink(ipAddress : IpAddress, requestEvent : Event) : Boolean # ConnectLink : boolean [Client] Initiates a connect attempt with the remote peer (delayed until end of frame). Listen to the NetLink event interface to handle the results. Returns true if a connect request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | |requestBundle| eventbundle | | lang=cpp, name=Lightning function ConnectLink(ipAddress : IpAddress, requestBundle : EventBundle) : Boolean # DisconnectAllLinks : integer [Client/Server] Disconnects by request from all remote peers. Listen to the NetLink event interface to handle the results. Returns the number of links disconnected. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DisconnectAllLinks() : Integer # DisconnectAllLinks : integer [Client/Server] Disconnects by request from all remote peers. Listen to the NetLink event interface to handle the results. Returns the number of links disconnected. |Name|Type|Description| |---|---|---| |requestEvent| event | | lang=cpp, name=Lightning function DisconnectAllLinks(requestEvent : Event) : Integer # DisconnectAllLinks : integer [Client/Server] Disconnects by request from all remote peers. Listen to the NetLink event interface to handle the results. Returns the number of links disconnected. |Name|Type|Description| |---|---|---| |requestBundle| eventbundle | | lang=cpp, name=Lightning function DisconnectAllLinks(requestBundle : EventBundle) : Integer # DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function DisconnectLink(netPeerId : Integer) : Boolean # DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |netPeerId| integer | | |requestEvent| event | | lang=cpp, name=Lightning function DisconnectLink(netPeerId : Integer, requestEvent : Event) : Boolean # DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |netPeerId| integer | | |requestBundle| eventbundle | | lang=cpp, name=Lightning function DisconnectLink(netPeerId : Integer, requestBundle : EventBundle) : Boolean # DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | lang=cpp, name=Lightning function DisconnectLink(ipAddress : IpAddress) : Boolean # DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | |requestEvent| event | | lang=cpp, name=Lightning function DisconnectLink(ipAddress : IpAddress, requestEvent : Event) : Boolean # DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | |requestBundle| eventbundle | | lang=cpp, name=Lightning function DisconnectLink(ipAddress : IpAddress, requestBundle : EventBundle) : Boolean # DiscoverHostList : boolean Discovers the given network's host list. Listen to the NetHost event interface to handle the results. Returns true if the discovery was successfully started, else false. |Name|Type|Description| |---|---|---| |network| Network | | |removeStaleHosts| boolean | | lang=cpp, name=Lightning function DiscoverHostList(network : Network, removeStaleHosts : Boolean) : Boolean # GetHostByAddress : nethost Name Type Description ipAddress ipaddress ``` lang=cpp, name=Lightning function GetHostByAddress(ipAddress : IpAddress) : NetHost ``` # GetHostByAddress : nethost Name Type Description network Network ipAddress ipaddress ``` lang=cpp, name=Lightning function GetHostByAddress(network : Network, ipAddress : IpAddress) : NetHost ``` # GetHostByIndex : nethost Returns the first equivalent host found in the given network's host list, else nullptr. |Name|Type|Description| |---|---|---| |network| Network | | |index| integer | | lang=cpp, name=Lightning function GetHostByIndex(network : Network, index : Integer) : NetHost # GetHostList : nethostrange Returns the given network's host list. |Name|Type|Description| |---|---|---| |network| Network | | lang=cpp, name=Lightning function GetHostList(network : Network) : NetHostRange # GetLinkCreationDirection : TransmissionDirection [Client/Server] Returns the direction in which the link was created (which peer initiated the connection), else TransmissionDirection::Unspecified. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetLinkCreationDirection(netPeerId : Integer) : TransmissionDirection # GetLinkInternetProtocol : InternetProtocol [Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified. This IP address protocol will never change for the lifetime of this link. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetLinkInternetProtocol(netPeerId : Integer) : InternetProtocol # GetLinkIpAddress : ipaddress [Client/Server] Returns the remote peer's IP address (as seen from our perspective), else IpAddress(). For outgoing links this is the same IP address specified in our connect call. This IP address will never change for the lifetime of this link. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetLinkIpAddress(netPeerId : Integer) : IpAddress # GetLinkNetPeerId : integer Returns the remote peer's unique network identifier, else 0. [Server] This will be non-plasma if the client is connected, else plasma. [Client] This will always be plasma. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | lang=cpp, name=Lightning function GetLinkNetPeerId(ipAddress : IpAddress) : Integer # GetLinkState : LinkState [Client/Server] Returns the link's specific state, else LinkState::Unspecified. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetLinkState(netPeerId : Integer) : LinkState # GetLinkStatus : LinkStatus [Client/Server] Returns the link's overall status, else LinkStatus::Unspecified. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetLinkStatus(netPeerId : Integer) : LinkStatus # GetNetObject : cog Returns the live net object specified if it is known locally, else nullptr. |Name|Type|Description| |---|---|---| |netObjectId| integer | | lang=cpp, name=Lightning function GetNetObject(netObjectId : Integer) : Cog # GetNetSpace : space Returns the live net space specified if it is known locally, else nullptr. |Name|Type|Description| |---|---|---| |netObjectId| integer | | lang=cpp, name=Lightning function GetNetSpace(netObjectId : Integer) : Space # GetOurIpAddressFromLink : ipaddress [Client/Server] Returns our peer's IP address (as seen from their perspective), else IpAddress(). For incoming links this is the same IP address specified in their connect call. (Available if the link is connected or incoming and attempting connection) It is absolutely possible that this does not match our local IP address. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetOurIpAddressFromLink(netPeerId : Integer) : IpAddress # GetUser : cog Returns the specified network user, else nullptr. |Name|Type|Description| |---|---|---| |netUserId| integer | | lang=cpp, name=Lightning function GetUser(netUserId : Integer) : Cog # GetUsersAddedByPeer : netuserrange Returns the network users added by the specified peer. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function GetUsersAddedByPeer(netPeerId : Integer) : NetUserRange # NetPeer : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function NetPeer() # Open : boolean Opens the peer with the specified network role on any available port. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |role| NetRole | | lang=cpp, name=Lightning function Open(role : NetRole) : Boolean # Open : boolean Opens the peer with the specified network role and port settings. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |role| NetRole | | |port| integer | | lang=cpp, name=Lightning function Open(role : NetRole, port : Integer) : Boolean # Open : boolean Opens the peer with the specified network role, port, and retry settings. For the given number of retries, if binding is unsuccessful, the port number is incremented and binding is attempted again. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |role| NetRole | | |port| integer | | |retries| integer | | lang=cpp, name=Lightning function Open(role : NetRole, port : Integer, retries : Integer) : Boolean # OpenClient : boolean Opens the peer as a client on any available port. Returns true if successful, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function OpenClient() : Boolean # OpenClient : boolean Opens the peer as a client with the specified network port. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |port| integer | | lang=cpp, name=Lightning function OpenClient(port : Integer) : Boolean # OpenClient : boolean Opens the peer as a client with the specified network port and retry settings. For the given number of retries, if binding is unsuccessful, the port number is incremented and binding is attempted again. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |port| integer | | |retries| integer | | lang=cpp, name=Lightning function OpenClient(port : Integer, retries : Integer) : Boolean # OpenOffline : boolean Opens the peer in offline mode. In offline mode, the peer will act as a pass-through and simulate all applicable network events locally. Always succeeds and returns true. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function OpenOffline() : Boolean # OpenServer : boolean Opens the peer as a server on any available port. Returns true if successful, else false. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function OpenServer() : Boolean # OpenServer : boolean Opens the peer as a server with the specified network port. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |port| integer | | lang=cpp, name=Lightning function OpenServer(port : Integer) : Boolean # RefreshHost : boolean Refreshes the specified host in the given network's host list. Allowing discovery will enable the host to be discovered if it is not an already known host. Listen to the NetHost event interface to handle the results. Returns true if the host was found and the refresh successfully started, else false (the host could not be found). |Name|Type|Description| |---|---|---| |network| Network | | |ipAddress| ipaddress | | |getExtraHostInfo| boolean | | |allowDiscovery| boolean | | |removeStaleHosts| boolean | | lang=cpp, name=Lightning function RefreshHost(network : Network, ipAddress : IpAddress, getExtraHostInfo : Boolean, allowDiscovery : Boolean, removeStaleHosts : Boolean) : Boolean # RefreshHostList : boolean Refreshes all hosts in the given network's host list. Allowing discovery will enable new hosts to be discovered in the process of refreshing. Listen to the NetHost event interface to handle the results. Returns true if the refresh was successfully started, else false. |Name|Type|Description| |---|---|---| |network| Network | | |getExtraHostInfo| boolean | | |allowDiscovery| boolean | | |removeStaleHosts| boolean | | lang=cpp, name=Lightning function RefreshHostList(network : Network, getExtraHostInfo : Boolean, allowDiscovery : Boolean, removeStaleHosts : Boolean) : Boolean # RemoveUser : boolean Name Type Description cog cog ``` lang=cpp, name=Lightning function RemoveUser(cog : Cog) : Boolean ``` # RemoveUser : boolean Name Type Description cog cog requestEvent event ``` lang=cpp, name=Lightning function RemoveUser(cog : Cog, requestEvent : Event) : Boolean ``` # RemoveUser : boolean Name Type Description cog cog requestBundle eventbundle ``` lang=cpp, name=Lightning function RemoveUser(cog : Cog, requestBundle : EventBundle) : Boolean ``` # SubscribeToMasterServer : Void Subscribes to the master server located at the specified IP address. All internet host discovery, record publishing, connection facilitation (NAT punch-through) requests are performed on these master server subscriptions in the order they were subscribed. |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | lang=cpp, name=Lightning function SubscribeToMasterServer(ipAddress : IpAddress) # UnsubscribeFromMasterServer : Void Unsubscribes from the master server located at the specified IP address (if subscribed). |Name|Type|Description| |---|---|---| |ipAddress| ipaddress | | lang=cpp, name=Lightning function UnsubscribeFromMasterServer(ipAddress : IpAddress)","title":"Netpeer"},{"location":"reference/class_reference/netpeerclosed/","text":"Event Networking (NOTE) Dispatched before gracefully closing the net peer. Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Netpeerclosed"},{"location":"reference/class_reference/netpeeropened/","text":"Event Networking (NOTE) Dispatched after successfully opening the net peer. Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Netpeeropened"},{"location":"reference/class_reference/netpeerreceivedconnectrequest/","text":"Event Networking (NOTE) Dispatched after receiving a connect request. If accepted, their net peer ID is assigned immediately after this. Return true to accept the connect request, else false. Methods Properties Base Classes Derived Classes OurIpAddress event ReturnOurConnectResponse ReturnOurResponseBundle TheirIpAddress TheirPendingUserAddRequestCount TheirRequestBundle # Properties # OurIpAddress : ipaddress read-only Our IP address (as seen from their perspective). ``` lang=cpp, name=Lightning var OurIpAddress : IpAddress # ReturnOurConnectResponse : boolean Return: Our connect response (accept the connect request?). ``` lang=cpp, name=Lightning var ReturnOurConnectResponse : Boolean # ReturnOurResponseBundle : eventbundle Return: Our bundled response event data. ``` lang=cpp, name=Lightning var ReturnOurResponseBundle : EventBundle # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirPendingUserAddRequestCount : integer read-only Their pending user add requests following this connect request (within the same frame). ``` lang=cpp, name=Lightning var TheirPendingUserAddRequestCount : Integer # TheirRequestBundle : eventbundle read-only Their bundled request event data. ``` lang=cpp, name=Lightning var TheirRequestBundle : EventBundle # Methods","title":"Netpeerreceivedconnectrequest"},{"location":"reference/class_reference/netpeerreceivedconnectresponse/","text":"Event Networking (NOTE) Dispatched after receiving a connect response. If accepted, our net peer ID is set immediately before this and a connect confirmation is sent after this. If denied, our net peer ID is cleared and link is destroyed immediately after this. Methods Properties Base Classes Derived Classes OurIpAddress event OurNetPeerId OurPendingUserAddRequestCount OurRequestBundle TheirConnectResponse TheirIpAddress TheirResponseBundle # Properties # OurIpAddress : ipaddress read-only Our IP address (as seen from their perspective). ``` lang=cpp, name=Lightning var OurIpAddress : IpAddress # OurNetPeerId : integer read-only Our net peer ID (set only if accepted). ``` lang=cpp, name=Lightning var OurNetPeerId : Integer # OurPendingUserAddRequestCount : integer read-only Our pending user add requests following this connect request (within the same frame). ``` lang=cpp, name=Lightning var OurPendingUserAddRequestCount : Integer # OurRequestBundle : eventbundle read-only Our bundled request event data. ``` lang=cpp, name=Lightning var OurRequestBundle : EventBundle # TheirConnectResponse : ConnectResponse read-only Their connect response. ``` lang=cpp, name=Lightning var TheirConnectResponse : ConnectResponse # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirResponseBundle : eventbundle read-only Their bundled response event data. ``` lang=cpp, name=Lightning var TheirResponseBundle : EventBundle # Methods","title":"Netpeerreceivedconnectresponse"},{"location":"reference/class_reference/netpeerreceiveduseraddrequest/","text":"Event Networking (NOTE) Dispatched after receiving a net user add request. Methods Properties Base Classes Derived Classes ReturnOurAddResponse event ReturnOurResponseBundle ReturnTheirNetUser TheirIpAddress TheirNetPeerId TheirNetUserId TheirRequestBundle # Properties # ReturnOurAddResponse : boolean Return: Our add response (accept the add request?). ``` lang=cpp, name=Lightning var ReturnOurAddResponse : Boolean # ReturnOurResponseBundle : eventbundle Return: Our bundled response event data. ``` lang=cpp, name=Lightning var ReturnOurResponseBundle : EventBundle # ReturnTheirNetUser : cog Return: Their network user object (must have a NetUser component). ``` lang=cpp, name=Lightning var ReturnTheirNetUser : Cog # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # TheirNetUserId : integer read-only Their net user ID (released back to the store if not accepted). ``` lang=cpp, name=Lightning var TheirNetUserId : Integer # TheirRequestBundle : eventbundle read-only Their bundled request event data. ``` lang=cpp, name=Lightning var TheirRequestBundle : EventBundle # Methods","title":"Netpeerreceiveduseraddrequest"},{"location":"reference/class_reference/netpeerreceiveduseraddresponse/","text":"Event Networking (NOTE) Dispatched after receiving a net user add response. Methods Properties Base Classes Derived Classes OurNetUserId event OurRequestBundle TheirAddResponse TheirIpAddress TheirNetPeerId TheirResponseBundle # Properties # OurNetUserId : integer read-only Our net user ID (set only if accepted). ``` lang=cpp, name=Lightning var OurNetUserId : Integer # OurRequestBundle : eventbundle read-only Our bundled request event data. ``` lang=cpp, name=Lightning var OurRequestBundle : EventBundle # TheirAddResponse : NetUserAddResponse read-only Their add response. ``` lang=cpp, name=Lightning var TheirAddResponse : NetUserAddResponse # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # TheirResponseBundle : eventbundle read-only Their bundled response event data. ``` lang=cpp, name=Lightning var TheirResponseBundle : EventBundle # Methods","title":"Netpeerreceiveduseraddresponse"},{"location":"reference/class_reference/netpeersentconnectrequest/","text":"Event Networking (NOTE) Dispatched after sending a connect request. Methods Properties Base Classes Derived Classes OurPendingUserAddRequestCount event OurRequestBundle TheirIpAddress # Properties # OurPendingUserAddRequestCount : integer read-only Our pending user add requests following this connect request (within the same frame). ``` lang=cpp, name=Lightning var OurPendingUserAddRequestCount : Integer # OurRequestBundle : eventbundle read-only Our bundled request event data. ``` lang=cpp, name=Lightning var OurRequestBundle : EventBundle # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # Methods","title":"Netpeersentconnectrequest"},{"location":"reference/class_reference/netpeersentconnectresponse/","text":"Event Networking (NOTE) Dispatched after sending a connect response. If denied, their net peer ID is released and link is destroyed immediately after this. Methods Properties Base Classes Derived Classes OurConnectResponse event OurIpAddress OurResponseBundle TheirIpAddress TheirNetPeerId TheirPendingUserAddRequestCount TheirRequestBundle # Properties # OurConnectResponse : ConnectResponse read-only Our connect response. ``` lang=cpp, name=Lightning var OurConnectResponse : ConnectResponse # OurIpAddress : ipaddress read-only Our IP address (as seen from their perspective). ``` lang=cpp, name=Lightning var OurIpAddress : IpAddress # OurResponseBundle : eventbundle read-only Our bundled response event data. ``` lang=cpp, name=Lightning var OurResponseBundle : EventBundle # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID (set only if accepted). ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # TheirPendingUserAddRequestCount : integer read-only Their pending user add requests following this connect request (within the same frame). ``` lang=cpp, name=Lightning var TheirPendingUserAddRequestCount : Integer # TheirRequestBundle : eventbundle read-only Their bundled request event data. ``` lang=cpp, name=Lightning var TheirRequestBundle : EventBundle # Methods","title":"Netpeersentconnectresponse"},{"location":"reference/class_reference/netpeersentuseraddrequest/","text":"Event Networking (NOTE) Dispatched after sending a net user add request. Methods Properties Base Classes Derived Classes OurRequestBundle event TheirIpAddress TheirNetPeerId # Properties # OurRequestBundle : eventbundle read-only Our bundled request event data. ``` lang=cpp, name=Lightning var OurRequestBundle : EventBundle # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # Methods","title":"Netpeersentuseraddrequest"},{"location":"reference/class_reference/netpeersentuseraddresponse/","text":"Event Networking (NOTE) Dispatched after sending a net user add response. Methods Properties Base Classes Derived Classes OurAddResponse event OurResponseBundle TheirIpAddress TheirNetPeerId TheirNetUser TheirNetUserId TheirRequestBundle # Properties # OurAddResponse : NetUserAddResponse read-only Our add response. ``` lang=cpp, name=Lightning var OurAddResponse : NetUserAddResponse # OurResponseBundle : eventbundle read-only Our bundled response event data. ``` lang=cpp, name=Lightning var OurResponseBundle : EventBundle # TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). ``` lang=cpp, name=Lightning var TheirIpAddress : IpAddress # TheirNetPeerId : integer read-only Their net peer ID. ``` lang=cpp, name=Lightning var TheirNetPeerId : Integer # TheirNetUser : cog read-only Their net user object about to be added (set only if accepted). ``` lang=cpp, name=Lightning var TheirNetUser : Cog # TheirNetUserId : integer read-only Their net user ID (set only if accepted). ``` lang=cpp, name=Lightning var TheirNetUserId : Integer # TheirRequestBundle : eventbundle read-only Their bundled request event data. ``` lang=cpp, name=Lightning var TheirRequestBundle : EventBundle # Methods","title":"Netpeersentuseraddresponse"},{"location":"reference/class_reference/netproperty/","text":"Networking (NOTE) Network Property. Manages the replication of a single property on the network. Methods Properties Base Classes Derived Classes LastChangeTimePassed safeid32object LastChangeTimestamp Name NetChannel NetPropertyType # Properties # LastChangeTimePassed : real read-only Elapsed time passed since this net property was last changed, else 0. ``` lang=cpp, name=Lightning var LastChangeTimePassed : Real # LastChangeTimestamp : real read-only Timestamp indicating when this net property was last changed, else 0. ``` lang=cpp, name=Lightning var LastChangeTimestamp : Real # Name : string read-only Net property name. ``` lang=cpp, name=Lightning var Name : String # NetChannel : netchannel read-only Operating net channel. ``` lang=cpp, name=Lightning var NetChannel : NetChannel # NetPropertyType : netpropertytype read-only Operating net property type. ``` lang=cpp, name=Lightning var NetPropertyType : NetPropertyType # Methods","title":"Netproperty"},{"location":"reference/class_reference/netpropertyconfig/","text":"Resource Networking (NOTE) Network Property Configuration. Defines a configuration for the replication of a single property on the network. Methods Properties Base Classes Derived Classes ActiveConvergenceWeight dataresource BasicNetType ConvergenceInterval DeltaThresholdDoubleInteger DeltaThresholdDoubleReal DeltaThresholdInteger DeltaThresholdInteger2 DeltaThresholdInteger3 DeltaThresholdInteger4 DeltaThresholdQuaternion DeltaThresholdReal DeltaThresholdReal2 DeltaThresholdReal3 DeltaThresholdReal4 EventOnConvergenceStateChange ExtrapolationLimit InterpolationCurve QuantizationRangeMaxDoubleInteger QuantizationRangeMaxDoubleReal QuantizationRangeMaxInteger QuantizationRangeMaxInteger2 QuantizationRangeMaxInteger3 QuantizationRangeMaxInteger4 QuantizationRangeMaxQuaternion QuantizationRangeMaxReal QuantizationRangeMaxReal2 QuantizationRangeMaxReal3 QuantizationRangeMaxReal4 QuantizationRangeMinDoubleInteger QuantizationRangeMinDoubleReal QuantizationRangeMinInteger QuantizationRangeMinInteger2 QuantizationRangeMinInteger3 QuantizationRangeMinInteger4 QuantizationRangeMinQuaternion QuantizationRangeMinReal QuantizationRangeMinReal2 QuantizationRangeMinReal3 QuantizationRangeMinReal4 RestingConvergenceDuration SampleTimeOffset SerializationMode SnapThresholdDoubleInteger SnapThresholdDoubleReal SnapThresholdInteger SnapThresholdInteger2 SnapThresholdInteger3 SnapThresholdInteger4 SnapThresholdQuaternion SnapThresholdReal SnapThresholdReal2 SnapThresholdReal3 SnapThresholdReal4 UseConvergence UseDeltaThreshold UseHalfFloats UseInterpolation UseQuantization # Properties # ActiveConvergenceWeight : real Active convergence weight applied every convergence interval. ``` lang=cpp, name=Lightning var ActiveConvergenceWeight : Real # BasicNetType : BasicNetType Target basic property type. ``` lang=cpp, name=Lightning var BasicNetType : BasicNetType # ConvergenceInterval : integer Convergence interval. ``` lang=cpp, name=Lightning var ConvergenceInterval : Integer # DeltaThresholdDoubleInteger : doubleinteger ``` lang=cpp, name=Lightning var DeltaThresholdDoubleInteger : DoubleInteger # DeltaThresholdDoubleReal : doublereal ``` lang=cpp, name=Lightning var DeltaThresholdDoubleReal : DoubleReal # DeltaThresholdInteger : integer ``` lang=cpp, name=Lightning var DeltaThresholdInteger : Integer # DeltaThresholdInteger2 : integer2 ``` lang=cpp, name=Lightning var DeltaThresholdInteger2 : Integer2 # DeltaThresholdInteger3 : integer3 ``` lang=cpp, name=Lightning var DeltaThresholdInteger3 : Integer3 # DeltaThresholdInteger4 : integer4 ``` lang=cpp, name=Lightning var DeltaThresholdInteger4 : Integer4 # DeltaThresholdQuaternion : quaternion ``` lang=cpp, name=Lightning var DeltaThresholdQuaternion : Quaternion # DeltaThresholdReal : real ``` lang=cpp, name=Lightning var DeltaThresholdReal : Real # DeltaThresholdReal2 : real2 ``` lang=cpp, name=Lightning var DeltaThresholdReal2 : Real2 # DeltaThresholdReal3 : real3 ``` lang=cpp, name=Lightning var DeltaThresholdReal3 : Real3 # DeltaThresholdReal4 : real4 ``` lang=cpp, name=Lightning var DeltaThresholdReal4 : Real4 # EventOnConvergenceStateChange : boolean Event on convergence state change? ``` lang=cpp, name=Lightning var EventOnConvergenceStateChange : Boolean # ExtrapolationLimit : real Extrapolation time limit. ``` lang=cpp, name=Lightning var ExtrapolationLimit : Real # InterpolationCurve : CurveType Interpolation curve type. ``` lang=cpp, name=Lightning var InterpolationCurve : CurveType # QuantizationRangeMaxDoubleInteger : doubleinteger ``` lang=cpp, name=Lightning var QuantizationRangeMaxDoubleInteger : DoubleInteger # QuantizationRangeMaxDoubleReal : doublereal ``` lang=cpp, name=Lightning var QuantizationRangeMaxDoubleReal : DoubleReal # QuantizationRangeMaxInteger : integer ``` lang=cpp, name=Lightning var QuantizationRangeMaxInteger : Integer # QuantizationRangeMaxInteger2 : integer2 ``` lang=cpp, name=Lightning var QuantizationRangeMaxInteger2 : Integer2 # QuantizationRangeMaxInteger3 : integer3 ``` lang=cpp, name=Lightning var QuantizationRangeMaxInteger3 : Integer3 # QuantizationRangeMaxInteger4 : integer4 ``` lang=cpp, name=Lightning var QuantizationRangeMaxInteger4 : Integer4 # QuantizationRangeMaxQuaternion : quaternion ``` lang=cpp, name=Lightning var QuantizationRangeMaxQuaternion : Quaternion # QuantizationRangeMaxReal : real ``` lang=cpp, name=Lightning var QuantizationRangeMaxReal : Real # QuantizationRangeMaxReal2 : real2 ``` lang=cpp, name=Lightning var QuantizationRangeMaxReal2 : Real2 # QuantizationRangeMaxReal3 : real3 ``` lang=cpp, name=Lightning var QuantizationRangeMaxReal3 : Real3 # QuantizationRangeMaxReal4 : real4 ``` lang=cpp, name=Lightning var QuantizationRangeMaxReal4 : Real4 # QuantizationRangeMinDoubleInteger : doubleinteger ``` lang=cpp, name=Lightning var QuantizationRangeMinDoubleInteger : DoubleInteger # QuantizationRangeMinDoubleReal : doublereal ``` lang=cpp, name=Lightning var QuantizationRangeMinDoubleReal : DoubleReal # QuantizationRangeMinInteger : integer ``` lang=cpp, name=Lightning var QuantizationRangeMinInteger : Integer # QuantizationRangeMinInteger2 : integer2 ``` lang=cpp, name=Lightning var QuantizationRangeMinInteger2 : Integer2 # QuantizationRangeMinInteger3 : integer3 ``` lang=cpp, name=Lightning var QuantizationRangeMinInteger3 : Integer3 # QuantizationRangeMinInteger4 : integer4 ``` lang=cpp, name=Lightning var QuantizationRangeMinInteger4 : Integer4 # QuantizationRangeMinQuaternion : quaternion ``` lang=cpp, name=Lightning var QuantizationRangeMinQuaternion : Quaternion # QuantizationRangeMinReal : real ``` lang=cpp, name=Lightning var QuantizationRangeMinReal : Real # QuantizationRangeMinReal2 : real2 ``` lang=cpp, name=Lightning var QuantizationRangeMinReal2 : Real2 # QuantizationRangeMinReal3 : real3 ``` lang=cpp, name=Lightning var QuantizationRangeMinReal3 : Real3 # QuantizationRangeMinReal4 : real4 ``` lang=cpp, name=Lightning var QuantizationRangeMinReal4 : Real4 # RestingConvergenceDuration : real Resting convergence duration handled every convergence interval. ``` lang=cpp, name=Lightning var RestingConvergenceDuration : Real # SampleTimeOffset : real Sample time offset from now. ``` lang=cpp, name=Lightning var SampleTimeOffset : Real # SerializationMode : SerializationMode Serialization mode. ``` lang=cpp, name=Lightning var SerializationMode : SerializationMode # SnapThresholdDoubleInteger : doubleinteger ``` lang=cpp, name=Lightning var SnapThresholdDoubleInteger : DoubleInteger # SnapThresholdDoubleReal : doublereal ``` lang=cpp, name=Lightning var SnapThresholdDoubleReal : DoubleReal # SnapThresholdInteger : integer ``` lang=cpp, name=Lightning var SnapThresholdInteger : Integer # SnapThresholdInteger2 : integer2 ``` lang=cpp, name=Lightning var SnapThresholdInteger2 : Integer2 # SnapThresholdInteger3 : integer3 ``` lang=cpp, name=Lightning var SnapThresholdInteger3 : Integer3 # SnapThresholdInteger4 : integer4 ``` lang=cpp, name=Lightning var SnapThresholdInteger4 : Integer4 # SnapThresholdQuaternion : quaternion ``` lang=cpp, name=Lightning var SnapThresholdQuaternion : Quaternion # SnapThresholdReal : real ``` lang=cpp, name=Lightning var SnapThresholdReal : Real # SnapThresholdReal2 : real2 ``` lang=cpp, name=Lightning var SnapThresholdReal2 : Real2 # SnapThresholdReal3 : real3 ``` lang=cpp, name=Lightning var SnapThresholdReal3 : Real3 # SnapThresholdReal4 : real4 ``` lang=cpp, name=Lightning var SnapThresholdReal4 : Real4 # UseConvergence : boolean Use convergence? ``` lang=cpp, name=Lightning var UseConvergence : Boolean # UseDeltaThreshold : boolean Use delta threshold? ``` lang=cpp, name=Lightning var UseDeltaThreshold : Boolean # UseHalfFloats : boolean Use half floats? ``` lang=cpp, name=Lightning var UseHalfFloats : Boolean # UseInterpolation : boolean Use interpolation? ``` lang=cpp, name=Lightning var UseInterpolation : Boolean # UseQuantization : boolean Use quantization? ``` lang=cpp, name=Lightning var UseQuantization : Boolean # Methods","title":"Netpropertyconfig"},{"location":"reference/class_reference/netpropertyinfo/","text":"Networking (NOTE) Network Property Info. Configures a network property. Methods Properties Base Classes Derived Classes Component safeid32 NetChannelConfig NetPropertyConfig Property # Properties # Component : string read-only ``` lang=cpp, name=Lightning var Component : String # NetChannelConfig : netchannelconfig Network channel configuration resource. ``` lang=cpp, name=Lightning var NetChannelConfig : NetChannelConfig # NetPropertyConfig : netpropertyconfig Network property configuration resource. ``` lang=cpp, name=Lightning var NetPropertyConfig : NetPropertyConfig # Property : string read-only ``` lang=cpp, name=Lightning var Property : String # Methods","title":"Netpropertyinfo"},{"location":"reference/class_reference/netpropertyinfos/","text":"Networking Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Netpropertyinfos"},{"location":"reference/class_reference/netpropertytype/","text":"Networking (NOTE) Network Property Type. Configures the replication of a single property on the network. Methods Properties Base Classes Derived Classes ResetConfig Name safeid32object SetConfig # Properties # Name : string read-only Net property type name. ``` lang=cpp, name=Lightning var Name : String # Methods # ResetConfig : Void Resets all configuration settings. (Cannot be modified at game runtime) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ResetConfig() # SetConfig : Void Sets all configuration settings according to the specified NetPropertyConfig resource. (Cannot be modified at game runtime) |Name|Type|Description| |---|---|---| |netPropertyConfig| netpropertyconfig | | lang=cpp, name=Lightning function SetConfig(netPropertyConfig : NetPropertyConfig)","title":"Netpropertytype"},{"location":"reference/class_reference/netspace/","text":"Component Networking (NOTE) Network Space. Manages the replication of a single space on the network. Methods Properties Base Classes Derived Classes Constructor NetObjectCount netobject NetUserCount # Properties # NetObjectCount : integer read-only Returns the number of net objects in this space (but not including the net space itself). ``` lang=cpp, name=Lightning var NetObjectCount : Integer # NetUserCount : integer read-only Returns the number of net users in this space. ``` lang=cpp, name=Lightning var NetUserCount : Integer # Methods # NetSpace : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function NetSpace()","title":"Netspace"},{"location":"reference/class_reference/netuser/","text":"Component Networking (NOTE) Network User. Manages the replication of a single negotiated user on the network. Methods Properties Base Classes Derived Classes AddedByPeer AddedByMyPeer netobject FindOwnedNetObjectByName NetPeerId FindOwnedNetObjectByNameInSpace NetUserId Constructor OwnedNetObjectCount ReleaseOwnedNetObjects OwnedNetObjects # Properties # AddedByMyPeer : boolean read-only ``` lang=cpp, name=Lightning var AddedByMyPeer : Boolean # NetPeerId : integer read-only Adding network peer identifier. ``` lang=cpp, name=Lightning var NetPeerId : Integer # NetUserId : integer read-only Network user identifier. ``` lang=cpp, name=Lightning var NetUserId : Integer # OwnedNetObjectCount : integer read-only Returns the number of net objects owned by this user in all spaces. ``` lang=cpp, name=Lightning var OwnedNetObjectCount : Integer # OwnedNetObjects : coghashsetrange read-only Returns all net objects owned by this user in all spaces. ``` lang=cpp, name=Lightning var OwnedNetObjects : CogHashSetRange # Methods # AddedByPeer : boolean Returns true if the user was added by the specified peer, else false. |Name|Type|Description| |---|---|---| |netPeerId| integer | | lang=cpp, name=Lightning function AddedByPeer(netPeerId : Integer) : Boolean # FindOwnedNetObjectByName : cog Finds a net object with the given name owned by this user in any space, else nullptr. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindOwnedNetObjectByName(name : String) : Cog # FindOwnedNetObjectByNameInSpace : cog Finds a net object with the given name owned by this user in the specified space, else nullptr. |Name|Type|Description| |---|---|---| |name| string | | |space| space | | lang=cpp, name=Lightning function FindOwnedNetObjectByNameInSpace(name : String, space : Space) : Cog # NetUser : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function NetUser() # ReleaseOwnedNetObjects : Void [Server/Offline] Releases ownership of all net objects owned by this user in all spaces. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ReleaseOwnedNetObjects()","title":"Netuser"},{"location":"reference/class_reference/netuseracquiredobjectownership/","text":"Event Networking (NOTE) Dispatched after the net user acquires network ownership of a net object. Methods Properties Base Classes Derived Classes AcquiredObject event PreviousNetUserOwner # Properties # AcquiredObject : cog read-only The object this user just acquired network ownership of. ``` lang=cpp, name=Lightning var AcquiredObject : Cog # PreviousNetUserOwner : cog read-only The object's previous network user owner. ``` lang=cpp, name=Lightning var PreviousNetUserOwner : Cog # Methods","title":"Netuseracquiredobjectownership"},{"location":"reference/class_reference/netuserlostobjectownership/","text":"Event Networking (NOTE) Dispatched after the net user loses network ownership of a net object. Methods Properties Base Classes Derived Classes CurrentNetUserOwner event LostObject # Properties # CurrentNetUserOwner : cog read-only The object's current network user owner. ``` lang=cpp, name=Lightning var CurrentNetUserOwner : Cog # LostObject : cog read-only The object this user just lost network ownership of. ``` lang=cpp, name=Lightning var LostObject : Cog # Methods","title":"Netuserlostobjectownership"},{"location":"reference/class_reference/netuserownerchanged/","text":"Event Networking (NOTE) Dispatched after the net object changes network ownership. Methods Properties Base Classes Derived Classes CurrentNetUserOwner event PreviousNetUserOwner # Properties # CurrentNetUserOwner : cog read-only The object's current network user owner. ``` lang=cpp, name=Lightning var CurrentNetUserOwner : Cog # PreviousNetUserOwner : cog read-only The object's previous network user owner. ``` lang=cpp, name=Lightning var PreviousNetUserOwner : Cog # Methods","title":"Netuserownerchanged"},{"location":"reference/class_reference/netuserrange/","text":"Networking Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : netuserrange read-only ``` lang=cpp, name=Lightning var All : NetUserRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # NetUserRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function NetUserRange() ``` # NetUserRange : Void constructor Name Type Description p0 netuserrange ``` lang=cpp, name=Lightning function NetUserRange(p0 : NetUserRange) ```","title":"Netuserrange"},{"location":"reference/class_reference/nodeinfolistrange/","text":"Sound Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : nodeinfolistrange read-only ``` lang=cpp, name=Lightning var All : NodeInfoListRange # Current : nodeprintinfo read-only ``` lang=cpp, name=Lightning var Current : NodePrintInfo # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # NodeInfoListRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function NodeInfoListRange() ``` # NodeInfoListRange : Void constructor Name Type Description p0 nodeinfolistrange ``` lang=cpp, name=Lightning function NodeInfoListRange(p0 : NodeInfoListRange) ```","title":"Nodeinfolistrange"},{"location":"reference/class_reference/nodeprintinfo/","text":"Sound Methods Properties Base Classes Derived Classes Connections HasOutput ID Name Position # Properties # Connections : nodeinfolistrange read-only ``` lang=cpp, name=Lightning var Connections : NodeInfoListRange # HasOutput : boolean ``` lang=cpp, name=Lightning var HasOutput : Boolean # ID : integer ``` lang=cpp, name=Lightning var ID : Integer # Name : string ``` lang=cpp, name=Lightning var Name : String # Position : real2 ``` lang=cpp, name=Lightning var Position : Real2 # Methods","title":"Nodeprintinfo"},{"location":"reference/class_reference/notifyevent/","text":"Event Meta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Notifyevent"},{"location":"reference/class_reference/nsquaredbroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase # Properties # Methods","title":"Nsquaredbroadphase"},{"location":"reference/class_reference/objectconnectingtool/","text":"Component Editor Methods Properties Base Classes Derived Classes component jointtool parentingtool # Properties # Methods","title":"Objectconnectingtool"},{"location":"reference/class_reference/objectevent/","text":"Event Meta (NOTE) Simple event for general signals. Methods Properties Base Classes Derived Classes Source event commandevent commandupdateevent rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent # Properties # Source : Object read-only ``` lang=cpp, name=Lightning var Source : Object # Methods","title":"Objectevent"},{"location":"reference/class_reference/objectlink/","text":"Component Engine (NOTE) Forms a link between two positions on two objects. ObjectLinks are used primarily by physics to represent joints, but can also be used by graphics, gameplay, etc... to represent some connection between two objects. Methods Properties Base Classes Derived Classes Constructor LocalPointA component LocalPointB ObjectA ObjectAPath ObjectB ObjectBPath WorldPointA WorldPointB # Properties # LocalPointA : real3 The Point on Object A in local space. ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The Point on Object B in local space. ``` lang=cpp, name=Lightning var LocalPointB : Real3 # ObjectA : cog The first object that is being connected to. Set this to null to clear the link. ``` lang=cpp, name=Lightning var ObjectA : Cog # ObjectAPath : cogpath CogPath to object A. ``` lang=cpp, name=Lightning var ObjectAPath : CogPath # ObjectB : cog The second object that is being connected to. Set this to null to clear the link. ``` lang=cpp, name=Lightning var ObjectB : Cog # ObjectBPath : cogpath CogPath to object B. ``` lang=cpp, name=Lightning var ObjectBPath : CogPath # WorldPointA : real3 The point on object A in world space. ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The point on object B in world space. ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # ObjectLink : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectLink() ```","title":"Objectlink"},{"location":"reference/class_reference/objectlinkanchor/","text":"Component Engine (NOTE) Component used to keep track of what ObjectLinks a cog has. This component is added dynamically whenever a ObjectLink is added to a cog that did not contain an ObjectLink before. This can be used to traverse across linked objects and find the entire \"island\" of ObjectLinks. Methods Properties Base Classes Derived Classes Constructor ObjectLinks component # Properties # ObjectLinks : objectlinkrange read-only The range of object link edges connected to this anchor. ``` lang=cpp, name=Lightning var ObjectLinks : ObjectLinkRange # Methods # ObjectLinkAnchor : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectLinkAnchor() ```","title":"Objectlinkanchor"},{"location":"reference/class_reference/objectlinkedge/","text":"Engine (NOTE) A directed edge between a cog and an object link. Methods Properties Base Classes Derived Classes Constructor ObjectLink OtherCog SelfCog # Properties # ObjectLink : objectlink read-only The object link that this edge is connected to. ``` lang=cpp, name=Lightning var ObjectLink : ObjectLink # OtherCog : cog read-only The other cog that the object link is connected to (the one not part of this edge). ``` lang=cpp, name=Lightning var OtherCog : Cog # SelfCog : cog read-only The cog that this edge on the object link is connected to. ``` lang=cpp, name=Lightning var SelfCog : Cog # Methods # ObjectLinkEdge : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectLinkEdge() ``` # ObjectLinkEdge : Void constructor Name Type Description objectlinkedge ``` lang=cpp, name=Lightning function ObjectLinkEdge( : ObjectLinkEdge) ```","title":"Objectlinkedge"},{"location":"reference/class_reference/objectlinkevent/","text":"Event Engine (NOTE) An event sent when an object link changes one of its link edges. Methods Properties Base Classes Derived Classes EdgeId event NewCog OldCog # Properties # EdgeId : integer ``` lang=cpp, name=Lightning var EdgeId : Integer # NewCog : cog ``` lang=cpp, name=Lightning var NewCog : Cog # OldCog : cog ``` lang=cpp, name=Lightning var OldCog : Cog # Methods","title":"Objectlinkevent"},{"location":"reference/class_reference/objectlinkpointchangedevent/","text":"Event Engine Methods Properties Base Classes Derived Classes EdgeId event NewLocalPoint OldLocalPoint # Properties # EdgeId : integer The index on the edge that is being overridden. ``` lang=cpp, name=Lightning var EdgeId : Integer # NewLocalPoint : real3 ``` lang=cpp, name=Lightning var NewLocalPoint : Real3 # OldLocalPoint : real3 ``` lang=cpp, name=Lightning var OldLocalPoint : Real3 # Methods","title":"Objectlinkpointchangedevent"},{"location":"reference/class_reference/objectlinkrange/","text":"Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : objectlinkrange read-only ``` lang=cpp, name=Lightning var All : ObjectLinkRange # Current : objectlinkedge read-only ``` lang=cpp, name=Lightning var Current : ObjectLinkEdge # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # ObjectLinkRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectLinkRange() ``` # ObjectLinkRange : Void constructor Name Type Description p0 objectlinkrange ``` lang=cpp, name=Lightning function ObjectLinkRange(p0 : ObjectLinkRange) ```","title":"Objectlinkrange"},{"location":"reference/class_reference/objectpollevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Objectpollevent"},{"location":"reference/class_reference/objectrotategizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor AffectTranslation objecttransformgizmo # Properties # AffectTranslation : boolean ``` lang=cpp, name=Lightning var AffectTranslation : Boolean # Methods # ObjectRotateGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectRotateGizmo() ```","title":"Objectrotategizmo"},{"location":"reference/class_reference/objectrotatetool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor AffectRotation objecttransformtool AffectTranslation SnapAngle Snapping # Properties # AffectRotation : boolean With multiple objects selected, allow their local rotation to be affected while being spacially-rotated (with 'AffectTranslation') about the chosen pivot point. ``` lang=cpp, name=Lightning var AffectRotation : Boolean # AffectTranslation : boolean With multiple objects selected, allow their spacial-offest to be rotated about the chosen pivot point, while being locally rotated with 'mAffectRotation'. ``` lang=cpp, name=Lightning var AffectTranslation : Boolean # SnapAngle : real ``` lang=cpp, name=Lightning var SnapAngle : Real # Snapping : boolean ``` lang=cpp, name=Lightning var Snapping : Boolean # Methods # ObjectRotateTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectRotateTool() ```","title":"Objectrotatetool"},{"location":"reference/class_reference/objectscalegizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor AffectTranslation objecttransformgizmo # Properties # AffectTranslation : boolean ``` lang=cpp, name=Lightning var AffectTranslation : Boolean # Methods # ObjectScaleGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectScaleGizmo() ```","title":"Objectscalegizmo"},{"location":"reference/class_reference/objectscaletool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor AffectScale objecttransformtool AffectTranslation SnapDistance SnapMode Snapping # Properties # AffectScale : boolean With multiple objects selected, allow their local scale to be affected while being spacially-offset (with 'AffectTranslation') about the chosen pivot point. ``` lang=cpp, name=Lightning var AffectScale : Boolean # AffectTranslation : boolean With multiple objects selected, allow their spacial-offest to be affected about the chosen pivot point, while being locally scaled with 'mAffectScale'. ``` lang=cpp, name=Lightning var AffectTranslation : Boolean # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # SnapMode : GizmoSnapMode ``` lang=cpp, name=Lightning var SnapMode : GizmoSnapMode # Snapping : boolean ``` lang=cpp, name=Lightning var Snapping : Boolean # Methods # ObjectScaleTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectScaleTool() ```","title":"Objectscaletool"},{"location":"reference/class_reference/objectstore/","text":"Engine (NOTE) Object cache is use to store objects at runtime. Methods Properties Base Classes Derived Classes ClearStore EntryCount Erase GetDirectoryPath GetEntryAt IsEntryStored IsStored Restore RestoreOrArchetype Store # Properties # EntryCount : integer read-only Get number of entries in the ObjectStore. ``` lang=cpp, name=Lightning var EntryCount : Integer # Methods # ClearStore : Void Clear the store. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearStore() # Erase : Void Attempts to remove an object from the store. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function Erase(name : String) # GetDirectoryPath : string Returns the directory path to the object store. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetDirectoryPath() : String # GetEntryAt : string Get the ObjectStore entry at the specified index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetEntryAt(index : Integer) : String # IsEntryStored : boolean Is there an entry record for the object in the store? |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function IsEntryStored(name : String) : Boolean # IsStored : boolean Name Type Description string ``` lang=cpp, name=Lightning function IsStored( : String) : Boolean ``` # Restore : cog Restore an object to the space. |Name|Type|Description| |---|---|---| |name| string | | |space| space | | lang=cpp, name=Lightning function Restore(name : String, space : Space) : Cog # RestoreOrArchetype : cog Restore an object if it is not stored use the archetype to create it. |Name|Type|Description| |---|---|---| |name| string | | |archetype| archetype | | |space| space | | lang=cpp, name=Lightning function RestoreOrArchetype(name : String, archetype : Archetype, space : Space) : Cog # Store : StoreResult Store an object. |Name|Type|Description| |---|---|---| |name| string | | |object| cog | | lang=cpp, name=Lightning function Store(name : String, object : Cog) : StoreResult","title":"Objectstore"},{"location":"reference/class_reference/objecttrack/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Objecttrack"},{"location":"reference/class_reference/objecttransformgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes AddObject Basis component objectrotategizmo ClearObjects ObjectCount objectscalegizmo GetObjectAtIndex Pivot objecttranslategizmo Constructor RemoveObject SetOperationQueue ToggleCoordinateMode # Properties # Basis : GizmoBasis Setters / Getters. ``` lang=cpp, name=Lightning var Basis : GizmoBasis # ObjectCount : integer read-only Object getters. ``` lang=cpp, name=Lightning var ObjectCount : Integer # Pivot : GizmoPivot ``` lang=cpp, name=Lightning var Pivot : GizmoPivot # Methods # AddObject : Void Name Type Description anyhandle boolean ``` lang=cpp, name=Lightning function AddObject( : AnyHandle, : Boolean) ``` # ClearObjects : Void Name Type Description ``` lang=cpp, name=Lightning function ClearObjects() ``` # GetObjectAtIndex : anyhandle Name Type Description index integer ``` lang=cpp, name=Lightning function GetObjectAtIndex(index : Integer) : AnyHandle ``` # ObjectTransformGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectTransformGizmo() ``` # RemoveObject : Void Name Type Description anyhandle boolean ``` lang=cpp, name=Lightning function RemoveObject( : AnyHandle, : Boolean) ``` # SetOperationQueue : Void If set, this Gizmo will add operations for all modifications to cogs. |Name|Type|Description| |---|---|---| |opQueue| operationqueue | | lang=cpp, name=Lightning function SetOperationQueue(opQueue : OperationQueue) # ToggleCoordinateMode : Void Toggle between local / world. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToggleCoordinateMode()","title":"Objecttransformgizmo"},{"location":"reference/class_reference/objecttransformgizmoevent/","text":"Event Editor Methods Properties Base Classes Derived Classes FinalLocalRotation gizmoevent FinalLocalScale FinalLocalTranslation # Properties # FinalLocalRotation : quaternion ``` lang=cpp, name=Lightning var FinalLocalRotation : Quaternion # FinalLocalScale : real3 ``` lang=cpp, name=Lightning var FinalLocalScale : Real3 # FinalLocalTranslation : real3 ``` lang=cpp, name=Lightning var FinalLocalTranslation : Real3 # Methods","title":"Objecttransformgizmoevent"},{"location":"reference/class_reference/objecttransformtool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor Basis component objectrotatetool Grab objectscaletool Pivot objecttranslatetool # Properties # Basis : GizmoBasis ``` lang=cpp, name=Lightning var Basis : GizmoBasis # Grab : GizmoGrabMode ``` lang=cpp, name=Lightning var Grab : GizmoGrabMode # Pivot : GizmoPivot ``` lang=cpp, name=Lightning var Pivot : GizmoPivot # Methods # ObjectTransformTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectTransformTool() ```","title":"Objecttransformtool"},{"location":"reference/class_reference/objecttranslategizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor DuplicateOnCtrlDrag objecttransformgizmo # Properties # DuplicateOnCtrlDrag : boolean ``` lang=cpp, name=Lightning var DuplicateOnCtrlDrag : Boolean # Methods # ObjectTranslateGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectTranslateGizmo() ```","title":"Objecttranslategizmo"},{"location":"reference/class_reference/objecttranslatetool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor SnapDistance objecttransformtool SnapMode Snapping # Properties # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # SnapMode : GizmoSnapMode ``` lang=cpp, name=Lightning var SnapMode : GizmoSnapMode # Snapping : boolean ``` lang=cpp, name=Lightning var Snapping : Boolean # Methods # ObjectTranslateTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ObjectTranslateTool() ```","title":"Objecttranslatetool"},{"location":"reference/class_reference/objectview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Objectview"},{"location":"reference/class_reference/operation/","text":"Engine Methods Properties Base Classes Derived Classes FindRoot Children safeid32eventobject operationbatch InvalidReason propertyoperation Name Parent # Properties # Children : operationlistrange read-only ``` lang=cpp, name=Lightning var Children : OperationListRange # InvalidReason : string ``` lang=cpp, name=Lightning var InvalidReason : String # Name : string ``` lang=cpp, name=Lightning var Name : String # Parent : operation read-only ``` lang=cpp, name=Lightning var Parent : Operation # Methods # FindRoot : operation Name Type Description ``` lang=cpp, name=Lightning function FindRoot() : Operation ```","title":"Operation"},{"location":"reference/class_reference/operationbatch/","text":"Engine Methods Properties Base Classes Derived Classes operation # Properties # Methods","title":"Operationbatch"},{"location":"reference/class_reference/operationlistrange/","text":"Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : operationlistrange read-only ``` lang=cpp, name=Lightning var All : OperationListRange # Current : operation read-only ``` lang=cpp, name=Lightning var Current : Operation # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # OperationListRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function OperationListRange() ``` # OperationListRange : Void constructor Name Type Description p0 operationlistrange ``` lang=cpp, name=Lightning function OperationListRange(p0 : OperationListRange) ```","title":"Operationlistrange"},{"location":"reference/class_reference/operationqueue/","text":"Engine Methods Properties Base Classes Derived Classes BeginBatch ActiveBatchName referencecountedeventobject ClearAll Commands ClearRedo RedoCommands ClearUndo DestroyObject EndBatch IsListeningForSideEffects MarkPropertyAsModified ObjectCreated Constructor PopSubPropertyContext QueueRegisteredSideEffects Redo RegisterSideEffect SaveObjectState StartListeningForSideEffects Undo # Properties # ActiveBatchName : string ``` lang=cpp, name=Lightning var ActiveBatchName : String # Commands : operationlistrange read-only ``` lang=cpp, name=Lightning var Commands : OperationListRange # RedoCommands : operationlistrange read-only ``` lang=cpp, name=Lightning var RedoCommands : OperationListRange # Methods # BeginBatch : Void Name Type Description ``` lang=cpp, name=Lightning function BeginBatch() ``` # BeginBatch : Void Name Type Description p0 string ``` lang=cpp, name=Lightning function BeginBatch(p0 : String) ``` # ClearAll : Void Name Type Description ``` lang=cpp, name=Lightning function ClearAll() ``` # ClearRedo : Void Name Type Description ``` lang=cpp, name=Lightning function ClearRedo() ``` # ClearUndo : Void Name Type Description ``` lang=cpp, name=Lightning function ClearUndo() ``` # DestroyObject : Void Name Type Description p0 cog ``` lang=cpp, name=Lightning function DestroyObject(p0 : Cog) ``` # EndBatch : Void Name Type Description ``` lang=cpp, name=Lightning function EndBatch() ``` # IsListeningForSideEffects : boolean static Name Type Description ``` lang=cpp, name=Lightning function IsListeningForSideEffects() : Boolean ``` # MarkPropertyAsModified : Void Name Type Description p0 component p1 string ``` lang=cpp, name=Lightning function MarkPropertyAsModified(p0 : Component, p1 : String) ``` # ObjectCreated : Void Name Type Description p0 cog ``` lang=cpp, name=Lightning function ObjectCreated(p0 : Cog) ``` # OperationQueue : Void constructor Name Type Description ``` lang=cpp, name=Lightning function OperationQueue() ``` # PopSubPropertyContext : Void static Name Type Description ``` lang=cpp, name=Lightning function PopSubPropertyContext() ``` # QueueRegisteredSideEffects : Void Name Type Description ``` lang=cpp, name=Lightning function QueueRegisteredSideEffects() ``` # Redo : Void Name Type Description ``` lang=cpp, name=Lightning function Redo() ``` # Redo : boolean Name Type Description p0 operation ``` lang=cpp, name=Lightning function Redo(p0 : Operation) : Boolean ``` # RegisterSideEffect : Void static Name Type Description p0 anyhandle p1 string p2 T ``` lang=cpp, name=Lightning function RegisterSideEffect(p0 : AnyHandle, p1 : String, p2 : T) ``` # SaveObjectState : Void Name Type Description p0 cog ``` lang=cpp, name=Lightning function SaveObjectState(p0 : Cog) ``` # StartListeningForSideEffects : Void static Name Type Description ``` lang=cpp, name=Lightning function StartListeningForSideEffects() ``` # Undo : Void Name Type Description ``` lang=cpp, name=Lightning function Undo() ``` # Undo : boolean Name Type Description p0 operation ``` lang=cpp, name=Lightning function Undo(p0 : Operation) : Boolean ```","title":"Operationqueue"},{"location":"reference/class_reference/operationqueueevent/","text":"Event Engine (NOTE) Notification about most recent Operation/OperationBatch added to the OperationQueue. Methods Properties Base Classes Derived Classes Operation event # Properties # Operation : operation ``` lang=cpp, name=Lightning var Operation : Operation # Methods","title":"Operationqueueevent"},{"location":"reference/class_reference/orientation/","text":"Component Gameplay (NOTE) Defines a new basis for a desired right, up, and forward vector. Provides a bunch of helper functions to change between these spaces and to perform simple look-at behavior. Methods Properties Base Classes Derived Classes ComputeSignedAngle AbsoluteAngle component DebugDrawBases DefaultOrientationBases GetLookAtDirectionRotation GlobalUp GetLookAtDirectionWithUpRotation LocalForward GetLookAtPointRotation LocalOrientationBasis GetLookAtPointWithUpRotation LocalRight LookAtDirection LocalToOrientationRotation LookAtDirectionWithUp LocalToWorldRotation LookAtPoint LocalUp LookAtPointWithUp OrientationForward Constructor OrientationRight SetLocalLookAtRotation OrientationToLocalRotation SetWorldLookAtRotation OrientationToWorldRotation OrientationUp WorldForward WorldRight WorldToLocalRotation WorldToOrientationRotation WorldUp # Properties # AbsoluteAngle : real read-only Get the angle of the object about the up vector. ``` lang=cpp, name=Lightning var AbsoluteAngle : Real # DefaultOrientationBases : OrientationBases ``` lang=cpp, name=Lightning var DefaultOrientationBases : OrientationBases # GlobalUp : real3 The world-space up vector to use for LookAt operations that don't take an up vector. ``` lang=cpp, name=Lightning var GlobalUp : Real3 # LocalForward : real3 read-only The orientation's forward vector after having been transformed into local space. ``` lang=cpp, name=Lightning var LocalForward : Real3 # LocalOrientationBasis : quaternion A local-space basis that represents this orientation. If you build a basis from an up of (0, 1, 0), and a forward of (0, 0, -1) then this should result in the identity rotation. ``` lang=cpp, name=Lightning var LocalOrientationBasis : Quaternion # LocalRight : real3 read-only The orientation's right vector after having been transformed into local space. ``` lang=cpp, name=Lightning var LocalRight : Real3 # LocalToOrientationRotation : quaternion read-only The rotation that takes an local space vector into orientation space. For example, this transforms LocalRight into OrientationRight. ``` lang=cpp, name=Lightning var LocalToOrientationRotation : Quaternion # LocalToWorldRotation : quaternion read-only The rotation that transforms a vector from local space into world space. For example, this transforms LocalRight into WorldRight. ``` lang=cpp, name=Lightning var LocalToWorldRotation : Quaternion # LocalUp : real3 read-only The orientation's up vector after having been transformed into local space. ``` lang=cpp, name=Lightning var LocalUp : Real3 # OrientationForward : real3 read-only The forward vector in orientation space. This is always the vector (0, 0, -1) but is provided for clarity with transformations. ``` lang=cpp, name=Lightning var OrientationForward : Real3 # OrientationRight : real3 read-only The right vector in orientation space. This is always the vector (1, 0, 0) but is provided for clarity with transformations. ``` lang=cpp, name=Lightning var OrientationRight : Real3 # OrientationToLocalRotation : quaternion read-only The rotation that takes an orientation space vector into local space. For example, this transforms OrientationRight into LocalRight. ``` lang=cpp, name=Lightning var OrientationToLocalRotation : Quaternion # OrientationToWorldRotation : quaternion read-only The rotation that takes an orientation space vector into world space. For example, this transforms OrientationRight into WorldRight. ``` lang=cpp, name=Lightning var OrientationToWorldRotation : Quaternion # OrientationUp : real3 read-only The up vector in orientation space. This is always the vector (0, 1, 0) but is provided for clarity with transformations. ``` lang=cpp, name=Lightning var OrientationUp : Real3 # WorldForward : real3 read-only The orientation's forward vector after having been transformed into world space. ``` lang=cpp, name=Lightning var WorldForward : Real3 # WorldRight : real3 read-only The orientation's right vector after having been transformed into world space. ``` lang=cpp, name=Lightning var WorldRight : Real3 # WorldToLocalRotation : quaternion read-only The rotation that transforms a vector from world space into local space. For example, this transforms WorldRight into LocalRight. ``` lang=cpp, name=Lightning var WorldToLocalRotation : Quaternion # WorldToOrientationRotation : quaternion read-only The rotation that takes an world space vector into orientation space. For example, this transforms WorldRight into OrientationRight. ``` lang=cpp, name=Lightning var WorldToOrientationRotation : Quaternion # WorldUp : real3 read-only The orientation's up vector after having been transformed into world space. ``` lang=cpp, name=Lightning var WorldUp : Real3 # Methods # ComputeSignedAngle : real Compute the rotation angle between two vectors (in radians) |Name|Type|Description| |---|---|---| |up| real3 | | |forward| real3 | | |newVector| real3 | | lang=cpp, name=Lightning function ComputeSignedAngle(up : Real3, forward : Real3, newVector : Real3) : Real # DebugDrawBases : Void Debug draws the current orientation bases in world space. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DebugDrawBases() # GetLookAtDirectionRotation : quaternion Gets the forward to look in the given direction. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookDir| real3 | | lang=cpp, name=Lightning function GetLookAtDirectionRotation(lookDir : Real3) : Quaternion # GetLookAtDirectionWithUpRotation : quaternion Same as GetLookAtDirectionRotation but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookDir| real3 | | |up| real3 | | lang=cpp, name=Lightning function GetLookAtDirectionWithUpRotation(lookDir : Real3, up : Real3) : Quaternion # GetLookAtPointRotation : quaternion Get the rotation so that the forward will look at the given point. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookPoint| real3 | | lang=cpp, name=Lightning function GetLookAtPointRotation(lookPoint : Real3) : Quaternion # GetLookAtPointWithUpRotation : quaternion Same as GetLookAtPointRotation but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookPoint| real3 | | |up| real3 | | lang=cpp, name=Lightning function GetLookAtPointWithUpRotation(lookPoint : Real3, up : Real3) : Quaternion # LookAtDirection : Void Sets the forward to look in the given direction. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookDir| real3 | | lang=cpp, name=Lightning function LookAtDirection(lookDir : Real3) # LookAtDirectionWithUp : Void Same as LookAtDirection but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookDir| real3 | | |up| real3 | | lang=cpp, name=Lightning function LookAtDirectionWithUp(lookDir : Real3, up : Real3) # LookAtPoint : Void Sets the forward to look at the given point. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookPoint| real3 | | lang=cpp, name=Lightning function LookAtPoint(lookPoint : Real3) # LookAtPointWithUp : Void Same as LookAtPoint but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookPoint| real3 | | |up| real3 | | lang=cpp, name=Lightning function LookAtPointWithUp(lookPoint : Real3, up : Real3) # Orientation : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Orientation() ``` # SetLocalLookAtRotation : Void Set the transform's local rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward) |Name|Type|Description| |---|---|---| |localLookAtRotation| quaternion | | lang=cpp, name=Lightning function SetLocalLookAtRotation(localLookAtRotation : Quaternion) # SetWorldLookAtRotation : Void Set the transform's world rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward) |Name|Type|Description| |---|---|---| |worldLookAtRotation| quaternion | | lang=cpp, name=Lightning function SetWorldLookAtRotation(worldLookAtRotation : Quaternion)","title":"Orientation"},{"location":"reference/class_reference/orientationbasisgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # OrientationBasisGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function OrientationBasisGizmo() ```","title":"Orientationbasisgizmo"},{"location":"reference/class_reference/osfileselection/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Osfileselection"},{"location":"reference/class_reference/osmousedropevent/","text":"Event Engine Methods Properties Base Classes Derived Classes osmouseevent # Properties # Methods","title":"Osmousedropevent"},{"location":"reference/class_reference/osmouseevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event osmousedropevent # Properties # Methods","title":"Osmouseevent"},{"location":"reference/class_reference/osshell/","text":"Engine Methods Properties Base Classes Derived Classes DumpMemoryDebuggerStats ClipboardText system GetWindow WindowCount IsClipboardText # Properties # ClipboardText : string ``` lang=cpp, name=Lightning var ClipboardText : String # WindowCount : integer read-only ``` lang=cpp, name=Lightning var WindowCount : Integer # Methods # DumpMemoryDebuggerStats : Void Name Type Description ``` lang=cpp, name=Lightning function DumpMemoryDebuggerStats() ``` # GetWindow : oswindow Name Type Description p0 integer ``` lang=cpp, name=Lightning function GetWindow(p0 : Integer) : OsWindow ``` # IsClipboardText : boolean Name Type Description ``` lang=cpp, name=Lightning function IsClipboardText() : Boolean ```","title":"Osshell"},{"location":"reference/class_reference/oswindow/","text":"Engine Methods Properties Base Classes Derived Classes ClientToScreen ClientSize threadsafeid32eventobject windowsoswindow HasFocus MinSize ScreenToClient MouseCapture MouseCursor MouseTrap Parent Position Size State Title Visible # Properties # ClientSize : integer2 ``` lang=cpp, name=Lightning var ClientSize : Integer2 # MinSize : integer2 ``` lang=cpp, name=Lightning var MinSize : Integer2 # MouseCapture : boolean ``` lang=cpp, name=Lightning var MouseCapture : Boolean # MouseCursor : Cursor ``` lang=cpp, name=Lightning var MouseCursor : Cursor # MouseTrap : boolean ``` lang=cpp, name=Lightning var MouseTrap : Boolean # Parent : oswindow read-only ``` lang=cpp, name=Lightning var Parent : OsWindow # Position : integer2 ``` lang=cpp, name=Lightning var Position : Integer2 # Size : integer2 ``` lang=cpp, name=Lightning var Size : Integer2 # State : WindowState ``` lang=cpp, name=Lightning var State : WindowState # Title : string ``` lang=cpp, name=Lightning var Title : String # Visible : boolean ``` lang=cpp, name=Lightning var Visible : Boolean # Methods # ClientToScreen : integer2 Name Type Description p0 integer2 ``` lang=cpp, name=Lightning function ClientToScreen(p0 : Integer2) : Integer2 ``` # HasFocus : boolean Name Type Description ``` lang=cpp, name=Lightning function HasFocus() : Boolean ``` # ScreenToClient : integer2 Name Type Description p0 integer2 ``` lang=cpp, name=Lightning function ScreenToClient(p0 : Integer2) : Integer2 ```","title":"Oswindow"},{"location":"reference/class_reference/oswindowevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Oswindowevent"},{"location":"reference/class_reference/panningnode/","text":"Sound (NOTE) Changes the left and right channel volumes of its input SoundNode's audio separately. Methods Properties Base Classes Derived Classes InterpolateLeftVolume LeftVolume soundnode InterpolateRightVolume RightVolume InterpolateVolumes SumToMono # Properties # LeftVolume : real The volume multiplier applied to audio in the left channel. ``` lang=cpp, name=Lightning var LeftVolume : Real # RightVolume : real The volume multiplier applied to audio in the right channel. ``` lang=cpp, name=Lightning var RightVolume : Real # SumToMono : boolean If this property is true, the audio will be combined into a single channel before being split between the right and left channels. If it is false and the audio has more than two channels, it will be combined into only two channels before being processed. ``` lang=cpp, name=Lightning var SumToMono : Boolean # Methods # InterpolateLeftVolume : Void Interpolates the LeftVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume| real | | |time| real | | lang=cpp, name=Lightning function InterpolateLeftVolume(volume : Real, time : Real) # InterpolateRightVolume : Void Interpolates the RightVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume| real | | |time| real | | lang=cpp, name=Lightning function InterpolateRightVolume(volume : Real, time : Real) # InterpolateVolumes : Void Interpolates both left and right volume properties at once. The first parameter is the value to change the LeftVolume to, the second is the RightVolume, and the third is the number of seconds to use for the interpolation. |Name|Type|Description| |---|---|---| |leftVolume| real | | |rightVolume| real | | |time| real | | lang=cpp, name=Lightning function InterpolateVolumes(leftVolume : Real, rightVolume : Real, time : Real)","title":"Panningnode"},{"location":"reference/class_reference/parentingtool/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor MaintainPosition objectconnectingtool # Properties # MaintainPosition : boolean ``` lang=cpp, name=Lightning var MaintainPosition : Boolean # Methods # ParentingTool : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParentingTool() ```","title":"Parentingtool"},{"location":"reference/class_reference/particle/","text":"Graphics Methods Properties Base Classes Derived Classes Color Lifetime Position Rotation RotationalVelocity Size Time Velocity WanderAngle # Properties # Color : real4 ``` lang=cpp, name=Lightning var Color : Real4 # Lifetime : real ``` lang=cpp, name=Lightning var Lifetime : Real # Position : real3 ``` lang=cpp, name=Lightning var Position : Real3 # Rotation : real ``` lang=cpp, name=Lightning var Rotation : Real # RotationalVelocity : real ``` lang=cpp, name=Lightning var RotationalVelocity : Real # Size : real ``` lang=cpp, name=Lightning var Size : Real # Time : real ``` lang=cpp, name=Lightning var Time : Real # Velocity : real3 ``` lang=cpp, name=Lightning var Velocity : Real3 # WanderAngle : real ``` lang=cpp, name=Lightning var WanderAngle : Real # Methods","title":"Particle"},{"location":"reference/class_reference/particleanimator/","text":"Component Graphics (NOTE) Particle Animator Interface. Particle Animators effect particles in the system. Methods Properties Base Classes Derived Classes component linearparticleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particletwister particlewander splineparticleanimator # Properties # Methods","title":"Particleanimator"},{"location":"reference/class_reference/particleattractor/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor AttractPosition particleanimator MaxDistance MinDistance PositionSpace Strength # Properties # AttractPosition : real3 ``` lang=cpp, name=Lightning var AttractPosition : Real3 # MaxDistance : real ``` lang=cpp, name=Lightning var MaxDistance : Real # MinDistance : real ``` lang=cpp, name=Lightning var MinDistance : Real # PositionSpace : SystemSpace ``` lang=cpp, name=Lightning var PositionSpace : SystemSpace # Strength : real ``` lang=cpp, name=Lightning var Strength : Real # Methods # ParticleAttractor : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleAttractor() ```","title":"Particleattractor"},{"location":"reference/class_reference/particlecollisionheightmap/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor Friction particleanimator HeightMap Restitution # Properties # Friction : real How slippery or rough the particle is. When friction is 0, the object will be slippery. When friction is 1, it will completely stop in the direction tangential to the collision normal. ``` lang=cpp, name=Lightning var Friction : Real # HeightMap : cogpath ``` lang=cpp, name=Lightning var HeightMap : CogPath # Restitution : real How much the particle will bounce during a collision. Values should be in the range of [0, 1], where 0 is an in-elastic collision and 1 is a fully elastic collision (bouncy). If the value is greater than 1, the particle will gain energy and move faster after the bounce. ``` lang=cpp, name=Lightning var Restitution : Real # Methods # ParticleCollisionHeightmap : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleCollisionHeightmap() ```","title":"Particlecollisionheightmap"},{"location":"reference/class_reference/particlecollisionplane/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor Friction particleanimator PlaneNormal PlanePosition PlaneSpace Restitution # Properties # Friction : real How slippery or rough the particle is. When friction is 0, the object will be slippery. When friction is 1, it will completely stop in the direction tangential to the collision normal. Values should be in the range [0, 1]. ``` lang=cpp, name=Lightning var Friction : Real # PlaneNormal : real3 ``` lang=cpp, name=Lightning var PlaneNormal : Real3 # PlanePosition : real3 ``` lang=cpp, name=Lightning var PlanePosition : Real3 # PlaneSpace : SystemSpace ``` lang=cpp, name=Lightning var PlaneSpace : SystemSpace # Restitution : real How much the particle will bounce during a collision. Values should be in the range of [0, 1], where 0 is an in-elastic collision and 1 is a fully elastic collision (bouncy). If the value is greater than 1, the particle will gain energy and move faster after the bounce. ``` lang=cpp, name=Lightning var Restitution : Real # Methods # ParticleCollisionPlane : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleCollisionPlane() ```","title":"Particlecollisionplane"},{"location":"reference/class_reference/particlecoloranimator/","text":"Component Graphics (NOTE) Linear interpolate colors across the particles lifetime. Methods Properties Base Classes Derived Classes Constructor MaxParticleSpeed particleanimator TimeGradient VelocityGradient # Properties # MaxParticleSpeed : real ``` lang=cpp, name=Lightning var MaxParticleSpeed : Real # TimeGradient : colorgradient ``` lang=cpp, name=Lightning var TimeGradient : ColorGradient # VelocityGradient : colorgradient ``` lang=cpp, name=Lightning var VelocityGradient : ColorGradient # Methods # ParticleColorAnimator : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleColorAnimator() ```","title":"Particlecoloranimator"},{"location":"reference/class_reference/particleemitter/","text":"Component Graphics (NOTE) Particle emitters add new particles to the system and control where the particles will appear (sphere emitter, mesh emitter, etc) Methods Properties Base Classes Derived Classes component particleemittershared # Properties # Methods","title":"Particleemitter"},{"location":"reference/class_reference/particleemittershared/","text":"Component Graphics (NOTE) Particle Emitter Shared. Methods Properties Base Classes Derived Classes ResetCount Active particleemitter boxparticleemitter EmitCount meshparticleemitter EmitDelay sphericalparticleemitter EmitRate splineparticleemitter EmitRateSoftStartTime EmitterSize EmitterVelocityPercent EmitVariance FastMovingEmitter Fill Lifetime LifetimeVariance RandomSpin RandomVelocity Size SizeVariance Spin SpinVariance StartVelocity TangentVelocity # Properties # Active : boolean Is this emitter currently emitting particles? ``` lang=cpp, name=Lightning var Active : Boolean # EmitCount : integer Number of particles to emit per reset. ``` lang=cpp, name=Lightning var EmitCount : Integer # EmitDelay : real Time in seconds to delay the emission of particles from time of creation. ``` lang=cpp, name=Lightning var EmitDelay : Real # EmitRate : real Rate that particles spawn per second. ``` lang=cpp, name=Lightning var EmitRate : Real # EmitRateSoftStartTime : real Slowly ramps up to EmitRate over this time. ``` lang=cpp, name=Lightning var EmitRateSoftStartTime : Real # EmitterSize : real3 Size of the emitter. ``` lang=cpp, name=Lightning var EmitterSize : Real3 # EmitterVelocityPercent : real How much of the objects velocity is added to the particles. ``` lang=cpp, name=Lightning var EmitterVelocityPercent : Real # EmitVariance : real How much the emit can vary per sample. ``` lang=cpp, name=Lightning var EmitVariance : Real # FastMovingEmitter : boolean Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line. ``` lang=cpp, name=Lightning var FastMovingEmitter : Boolean # Fill : real How much area of the emitter to used 0 to 1. ``` lang=cpp, name=Lightning var Fill : Real # Lifetime : real How a particle's starting lifetime is. ``` lang=cpp, name=Lightning var Lifetime : Real # LifetimeVariance : real How much lifetime can vary per particle. ``` lang=cpp, name=Lightning var LifetimeVariance : Real # RandomSpin : boolean Each particle should start with random spin. ``` lang=cpp, name=Lightning var RandomSpin : Boolean # RandomVelocity : real3 Random Velocity per particle. ``` lang=cpp, name=Lightning var RandomVelocity : Real3 # Size : real Size of each particle spawned. ``` lang=cpp, name=Lightning var Size : Real # SizeVariance : real How much the size can vary from the base size per particle. ``` lang=cpp, name=Lightning var SizeVariance : Real # Spin : real Speed in rads per second of the particle. ``` lang=cpp, name=Lightning var Spin : Real # SpinVariance : real How much spin speed can vary per particle. ``` lang=cpp, name=Lightning var SpinVariance : Real # StartVelocity : real3 Velocity of each particle at start. ``` lang=cpp, name=Lightning var StartVelocity : Real3 # TangentVelocity : real3 Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent. ``` lang=cpp, name=Lightning var TangentVelocity : Real3 # Methods # ResetCount : Void Reset the number of particles to emit back to EmitCount. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ResetCount()","title":"Particleemittershared"},{"location":"reference/class_reference/particleevent/","text":"Event Graphics Methods Properties Base Classes Derived Classes NewParticleCount event NewParticles # Properties # NewParticleCount : integer read-only ``` lang=cpp, name=Lightning var NewParticleCount : Integer # NewParticles : particlelistrange read-only ``` lang=cpp, name=Lightning var NewParticles : ParticleListRange # Methods","title":"Particleevent"},{"location":"reference/class_reference/particlelistrange/","text":"Graphics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : particlelistrange read-only ``` lang=cpp, name=Lightning var All : ParticleListRange # Current : particle read-only ``` lang=cpp, name=Lightning var Current : Particle # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # ParticleListRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleListRange() ``` # ParticleListRange : Void constructor Name Type Description p0 particlelistrange ``` lang=cpp, name=Lightning function ParticleListRange(p0 : ParticleListRange) ```","title":"Particlelistrange"},{"location":"reference/class_reference/particlesystem/","text":"Component Graphics (NOTE) An interface for generating and managing particles of a generic definition using emitters and animators. Methods Properties Base Classes Derived Classes AllParticles BoundingBoxSize graphical spriteparticlesystem Clear ChildSystem PreviewInEditor SystemSpace WarmUpTime # Properties # BoundingBoxSize : real Size of all sides of the bounding box used for frustum culling. ``` lang=cpp, name=Lightning var BoundingBoxSize : Real # ChildSystem : boolean If set, particle emission will happen for each particle in a parent system. ``` lang=cpp, name=Lightning var ChildSystem : Boolean # PreviewInEditor : boolean If the particle system should run on frame update in the editor instead of logic update. ``` lang=cpp, name=Lightning var PreviewInEditor : Boolean # SystemSpace : SystemSpace If particles are emitted into world space or if transform data remains relative to the transform of the system object. ``` lang=cpp, name=Lightning var SystemSpace : SystemSpace # WarmUpTime : real The amount of time to simulate the particle system on startup. This will be done on AllObjectsCreated, and will use the engines dt. This is good for when you want the particle effect to be in full bloom when you first see it. However, it can hurt performance at high values on startup. ``` lang=cpp, name=Lightning var WarmUpTime : Real # Methods # AllParticles : particlelistrange A list of all particles currently active in the system. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function AllParticles() : ParticleListRange # Clear : Void Clear all current particles. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear()","title":"Particlesystem"},{"location":"reference/class_reference/particletwister/","text":"Component Graphics Methods Properties Base Classes Derived Classes Constructor Axis particleanimator MaxDistance MinDistance Strength # Properties # Axis : real3 ``` lang=cpp, name=Lightning var Axis : Real3 # MaxDistance : real ``` lang=cpp, name=Lightning var MaxDistance : Real # MinDistance : real ``` lang=cpp, name=Lightning var MinDistance : Real # Strength : real ``` lang=cpp, name=Lightning var Strength : Real # Methods # ParticleTwister : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleTwister() ```","title":"Particletwister"},{"location":"reference/class_reference/particlewander/","text":"Component Graphics (NOTE) Particle animator that causes particle to wander or smoothly vary directions. Methods Properties Base Classes Derived Classes Constructor WanderAngle particleanimator WanderAngleVariance WanderStrength # Properties # WanderAngle : real ``` lang=cpp, name=Lightning var WanderAngle : Real # WanderAngleVariance : real ``` lang=cpp, name=Lightning var WanderAngleVariance : Real # WanderStrength : real ``` lang=cpp, name=Lightning var WanderStrength : Real # Methods # ParticleWander : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ParticleWander() ```","title":"Particlewander"},{"location":"reference/class_reference/phygunjoint/","text":"Component Physics (NOTE) Legacy. A physics gun joint is an experimental joint for picking up objects. This acts as a weld between an object and the world. Primarily an experiment for picking up objects as a player. Should be custom implemented in script with CustomJoint instead. Methods Properties Base Classes Derived Classes Constructor LocalPoint joint TargetPoint TargetRotation WorldPoint WorldRotation # Properties # LocalPoint : real3 The local point on the object that should match the target point. ``` lang=cpp, name=Lightning var LocalPoint : Real3 # TargetPoint : real3 The point in world space that the object's point should match. ``` lang=cpp, name=Lightning var TargetPoint : Real3 # TargetRotation : quaternion The world space rotation that the basis of the object should match. Used to set the desired rotation of the object in world space. ``` lang=cpp, name=Lightning var TargetRotation : Quaternion # WorldPoint : real3 The world point on the object that should match the target point. ``` lang=cpp, name=Lightning var WorldPoint : Real3 # WorldRotation : quaternion Used to set the world rotation basis of the object that should be matched to the target rotation. ``` lang=cpp, name=Lightning var WorldRotation : Quaternion # Methods # PhyGunJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhyGunJoint() ```","title":"Phygunjoint"},{"location":"reference/class_reference/phygunjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # PhyGunJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhyGunJointBlock() ```","title":"Phygunjointblock"},{"location":"reference/class_reference/physicscar/","text":"Component Physics (NOTE) A controller for a high speed physics based car. The car is controlled with a steer, gas, and brake scalar. The car will raycast wheel positions to try to keep the wheels on the ground and then apply friction and normal forces to propel the car. Methods Properties Base Classes Derived Classes NumberOfWheelsInContact Active component Constructor AntiLockBrakes Brake DebugDraw Gas GripScalar MaxSpeed MaxTorque Steer TorqueGovernor WheelCogs WheelFrictionFrontRollCoef WheelFrictionSideRollCoef # Properties # Active : boolean Whether or not the car will run any logic at all. If this is false wheels will not work, they will not behave as springs, drive, or anything else. ``` lang=cpp, name=Lightning var Active : Boolean # AntiLockBrakes : boolean Prevents the car from entering dynamic friction when applying brakes. If the brake would start to skid, the brake force is clamped to the max amount that will not slip. ``` lang=cpp, name=Lightning var AntiLockBrakes : Boolean # Brake : real How much the brake is being pressed [0,1] where 1 is full brake. ``` lang=cpp, name=Lightning var Brake : Real # DebugDraw : boolean Whether or not the car should debug draw. ``` lang=cpp, name=Lightning var DebugDraw : Boolean # Gas : real How much the gas is being pressed [-1,1] where -1 is full reverse. ``` lang=cpp, name=Lightning var Gas : Real # GripScalar : real Artificially increases the grip of the car (where 2 is twice the grip). The total grip scalar is computed as CarGripScalar * WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks. ``` lang=cpp, name=Lightning var GripScalar : Real # MaxSpeed : real The desired maximum speed of the car. Similar to a speed governor. ``` lang=cpp, name=Lightning var MaxSpeed : Real # MaxTorque : real The maximum torque the engine can apply to try to reach the max speed. ``` lang=cpp, name=Lightning var MaxTorque : Real # Steer : real How much the wheel is being steered. This is measured in radians about this object's y-axis. ``` lang=cpp, name=Lightning var Steer : Real # TorqueGovernor : boolean Governs the max torque that the engine can apply. This is used to keep the wheels from spinning out (slipping) when too high of a torque is applied. If the tires would slip, the engine will apply the maximum torque for the tires to not slip. ``` lang=cpp, name=Lightning var TorqueGovernor : Boolean # WheelCogs : carwheelarray read-only Read-only array of wheels belonging to this car. ``` lang=cpp, name=Lightning var WheelCogs : CarWheelArray # WheelFrictionFrontRollCoef : real Coefficient used to apply the forward friction force closer to the car's center of mass. 1 applies the force at the wheel position, 0 applies the force at the point along the contact normal closest to the center of mass. ``` lang=cpp, name=Lightning var WheelFrictionFrontRollCoef : Real # WheelFrictionSideRollCoef : real Coefficient used to apply the side friction force closer to the car's center of mass. 1 applies the force at the wheel position, 0 applies the force at the point along the contact normal closest to the center of mass. ``` lang=cpp, name=Lightning var WheelFrictionSideRollCoef : Real # Methods # NumberOfWheelsInContact : integer The number of wheels currently in contact with an object. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function NumberOfWheelsInContact() : Integer # PhysicsCar : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsCar() ```","title":"Physicscar"},{"location":"reference/class_reference/physicscarwheel/","text":"Component Physics (NOTE) A wheel for a high speed physics based car. Each wheel contains properties to describe how to interact with the world (eg. spring forces, friction, etc...). Methods Properties Base Classes Derived Classes Constructor Active component ContactedObject ContactNormal ContactPoint DampingCompressionRatio DampingRelaxationRatio DriveFactor ForwardDynamicFriction ForwardImpulse ForwardStaticFriction FrequencyHz Grip GripScalar Is2DWheel IsDriveWheel IsInContact IsSliding MaxBrakeStrength MaxSpringCompressionDistance MaxSpringForce MaxSpringRelaxationDistance NormalImpulse PhysicsCarPath PreRotation Radius Rotation RotationalVelocity SideDynamicFriction SideImpulse SideStaticFriction SpringLength SpringMaxLength SpringMinLength SpringRestLength SpringStartLength SteerFactor WheelLocalStartPosition WorldAngularVelocity WorldAxleAxis WorldForwardAxis WorldLinearVelocity WorldSpringAxis WorldWheelBasis # Properties # Active : boolean Should this wheel calculate forces for the current PhysicsCar. ``` lang=cpp, name=Lightning var Active : Boolean # ContactedObject : cog read-only The object that this wheel is currently in contact with. ``` lang=cpp, name=Lightning var ContactedObject : Cog # ContactNormal : real3 read-only The normal of the surface where the wheel is currently in contact. Will be the plasma vector if there is no contact. ``` lang=cpp, name=Lightning var ContactNormal : Real3 # ContactPoint : real3 read-only The point in world space where the wheel is currently in contact. Will be the plasma vector if there is no contact. ``` lang=cpp, name=Lightning var ContactPoint : Real3 # DampingCompressionRatio : real The damping ratio when the spring is compressing (0: no damping, 1 critical damping) ``` lang=cpp, name=Lightning var DampingCompressionRatio : Real # DampingRelaxationRatio : real The damping ratio when the spring is relaxing (0: no damping, 1 critical damping) ``` lang=cpp, name=Lightning var DampingRelaxationRatio : Real # DriveFactor : real Used to alter the direction this wheel turns when the motor receives power. Typically set to 1 or -1. Useful to cause a wheel to temporarily rotate backwards without having to change its basis. ``` lang=cpp, name=Lightning var DriveFactor : Real # ForwardDynamicFriction : real Determines the force applied in the forward direction when the wheel is in dynamic friction and therefore slipping. (i.e. force = muK * Fnormal) ``` lang=cpp, name=Lightning var ForwardDynamicFriction : Real # ForwardImpulse : real read-only The forward impulse (drive force) being exerted by the wheel. ``` lang=cpp, name=Lightning var ForwardImpulse : Real # ForwardStaticFriction : real Used with Coulomb's friction to determine when the wheel will start slipping in the forward direction. (i.e. the friction is bound by muS * Fnormal). ``` lang=cpp, name=Lightning var ForwardStaticFriction : Real # FrequencyHz : real The frequency at which the spring of this wheel oscillates per second. ``` lang=cpp, name=Lightning var FrequencyHz : Real # Grip : real read-only A coefficient from 0 to 1 that represents how much grip the wheel has. ``` lang=cpp, name=Lightning var Grip : Real # GripScalar : real Artificially increases the grip of the car (where 2 is twice the grip). The total grip scalar is computed as CarGripScalar * WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks. ``` lang=cpp, name=Lightning var GripScalar : Real # Is2DWheel : boolean Does this wheel only operate in 2D? Ignores the side friction axis. ``` lang=cpp, name=Lightning var Is2DWheel : Boolean # IsDriveWheel : boolean Drive wheels turn when the car body has gas pressed. ``` lang=cpp, name=Lightning var IsDriveWheel : Boolean # IsInContact : boolean read-only If the wheel is currently in contact with an object. ``` lang=cpp, name=Lightning var IsInContact : Boolean # IsSliding : boolean read-only If the wheel is currently sliding. This means that the wheel is slipping from spinning too fast (using dynamic friction instead of static). ``` lang=cpp, name=Lightning var IsSliding : Boolean # MaxBrakeStrength : real The max force that this wheel can exert to break. ``` lang=cpp, name=Lightning var MaxBrakeStrength : Real # MaxSpringCompressionDistance : real The max distance that a spring can compress in one frame. ``` lang=cpp, name=Lightning var MaxSpringCompressionDistance : Real # MaxSpringForce : real The maximum force that the wheel's spring can exert. ``` lang=cpp, name=Lightning var MaxSpringForce : Real # MaxSpringRelaxationDistance : real The max distance that a spring can relax in one frame. ``` lang=cpp, name=Lightning var MaxSpringRelaxationDistance : Real # NormalImpulse : real read-only The normal impulse (spring force) being exerted by the wheel. ``` lang=cpp, name=Lightning var NormalImpulse : Real # PhysicsCarPath : cogpath The path to the car that this is a wheel for. ``` lang=cpp, name=Lightning var PhysicsCarPath : CogPath # PreRotation : quaternion Used to rotate the wheel before taking into account it's transform. Typically used to rotate a cylinder to align with a model. ``` lang=cpp, name=Lightning var PreRotation : Quaternion # Radius : real The radius of the wheel. ``` lang=cpp, name=Lightning var Radius : Real # Rotation : real read-only The current rotation of the wheel in radians about it's axle. ``` lang=cpp, name=Lightning var Rotation : Real # RotationalVelocity : real read-only The current rotational velocity of the wheel about it's axle. ``` lang=cpp, name=Lightning var RotationalVelocity : Real # SideDynamicFriction : real Same as ForwardDynamicFriction, but in the side direction. See SideStaticFriction for a why these are separated. ``` lang=cpp, name=Lightning var SideDynamicFriction : Real # SideImpulse : real read-only The side impulse (side friction) being exerted by the wheel. ``` lang=cpp, name=Lightning var SideImpulse : Real # SideStaticFriction : real Same as ForwardStaticFriction, but in the side direction. Forward and side friction are separated since the forward direction is rolling friction and the side direction is sliding friction. ``` lang=cpp, name=Lightning var SideStaticFriction : Real # SpringLength : real read-only The current length of the spring. ``` lang=cpp, name=Lightning var SpringLength : Real # SpringMaxLength : real The maximum length of the spring of the wheel. If the wheel hits something further away than this length (plus the wheel radius) then that object will be ignored. ``` lang=cpp, name=Lightning var SpringMaxLength : Real # SpringMinLength : real The minimum length of the spring of the wheel. If a wheel cast hits an object at a time before min but after start then the wheel will still collide with this object but the spring forces and visuals will be at the min spring length. This is useful for putting the starting raycast position inside of the object so as to avoid tunneling but still having the wheel only visually display where it should. ``` lang=cpp, name=Lightning var SpringMinLength : Real # SpringRestLength : real The rest length of the spring. ``` lang=cpp, name=Lightning var SpringRestLength : Real # SpringStartLength : real The t value to start the raycast at. This t value is 0 at the wheel position and travels in the direction of the wheel spring direction. This value is used to modify where the raycast actually starts relative to the start position. ``` lang=cpp, name=Lightning var SpringStartLength : Real # SteerFactor : real How much this wheel steers. [0, 1] where 1 is the max steering of the car. ``` lang=cpp, name=Lightning var SteerFactor : Real # WheelLocalStartPosition : real3 The local position on the car body that the wheel starts at (raycasts from). ``` lang=cpp, name=Lightning var WheelLocalStartPosition : Real3 # WorldAngularVelocity : real3 read-only The axis that represents the world angular velocity of the wheel. ``` lang=cpp, name=Lightning var WorldAngularVelocity : Real3 # WorldAxleAxis : real3 read-only The current axis of the wheel's axle in world space. ``` lang=cpp, name=Lightning var WorldAxleAxis : Real3 # WorldForwardAxis : real3 read-only The current axis of the wheel's forward in world space. ``` lang=cpp, name=Lightning var WorldForwardAxis : Real3 # WorldLinearVelocity : real3 read-only The velocity of the center of the wheel while taking into account the car's velocity. ``` lang=cpp, name=Lightning var WorldLinearVelocity : Real3 # WorldSpringAxis : real3 read-only The current world-space spring axis of the wheel. ``` lang=cpp, name=Lightning var WorldSpringAxis : Real3 # WorldWheelBasis : quaternion Determines what directions the forward, axle, and spring are on the wheel. The forward direction is taken from the x-axis of the basis. Likewise the axle is from the y-axis and the spring is from the z-axis. Use ToQuaternion to construct this. ``` lang=cpp, name=Lightning var WorldWheelBasis : Quaternion # Methods # PhysicsCarWheel : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsCarWheel() ```","title":"Physicscarwheel"},{"location":"reference/class_reference/physicscarwheelbasisgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # PhysicsCarWheelBasisGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsCarWheelBasisGizmo() ```","title":"Physicscarwheelbasisgizmo"},{"location":"reference/class_reference/physicseffect/","text":"Component Physics (NOTE) A common interface for all effects in physics. An effect is something that typically applies a force and can be attached to a collider, rigid body, region, or even a space. This effect is applied every frame according to the rules of the object it is attached to. Methods Properties Base Classes Derived Classes Toggle Active component basicdirectioneffect DebugDrawEffect basicpointeffect EffectType buoyancyeffect WakeUpOnChange customphysicseffect drageffect floweffect thrusteffect torqueeffect vortexeffect windeffect # Properties # Active : boolean Enable/disable this effect. ``` lang=cpp, name=Lightning var Active : Boolean # DebugDrawEffect : boolean Should the effect debug draw. ``` lang=cpp, name=Lightning var DebugDrawEffect : Boolean # EffectType : PhysicsEffectType read-only What kind of effect this is (e.g. ForceEffect, GravityEffect, etc...). ``` lang=cpp, name=Lightning var EffectType : PhysicsEffectType # WakeUpOnChange : boolean Whether the object associated with this is woken up when any property is changed. ``` lang=cpp, name=Lightning var WakeUpOnChange : Boolean # Methods # Toggle : Void Toggles whether or not this effect is active. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Toggle()","title":"Physicseffect"},{"location":"reference/class_reference/physicsengine/","text":"Physics Methods Properties Base Classes Derived Classes system # Properties # Methods","title":"Physicsengine"},{"location":"reference/class_reference/physicsmaterial/","text":"Resource Physics (NOTE) Describes material properties of a collider mainly used during collision resolution. Methods Properties Base Classes Derived Classes CreateRuntime Density dataresource Constructor Friction RuntimeClone FrictionImportance UpdateAndNotifyIfModified HighPriority Restitution RestitutionImportance # Properties # Density : real Density is used to determine the mass of an object. Mass is computed as density * volume. Density can be set to exactly 0 to produce a massless object, however this should only be done with children objects to add collision without affecting mass. ``` lang=cpp, name=Lightning var Density : Real # Friction : real How slippery or rough the object is. When friction is 0 the object will be slippery. As friction increases, sliding objects will stop quicker. The friction of two object's are combined with the formula sqrt(a * b). ``` lang=cpp, name=Lightning var Friction : Real # FrictionImportance : real Determines which object's friction should be used. If object A's friction importance value is larger than object B's then object A's friction will be used. If both importance values are the same then the default combination logic will be used (see the description of Friction for details). ``` lang=cpp, name=Lightning var FrictionImportance : Real # HighPriority : boolean Deprecated. Use RestitutionImportance instead. ``` lang=cpp, name=Lightning var HighPriority : Boolean # Restitution : real How much an object will bounce during a collision. Values should be in the range [0,1] where 0 is an inelastic collision and 1 is a fully elastic collision. Restitution is computed as the max of the two objects. Note: due to solving constraints with baumgarte, energy will not be perfectly conserved with a restitution 1. ``` lang=cpp, name=Lightning var Restitution : Real # RestitutionImportance : real Determines which object's restitution should be used. If object A's restitution importance value is larger than object B's then object A's restitution will be used. If both importance values are the same then the default combination logic will be used (see the description of Restitution for details). ``` lang=cpp, name=Lightning var RestitutionImportance : Real # Methods # CreateRuntime : physicsmaterial static Creates a PhysicsMaterial for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : PhysicsMaterial # PhysicsMaterial : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsMaterial() ``` # RuntimeClone : physicsmaterial Creates a clone of this material for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : PhysicsMaterial # UpdateAndNotifyIfModified : Void After modifying this resource, notify anyone using it to update now instead of at the next physics update. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UpdateAndNotifyIfModified()","title":"Physicsmaterial"},{"location":"reference/class_reference/physicsmesh/","text":"Resource Physics (NOTE) A mesh used to represent static world geometry. All geometry is stored and tested as a collection of triangles. Methods Properties Base Classes Derived Classes CreateRuntime genericphysicsmesh Constructor RuntimeClone # Properties # Methods # CreateRuntime : physicsmesh static Creates a PhysicsMesh for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : PhysicsMesh # PhysicsMesh : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsMesh() ``` # RuntimeClone : physicsmesh Creates a clone of this mesh for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : PhysicsMesh","title":"Physicsmesh"},{"location":"reference/class_reference/physicsmeshbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor MeshBuilt buildercomponent # Properties # MeshBuilt : PhysicsMeshType ``` lang=cpp, name=Lightning var MeshBuilt : PhysicsMeshType # Methods # PhysicsMeshBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsMeshBuilder() ```","title":"Physicsmeshbuilder"},{"location":"reference/class_reference/physicsmeshindexdata/","text":"Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set # Properties # All : physicsmeshindexrange read-only ``` lang=cpp, name=Lightning var All : PhysicsMeshIndexRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Name Type Description integer ``` lang=cpp, name=Lightning function Add( : Integer) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Get : integer Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : Integer ``` # Set : Void Name Type Description integer integer ``` lang=cpp, name=Lightning function Set( : Integer, : Integer) ```","title":"Physicsmeshindexdata"},{"location":"reference/class_reference/physicsmeshindexrange/","text":"Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : physicsmeshindexrange read-only ``` lang=cpp, name=Lightning var All : PhysicsMeshIndexRange # Current : integer read-only ``` lang=cpp, name=Lightning var Current : Integer # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # PhysicsMeshIndexRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsMeshIndexRange() ``` # PhysicsMeshIndexRange : Void constructor Name Type Description p0 physicsmeshindexrange ``` lang=cpp, name=Lightning function PhysicsMeshIndexRange(p0 : PhysicsMeshIndexRange) ```","title":"Physicsmeshindexrange"},{"location":"reference/class_reference/physicsmeshvertexdata/","text":"Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set # Properties # All : physicsmeshvertexrange read-only ``` lang=cpp, name=Lightning var All : PhysicsMeshVertexRange # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Name Type Description real3 ``` lang=cpp, name=Lightning function Add( : Real3) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Get : real3 Name Type Description integer ``` lang=cpp, name=Lightning function Get( : Integer) : Real3 ``` # Set : Void Name Type Description integer real3 ``` lang=cpp, name=Lightning function Set( : Integer, : Real3) ```","title":"Physicsmeshvertexdata"},{"location":"reference/class_reference/physicsmeshvertexrange/","text":"Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : physicsmeshvertexrange read-only ``` lang=cpp, name=Lightning var All : PhysicsMeshVertexRange # Current : real3 read-only ``` lang=cpp, name=Lightning var Current : Real3 # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # PhysicsMeshVertexRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsMeshVertexRange() ``` # PhysicsMeshVertexRange : Void constructor Name Type Description p0 physicsmeshvertexrange ``` lang=cpp, name=Lightning function PhysicsMeshVertexRange(p0 : PhysicsMeshVertexRange) ```","title":"Physicsmeshvertexrange"},{"location":"reference/class_reference/physicsraycastprovider/","text":"Physics (NOTE) Provides the interface for casting through PhysicsSpaces. Methods Properties Base Classes Derived Classes Constructor DynamicColliders raycastprovider MultiSelectKinematic MultiSelectStatic SelectGhosts StaticColliders # Properties # DynamicColliders : boolean Should dynamic colliders (those with rigid bodies) be selected? ``` lang=cpp, name=Lightning var DynamicColliders : Boolean # MultiSelectKinematic : boolean Should multi-selection work with kinematic objects? ``` lang=cpp, name=Lightning var MultiSelectKinematic : Boolean # MultiSelectStatic : boolean Should multi-selection work with static objects? ``` lang=cpp, name=Lightning var MultiSelectStatic : Boolean # SelectGhosts : boolean Should ghost colliders be selected? ``` lang=cpp, name=Lightning var SelectGhosts : Boolean # StaticColliders : boolean Should static colliders (those without rigid bodies) be selected? ``` lang=cpp, name=Lightning var StaticColliders : Boolean # Methods # PhysicsRaycastProvider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsRaycastProvider() ```","title":"Physicsraycastprovider"},{"location":"reference/class_reference/physicssolverconfig/","text":"Resource Physics (NOTE) Defines various configuration values used by physics to solve constraints. This resource defines a tiered set of properties that can be overridden global or per constraint type. Methods Properties Base Classes Derived Classes Constructor PositionCorrectionType dataresource PositionIterationCount SolverIterationCount VelocityRestitutionThreshold # Properties # PositionCorrectionType : PhysicsSolverPositionCorrection What method should be used to fix errors in joints. Baumgarte fixes errors by adding extra velocity but results in a more spongy behavior. Post Stabilization fixes errors by directly modifying position but can behave worse in unsolvable configurations. ``` lang=cpp, name=Lightning var PositionCorrectionType : PhysicsSolverPositionCorrection # PositionIterationCount : integer The number of iterations used for position correction (if position correction is used). ``` lang=cpp, name=Lightning var PositionIterationCount : Integer # SolverIterationCount : integer The number of iterations used in the constraint solver. Affects how stiff joints will be. ``` lang=cpp, name=Lightning var SolverIterationCount : Integer # VelocityRestitutionThreshold : real To prevent numerical issues, restitution is only applied if the relative velocity between the two objects is above this value. ``` lang=cpp, name=Lightning var VelocityRestitutionThreshold : Real # Methods # PhysicsSolverConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsSolverConfig() ```","title":"Physicssolverconfig"},{"location":"reference/class_reference/physicsspace/","text":"Component Physics (NOTE) The PhysicsSpace is an \"instance\" of a world. This world manages and stores all of the other physical components of this world. PhysicSpaces act independently of each other. Methods Properties Base Classes Derived Classes AddHierarchyPairFilter AllowSleep component AddPairFilter CollisionTable CastAabb Deterministic CastCollider DynamicBroadphaseType CastFrustum Mode2D CastRay PhysicsSolverConfig CastRayFirst StaticBroadphaseType CastSegment SubStepCount CastSphere CreateJoint DispatchWithinAabb DispatchWithinSphere FlushPhysicsQueue Constructor RemoveHierarchyPairFilter RemovePairFilter SweepCollider WhyAreTheyNotColliding # Properties # AllowSleep : boolean Determines if anything in the space is allowed to fall sleep. ``` lang=cpp, name=Lightning var AllowSleep : Boolean # CollisionTable : collisiontable The collision table resource used to filter collisions in this space. ``` lang=cpp, name=Lightning var CollisionTable : CollisionTable # Deterministic : boolean Performs extra work to help enforce determinism in the simulation. ``` lang=cpp, name=Lightning var Deterministic : Boolean # DynamicBroadphaseType : string What kind of broadphase is used for dynamic objects (those with RigidBodies). ``` lang=cpp, name=Lightning var DynamicBroadphaseType : String # Mode2D : boolean The default 2D mode for this space. If a RigidBody is set to InheritFromSpace then it will use this value. ``` lang=cpp, name=Lightning var Mode2D : Boolean # PhysicsSolverConfig : physicssolverconfig The resource that controls how physics solves things. Mostly related to how collision is resolved. ``` lang=cpp, name=Lightning var PhysicsSolverConfig : PhysicsSolverConfig # StaticBroadphaseType : string What kind of broadphase is used for static objects (those without RigidBodies). ``` lang=cpp, name=Lightning var StaticBroadphaseType : String # SubStepCount : integer The number of iterations the physics space will take every frame. Used to achieve higher accuracy and increase visual results. ``` lang=cpp, name=Lightning var SubStepCount : Integer # Methods # AddHierarchyPairFilter : Void Adds a filter to ignore collision between both hierarchies passed in. See AddPairFilter for more info. |Name|Type|Description| |---|---|---| |cog1| cog | | |cog2| cog | | lang=cpp, name=Lightning function AddHierarchyPairFilter(cog1 : Cog, cog2 : Cog) # AddPairFilter : Void Filters two cogs to not resolve collisions with each other. This is a runtime only feature and will not be saved. |Name|Type|Description| |---|---|---| |cog1| cog | | |cog2| cog | | lang=cpp, name=Lightning function AddPairFilter(cog1 : Cog, cog2 : Cog) # CastAabb : castresultsrange Finds all colliders in the space that an Aabb hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |aabb| aabb | | |maxCount| integer | | |filter| castfilter | | lang=cpp, name=Lightning function CastAabb(aabb : Aabb, maxCount : Integer, filter : CastFilter) : CastResultsRange # CastCollider : castresultsrange Finds all colliders in the space that another collider hits using the given filter. The test collider's position can be offset to test at a different location. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |offset| real3 | | |testCollider| collider | | |filter| castfilter | | lang=cpp, name=Lightning function CastCollider(offset : Real3, testCollider : Collider, filter : CastFilter) : CastResultsRange # CastFrustum : castresultsrange Finds all colliders in the space that a Frustum hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |frustum| frustum | | |maxCount| integer | | |filter| castfilter | | lang=cpp, name=Lightning function CastFrustum(frustum : Frustum, maxCount : Integer, filter : CastFilter) : CastResultsRange # CastRay : castresultsrange Finds all colliders in the space that a ray hits. This returns up to maxCount number of objects. A default CastFilter will be used. |Name|Type|Description| |---|---|---| |worldRay| ray | | |maxCount| integer | | lang=cpp, name=Lightning function CastRay(worldRay : Ray, maxCount : Integer) : CastResultsRange # CastRay : castresultsrange Finds all colliders in the space that a ray hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |worldRay| ray | | |maxCount| integer | | |filter| castfilter | | lang=cpp, name=Lightning function CastRay(worldRay : Ray, maxCount : Integer, filter : CastFilter) : CastResultsRange # CastRayFirst : castresult Finds the first collider that a ray hits. A default CastFilter will be used. |Name|Type|Description| |---|---|---| |worldRay| ray | | lang=cpp, name=Lightning function CastRayFirst(worldRay : Ray) : CastResult # CastRayFirst : castresult Finds the first collider that a ray hits using the given filter. |Name|Type|Description| |---|---|---| |worldRay| ray | | |filter| castfilter | | lang=cpp, name=Lightning function CastRayFirst(worldRay : Ray, filter : CastFilter) : CastResult # CastSegment : castresultsrange Finds all colliders in the space that a line segment hits. This returns up to maxCount number of objects. A default CastFilter will be used. |Name|Type|Description| |---|---|---| |segment| segment | | |maxCount| integer | | lang=cpp, name=Lightning function CastSegment(segment : Segment, maxCount : Integer) : CastResultsRange # CastSegment : castresultsrange Finds all colliders in the space that a line segment hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |segment| segment | | |maxCount| integer | | |filter| castfilter | | lang=cpp, name=Lightning function CastSegment(segment : Segment, maxCount : Integer, filter : CastFilter) : CastResultsRange # CastSphere : castresultsrange Finds all colliders in the space that a Sphere hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |sphere| sphere | | |maxCount| integer | | |filter| castfilter | | lang=cpp, name=Lightning function CastSphere(sphere : Sphere, maxCount : Integer, filter : CastFilter) : CastResultsRange # CreateJoint : cog Creates a joint by name (e.g. StickJoint) between two cogs. The world points of the joint are both set to worldPoint. |Name|Type|Description| |---|---|---| |cog0| cog | | |cog1| cog | | |jointName| string | | |worldPoint| real3 | | lang=cpp, name=Lightning function CreateJoint(cog0 : Cog, cog1 : Cog, jointName : String, worldPoint : Real3) : Cog # DispatchWithinAabb : Void Dispatches an event to all objects within the given aabb using the provided cast filter. |Name|Type|Description| |---|---|---| |aabb| aabb | | |filter| castfilter | | |eventName| string | | |toSend| event | | lang=cpp, name=Lightning function DispatchWithinAabb(aabb : Aabb, filter : CastFilter, eventName : String, toSend : Event) # DispatchWithinAabb : Void Dispatches an event to all objects within the given aabb. Uses the default cast filter. |Name|Type|Description| |---|---|---| |aabb| aabb | | |eventName| string | | |toSend| event | | lang=cpp, name=Lightning function DispatchWithinAabb(aabb : Aabb, eventName : String, toSend : Event) # DispatchWithinSphere : Void Dispatches an event to all objects within the given sphere using the provided cast filter. |Name|Type|Description| |---|---|---| |sphere| sphere | | |filter| castfilter | | |eventName| string | | |toSend| event | | lang=cpp, name=Lightning function DispatchWithinSphere(sphere : Sphere, filter : CastFilter, eventName : String, toSend : Event) # DispatchWithinSphere : Void Dispatches an event to all objects within the given sphere. Uses the default cast filter. |Name|Type|Description| |---|---|---| |sphere| sphere | | |eventName| string | | |toSend| event | | lang=cpp, name=Lightning function DispatchWithinSphere(sphere : Sphere, eventName : String, toSend : Event) # FlushPhysicsQueue : Void Forces all queued computations in physics to be updated now. Should only be used for debugging. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function FlushPhysicsQueue() # PhysicsSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PhysicsSpace() ``` # RemoveHierarchyPairFilter : Void Removes the filters between both hierarchies. See RemovePairFilter for more info. |Name|Type|Description| |---|---|---| |cog1| cog | | |cog2| cog | | lang=cpp, name=Lightning function RemoveHierarchyPairFilter(cog1 : Cog, cog2 : Cog) # RemovePairFilter : Void Removes the filter between two cogs allowing collisions to be computed as normal. |Name|Type|Description| |---|---|---| |cog1| cog | | |cog2| cog | | lang=cpp, name=Lightning function RemovePairFilter(cog1 : Cog, cog2 : Cog) # SweepCollider : sweepresultrange Performs a swept cast with a collider's shape and a given velocity. Returns a range of all objects the collider could've hit within 'dt' time. |Name|Type|Description| |---|---|---| |collider| collider | | |velocity| real3 | | |dt| real | | |filter| castfilter | | lang=cpp, name=Lightning function SweepCollider(collider : Collider, velocity : Real3, dt : Real, filter : CastFilter) : SweepResultRange # WhyAreTheyNotColliding : string Returns a debug string stating why physics does or doesn't think these two objects should be colliding. |Name|Type|Description| |---|---|---| |cog1| cog | | |cog2| cog | | lang=cpp, name=Lightning function WhyAreTheyNotColliding(cog1 : Cog, cog2 : Cog) : String","title":"Physicsspace"},{"location":"reference/class_reference/pitchnode/","text":"Sound (NOTE) Changes the pitch and speed of audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolatePitch Pitch soundnode InterpolateSemitones Semitones # Properties # Pitch : real The pitch adjustment applied to the node's input. A value of 0 will not affect the sound's pitch; 1 will raise the pitch by an octave and speed up the sound, and -1 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound. ``` lang=cpp, name=Lightning var Pitch : Real # Semitones : real The pitch adjustment, in semitones (or half-steps), applied to the node's input. A value of 0 will not affect the sound's pitch; 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound. ``` lang=cpp, name=Lightning var Semitones : Real # Methods # InterpolatePitch : Void Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitchRatio| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolatePitch(pitchRatio : Real, interpolationTime : Real) # InterpolateSemitones : Void Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitchSemitones| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateSemitones(pitchSemitones : Real, interpolationTime : Real)","title":"Pitchnode"},{"location":"reference/class_reference/plane/","text":"Geometry Methods Properties Base Classes Derived Classes Constructor Data Set Distance Normal # Properties # Data : real4 ``` lang=cpp, name=Lightning var Data : Real4 # Distance : real read-only ``` lang=cpp, name=Lightning var Distance : Real # Normal : real3 read-only ``` lang=cpp, name=Lightning var Normal : Real3 # Methods # Plane : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Plane() ``` # Plane : Void constructor Name Type Description p0 plane ``` lang=cpp, name=Lightning function Plane(p0 : Plane) ``` # Plane : Void constructor Name Type Description normal real3 point real3 ``` lang=cpp, name=Lightning function Plane(normal : Real3, point : Real3) ``` # Plane : Void constructor Name Type Description data real4 ``` lang=cpp, name=Lightning function Plane(data : Real4) ``` # Set : Void Name Type Description normal real3 point real3 ``` lang=cpp, name=Lightning function Set(normal : Real3, point : Real3) ``` # Set : Void Name Type Description data real4 ``` lang=cpp, name=Lightning function Set(data : Real4) ```","title":"Plane"},{"location":"reference/class_reference/pointforceeffect/","text":"Component Physics (NOTE) A force effect with a direction and strength based upon the distance from a central point. The direction of the force will always point away from the effect center, but the strength will vary depending on the min/max distance and strength values. Positive strength values point away from the effect center. Useful to make planetary force field like effects. Methods Properties Base Classes Derived Classes Constructor basicpointeffect # Properties # Methods # PointForceEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PointForceEffect() ```","title":"Pointforceeffect"},{"location":"reference/class_reference/pointgravityeffect/","text":"Component Physics (NOTE) A force effect that pulls an object towards a central point. This effect is nearly identical to PointForceEffect with two exceptions. 1. An acceleration is applied instead of a force (mass is ignored). 2. A positive strength value will pull objects toward the center of the effect. This is useful to make planetary gravity or other similar effects. Methods Properties Base Classes Derived Classes Constructor basicpointeffect # Properties # Methods # PointGravityEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PointGravityEffect() ```","title":"Pointgravityeffect"},{"location":"reference/class_reference/pointmassselectorsubtool/","text":"Editor Methods Properties Base Classes Derived Classes selectorspringsubtool anchoringsubtool pointselectorsubtool # Properties # Methods","title":"Pointmassselectorsubtool"},{"location":"reference/class_reference/pointselectorsubtool/","text":"Editor Methods Properties Base Classes Derived Classes pointmassselectorsubtool # Properties # Methods","title":"Pointselectorsubtool"},{"location":"reference/class_reference/popup/","text":"Editor Methods Properties Base Classes Derived Classes floatingcomposite autocompletepopup calltippopup # Properties # Methods","title":"Popup"},{"location":"reference/class_reference/posenode/","text":"Engine Methods Properties Base Classes Derived Classes animationnode # Properties # Methods","title":"Posenode"},{"location":"reference/class_reference/positionjoint/","text":"Component Physics (NOTE) Represents a ball and socket joint. A position joint constrains the two anchor points on each object to be equal. Limits, motors, and springs typically should not be used. Add on definitions: Limit: A limit will provide a min/max translation on every axis (x,y,z) that the objects must be between. Motor: A motor will attempt to drive the translation in the positive direction on every axis. Spring: A spring will make the translation on every axis springy at the bounds. Methods Properties Base Classes Derived Classes Constructor LocalPointA joint SetWorldPoints LocalPointB WorldPointA WorldPointB # Properties # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # PositionJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PositionJoint() ``` # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3)","title":"Positionjoint"},{"location":"reference/class_reference/positionjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # PositionJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PositionJointBlock() ```","title":"Positionjointblock"},{"location":"reference/class_reference/postaddresourceevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Postaddresourceevent"},{"location":"reference/class_reference/presolveblock/","text":"Physics (NOTE) CollisionFilterBlock for sending out an event before collision is solved. Allows modifying object state before collision responses have been calculated. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock # Properties # Methods # PreSolveBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PreSolveBlock() ```","title":"Presolveblock"},{"location":"reference/class_reference/presolveevent/","text":"Event Physics (NOTE) Event sent out when a CollisionFilter contains a PreSolveBlock. This event is sent out after collision detection but before collision resolution. This can be used to alter the state of the two objects in a collision before they're resolved (e.g. turn one from static to dynamic). Warning: Do not delete objects or do any other significant changes as this may destabilize the system. Methods Properties Base Classes Derived Classes Friction basecollisionevent Restitution # Properties # Friction : real The friction to use for solving this pair. Allows custom overriding for this pair. ``` lang=cpp, name=Lightning var Friction : Real # Restitution : real The restitution to use for solving this pair. Allows custom overriding for this pair. ``` lang=cpp, name=Lightning var Restitution : Real # Methods","title":"Presolveevent"},{"location":"reference/class_reference/previewwidget/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Previewwidget"},{"location":"reference/class_reference/previewwidgetfactory/","text":"Editor Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Previewwidgetfactory"},{"location":"reference/class_reference/prismaticjoint/","text":"Component Physics (NOTE) A prismatic joint sometimes called a slider) is used to create something similar to a piston. This joint fixes all degrees of rotation and leaves one linear axis free. Therefore, the bodies will rotate with each other and move with each other, except for one axis where they can move freely. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits. Methods Properties Base Classes Derived Classes Constructor LocalAxisA joint SetWorldPoints LocalAxisB LocalBasisA LocalBasisB LocalPointA LocalPointB WorldAxis WorldPointA WorldPointB # Properties # LocalAxisA : real3 The locally defined axis on object A . ``` lang=cpp, name=Lightning var LocalAxisA : Real3 # LocalAxisB : real3 The locally defined axis on object B . ``` lang=cpp, name=Lightning var LocalAxisB : Real3 # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldAxis : real3 The axis in world space that is being rotated about . ``` lang=cpp, name=Lightning var WorldAxis : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # PrismaticJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PrismaticJoint() ``` # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3)","title":"Prismaticjoint"},{"location":"reference/class_reference/prismaticjoint2d/","text":"Component Physics (NOTE) A prismatic joint is used to create something similar to a piston. This is the 2d version of PrismaticJoint. This joint is used in 2d mode for increased performance and stability. The slider axis is projected onto the z axis (the z component is ignored) so that the objects can be arbitrarily far apart. The x and y rotations are also ignored since the objects are only allowed to rotate about the z axis. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits. Methods Properties Base Classes Derived Classes Constructor LocalAxisA joint SetWorldPoints LocalAxisB LocalBasisA LocalBasisB LocalPointA LocalPointB WorldAxis WorldPointA WorldPointB # Properties # LocalAxisA : real3 The locally defined axis on object A . ``` lang=cpp, name=Lightning var LocalAxisA : Real3 # LocalAxisB : real3 The locally defined axis on object B . ``` lang=cpp, name=Lightning var LocalAxisB : Real3 # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldAxis : real3 The axis in world space that is being rotated about . ``` lang=cpp, name=Lightning var WorldAxis : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # PrismaticJoint2d : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PrismaticJoint2d() ``` # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3)","title":"Prismaticjoint2d"},{"location":"reference/class_reference/prismaticjoint2dblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # PrismaticJoint2dBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PrismaticJoint2dBlock() ```","title":"Prismaticjoint2dblock"},{"location":"reference/class_reference/prismaticjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # PrismaticJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PrismaticJointBlock() ```","title":"Prismaticjointblock"},{"location":"reference/class_reference/progressbar/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Progressbar"},{"location":"reference/class_reference/progressevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Progressevent"},{"location":"reference/class_reference/projectdescription/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor LongDescription component ShortDescription Tags # Properties # LongDescription : string ``` lang=cpp, name=Lightning var LongDescription : String # ShortDescription : string ``` lang=cpp, name=Lightning var ShortDescription : String # Tags : string ``` lang=cpp, name=Lightning var Tags : String # Methods # ProjectDescription : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ProjectDescription() ```","title":"Projectdescription"},{"location":"reference/class_reference/projectsettings/","text":"Component Engine (NOTE) Project component store primary data for a project. Projects are separate games with their own content and settings. Methods Properties Base Classes Derived Classes Constructor AutoTakeProjectScreenshot component ContentFolder EditorContentFolder ProjectFolder ProjectName ProjectOwner # Properties # AutoTakeProjectScreenshot : boolean ``` lang=cpp, name=Lightning var AutoTakeProjectScreenshot : Boolean # ContentFolder : string read-only Returns the path to the generated content folder for this project. ``` lang=cpp, name=Lightning var ContentFolder : String # EditorContentFolder : string read-only Returns the path to the content folder containing editor specific content (screen shot, editor settings, etc...). ``` lang=cpp, name=Lightning var EditorContentFolder : String # ProjectFolder : string read-only Returns the path to the folder containing this project. ``` lang=cpp, name=Lightning var ProjectFolder : String # ProjectName : string read-only Returns the Project's Name. ``` lang=cpp, name=Lightning var ProjectName : String # ProjectOwner : string ``` lang=cpp, name=Lightning var ProjectOwner : String # Methods # ProjectSettings : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ProjectSettings() # ProjectSettings : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ProjectSettings()","title":"Projectsettings"},{"location":"reference/class_reference/propertyevent/","text":"Event Meta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Propertyevent"},{"location":"reference/class_reference/propertyoperation/","text":"Engine Methods Properties Base Classes Derived Classes ValueAfter operation ValueBefore # Properties # ValueAfter : T read-only ``` lang=cpp, name=Lightning var ValueAfter : T # ValueBefore : T read-only ``` lang=cpp, name=Lightning var ValueBefore : T # Methods","title":"Propertyoperation"},{"location":"reference/class_reference/propertypath/","text":"Meta Methods Properties Base Classes Derived Classes Constructor # Properties # Methods # PropertyPath : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PropertyPath() ``` # PropertyPath : Void constructor Name Type Description p0 propertypath ``` lang=cpp, name=Lightning function PropertyPath(p0 : PropertyPath) ```","title":"Propertypath"},{"location":"reference/class_reference/propertyview/","text":"Editor Methods Properties Base Classes Derived Classes ActivateAutoUpdate composite Invalidate Refresh SetObject # Properties # Methods # ActivateAutoUpdate : Void Name Type Description ``` lang=cpp, name=Lightning function ActivateAutoUpdate() ``` # Invalidate : Void Name Type Description ``` lang=cpp, name=Lightning function Invalidate() ``` # Refresh : Void Name Type Description ``` lang=cpp, name=Lightning function Refresh() ``` # SetObject : Void Name Type Description p0 Object ``` lang=cpp, name=Lightning function SetObject(p0 : Object) ```","title":"Propertyview"},{"location":"reference/class_reference/propertywidget/","text":"Editor Methods Properties Base Classes Derived Classes composite addobjectwidget directproperty propertywidgetobject # Properties # Methods","title":"Propertywidget"},{"location":"reference/class_reference/propertywidgetobject/","text":"Editor Methods Properties Base Classes Derived Classes propertywidget # Properties # Methods","title":"Propertywidgetobject"},{"location":"reference/class_reference/pulleyjoint/","text":"Component Physics (NOTE) A PulleyJoint turns two StickJoints into a pulley via a pulley ratio. A PulleyJoint connects the two free objects of two different stick joints. These two objects will then be bound to move together via the formula \"length0 + ratio * length1 = 0\". Limits, motors and springs should not be used on a pulley. Methods Properties Base Classes Derived Classes Constructor JointA joint JointAPath JointB JointBPath Ratio # Properties # JointA : cog The joint connected to ObjectA that the pulley operates on. ``` lang=cpp, name=Lightning var JointA : Cog # JointAPath : cogpath The joint connected to ObjectA that the pulley operates on. ``` lang=cpp, name=Lightning var JointAPath : CogPath # JointB : cog The joint connected to ObjectB that the pulley operates on. ``` lang=cpp, name=Lightning var JointB : Cog # JointBPath : cogpath The joint connected to ObjectB that the pulley operates on. ``` lang=cpp, name=Lightning var JointBPath : CogPath # Ratio : real The ratio between the two stick joints. The ratio is used in the formula \"length0 + ratio * length1 = 0\". ``` lang=cpp, name=Lightning var Ratio : Real # Methods # PulleyJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PulleyJoint() ```","title":"Pulleyjoint"},{"location":"reference/class_reference/pulleyjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # PulleyJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PulleyJointBlock() ```","title":"Pulleyjointblock"},{"location":"reference/class_reference/querymodifiedsaveevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Querymodifiedsaveevent"},{"location":"reference/class_reference/quickhull3d/","text":"Gameplay Methods Properties Base Classes Derived Classes Add Index Build Mesh Clear ShowDebugDraw Draw Constructor # Properties # Index : integer ``` lang=cpp, name=Lightning var Index : Integer # Mesh : indexedhalfedgemesh ``` lang=cpp, name=Lightning var Mesh : IndexedHalfEdgeMesh # ShowDebugDraw : boolean ``` lang=cpp, name=Lightning var ShowDebugDraw : Boolean # Methods # Add : Void Name Type Description p0 real3 ``` lang=cpp, name=Lightning function Add(p0 : Real3) ``` # Build : boolean Name Type Description ``` lang=cpp, name=Lightning function Build() : Boolean ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Draw : Void Name Type Description ``` lang=cpp, name=Lightning function Draw() ``` # QuickHull3D : Void constructor Name Type Description ``` lang=cpp, name=Lightning function QuickHull3D() ``` # QuickHull3D : Void constructor Name Type Description p0 quickhull3d ``` lang=cpp, name=Lightning function QuickHull3D(p0 : QuickHull3D) ```","title":"Quickhull3d"},{"location":"reference/class_reference/raiselowertool/","text":"Editor Methods Properties Base Classes Derived Classes Relative heightmanipulationtool Strength # Properties # Relative : boolean ``` lang=cpp, name=Lightning var Relative : Boolean # Strength : real ``` lang=cpp, name=Lightning var Strength : Real # Methods","title":"Raiselowertool"},{"location":"reference/class_reference/randomcontext/","text":"Component Gameplay (NOTE) A random object that contains its own unique random state apart from all other instances of this class. Methods Properties Base Classes Derived Classes BellCurve MaxInt component BellCurveDistribution RandomSeed BellCurveRange Seed Bool CoinFlip DieRoll DoubleRange DoubleReal DoubleRealVariance Float FloatVariance Int IntVariance Probability Quaternion Constructor Range RangeExclusiveMax RangeInclusiveMax Real Real2 Real3 RealVariance Rotation UnitReal2 UnitReal3 UnitVector2 UnitVector3 Vector2 Vector3 # Properties # MaxInt : integer read-only The max integer value that can be returned. ``` lang=cpp, name=Lightning var MaxInt : Integer # RandomSeed : boolean ``` lang=cpp, name=Lightning var RandomSeed : Boolean # Seed : integer Seeds the random number generator. ``` lang=cpp, name=Lightning var Seed : Integer # Methods # BellCurve : real Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function BellCurve() : Real # BellCurveDistribution : real Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation. |Name|Type|Description| |---|---|---| |center| real | | |range| real | | |standardDeviation| real | | lang=cpp, name=Lightning function BellCurveDistribution(center : Real, range : Real, standardDeviation : Real) : Real # BellCurveRange : real Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1. |Name|Type|Description| |---|---|---| |center| real | | |range| real | | lang=cpp, name=Lightning function BellCurveRange(center : Real, range : Real) : Real # Bool : boolean Returns a random bool value. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Bool() : Boolean # CoinFlip : boolean Returns true if the coin flips heads. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CoinFlip() : Boolean # DieRoll : integer Randomly rolls a number in the range [1, sides]. |Name|Type|Description| |---|---|---| |sides| integer | | lang=cpp, name=Lightning function DieRoll(sides : Integer) : Integer # DoubleRange : doublereal Name Type Description doublereal doublereal ``` lang=cpp, name=Lightning function DoubleRange( : DoubleReal, : DoubleReal) : DoubleReal ``` # DoubleReal : doublereal Returns a random double real in the range [0,1]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DoubleReal() : DoubleReal # DoubleRealVariance : doublereal Name Type Description doublereal doublereal ``` lang=cpp, name=Lightning function DoubleRealVariance( : DoubleReal, : DoubleReal) : DoubleReal ``` # Float : real Returns a random float in the range [0,1]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Float() : Real # FloatVariance : real Returns a float in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base| real | | |variance| real | | lang=cpp, name=Lightning function FloatVariance(base : Real, variance : Real) : Real # Int : integer Returns a random int in the range of [0, MaxInt]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Int() : Integer # IntVariance : integer Int in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base| integer | | |variance| integer | | lang=cpp, name=Lightning function IntVariance(base : Integer, variance : Integer) : Integer # Probability : boolean Takes a given probability that we get a true value. |Name|Type|Description| |---|---|---| |probOfTrue| real | | lang=cpp, name=Lightning function Probability(probOfTrue : Real) : Boolean # Quaternion : quaternion Random unit length quaternion. This is also a unit quaternion. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Quaternion() : Quaternion # RandomContext : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RandomContext() ``` # Range : real A random float in the range [min,max]. |Name|Type|Description| |---|---|---| |min| real | | |max| real | | lang=cpp, name=Lightning function Range(min : Real, max : Real) : Real # RangeExclusiveMax : integer Int in the range [min, max) |Name|Type|Description| |---|---|---| |min| integer | | |max| integer | | lang=cpp, name=Lightning function RangeExclusiveMax(min : Integer, max : Integer) : Integer # RangeInclusiveMax : integer Int in the range [min, max]. |Name|Type|Description| |---|---|---| |min| integer | | |max| integer | | lang=cpp, name=Lightning function RangeInclusiveMax(min : Integer, max : Integer) : Integer # Real : real Returns a random real in the range [0,1]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Real() : Real # Real2 : real2 Randomly generates a Real2 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength| real | | |maxLength| real | | lang=cpp, name=Lightning function Real2(minLength : Real, maxLength : Real) : Real2 # Real3 : real3 Randomly generates a Real3 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength| real | | |maxLength| real | | lang=cpp, name=Lightning function Real3(minLength : Real, maxLength : Real) : Real3 # RealVariance : real Returns a real in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base| real | | |variance| real | | lang=cpp, name=Lightning function RealVariance(base : Real, variance : Real) : Real # Rotation : quaternion Random rotation quaternion. This is the same as calling Quaternion() |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Rotation() : Quaternion # UnitReal2 : real2 Generates a unit length Real2. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UnitReal2() : Real2 # UnitReal3 : real3 Generates a unit length Real3. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UnitReal3() : Real3 # UnitVector2 : real2 Generates a unit length Vec2. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UnitVector2() : Real2 # UnitVector3 : real3 Generates a unit length Vec3. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UnitVector3() : Real3 # Vector2 : real2 Randomly generates a Vec2 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength| real | | |maxLength| real | | lang=cpp, name=Lightning function Vector2(minLength : Real, maxLength : Real) : Real2 # Vector3 : real3 Randomly generates a Vec3 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength| real | | |maxLength| real | | lang=cpp, name=Lightning function Vector3(minLength : Real, maxLength : Real) : Real3","title":"Randomcontext"},{"location":"reference/class_reference/ratiolayout/","text":"Widget Methods Properties Base Classes Derived Classes layout # Properties # Methods","title":"Ratiolayout"},{"location":"reference/class_reference/rawcontrolmapping/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Rawcontrolmapping"},{"location":"reference/class_reference/ray/","text":"Geometry Methods Properties Base Classes Derived Classes GetPoint Direction GetTValue Start Constructor # Properties # Direction : real3 ``` lang=cpp, name=Lightning var Direction : Real3 # Start : real3 ``` lang=cpp, name=Lightning var Start : Real3 # Methods # GetPoint : real3 Returns the point at the given t-value. |Name|Type|Description| |---|---|---| |tValue| real | | lang=cpp, name=Lightning function GetPoint(tValue : Real) : Real3 # GetTValue : real Returns the t-value that would result in the given point projected onto the ray. |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function GetTValue(point : Real3) : Real # Ray : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Ray() ``` # Ray : Void constructor Name Type Description p0 ray ``` lang=cpp, name=Lightning function Ray(p0 : Ray) ``` # Ray : Void constructor Name Type Description start real3 direction real3 ``` lang=cpp, name=Lightning function Ray(start : Real3, direction : Real3) ```","title":"Ray"},{"location":"reference/class_reference/raycaster/","text":"Engine Methods Properties Base Classes Derived Classes safeid32 # Properties # Methods","title":"Raycaster"},{"location":"reference/class_reference/raycastprovider/","text":"Engine Methods Properties Base Classes Derived Classes Active safeid32object graphicsraycastprovider physicsraycastprovider # Properties # Active : boolean ``` lang=cpp, name=Lightning var Active : Boolean # Methods","title":"Raycastprovider"},{"location":"reference/class_reference/reactive/","text":"Component Gameplay (NOTE) Reactive component allows the object to react to mouse events. Uses the collision volume of the collider on this composition for picking. Methods Properties Base Classes Derived Classes Constructor Active component # Properties # Active : boolean Is the reactive component active. ``` lang=cpp, name=Lightning var Active : Boolean # Methods # Reactive : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Reactive() ```","title":"Reactive"},{"location":"reference/class_reference/reactivespace/","text":"Component Gameplay Methods Properties Base Classes Derived Classes Constructor Over component Raycaster # Properties # Over : cog read-only The object we're currently hovering over. ``` lang=cpp, name=Lightning var Over : Cog # Raycaster : raycaster ``` lang=cpp, name=Lightning var Raycaster : Raycaster # Methods # ReactiveSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ReactiveSpace() ```","title":"Reactivespace"},{"location":"reference/class_reference/reactiveviewport/","text":"Gameplay Methods Properties Base Classes Derived Classes viewport # Properties # Methods","title":"Reactiveviewport"},{"location":"reference/class_reference/receiveddataevent/","text":"Event Networking Methods Properties Base Classes Derived Classes Buffer connectionevent # Properties # Buffer : string ``` lang=cpp, name=Lightning var Buffer : String # Methods","title":"Receiveddataevent"},{"location":"reference/class_reference/recentprojects/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # RecentProjects : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RecentProjects() ```","title":"Recentprojects"},{"location":"reference/class_reference/recordingnode/","text":"Sound (NOTE) Records audio generated by its input SoundNodes into a WAV file. Methods Properties Base Classes Derived Classes StartRecording FileName soundnode StopRecording Paused StreamToDisk # Properties # FileName : string The name of the output file that will be created, including the full path. Do not include the file extension. ``` lang=cpp, name=Lightning var FileName : String # Paused : boolean When true, recording is paused, and can be resumed by setting to false. ``` lang=cpp, name=Lightning var Paused : Boolean # StreamToDisk : boolean When false, audio data will be saved in a buffer and written to the file when StopRecording is called. When true, data will be written to the file constantly during every update frame, and nothing will be saved. ``` lang=cpp, name=Lightning var StreamToDisk : Boolean # Methods # StartRecording : Void Starts writing all audio input to a file. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function StartRecording() # StopRecording : Void Stops writing data and closes the file. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function StopRecording()","title":"Recordingnode"},{"location":"reference/class_reference/rectangle/","text":"Engine Methods Properties Base Classes Derived Classes Contains Bottom Expand BottomLeft GetCardinalLocation BottomRight GetLocation Center Overlap Left Overlaps Max RemoveThickness Min ResizeToPoint Right SetLocation Size Transform Top Transformed TopLeft TopRight # Properties # Bottom : real ``` lang=cpp, name=Lightning var Bottom : Real # BottomLeft : real2 ``` lang=cpp, name=Lightning var BottomLeft : Real2 # BottomRight : real2 ``` lang=cpp, name=Lightning var BottomRight : Real2 # Center : real2 ``` lang=cpp, name=Lightning var Center : Real2 # Left : real ``` lang=cpp, name=Lightning var Left : Real # Max : real2 ``` lang=cpp, name=Lightning var Max : Real2 # Min : real2 ``` lang=cpp, name=Lightning var Min : Real2 # Right : real ``` lang=cpp, name=Lightning var Right : Real # Size : real2 read-only ``` lang=cpp, name=Lightning var Size : Real2 # Top : real ``` lang=cpp, name=Lightning var Top : Real # TopLeft : real2 ``` lang=cpp, name=Lightning var TopLeft : Real2 # TopRight : real2 ``` lang=cpp, name=Lightning var TopRight : Real2 # Methods # Contains : boolean Name Type Description p0 real2 ``` lang=cpp, name=Lightning function Contains(p0 : Real2) : Boolean ``` # Contains : boolean Name Type Description p0 rectangle ``` lang=cpp, name=Lightning function Contains(p0 : Rectangle) : Boolean ``` # Expand : Void Name Type Description p0 real2 ``` lang=cpp, name=Lightning function Expand(p0 : Real2) ``` # GetCardinalLocation : real Name Type Description p0 Location ``` lang=cpp, name=Lightning function GetCardinalLocation(p0 : Location) : Real ``` # GetLocation : real2 Name Type Description p0 Location ``` lang=cpp, name=Lightning function GetLocation(p0 : Location) : Real2 ``` # Overlap : boolean Name Type Description p0 rectangle ``` lang=cpp, name=Lightning function Overlap(p0 : Rectangle) : Boolean ``` # Overlaps : boolean Name Type Description p0 rectangle ``` lang=cpp, name=Lightning function Overlaps(p0 : Rectangle) : Boolean ``` # RemoveThickness : Void Name Type Description p0 thickness ``` lang=cpp, name=Lightning function RemoveThickness(p0 : Thickness) ``` # ResizeToPoint : Void Name Type Description p0 Location p1 real ``` lang=cpp, name=Lightning function ResizeToPoint(p0 : Location, p1 : Real) ``` # ResizeToPoint : Void Name Type Description p0 Location p1 real2 ``` lang=cpp, name=Lightning function ResizeToPoint(p0 : Location, p1 : Real2) ``` # ResizeToPoint : Void Name Type Description p0 Location p1 real2 p2 real2 ``` lang=cpp, name=Lightning function ResizeToPoint(p0 : Location, p1 : Real2, p2 : Real2) ``` # SetLocation : Void Name Type Description p0 Location p1 real ``` lang=cpp, name=Lightning function SetLocation(p0 : Location, p1 : Real) ``` # SetLocation : Void Name Type Description p0 Location p1 real2 ``` lang=cpp, name=Lightning function SetLocation(p0 : Location, p1 : Real2) ``` # Transform : Void Name Type Description p0 real2x2 ``` lang=cpp, name=Lightning function Transform(p0 : Real2x2) ``` # Transform : Void Name Type Description p0 real3x3 ``` lang=cpp, name=Lightning function Transform(p0 : Real3x3) ``` # Transform : Void Name Type Description p0 real4x4 ``` lang=cpp, name=Lightning function Transform(p0 : Real4x4) ``` # Transformed : rectangle Name Type Description p0 real2x2 ``` lang=cpp, name=Lightning function Transformed(p0 : Real2x2) : Rectangle ``` # Transformed : rectangle Name Type Description p0 real3x3 ``` lang=cpp, name=Lightning function Transformed(p0 : Real3x3) : Rectangle ``` # Transformed : rectangle Name Type Description p0 real4x4 ``` lang=cpp, name=Lightning function Transformed(p0 : Real4x4) : Rectangle ```","title":"Rectangle"},{"location":"reference/class_reference/referencecountedempty/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Referencecountedempty"},{"location":"reference/class_reference/referencecountedeventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject action animationnode asyncprocess cogcomponentmeta customconstraintinfo metaarray metaattribute metacomposition metadatainheritance metadisplay metaoperations metaowner metapropertyeditor metaresource metaselection metaserialization metaserializedproperty metatransform operationqueue serializationfilter soundinstance soundnode spline webbrowser # Properties # Methods","title":"Referencecountedeventobject"},{"location":"reference/class_reference/referencecountedobject/","text":"Meta Methods Properties Base Classes Derived Classes Object indexedhalfedgemesh soundbuffer # Properties # Methods","title":"Referencecountedobject"},{"location":"reference/class_reference/referencecountedsafeid32/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Referencecountedsafeid32"},{"location":"reference/class_reference/referencecountedsafeid32eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Referencecountedsafeid32eventobject"},{"location":"reference/class_reference/referencecountedsafeid32object/","text":"Meta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Referencecountedsafeid32object"},{"location":"reference/class_reference/referencecountedsafeid64/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Referencecountedsafeid64"},{"location":"reference/class_reference/referencecountedsafeid64eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Referencecountedsafeid64eventobject"},{"location":"reference/class_reference/referencecountedsafeid64object/","text":"Meta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Referencecountedsafeid64object"},{"location":"reference/class_reference/referencecountedthreadsafeid32/","text":"Meta Methods Properties Base Classes Derived Classes shaderinputs # Properties # Methods","title":"Referencecountedthreadsafeid32"},{"location":"reference/class_reference/referencecountedthreadsafeid32eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Referencecountedthreadsafeid32eventobject"},{"location":"reference/class_reference/referencecountedthreadsafeid32object/","text":"Meta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Referencecountedthreadsafeid32object"},{"location":"reference/class_reference/referencecountedthreadsafeid64/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Referencecountedthreadsafeid64"},{"location":"reference/class_reference/referencecountedthreadsafeid64eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Referencecountedthreadsafeid64eventobject"},{"location":"reference/class_reference/referencecountedthreadsafeid64object/","text":"Meta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Referencecountedthreadsafeid64object"},{"location":"reference/class_reference/region/","text":"Component Physics (NOTE) Regions are used to make PhysicsEffects affect a region of space. Any effects attached to a Cog with a Region will apply to all objects in contact with this region. Methods Properties Base Classes Derived Classes DispatchEvent WakeUpOnEffectChange component Constructor # Properties # WakeUpOnEffectChange : boolean Determines if all objects in the region should be woken up when an effect is changed. Used to make sure that changes in effects will be applied to an object event if it is asleep. ``` lang=cpp, name=Lightning var WakeUpOnEffectChange : Boolean # Methods # DispatchEvent : Void Dispatches an event to all objects in this region. |Name|Type|Description| |---|---|---| |eventId| string | | |toSend| event | | lang=cpp, name=Lightning function DispatchEvent(eventId : String, toSend : Event) # Region : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Region() ```","title":"Region"},{"location":"reference/class_reference/registercppnetproperties/","text":"Event Networking (NOTE) Dispatched while adding C++ component net properties to a NetObject. # Properties # Methods","title":"Registercppnetproperties"},{"location":"reference/class_reference/relativevelocityjoint/","text":"Component Physics (NOTE) A relative velocity joint defines what the desired relative velocity on three world axes should be between two objects. Relative velocity is defined as v2 - v1. This joint has not been tested with motors or limits in any way. Methods Properties Base Classes Derived Classes GetAxis joint GetAxisActive GetMaxImpulse GetSpeed Constructor SetAxis SetAxisActive SetMaxImpulse SetSpeed # Properties # Methods # GetAxis : real3 One of 3 axes to constrain movement on. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetAxis(index : Integer) : Real3 # GetAxisActive : boolean Whether or not the given axis index is active. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetAxisActive(index : Integer) : Boolean # GetMaxImpulse : real The max impulse for the given axis index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetMaxImpulse(index : Integer) : Real # GetSpeed : real The desired relative speed for the given axis index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetSpeed(index : Integer) : Real # RelativeVelocityJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RelativeVelocityJoint() ``` # SetAxis : Void One of 3 axes to constrain movement on. |Name|Type|Description| |---|---|---| |index| integer | | |axis| real3 | | lang=cpp, name=Lightning function SetAxis(index : Integer, axis : Real3) # SetAxisActive : Void Whether or not the given axis index is active. |Name|Type|Description| |---|---|---| |index| integer | | |active| boolean | | lang=cpp, name=Lightning function SetAxisActive(index : Integer, active : Boolean) # SetMaxImpulse : Void The max impulse for the given axis index. |Name|Type|Description| |---|---|---| |index| integer | | |maxImpulse| real | | lang=cpp, name=Lightning function SetMaxImpulse(index : Integer, maxImpulse : Real) # SetSpeed : Void The desired relative speed for the given axis index. |Name|Type|Description| |---|---|---| |index| integer | | |speed| real | | lang=cpp, name=Lightning function SetSpeed(index : Integer, speed : Real)","title":"Relativevelocityjoint"},{"location":"reference/class_reference/relativevelocityjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # RelativeVelocityJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RelativeVelocityJointBlock() ```","title":"Relativevelocityjointblock"},{"location":"reference/class_reference/removedentry/","text":"Editor Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Removedentry"},{"location":"reference/class_reference/rendergroup/","text":"Resource Graphics (NOTE) How Materials are categorized, determines which graphicals are drawn in a render pass. Methods Properties Base Classes Derived Classes IsSubRenderGroup ChildRenderGroups dataresource IsSubRenderGroupOf GraphicalSortMethod Materials ParentRenderGroup ReferencedByList # Properties # ChildRenderGroups : childrendergrouplist read-only For assigning child RenderGroups, making this a parent group of everything in the list. ``` lang=cpp, name=Lightning var ChildRenderGroups : ChildRenderGroupList # GraphicalSortMethod : GraphicalSortMethod Determines the order that graphicals will be drawn when processed as this RenderGroup. ``` lang=cpp, name=Lightning var GraphicalSortMethod : GraphicalSortMethod # Materials : materiallist read-only ``` lang=cpp, name=Lightning var Materials : MaterialList # ParentRenderGroup : rendergroup RenderGroup that this is a sub group of. Also a sub group of all of its parents. ``` lang=cpp, name=Lightning var ParentRenderGroup : RenderGroup # ReferencedByList : materiallist read-only ``` lang=cpp, name=Lightning var ReferencedByList : MaterialList # Methods # IsSubRenderGroup : boolean Returns whether or not the given RenderGroup is a sub group of this. |Name|Type|Description| |---|---|---| |renderGroup| rendergroup | | lang=cpp, name=Lightning function IsSubRenderGroup(renderGroup : RenderGroup) : Boolean # IsSubRenderGroupOf : boolean Returns whether or not this is a sub group of the given RenderGroup. |Name|Type|Description| |---|---|---| |renderGroup| rendergroup | | lang=cpp, name=Lightning function IsSubRenderGroupOf(renderGroup : RenderGroup) : Boolean","title":"Rendergroup"},{"location":"reference/class_reference/rendergrouphierarchies/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Rendergrouphierarchies"},{"location":"reference/class_reference/rendergrouplist/","text":"Graphics Methods Properties Base Classes Derived Classes Add safeid32eventobject childrendergrouplist All Remove # Properties # Methods # Add : Void Adds the RenderGroup to this Material's list. Runtime resources only. |Name|Type|Description| |---|---|---| |renderGroup| rendergroup | | lang=cpp, name=Lightning function Add(renderGroup : RenderGroup) # All : arrayhandleofrendergroup Range of all resources in the list. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function All() : ArrayHandleOfRenderGroup # Remove : Void Removes the RenderGroup from this Material's list. Runtime resources only. |Name|Type|Description| |---|---|---| |renderGroup| rendergroup | | lang=cpp, name=Lightning function Remove(renderGroup : RenderGroup)","title":"Rendergrouplist"},{"location":"reference/class_reference/rendersettings/","text":"Graphics (NOTE) Contains all output targets and render settings needed for a render task. Methods Properties Base Classes Derived Classes Constructor BlendSettings ColorTarget CullMode DepthSettings DepthTarget GlobalShaderInputs MultiRenderTarget # Properties # BlendSettings : blendsettings Settings to use when blending shader output with the ColorTarget, implicitly BlendSettings0. ``` lang=cpp, name=Lightning var BlendSettings : BlendSettings # ColorTarget : rendertarget The RenderTarget of a color format to output to, implicitly RenderTarget0. ``` lang=cpp, name=Lightning var ColorTarget : RenderTarget # CullMode : CullMode ``` lang=cpp, name=Lightning var CullMode : CullMode # DepthSettings : depthsettings Settings to use when doing depth/stencil testing with DepthTarget. ``` lang=cpp, name=Lightning var DepthSettings : DepthSettings # DepthTarget : rendertarget The RenderTarget of a depth format to use as a depth buffer for depth/stencil testing. ``` lang=cpp, name=Lightning var DepthTarget : RenderTarget # GlobalShaderInputs : shaderinputs Shader input values to be globally overridden for all objects/shaders. ``` lang=cpp, name=Lightning var GlobalShaderInputs : ShaderInputs # MultiRenderTarget : multirendertarget read-only Interface for configuring multiple color target outputs. ``` lang=cpp, name=Lightning var MultiRenderTarget : MultiRenderTarget # Methods # RenderSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RenderSettings() ``` # RenderSettings : Void constructor Name Type Description rendersettings ``` lang=cpp, name=Lightning function RenderSettings( : RenderSettings) ```","title":"Rendersettings"},{"location":"reference/class_reference/rendertarget/","text":"Graphics (NOTE) Interface for rendering output. Texture data is managed and recycled by the engine. Methods Properties Base Classes Derived Classes Release Texture safeid32 # Properties # Texture : texture read-only Texture that is rendered to. Can be used as shader input to a separate rendering operation. ``` lang=cpp, name=Lightning var Texture : Texture # Methods # Release : Void Allows the managed Texture being referenced by this RenderTarget to be reused by the renderer if the same specifications are requested again. Also deletes this RenderTarget. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Release()","title":"Rendertarget"},{"location":"reference/class_reference/rendertasksevent/","text":"Event Graphics (NOTE) Interface for adding tasks for the renderer, essentially defining a rendering pipeline. Methods Properties Base Classes Derived Classes AddRenderTaskClearTarget CameraViewportCog event AddRenderTaskPostProcess ViewportSize AddRenderTaskRenderPass AddRenderTaskSubRenderGroupPass CreateSubRenderGroupPass GetFinalTarget GetRenderTarget # Properties # CameraViewportCog : cog read-only Object with the CameraViewport component that this event is getting tasks for. ``` lang=cpp, name=Lightning var CameraViewportCog : Cog # ViewportSize : integer2 read-only Size of the UI viewport, or the resolution on CameraViewport if not rendering to viewport. ``` lang=cpp, name=Lightning var ViewportSize : Integer2 # Methods # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |color| real4 | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |color| real4 | | |depth| real | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4, depth : Real) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |color| real4 | | |depth| real | | |stencil| integer | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4, depth : Real, stencil : Integer) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |color| real4 | | |depth| real | | |stencil| integer | | |stencilWriteMask| integer | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4, depth : Real, stencil : Integer, stencilWriteMask : Integer) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |depthTarget| rendertarget | | |depth| real | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(depthTarget : RenderTarget, depth : Real) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |depthTarget| rendertarget | | |depth| real | | |stencil| integer | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(depthTarget : RenderTarget, depth : Real, stencil : Integer) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |depthTarget| rendertarget | | |depth| real | | |stencil| integer | | |stencilWriteMask| integer | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(depthTarget : RenderTarget, depth : Real, stencil : Integer, stencilWriteMask : Integer) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget| rendertarget | | |color| real4 | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(colorTarget : RenderTarget, color : Real4) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget| rendertarget | | |depthTarget| rendertarget | | |color| real4 | | |depth| real | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(colorTarget : RenderTarget, depthTarget : RenderTarget, color : Real4, depth : Real) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget| rendertarget | | |depthTarget| rendertarget | | |color| real4 | | |depth| real | | |stencil| integer | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(colorTarget : RenderTarget, depthTarget : RenderTarget, color : Real4, depth : Real, stencil : Integer) # AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget| rendertarget | | |depthTarget| rendertarget | | |color| real4 | | |depth| real | | |stencil| integer | | |stencilWriteMask| integer | | lang=cpp, name=Lightning function AddRenderTaskClearTarget(colorTarget : RenderTarget, depthTarget : RenderTarget, color : Real4, depth : Real, stencil : Integer, stencilWriteMask : Integer) # AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |material| material | | lang=cpp, name=Lightning function AddRenderTaskPostProcess(renderSettings : RenderSettings, material : Material) # AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |postProcess| materialblock | | lang=cpp, name=Lightning function AddRenderTaskPostProcess(renderSettings : RenderSettings, postProcess : MaterialBlock) # AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderTarget| rendertarget | | |material| material | | lang=cpp, name=Lightning function AddRenderTaskPostProcess(renderTarget : RenderTarget, material : Material) # AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderTarget| rendertarget | | |postProcess| materialblock | | lang=cpp, name=Lightning function AddRenderTaskPostProcess(renderTarget : RenderTarget, postProcess : MaterialBlock) # AddRenderTaskRenderPass : Void Renders a group of objects with the given settings. The RenderPass fragment defines what data is written to RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |graphicalRange| graphicalrangeinterface | | |renderPass| materialblock | | lang=cpp, name=Lightning function AddRenderTaskRenderPass(renderSettings : RenderSettings, graphicalRange : GraphicalRangeInterface, renderPass : MaterialBlock) # AddRenderTaskRenderPass : Void Renders a group of objects with the given settings. The RenderPass fragment defines what data is written to RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings| rendersettings | | |renderGroup| rendergroup | | |renderPass| materialblock | | lang=cpp, name=Lightning function AddRenderTaskRenderPass(renderSettings : RenderSettings, renderGroup : RenderGroup, renderPass : MaterialBlock) # AddRenderTaskSubRenderGroupPass : Void Renders all objects within a RenderGroup hierarchy, sorted in the order defined by the base RenderGroup, and can use unique render settings for each RenderGroup in the hierarchy. |Name|Type|Description| |---|---|---| |subRenderGroupPass| subrendergrouppass | | lang=cpp, name=Lightning function AddRenderTaskSubRenderGroupPass(subRenderGroupPass : SubRenderGroupPass) # CreateSubRenderGroupPass : subrendergrouppass Creates the interface used to define unique render settings for a base RenderGroup and its sub RenderGroups. The given RenderGroup is used to define the hierarchy, or sub hierarchy, that should be rendered. The given RenderGroup also defines the sort order for all objects that are within its hierarchy. Returned SubRenderGroupPass is only valid during this event. |Name|Type|Description| |---|---|---| |baseGroup| rendergroup | | lang=cpp, name=Lightning function CreateSubRenderGroupPass(baseGroup : RenderGroup) : SubRenderGroupPass # GetFinalTarget : rendertarget Name Type Description integer2 TextureFormat ``` lang=cpp, name=Lightning function GetFinalTarget( : Integer2, : TextureFormat) : RenderTarget ``` # GetFinalTarget : rendertarget Name Type Description integer2 TextureFormat samplersettings ``` lang=cpp, name=Lightning function GetFinalTarget( : Integer2, : TextureFormat, : SamplerSettings) : RenderTarget ``` # GetRenderTarget : rendertarget Returns a RenderTarget for use when adding render tasks. Target only valid during this event. Will render to the given texture instead of an internally managed texture. |Name|Type|Description| |---|---|---| || integer2 | | || TextureFormat | | lang=cpp, name=Lightning function GetRenderTarget( : Integer2, : TextureFormat) : RenderTarget # GetRenderTarget : rendertarget Returns a RenderTarget for use when adding render tasks. Target only valid during this event. Will render to the given texture instead of an internally managed texture. |Name|Type|Description| |---|---|---| || integer2 | | || TextureFormat | | || samplersettings | | lang=cpp, name=Lightning function GetRenderTarget( : Integer2, : TextureFormat, : SamplerSettings) : RenderTarget # GetRenderTarget : rendertarget Returns a RenderTarget for use when adding render tasks. Target only valid during this event. Will render to the given texture instead of an internally managed texture. |Name|Type|Description| |---|---|---| |texture| texture | | lang=cpp, name=Lightning function GetRenderTarget(texture : Texture) : RenderTarget","title":"Rendertasksevent"},{"location":"reference/class_reference/resource/","text":"Methods Properties Base Classes Derived Classes Name EventObject animation archetype dataresource documentresource font genericphysicsmesh heightmapsource level mesh multiconvexmesh sound spritesource texture tilemapsource tilepalettesource lightninglibraryresource # Properties # Name : string read-only ``` lang=cpp, name=Lightning var Name : String; # Methods","title":"Resource"},{"location":"reference/class_reference/resourcedisplayfunctions/","text":"Engine Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Resourcedisplayfunctions"},{"location":"reference/class_reference/resourceeditors/","text":"Editor Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Resourceeditors"},{"location":"reference/class_reference/resourceevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Resourceevent"},{"location":"reference/class_reference/resourcelibrary/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Resourcelibrary"},{"location":"reference/class_reference/resourcelistevent/","text":"Event Graphics Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Resourcelistevent"},{"location":"reference/class_reference/resourcemetaoperations/","text":"Engine Methods Properties Base Classes Derived Classes metaoperations # Properties # Methods","title":"Resourcemetaoperations"},{"location":"reference/class_reference/resourcemetaserialization/","text":"Engine Methods Properties Base Classes Derived Classes metaserialization # Properties # Methods","title":"Resourcemetaserialization"},{"location":"reference/class_reference/resourcepackage/","text":"Engine Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Resourcepackage"},{"location":"reference/class_reference/resourcepackagedisplay/","text":"Engine Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Resourcepackagedisplay"},{"location":"reference/class_reference/resourcesystem/","text":"Engine Methods Properties Base Classes Derived Classes GetResourceByName eventobject GetResourceByTypeAndName # Properties # Methods # GetResourceByName : Resource Name Type Description p0 string ``` lang=cpp, name=Lightning function GetResourceByName(p0 : String) : Resource ``` # GetResourceByTypeAndName : Resource Name Type Description p0 string p1 string ``` lang=cpp, name=Lightning function GetResourceByTypeAndName(p0 : String, p1 : String) : Resource ```","title":"Resourcesystem"},{"location":"reference/class_reference/resourcetable/","text":"Resource Engine (NOTE) A table of resources (or strings) that can be indexed, searched by name, or sampled randomly. The table can be randomly sampled to return an entry into the table. Methods Properties Base Classes Derived Classes AddOrError All dataresource AddOrIgnore Count AddOrOverwrite MaxWeight Clear ResourceType Contains CreateRuntime ForceRebuild Get GetOrDefault GetOrError GetOrNull RemoveAt RemoveOrError RemoveOrIgnore RuntimeClone Sample SampleIndex Set # Properties # All : resourcetableentryrange read-only Range to iterate over all entries. ``` lang=cpp, name=Lightning var All : ResourceTableEntryRange # Count : integer read-only How many items are stored in the table. ``` lang=cpp, name=Lightning var Count : Integer # MaxWeight : real The maximum probability weight value that can be stored in the table. Setting this will clamp all weight values. ``` lang=cpp, name=Lightning var MaxWeight : Real # ResourceType : string The kind of resource contained in this table. This is either a resource type or \"String\". ``` lang=cpp, name=Lightning var ResourceType : String # Methods # AddOrError : Void Add the given entry. If another entry with the same name exists then an error is thrown. |Name|Type|Description| |---|---|---| |entry| resourcetableentry | | lang=cpp, name=Lightning function AddOrError(entry : ResourceTableEntry) # AddOrIgnore : boolean Add the given entry. If another entry with the same name exists then no operation is performed. |Name|Type|Description| |---|---|---| |entry| resourcetableentry | | lang=cpp, name=Lightning function AddOrIgnore(entry : ResourceTableEntry) : Boolean # AddOrOverwrite : boolean Add the given entry. If another entry with the same name exists then it is overwritten. |Name|Type|Description| |---|---|---| |entry| resourcetableentry | | lang=cpp, name=Lightning function AddOrOverwrite(entry : ResourceTableEntry) : Boolean # Clear : Void Clear all items in the table. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # Contains : boolean Returns if the given key is contained. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function Contains(key : String) : Boolean # CreateRuntime : resourcetable static Creates a ResourceTable for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : ResourceTable # ForceRebuild : Void Force rebuild the weighted probability table. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ForceRebuild() # Get : resourcetableentry Access an item at the given index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : ResourceTableEntry # Get : resourcetableentry Hash-Set interface. Gets the item with the same name as the entry. |Name|Type|Description| |---|---|---| |entry| resourcetableentry | | lang=cpp, name=Lightning function Get(entry : ResourceTableEntry) : ResourceTableEntry # Get : resourcetableentry Hash-Map interface. Gets via the provided key. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function Get(key : String) : ResourceTableEntry # GetOrDefault : resourcetableentry Returns the entry associated with the given key. If no entry matches the key then the provided default is returned. |Name|Type|Description| |---|---|---| |key| string | | |defaultValue| resourcetableentry | | lang=cpp, name=Lightning function GetOrDefault(key : String, defaultValue : ResourceTableEntry) : ResourceTableEntry # GetOrError : resourcetableentry Returns the entry associated with the given key. If no entry matches the key then an exception is thrown. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function GetOrError(key : String) : ResourceTableEntry # GetOrNull : resourcetableentry Returns the entry associated with the given key. If no entry matches then null is returned. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function GetOrNull(key : String) : ResourceTableEntry # RemoveAt : Void Removes the item at the given index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function RemoveAt(index : Integer) # RemoveOrError : Void Removes the entry associated with the given key. If no entry matches an exception is thrown. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function RemoveOrError(key : String) # RemoveOrIgnore : boolean Removes the entry associated with the given key. If no entry matches then no operation is performed. |Name|Type|Description| |---|---|---| |key| string | | lang=cpp, name=Lightning function RemoveOrIgnore(key : String) : Boolean # RuntimeClone : resourcetable Creates a clone of this table for run-time modifications. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RuntimeClone() : ResourceTable # Sample : resourcetableentry Samples the table to return a random entry. Takes two (different) random floats from [0,1) in order to sample. Returns an empty string if the table is empty. |Name|Type|Description| |---|---|---| |random1| real | | |random2| real | | lang=cpp, name=Lightning function Sample(random1 : Real, random2 : Real) : ResourceTableEntry # SampleIndex : integer Samples the table to return a random index into the table. Takes two (different) random floats from [0,1) in order to sample. |Name|Type|Description| |---|---|---| |random1| real | | |random2| real | | lang=cpp, name=Lightning function SampleIndex(random1 : Real, random2 : Real) : Integer # Set : Void Access an item at the given index. |Name|Type|Description| |---|---|---| |index| integer | | |entry| resourcetableentry | | lang=cpp, name=Lightning function Set(index : Integer, entry : ResourceTableEntry) # Set : Void Hash-Set interface. Sets the item with the same name as the entry. |Name|Type|Description| |---|---|---| |entry| resourcetableentry | | lang=cpp, name=Lightning function Set(entry : ResourceTableEntry) # Set : Void Hash-Map interface. Sets via the provided key. |Name|Type|Description| |---|---|---| |key| string | | |entry| resourcetableentry | | lang=cpp, name=Lightning function Set(key : String, entry : ResourceTableEntry)","title":"Resourcetable"},{"location":"reference/class_reference/resourcetableentry/","text":"Engine (NOTE) An entry from a resource table. The resource type of this entry must match the resource type of the table to add/set. If the value is set via string then the type will be implicitly set to string, otherwise the type must be set via the Resource property. Methods Properties Base Classes Derived Classes Clone Name Constructor Resource ResourceType Value Weight # Properties # Name : string ``` lang=cpp, name=Lightning var Name : String # Resource : Resource The resource value of this entry. Returns null if the underlying type is not a resource. Changes this entry's type to the given resource's type on Set. ``` lang=cpp, name=Lightning var Resource : Resource # ResourceType : string ``` lang=cpp, name=Lightning var ResourceType : String # Value : string The string value of this entry. Changes this entry's type to String on Set. ``` lang=cpp, name=Lightning var Value : String # Weight : real The weight value used to determine how likely this item is to be sampled. Note: Weights must be positive. Negative weights will be clamped to 0. ``` lang=cpp, name=Lightning var Weight : Real # Methods # Clone : resourcetableentry Creates a new entry with the same values. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clone() : ResourceTableEntry # ResourceTableEntry : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ResourceTableEntry() ``` # ResourceTableEntry : Void constructor Name Type Description resourcetableentry ``` lang=cpp, name=Lightning function ResourceTableEntry( : ResourceTableEntry) ```","title":"Resourcetableentry"},{"location":"reference/class_reference/resourcetableentryrange/","text":"Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : resourcetableentryrange read-only ``` lang=cpp, name=Lightning var All : ResourceTableEntryRange # Current : resourcetableentry read-only ``` lang=cpp, name=Lightning var Current : ResourceTableEntry # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # ResourceTableEntryRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ResourceTableEntryRange() ``` # ResourceTableEntryRange : Void constructor Name Type Description p0 resourcetableentryrange ``` lang=cpp, name=Lightning function ResourceTableEntryRange(p0 : ResourceTableEntryRange) ```","title":"Resourcetableentryrange"},{"location":"reference/class_reference/resourcetemplate/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor Category contentcomponent CategorySortWeight Description DisplayName SortWeight # Properties # Category : string ``` lang=cpp, name=Lightning var Category : String # CategorySortWeight : integer ``` lang=cpp, name=Lightning var CategorySortWeight : Integer # Description : string ``` lang=cpp, name=Lightning var Description : String # DisplayName : string ``` lang=cpp, name=Lightning var DisplayName : String # SortWeight : integer ``` lang=cpp, name=Lightning var SortWeight : Integer # Methods # ResourceTemplate : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ResourceTemplate() ```","title":"Resourcetemplate"},{"location":"reference/class_reference/resourcetemplatedisplay/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Resourcetemplatedisplay"},{"location":"reference/class_reference/resourcetemplatesearch/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Resourcetemplatesearch"},{"location":"reference/class_reference/resourcetypesearch/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Resourcetypesearch"},{"location":"reference/class_reference/reverbnode/","text":"Sound (NOTE) Applies a simple reverb filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateWetPercent Length soundnode InterpolateWetValue WetPercent WetValue # Properties # Length : real The length of the reverb tail, in seconds. The default value is 0.1. ``` lang=cpp, name=Lightning var Length : Real # WetPercent : real DEPRECATED The WetValue property should be used instead. ``` lang=cpp, name=Lightning var WetPercent : Real # WetValue : real The percentage of the node's output (0 - 1.0) which has the reverb filter applied to it. Setting this property to 0 will stop all reverb calculations. ``` lang=cpp, name=Lightning var WetValue : Real # Methods # InterpolateWetPercent : Void DEPRECATED The InterpolateWetValue method should be used instead. |Name|Type|Description| |---|---|---| |percent| real | | |time| real | | lang=cpp, name=Lightning function InterpolateWetPercent(percent : Real, time : Real) # InterpolateWetValue : Void Interpolates the WetValue property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |value| real | | |time| real | | lang=cpp, name=Lightning function InterpolateWetValue(value : Real, time : Real)","title":"Reverbnode"},{"location":"reference/class_reference/revision/","text":"Meta Methods Properties Base Classes Derived Classes ChangeSet Date Summary User # Properties # ChangeSet : string ``` lang=cpp, name=Lightning var ChangeSet : String # Date : string ``` lang=cpp, name=Lightning var Date : String # Summary : string ``` lang=cpp, name=Lightning var Summary : String # User : string ``` lang=cpp, name=Lightning var User : String # Methods","title":"Revision"},{"location":"reference/class_reference/revisions/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Revisions"},{"location":"reference/class_reference/revolutebasisgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # RevoluteBasisGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RevoluteBasisGizmo() ```","title":"Revolutebasisgizmo"},{"location":"reference/class_reference/revolutejoint/","text":"Component Physics (NOTE) A revolute joint is used to create a wheel or a hinge. A revolute joint bring the two locally defined axes together and allows free rotation only on that axis. This axis is also where the motor is applied. The two axes that are orthogonal to the motor axis have their rotation locked (objects rotate together unless on the motor axis). Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Zero is defined by the location of the primary axis on the FrameOfreference object. Motor: A motor will drive the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits. Methods Properties Base Classes Derived Classes Constructor FrameOfReference joint SetWorldFrame LocalBasisA SetWorldPoints LocalBasisB LocalPointA LocalPointB WorldBasis WorldPointA WorldPointB # Properties # FrameOfReference : JointFrameOfReference Should the default basis of the constraint be object A or B? This determines which object's world axis is used when constructing the basis for the constraint. In the case of a dynamic and static object, the static object is generally the better choice. As a general rule of thumb, it should be the heavier/most important object. ``` lang=cpp, name=Lightning var FrameOfReference : JointFrameOfReference # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldBasis : quaternion The basis of the joint in world-space. This basis will come object specified by FrameOfReference. The basis is constructed such that the x-axis is the primary axis while the z-axis is the hinge axis. ``` lang=cpp, name=Lightning var WorldBasis : Quaternion # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # RevoluteJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RevoluteJoint() ``` # SetWorldFrame : Void Legacy. Used to set the entire frame in world space for this joint. The x and y axes are used as a basis for limiting the joint. The x axis is at angle 0 and the y axis is at angle 90. The z axis is the axis of rotational freedom. |Name|Type|Description| |---|---|---| |rot| quaternion | | lang=cpp, name=Lightning function SetWorldFrame(rot : Quaternion) # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3)","title":"Revolutejoint"},{"location":"reference/class_reference/revolutejoint2d/","text":"Component Physics (NOTE) A revolute joint is used to create a wheel or a hinge. This is the 2d version of RevoluteJoint. This joint is used in 2d mode for increased performance and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate about. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits. Methods Properties Base Classes Derived Classes Constructor LocalPointA joint SetWorldPoints LocalPointB WorldPointA WorldPointB # Properties # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # RevoluteJoint2d : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RevoluteJoint2d() ``` # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3)","title":"Revolutejoint2d"},{"location":"reference/class_reference/revolutejoint2dblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # RevoluteJoint2dBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RevoluteJoint2dBlock() ```","title":"Revolutejoint2dblock"},{"location":"reference/class_reference/revolutejointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # RevoluteJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RevoluteJointBlock() ```","title":"Revolutejointblock"},{"location":"reference/class_reference/richanimation/","text":"ContentMeta Methods Properties Base Classes Derived Classes SampleTolerance eventobject # Properties # SampleTolerance : real ``` lang=cpp, name=Lightning var SampleTolerance : Real # Methods","title":"Richanimation"},{"location":"reference/class_reference/richanimationbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor PreviewArchetype buildercomponent # Properties # PreviewArchetype : archetype ``` lang=cpp, name=Lightning var PreviewArchetype : Archetype # Methods # RichAnimationBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RichAnimationBuilder() ```","title":"Richanimationbuilder"},{"location":"reference/class_reference/rigidbody/","text":"Component Physics (NOTE) RigidBody defines the inertia (mass, velocity, etc...) of a rigid object. Any PhysicsEffects attached to a RigidBody without a region will be applied to the center of mass of this body. Methods Properties Base Classes Derived Classes ApplyAngularImpulse ActiveBody component ApplyAngularVelocity AllowSleep ApplyForce AngularVelocity ApplyForceAtOffsetVector Asleep ApplyForceAtOffsetVectorNoWakeUp DynamicState ApplyForceAtPoint Force ApplyForceAtPointNoWakeUp LocalInverseInertiaTensor ApplyForceNoWakeUp Mass ApplyImpulseAtOffsetVector Mode2D ApplyImpulseAtPoint RotationLocked ApplyLinearImpulse Torque ApplyLinearVelocity Velocity ApplyTorque WorldCenterOfMass ApplyTorqueNoWakeUp WorldInverseInertiaTensor ApplyVelocityAtPoint ForceAsleep ForceAwake GetPointVelocity Constructor # Properties # ActiveBody : rigidbody read-only If this is a static body then the active body (the one force/velocity should be applied to or calculated from) is the nearest parent body up the hierarchy that is not static. If one isn't found then this returns the current rigid body (this). ``` lang=cpp, name=Lightning var ActiveBody : RigidBody # AllowSleep : boolean Sleeping happens when an object has not \"moved\" (small enough linear + angular velocity) for long enough. If this happens then the physics engine stops updating this object (integration, collision detection, etc...) until an awake object hits it. Sleeping is purely an optimization. Sometimes it is not desirable for a body to ever fall asleep (such as a player). ``` lang=cpp, name=Lightning var AllowSleep : Boolean # AngularVelocity : real3 The angular velocity (radians per second) of this body in world space. Objects will rotate about this axis using the right-hand rule. Max bounds are around 1e+10, after this the angular velocity will be capped. Setting this will wake up the body if it's asleep. ``` lang=cpp, name=Lightning var AngularVelocity : Real3 # Asleep : boolean Whether or not this object is currently asleep. Setting this to true will force the object asleep even if this causes invalid behavior (objects floating). ``` lang=cpp, name=Lightning var Asleep : Boolean # DynamicState : RigidBodyDynamicState How this rigid body handles dynamics. Is it a regular rigid body (dynamic)? Does it not move (static)? Does the user want to manually move it and have objects properly collide with it (kinematic)? Note: Static vs. static does not check for collision. ``` lang=cpp, name=Lightning var DynamicState : RigidBodyDynamicState # Force : real3 The total accumulated force (in world space) that is being applied to the center of mass of this rigid body this frame. Setting this will wake up the body if it's asleep. ``` lang=cpp, name=Lightning var Force : Real3 # LocalInverseInertiaTensor : real3x3 read-only The inverse inertia tensor in local space of this body. The local space inertia tensor doesn't change when the object rotates but is not typically useful for any calculations other than computing the world-space inverse inertia tensor. ``` lang=cpp, name=Lightning var LocalInverseInertiaTensor : Real3x3 # Mass : real read-only The current mass of the rigid body. This includes all child colliders belonging to this body. ``` lang=cpp, name=Lightning var Mass : Real # Mode2D : Mode2DStates Used to make an object act as if it were 2D. This is done by locking it to the current z-plane and only allowing rotation about the world's z-axis. Objects can be set to always be 2D or 3D, or this can be deferred to the PhysicsSpace's Mode2D. ``` lang=cpp, name=Lightning var Mode2D : Mode2DStates # RotationLocked : boolean Makes physics unable to rotate this object. Manual rotations can still be applied. ``` lang=cpp, name=Lightning var RotationLocked : Boolean # Torque : real3 The total accumulated torque (in world space) that is being applied to the center of mass of this rigid body this frame. Setting this will wake up the body if it's asleep. ``` lang=cpp, name=Lightning var Torque : Real3 # Velocity : real3 The velocity (units per second) of this body in world space. Max bounds are around 1e+10, after this the velocity will be capped. Setting this will wake up the body if it's asleep. ``` lang=cpp, name=Lightning var Velocity : Real3 # WorldCenterOfMass : real3 read-only The position of the center of mass in world space. ``` lang=cpp, name=Lightning var WorldCenterOfMass : Real3 # WorldInverseInertiaTensor : real3x3 read-only The inverse inertia tensor in world space of this body. Describes how hard it is to rotate an object about the world-space axes. Useful to convert any torque into an angular velocity. ``` lang=cpp, name=Lightning var WorldInverseInertiaTensor : Real3x3 # Methods # ApplyAngularImpulse : Void Applies an angular impulse through the center of mass (world space). Only results in a change of angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |angular| real3 | | lang=cpp, name=Lightning function ApplyAngularImpulse(angular : Real3) # ApplyAngularVelocity : Void Adds to the current angular velocity (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |angular| real3 | | lang=cpp, name=Lightning function ApplyAngularVelocity(angular : Real3) # ApplyForce : Void Applies a force through the center of mass of the body (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force| real3 | | lang=cpp, name=Lightning function ApplyForce(force : Real3) # ApplyForceAtOffsetVector : Void Applies a force at an offset from the center of mass (world space). Results in a force and torque to the center of mass. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force| real3 | | |worldOffset| real3 | | lang=cpp, name=Lightning function ApplyForceAtOffsetVector(force : Real3, worldOffset : Real3) # ApplyForceAtOffsetVectorNoWakeUp : Void Applies a force at an offset from the center of mass (world space). Results in a force and torque to the center of mass. Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force| real3 | | |worldOffset| real3 | | lang=cpp, name=Lightning function ApplyForceAtOffsetVectorNoWakeUp(force : Real3, worldOffset : Real3) # ApplyForceAtPoint : Void Applies a force at a world point (world space). Results in a force and torque to the center of mass. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force| real3 | | |worldPoint| real3 | | lang=cpp, name=Lightning function ApplyForceAtPoint(force : Real3, worldPoint : Real3) # ApplyForceAtPointNoWakeUp : Void Applies a force at a world point (world space). Results in a force and torque to the center of mass. Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force| real3 | | |worldPoint| real3 | | lang=cpp, name=Lightning function ApplyForceAtPointNoWakeUp(force : Real3, worldPoint : Real3) # ApplyForceNoWakeUp : Void Applies a force through the center of mass of the body (world space). Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force| real3 | | lang=cpp, name=Lightning function ApplyForceNoWakeUp(force : Real3) # ApplyImpulseAtOffsetVector : Void Applies an impulse at on offset from the center of mass (world space). Results in a change in linear and angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |impulse| real3 | | |worldOffset| real3 | | lang=cpp, name=Lightning function ApplyImpulseAtOffsetVector(impulse : Real3, worldOffset : Real3) # ApplyImpulseAtPoint : Void Applies an impulse at a world point (world space). Results in a change to linear and angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |impulse| real3 | | |worldPoint| real3 | | lang=cpp, name=Lightning function ApplyImpulseAtPoint(impulse : Real3, worldPoint : Real3) # ApplyLinearImpulse : Void Applies a linear impulse through the center of mass (world space). Only results in a change of linear velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |linear| real3 | | lang=cpp, name=Lightning function ApplyLinearImpulse(linear : Real3) # ApplyLinearVelocity : Void Adds to the current linear velocity (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |linear| real3 | | lang=cpp, name=Lightning function ApplyLinearVelocity(linear : Real3) # ApplyTorque : Void Applies a torque through the center of mass of the body (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |torque| real3 | | lang=cpp, name=Lightning function ApplyTorque(torque : Real3) # ApplyTorqueNoWakeUp : Void Applies a torque through the center of mass of the body (world space). Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |torque| real3 | | lang=cpp, name=Lightning function ApplyTorqueNoWakeUp(torque : Real3) # ApplyVelocityAtPoint : Void Applies a velocity at a world space point on the object. Results in a change to linear and angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |velocity| real3 | | |worldPoint| real3 | | lang=cpp, name=Lightning function ApplyVelocityAtPoint(velocity : Real3, worldPoint : Real3) # ForceAsleep : Void Forces the object asleep. Warning: calling this function could create gameplay flaws if used incorrectly, use at your own risk (and sparingly). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ForceAsleep() # ForceAwake : Void Forces the object awake. Will reset the sleep timer. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ForceAwake() # GetPointVelocity : real3 Computes the linear point velocity of world-space point. |Name|Type|Description| |---|---|---| |worldPoint| real3 | | lang=cpp, name=Lightning function GetPointVelocity(worldPoint : Real3) : Real3 # RigidBody : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RigidBody() ```","title":"Rigidbody"},{"location":"reference/class_reference/ringgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor BackShade simplegizmobase DragRadiansPerPixel GrabArrowColor GrabArrowHeadSize GrabArrowLength GrabArrowOnTop GrabArrowViewScaled Radius SelectRadius ViewAligned # Properties # BackShade : boolean ``` lang=cpp, name=Lightning var BackShade : Boolean # DragRadiansPerPixel : real ``` lang=cpp, name=Lightning var DragRadiansPerPixel : Real # GrabArrowColor : real4 ``` lang=cpp, name=Lightning var GrabArrowColor : Real4 # GrabArrowHeadSize : real ``` lang=cpp, name=Lightning var GrabArrowHeadSize : Real # GrabArrowLength : real ``` lang=cpp, name=Lightning var GrabArrowLength : Real # GrabArrowOnTop : boolean ``` lang=cpp, name=Lightning var GrabArrowOnTop : Boolean # GrabArrowViewScaled : boolean ``` lang=cpp, name=Lightning var GrabArrowViewScaled : Boolean # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # SelectRadius : real ``` lang=cpp, name=Lightning var SelectRadius : Real # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # Methods # RingGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RingGizmo() ```","title":"Ringgizmo"},{"location":"reference/class_reference/ringgizmoevent/","text":"Event Editor (NOTE) Notification about various rotation parameters on the most recent RingGizmo modification. Methods Properties Base Classes Derived Classes DeltaRadiansAroundAxis gizmoupdateevent RadiansAroundAxis WorldRotation WorldRotationAxis # Properties # DeltaRadiansAroundAxis : real ``` lang=cpp, name=Lightning var DeltaRadiansAroundAxis : Real # RadiansAroundAxis : real ``` lang=cpp, name=Lightning var RadiansAroundAxis : Real # WorldRotation : quaternion ``` lang=cpp, name=Lightning var WorldRotation : Quaternion # WorldRotationAxis : real3 ``` lang=cpp, name=Lightning var WorldRotationAxis : Real3 # Methods","title":"Ringgizmoevent"},{"location":"reference/class_reference/rootwidget/","text":"Widget Methods Properties Base Classes Derived Classes OsWindow composite mainwindow # Properties # OsWindow : oswindow read-only ``` lang=cpp, name=Lightning var OsWindow : OsWindow # Methods","title":"Rootwidget"},{"location":"reference/class_reference/ropecreatorsubtool/","text":"Editor Methods Properties Base Classes Derived Classes NumberOfLinks springsubtool # Properties # NumberOfLinks : integer ``` lang=cpp, name=Lightning var NumberOfLinks : Integer # Methods","title":"Ropecreatorsubtool"},{"location":"reference/class_reference/rotategizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor SnapAngle component Snapping # Properties # SnapAngle : real ``` lang=cpp, name=Lightning var SnapAngle : Real # Snapping : boolean Snapping. ``` lang=cpp, name=Lightning var Snapping : Boolean # Methods # RotateGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RotateGizmo() ```","title":"Rotategizmo"},{"location":"reference/class_reference/rotategizmoupdateevent/","text":"Event Editor Methods Properties Base Classes Derived Classes GizmoRotation gizmoupdateevent GizmoWorldRotationAxis # Properties # GizmoRotation : real ``` lang=cpp, name=Lightning var GizmoRotation : Real # GizmoWorldRotationAxis : real3 ``` lang=cpp, name=Lightning var GizmoWorldRotationAxis : Real3 # Methods","title":"Rotategizmoupdateevent"},{"location":"reference/class_reference/rotationbasisgizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes ActivateAsGizmo WorldRotation component Constructor XAxisName YAxisName ZAxisName # Properties # WorldRotation : quaternion ``` lang=cpp, name=Lightning var WorldRotation : Quaternion # XAxisName : string ``` lang=cpp, name=Lightning var XAxisName : String # YAxisName : string ``` lang=cpp, name=Lightning var YAxisName : String # ZAxisName : string ``` lang=cpp, name=Lightning var ZAxisName : String # Methods # ActivateAsGizmo : Void Name Type Description ``` lang=cpp, name=Lightning function ActivateAsGizmo() ``` # RotationBasisGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RotationBasisGizmo() ```","title":"Rotationbasisgizmo"},{"location":"reference/class_reference/rotationbasisgizmoaabbqueryevent/","text":"Event Editor Methods Properties Base Classes Derived Classes objectevent # Properties # Methods","title":"Rotationbasisgizmoaabbqueryevent"},{"location":"reference/class_reference/rotationbasisgizmoinitializationevent/","text":"Event Editor Methods Properties Base Classes Derived Classes IntData objectevent # Properties # IntData : integer ``` lang=cpp, name=Lightning var IntData : Integer # Methods","title":"Rotationbasisgizmoinitializationevent"},{"location":"reference/class_reference/rotationbasisgizmometatransform/","text":"Editor Methods Properties Base Classes Derived Classes metatransform # Properties # Methods","title":"Rotationbasisgizmometatransform"},{"location":"reference/class_reference/safeid32/","text":"Meta Methods Properties Base Classes Derived Classes indexbuffer nethost nethostrecord netpropertyinfo raycaster rendertarget subrendergrouppass vertexbuffer # Properties # Methods","title":"Safeid32"},{"location":"reference/class_reference/safeid32eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject coginitializer collisionfilter command contextmenuentry materiallist operation rendergrouplist # Properties # Methods","title":"Safeid32eventobject"},{"location":"reference/class_reference/safeid32object/","text":"Meta Methods Properties Base Classes Derived Classes Object carwheelarray collisionfilterblock constraintconfigblock contentlibraryreference indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgemeshedgearray indexedhalfedgemeshfacearray indexedhalfedgemeshvertexarray multiconvexmeshindexdata multiconvexmeshsubmeshdata multiconvexmeshvertexdata netchannel netchanneltype netproperty netpropertytype physicsmeshindexdata physicsmeshvertexdata raycastprovider splinebakedpoints splinecontrolpoints subconvexmesh # Properties # Methods","title":"Safeid32object"},{"location":"reference/class_reference/safeid64/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Safeid64"},{"location":"reference/class_reference/safeid64eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Safeid64eventobject"},{"location":"reference/class_reference/safeid64object/","text":"Meta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Safeid64object"},{"location":"reference/class_reference/samplecurve/","text":"Resource Engine Methods Properties Base Classes Derived Classes DebugSample HeightMax dataresource Sample WidthMax # Properties # HeightMax : real read-only ``` lang=cpp, name=Lightning var HeightMax : Real # WidthMax : real read-only ``` lang=cpp, name=Lightning var WidthMax : Real # Methods # DebugSample : real Name Type Description p0 real p1 string p2 real4 ``` lang=cpp, name=Lightning function DebugSample(p0 : Real, p1 : String, p2 : Real4) : Real ``` # Sample : real Name Type Description p0 real ``` lang=cpp, name=Lightning function Sample(p0 : Real) : Real ```","title":"Samplecurve"},{"location":"reference/class_reference/samplersettings/","text":"Graphics (NOTE) Used when requesting a RenderTarget to configure how its texture is sampled. Methods Properties Base Classes Derived Classes Constructor AddressingX AddressingY CompareFunc CompareMode Filtering # Properties # AddressingX : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's width. ``` lang=cpp, name=Lightning var AddressingX : TextureAddressing # AddressingY : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's height. ``` lang=cpp, name=Lightning var AddressingY : TextureAddressing # CompareFunc : TextureCompareFunc Which method of comparison should be used if CompareMode is set to Enable. ``` lang=cpp, name=Lightning var CompareFunc : TextureCompareFunc # CompareMode : TextureCompareMode If sampling in hardware should perform comparison instead of fetching. Requires using SamplerShadow2d in the shader. ``` lang=cpp, name=Lightning var CompareMode : TextureCompareMode # Filtering : TextureFiltering How samples should be blended under minification/magnification. ``` lang=cpp, name=Lightning var Filtering : TextureFiltering # Methods # SamplerSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SamplerSettings() ```","title":"Samplersettings"},{"location":"reference/class_reference/sapbroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase # Properties # Methods","title":"Sapbroadphase"},{"location":"reference/class_reference/saveaudionode/","text":"Sound (NOTE) Saves audio from its input SoundNodes and then plays it. All audio from inputs is passed to outputs. Methods Properties Base Classes Derived Classes ClearSavedAudio SaveAudio soundnode PlaySavedAudio StopPlaying # Properties # SaveAudio : boolean When true, audio from input SoundNodes will be saved. Setting this to true will remove any existing saved audio before saving more. ``` lang=cpp, name=Lightning var SaveAudio : Boolean # Methods # ClearSavedAudio : Void Removes all currently saved audio. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearSavedAudio() # PlaySavedAudio : Void Plays the saved audio. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function PlaySavedAudio() # StopPlaying : Void Stops playing the saved audio. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function StopPlaying()","title":"Saveaudionode"},{"location":"reference/class_reference/savingevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Savingevent"},{"location":"reference/class_reference/scalegizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor SnapDistance component SnapMode Snapping # Properties # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # SnapMode : GizmoSnapMode ``` lang=cpp, name=Lightning var SnapMode : GizmoSnapMode # Snapping : boolean Snapping. ``` lang=cpp, name=Lightning var Snapping : Boolean # Methods # ScaleGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ScaleGizmo() ```","title":"Scalegizmo"},{"location":"reference/class_reference/scalegizmoupdateevent/","text":"Event Editor Methods Properties Base Classes Derived Classes GizmoWorldScale gizmoupdateevent # Properties # GizmoWorldScale : real3 ``` lang=cpp, name=Lightning var GizmoWorldScale : Real3 # Methods","title":"Scalegizmoupdateevent"},{"location":"reference/class_reference/scenegraphsource/","text":"Engine Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Scenegraphsource"},{"location":"reference/class_reference/scrollarea/","text":"Widget Methods Properties Base Classes Derived Classes basescrollarea # Properties # Methods","title":"Scrollarea"},{"location":"reference/class_reference/searchview/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Searchview"},{"location":"reference/class_reference/searchviewelement/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Searchviewelement"},{"location":"reference/class_reference/searchviewevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Searchviewevent"},{"location":"reference/class_reference/segment/","text":"Geometry Methods Properties Base Classes Derived Classes GetPoint End GetTValue Start Constructor # Properties # End : real3 ``` lang=cpp, name=Lightning var End : Real3 # Start : real3 ``` lang=cpp, name=Lightning var Start : Real3 # Methods # GetPoint : real3 Returns the point at the given t-value. |Name|Type|Description| |---|---|---| |tValue| real | | lang=cpp, name=Lightning function GetPoint(tValue : Real) : Real3 # GetTValue : real Returns the t-value that would result in the given point projected onto the segment. |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function GetTValue(point : Real3) : Real # Segment : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Segment() ``` # Segment : Void constructor Name Type Description start real3 end real3 ``` lang=cpp, name=Lightning function Segment(start : Real3, end : Real3) ``` # Segment : Void constructor Name Type Description p0 segment ``` lang=cpp, name=Lightning function Segment(p0 : Segment) ```","title":"Segment"},{"location":"reference/class_reference/selectionchangedevent/","text":"Event Meta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Selectionchangedevent"},{"location":"reference/class_reference/selectionicon/","text":"Component Graphics (NOTE) Utility selection behavior for objects in the editor. Methods Properties Base Classes Derived Classes Constructor Material component OverrideSelections ShaderInputs SpriteSource ViewScale VisibilityEvents Visible # Properties # Material : material ``` lang=cpp, name=Lightning var Material : Material # OverrideSelections : boolean If collider/graphical or other selection logic should be disabled and only selectable via this icon. ``` lang=cpp, name=Lightning var OverrideSelections : Boolean # ShaderInputs : shaderinputs ``` lang=cpp, name=Lightning var ShaderInputs : ShaderInputs # SpriteSource : spritesource Sprite based image to use for icon, will not animate. ``` lang=cpp, name=Lightning var SpriteSource : SpriteSource # ViewScale : real Scalar for how big the icon should appear in the viewport. ``` lang=cpp, name=Lightning var ViewScale : Real # VisibilityEvents : boolean ``` lang=cpp, name=Lightning var VisibilityEvents : Boolean # Visible : boolean ``` lang=cpp, name=Lightning var Visible : Boolean # Methods # SelectionIcon : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SelectionIcon() ```","title":"Selectionicon"},{"location":"reference/class_reference/selectivenode/","text":"Engine Methods Properties Base Classes Derived Classes Root dualblendselectivenode # Properties # Root : cog ``` lang=cpp, name=Lightning var Root : Cog # Methods","title":"Selectivenode"},{"location":"reference/class_reference/selectorbutton/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Selectorbutton"},{"location":"reference/class_reference/selectorspringsubtool/","text":"Editor Methods Properties Base Classes Derived Classes dragselectsubtool pointmassselectorsubtool springselectorsubtool # Properties # Methods","title":"Selectorspringsubtool"},{"location":"reference/class_reference/selecttool/","text":"Component Editor Methods Properties Base Classes Derived Classes RayCast ArchetypeSelect component Constructor Raycaster SmartSelect RootSelect SmartGroupSelect # Properties # ArchetypeSelect : boolean Selects the root archetype of the tree, subsequent clicks will select the nearest archetype followed by any direct children following that. ``` lang=cpp, name=Lightning var ArchetypeSelect : Boolean # Raycaster : raycaster ``` lang=cpp, name=Lightning var Raycaster : Raycaster # RootSelect : boolean Selects the root of a hierarchy first, subsequent clicks will select children objects. ``` lang=cpp, name=Lightning var RootSelect : Boolean # SmartGroupSelect : boolean If a parent of a hierarchy is already selected drag select will only select all the children of the currently selected parent. ``` lang=cpp, name=Lightning var SmartGroupSelect : Boolean # Methods # RayCast : cog Name Type Description viewport viewport mousePosition real2 ``` lang=cpp, name=Lightning function RayCast(viewport : Viewport, mousePosition : Real2) : Cog ``` # SelectTool : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function SelectTool() # SmartSelect : cog static Name Type Description selection metaselection toSelect cog rootSelect boolean archetypeSelect boolean ``` lang=cpp, name=Lightning function SmartSelect(selection : MetaSelection, toSelect : Cog, rootSelect : Boolean, archetypeSelect : Boolean) : Cog ```","title":"Selecttool"},{"location":"reference/class_reference/selecttoolfrustumevent/","text":"Event Editor Methods Properties Base Classes Derived Classes Frustum event Handled HandledEventScript Space # Properties # Frustum : frustum read-only ``` lang=cpp, name=Lightning var Frustum : Frustum # Handled : boolean ``` lang=cpp, name=Lightning var Handled : Boolean # HandledEventScript : boolean ``` lang=cpp, name=Lightning var HandledEventScript : Boolean # Space : space read-only ``` lang=cpp, name=Lightning var Space : Space # Methods","title":"Selecttoolfrustumevent"},{"location":"reference/class_reference/sendableevent/","text":"Event Networking (NOTE) This event can be sent over the network. Methods Properties Base Classes Derived Classes event LauncherCommunicationEvent # Properties # Methods","title":"Sendableevent"},{"location":"reference/class_reference/serializationfilter/","text":"Serialization Methods Properties Base Classes Derived Classes referencecountedeventobject cogserializationfilter # Properties # Methods","title":"Serializationfilter"},{"location":"reference/class_reference/shaderinputs/","text":"Graphics (NOTE) A set of shader inputs for overriding values per object or globally. Methods Properties Base Classes Derived Classes Add referencecountedthreadsafeid32 Clear Remove Constructor # Properties # Methods # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| boolean | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Boolean) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| integer | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Integer) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| || string | | || string | | || integer2 | | lang=cpp, name=Lightning function Add( : String, : String, : Integer2) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| || string | | || string | | || integer3 | | lang=cpp, name=Lightning function Add( : String, : String, : Integer3) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| || string | | || string | | || integer4 | | lang=cpp, name=Lightning function Add( : String, : String, : Integer4) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| real | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Real) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| real2 | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Real2) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| real3 | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Real3) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| || string | | || string | | || real3x3 | | lang=cpp, name=Lightning function Add( : String, : String, : Real3x3) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| real4 | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Real4) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| || string | | || string | | || real4x4 | | lang=cpp, name=Lightning function Add( : String, : String, : Real4x4) # Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | |input| texture | | lang=cpp, name=Lightning function Add(fragmentName : String, inputName : String, input : Texture) # Clear : Void Remove all added inputs. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # Remove : Void Remove a specific input that was added. |Name|Type|Description| |---|---|---| |fragmentName| string | | |inputName| string | | lang=cpp, name=Lightning function Remove(fragmentName : String, inputName : String) # ShaderInputs : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ShaderInputs() ``` # ShaderInputs : Void constructor Name Type Description shaderinputs ``` lang=cpp, name=Lightning function ShaderInputs( : ShaderInputs) ```","title":"Shaderinputs"},{"location":"reference/class_reference/shaderinputsevent/","text":"Event Graphics Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Shaderinputsevent"},{"location":"reference/class_reference/sharedcontent/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor ExtraContentLibraries component # Properties # ExtraContentLibraries : contentlibraryreferencearray ``` lang=cpp, name=Lightning var ExtraContentLibraries : ContentLibraryReferenceArray # Methods # SharedContent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SharedContent() ```","title":"Sharedcontent"},{"location":"reference/class_reference/shortcuts/","text":"Engine Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Shortcuts"},{"location":"reference/class_reference/showgammacorrectionfilter/","text":"ContentMeta Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Showgammacorrectionfilter"},{"location":"reference/class_reference/shownormalgenerationoptionsfilter/","text":"ContentMeta Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Shownormalgenerationoptionsfilter"},{"location":"reference/class_reference/showpremultipliedalphafilter/","text":"ContentMeta Methods Properties Base Classes Derived Classes metapropertyfilter # Properties # Methods","title":"Showpremultipliedalphafilter"},{"location":"reference/class_reference/simpleanimation/","text":"Component Engine (NOTE) Plays a single animation on Initialize. Methods Properties Base Classes Derived Classes ChainAnimation Animation component CrossBlend PlayMode DirectBlend PlayIsolatedAnimation PlaySingle Constructor # Properties # Animation : animation Animation getter/setter. ``` lang=cpp, name=Lightning var Animation : Animation # PlayMode : AnimationPlayMode Play mode getter/setter. ``` lang=cpp, name=Lightning var PlayMode : AnimationPlayMode # Methods # ChainAnimation : animationnode Name Type Description animation animation playMode AnimationPlayMode ``` lang=cpp, name=Lightning function ChainAnimation(animation : Animation, playMode : AnimationPlayMode) : AnimationNode ``` # CrossBlend : animationnode Name Type Description animation animation transitionTime real playMode AnimationPlayMode ``` lang=cpp, name=Lightning function CrossBlend(animation : Animation, transitionTime : Real, playMode : AnimationPlayMode) : AnimationNode ``` # DirectBlend : animationnode Name Type Description animation animation transitionTime real playMode AnimationPlayMode ``` lang=cpp, name=Lightning function DirectBlend(animation : Animation, transitionTime : Real, playMode : AnimationPlayMode) : AnimationNode ``` # PlayIsolatedAnimation : animationnode Name Type Description animation animation rootBone cog playMode AnimationPlayMode ``` lang=cpp, name=Lightning function PlayIsolatedAnimation(animation : Animation, rootBone : Cog, playMode : AnimationPlayMode) : AnimationNode ``` # PlaySingle : animationnode Play animations directly. |Name|Type|Description| |---|---|---| |animation| animation | | |playMode| AnimationPlayMode | | lang=cpp, name=Lightning function PlaySingle(animation : Animation, playMode : AnimationPlayMode) : AnimationNode # SimpleAnimation : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SimpleAnimation() ```","title":"Simpleanimation"},{"location":"reference/class_reference/simpledebuggerlistener/","text":"Editor Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Simpledebuggerlistener"},{"location":"reference/class_reference/simplegizmobase/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor Color component arrowgizmo DrawOnTop ringgizmo HoverColor squaregizmo MouseInput PickingPriority UseParentAsViewScaleOrigin ViewScaled # Properties # Color : real4 Display colors. ``` lang=cpp, name=Lightning var Color : Real4 # DrawOnTop : boolean Whether or not to draw on top of all objects regardless of depth. ``` lang=cpp, name=Lightning var DrawOnTop : Boolean # HoverColor : real4 ``` lang=cpp, name=Lightning var HoverColor : Real4 # MouseInput : boolean Whether or not this Gizmo should receive mouse input. ``` lang=cpp, name=Lightning var MouseInput : Boolean # PickingPriority : integer Used to manually determine which Gizmo gets selected when the mouse is over multiple Gizmos. Higher priority will get picked first. ``` lang=cpp, name=Lightning var PickingPriority : Integer # UseParentAsViewScaleOrigin : boolean If enabled, the gizmo will scale around it's parent. ``` lang=cpp, name=Lightning var UseParentAsViewScaleOrigin : Boolean # ViewScaled : boolean If enabled, the size of the gizmo will stay the same regardless of how far away the camera is. ``` lang=cpp, name=Lightning var ViewScaled : Boolean # Methods # SimpleGizmoBase : Void constructor Constructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function SimpleGizmoBase()","title":"Simplegizmobase"},{"location":"reference/class_reference/simplesocket/","text":"Component Networking Methods Properties Base Classes Derived Classes Constructor Socket component # Properties # Socket : tcpsocket read-only ``` lang=cpp, name=Lightning var Socket : TcpSocket # Methods # SimpleSocket : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SimpleSocket() ```","title":"Simplesocket"},{"location":"reference/class_reference/simplesound/","text":"Component Sound (NOTE) Plays a specified SoundCue, either when created or when the Play method is called. Methods Properties Base Classes Derived Classes Play Cue component Constructor IsPlaying Stop Paused Positional StartPlaying # Properties # Cue : soundcue ``` lang=cpp, name=Lightning var Cue : SoundCue # IsPlaying : boolean read-only Will be true if the SoundCue is currently being played. ``` lang=cpp, name=Lightning var IsPlaying : Boolean # Paused : boolean Setting this Property to true will pause a currently playing SoundCue. Setting it to false will resume playback. ``` lang=cpp, name=Lightning var Paused : Boolean # Positional : boolean If this property is true the SoundCue will be played positionally (heard at a specific location by SoundListeners) through the SoundEmitter component on the same object. If false, the SoundCue will be played through the SoundSpace, and will NOT be affected by any SoundEmitter settings. ``` lang=cpp, name=Lightning var Positional : Boolean # StartPlaying : boolean If this property is true the SoundCue will begin playing as soon as the object is created. ``` lang=cpp, name=Lightning var StartPlaying : Boolean # Methods # Play : soundinstance Begins playing the SoundCue chosen in the Cue property and returns the resulting SoundInstance. If already playing it will be stopped and re-started. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Play() : SoundInstance # SimpleSound : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SimpleSound() ``` # Stop : Void Stops a currently playing SoundInstance if it exists. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Stop()","title":"Simplesound"},{"location":"reference/class_reference/sizepolicies/","text":"Widget Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Sizepolicies"},{"location":"reference/class_reference/skeleton/","text":"Component Graphics (NOTE) Stores a map of Bones so that SkinnedModels can collect transform matrices for mesh skinning. Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # Skeleton : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Skeleton() ```","title":"Skeleton"},{"location":"reference/class_reference/skinnedmodel/","text":"Component Graphics (NOTE) Renders a mesh using the transform hierarchy of a Skeleton to apply skinning. Methods Properties Base Classes Derived Classes Constructor Mesh graphical SkeletonPath # Properties # Mesh : mesh Mesh that the graphical will render. ``` lang=cpp, name=Lightning var Mesh : Mesh # SkeletonPath : cogpath Path to an object with a Skeleton component that will be used for skinning. ``` lang=cpp, name=Lightning var SkeletonPath : CogPath # Methods # SkinnedModel : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SkinnedModel() ```","title":"Skinnedmodel"},{"location":"reference/class_reference/sliceddefinition/","text":"Resource Graphics Methods Properties Base Classes Derived Classes Resource imagedefinition # Properties # Methods","title":"Sliceddefinition"},{"location":"reference/class_reference/slider/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Slider"},{"location":"reference/class_reference/smoothsharpentool/","text":"Editor Methods Properties Base Classes Derived Classes AutoDetermineSamples heightmanipulationtool RandomSampleDistance RandomSamples Strength UniformSamples # Properties # AutoDetermineSamples : boolean ``` lang=cpp, name=Lightning var AutoDetermineSamples : Boolean # RandomSampleDistance : integer ``` lang=cpp, name=Lightning var RandomSampleDistance : Integer # RandomSamples : integer ``` lang=cpp, name=Lightning var RandomSamples : Integer # Strength : real ``` lang=cpp, name=Lightning var Strength : Real # UniformSamples : integer ``` lang=cpp, name=Lightning var UniformSamples : Integer # Methods","title":"Smoothsharpentool"},{"location":"reference/class_reference/sound/","text":"Resource Sound (NOTE) The resource for a single audio file. Methods Properties Base Classes Derived Classes Channels Resource Length # Properties # Channels : integer read-only The number of audio channels in the file. ``` lang=cpp, name=Lightning var Channels : Integer # Length : real read-only The length of the audio file, in seconds. ``` lang=cpp, name=Lightning var Length : Real # Methods","title":"Sound"},{"location":"reference/class_reference/soundattenuator/","text":"Resource Sound (NOTE) Decreases a positional sound's volume as the SoundEmitter gets further away from a SoundListener. Methods Properties Base Classes Derived Classes FalloffCurve dataresource FalloffCurveType LowPassCutoffFreq LowPassStartDistance MinAttenuatedVolume StartDistance StopDistance UseLowPassFilter # Properties # FalloffCurve : samplecurve The SampleCurve resource to use as the attenuation's falloff curve. It will be normalized and stretched to fit between the StartDistance and StopDistance values. ``` lang=cpp, name=Lightning var FalloffCurve : SampleCurve # FalloffCurveType : FalloffCurveType The type of curve used to reduce the sound's volume over distance. The default is a logarithmic curve which mimics the real world. ``` lang=cpp, name=Lightning var FalloffCurveType : FalloffCurveType # LowPassCutoffFreq : real The lowest cutoff frequency of the low pass filter, reached at the StopDistance. The cutoff frequency will be interpolated logarithmically from 15000.00 (a value with very little effect on the sound) to the LowPassCutoffFreq between the LowPassStartDistance and the StopDistance. ``` lang=cpp, name=Lightning var LowPassCutoffFreq : Real # LowPassStartDistance : real The distance at which the low pass filter begins to take effect. ``` lang=cpp, name=Lightning var LowPassStartDistance : Real # MinAttenuatedVolume : real The lowest volume that the attenuation will reach. If set above 0, the sound will continue to be heard at all distances. ``` lang=cpp, name=Lightning var MinAttenuatedVolume : Real # StartDistance : real The distance from a SoundListener at which the sound's volume begins attenuating. At shorter distances the volume will not be changed. Cannot be larger than the StopDistance. ``` lang=cpp, name=Lightning var StartDistance : Real # StopDistance : real The distance at which the attenuation reaches the minimum volume. No volume changes will happen past this distance. Cannot be smaller than the StartDistance. ``` lang=cpp, name=Lightning var StopDistance : Real # UseLowPassFilter : boolean If true, a low pass filter will be applied to the sound after reaching a specified distance, mimicking the way sound is muffled with distance in real life. The filter begins at the LowPassStartDistance and interpolates its cutoff frequency logarithmically until the StopDistance. The filter will not change past the StopDistance. ``` lang=cpp, name=Lightning var UseLowPassFilter : Boolean # Methods","title":"Soundattenuator"},{"location":"reference/class_reference/soundattenuatordisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Soundattenuatordisplay"},{"location":"reference/class_reference/soundbuffer/","text":"Sound (NOTE) Used with a CustomAudioNode to play audio data directly. Methods Properties Base Classes Derived Classes AddMicUncompressedData SampleCount referencecountedobject AddSampleToBuffer GetSampleAtIndex Reset # Properties # SampleCount : integer read-only The number of samples currently in the buffer. ``` lang=cpp, name=Lightning var SampleCount : Integer # Methods # AddMicUncompressedData : Void Name Type Description Array[ real ] ``` lang=cpp, name=Lightning function AddMicUncompressedData( : Array[Real]) ``` # AddSampleToBuffer : Void Adds a new audio sample to the end of the buffer. |Name|Type|Description| |---|---|---| |sample| real | | lang=cpp, name=Lightning function AddSampleToBuffer(sample : Real) # GetSampleAtIndex : real Returns the sample at a specific index from the beginning of the buffer. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function GetSampleAtIndex(index : Integer) : Real # Reset : Void Removes all data from the buffer and resets it. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Reset()","title":"Soundbuffer"},{"location":"reference/class_reference/soundbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes FileLoadType buildercomponent MaxVolume Name Normalize # Properties # FileLoadType : AudioFileLoadType If Streamed is selected, or if Auto is selected and the file is longer than one minute, the sound file will be streamed from disk at runtime instead of loaded into memory. Streaming files can't be played multiple times simultaneously and can't use loop tails. ``` lang=cpp, name=Lightning var FileLoadType : AudioFileLoadType # MaxVolume : real The volume of the sound will be altered so that the highest volume peak matches this value. All audio samples will be adjusted equally. ``` lang=cpp, name=Lightning var MaxVolume : Real # Name : string ``` lang=cpp, name=Lightning var Name : String # Normalize : boolean If true, the audio will be normalized when loaded so that the highest volume peak matches the MaxVolume value. ``` lang=cpp, name=Lightning var Normalize : Boolean # Methods","title":"Soundbuilder"},{"location":"reference/class_reference/soundcue/","text":"Resource Sound (NOTE) Settings and Sounds for playing audio files. Methods Properties Base Classes Derived Classes AddSoundEntry Attenuator dataresource AddSoundTagEntry BeatsPerMinute PlayCueOnNode Decibels Preview DecibelVariation StopPreview Pitch PitchVariation PlayMode SelectMode Semitones SemitoneVariation ShowMusicOptions Sounds SoundTags TimeSigBeats TimeSigValue UseDecibelVariation UseSemitoneVariation Volume VolumeVariation # Properties # Attenuator : soundattenuator If a SoundAttenuator resource is selected, it will be applied to reduce the sound's volume with distance when played through a SoundEmitter. If DefaultNoAttenuation is selected on the SoundCue and a different SoundAttenuator is selected on the SoundEmitter, the SoundEmitter's settings will be applied. If DefaultNoAttenuation is selected on both the sound will not be attenuated. ``` lang=cpp, name=Lightning var Attenuator : SoundAttenuator # BeatsPerMinute : real The speed of the music, using beats per minute. ``` lang=cpp, name=Lightning var BeatsPerMinute : Real # Decibels : real The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other). ``` lang=cpp, name=Lightning var Decibels : Real # DecibelVariation : real Sets how much the Decibels will be randomized every time the SoundCue plays. If Decibels is 0, and DecibelVariation is 4, the volume adjustment will be chosen randomly between -4 and 4. ``` lang=cpp, name=Lightning var DecibelVariation : Real # Pitch : real This property affects both the pitch and speed of the sound played by the SoundCue. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,. ``` lang=cpp, name=Lightning var Pitch : Real # PitchVariation : real Sets how much the pitch will be randomized every time the SoundCue plays. If Pitch is 0, and PitchVariation is 0.3, the pitch of the sound will be chosen randomly between -0.3 and 0.3. ``` lang=cpp, name=Lightning var PitchVariation : Real # PlayMode : SoundPlayMode If Single is chosen the SoundInstance created by the SoundCue will be played once and will stop when it reaches its EndTime. If Looping is chosen the SoundInstance will play continuously until either it is stopped or its Looping property is set to false. ``` lang=cpp, name=Lightning var PlayMode : SoundPlayMode # SelectMode : SoundSelectMode If Random is chosen the SoundCue will randomly choose which SoundEntry to play. If Sequential is chosen it will play the SoundEntries in order. ``` lang=cpp, name=Lightning var SelectMode : SoundSelectMode # Semitones : real This property, specified in semitones (or half-steps), affects both the pitch and speed of the sound played by the SoundCue. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other). ``` lang=cpp, name=Lightning var Semitones : Real # SemitoneVariation : real Sets how much the pitch will be randomized every time the SoundCue plays. If Semitones is 0, and SemitoneVariation is 5, the pitch of the sound will be chosen randomly between -5 and 5. ``` lang=cpp, name=Lightning var SemitoneVariation : Real # ShowMusicOptions : boolean If true, the music options will be shown. If false, they will be hidden. ``` lang=cpp, name=Lightning var ShowMusicOptions : Boolean # Sounds : sounds ``` lang=cpp, name=Lightning var Sounds : Sounds # SoundTags : soundtags ``` lang=cpp, name=Lightning var SoundTags : SoundTags # TimeSigBeats : real The top number of the music's time signature (beats per measure). ``` lang=cpp, name=Lightning var TimeSigBeats : Real # TimeSigValue : real The bottom number of the music's time signature (which type of note has the beat). ``` lang=cpp, name=Lightning var TimeSigValue : Real # UseDecibelVariation : boolean If false, the VolumeVariation value will be used to randomize the volume. If true, the DecibelVariation field will be shown and will be used for randomization. ``` lang=cpp, name=Lightning var UseDecibelVariation : Boolean # UseSemitoneVariation : boolean If false, the PitchVariation value will be used to randomize the volume. If true, the SemitoneVariation field will be shown and will be used for randomization. ``` lang=cpp, name=Lightning var UseSemitoneVariation : Boolean # Volume : real The volume adjustment that will be applied to the sound when it plays. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other). ``` lang=cpp, name=Lightning var Volume : Real # VolumeVariation : real Sets how much the Volume will be randomized every time the SoundCue plays. If Volume is 1, and VolumeVariation is 0.5, the volume adjustment will be chosen randomly between 0.5 and 1.5. ``` lang=cpp, name=Lightning var VolumeVariation : Real # Methods # AddSoundEntry : Void Adds a new SoundEntry to this SoundCue. |Name|Type|Description| |---|---|---| |sound| sound | | |weight| real | | lang=cpp, name=Lightning function AddSoundEntry(sound : Sound, weight : Real) # AddSoundTagEntry : Void Adds a new SoundTagEntry to this SoundCue. |Name|Type|Description| |---|---|---| |soundTag| soundtag | | lang=cpp, name=Lightning function AddSoundTagEntry(soundTag : SoundTag) # PlayCueOnNode : soundinstance Plays this SoundCue using a specified SoundNode as the output and returns the resulting SoundInstance. |Name|Type|Description| |---|---|---| |outputNode| soundnode | | |startPaused| boolean | | lang=cpp, name=Lightning function PlayCueOnNode(outputNode : SoundNode, startPaused : Boolean) : SoundInstance # Preview : Void Name Type Description ``` lang=cpp, name=Lightning function Preview() ``` # StopPreview : Void Name Type Description ``` lang=cpp, name=Lightning function StopPreview() ```","title":"Soundcue"},{"location":"reference/class_reference/soundcuedisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Soundcuedisplay"},{"location":"reference/class_reference/sounddisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Sounddisplay"},{"location":"reference/class_reference/soundemitter/","text":"Component Sound (NOTE) Allows 3D positioning of sounds relative to SoundListeners. Methods Properties Base Classes Derived Classes InterpolateDecibels Attenuator component InterpolatePitch Decibels InterpolateSemitones Directional InterpolateVolume EmitAngle PlayCue InputNode PlayCuePaused IsPlaying Constructor OutputNode Paused Pitch RearVolume Semitones SoundNodeInput SoundNodeOutput Volume # Properties # Attenuator : soundattenuator If a SoundAttenuator resource other than DefaultNoAttenuation is selected it will be applied to SoundCues without their own SoundAttenuator resource. If a SoundCue has attenuation settings those will always be used. If neither has settings, the sound will not be attenuated. ``` lang=cpp, name=Lightning var Attenuator : SoundAttenuator # Decibels : real The volume adjustment, in decibels, applied to all sounds played through this SoundEmitter. A value of 0 does nothing, 6 will double the volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other). ``` lang=cpp, name=Lightning var Decibels : Real # Directional : boolean When true, the audio output of the SoundEmitter will be limited by the EmitAngle, so that sound in front of the object will be louder than sound behind it. Within the EmitAngle the sound will be at full volume. The volume interpolates logarithmically until it reaches the RearVolume value directly behind the object. ``` lang=cpp, name=Lightning var Directional : Boolean # EmitAngle : real The angle of full volume sound for a directional SoundEmitter, from 1 to 360. An angle of 90, for example, will be centered at the object's front, extending 45 degrees to the left and right. ``` lang=cpp, name=Lightning var EmitAngle : Real # InputNode : soundnode read-only DEPRECATED The SoundNodeInput property should be used instead. ``` lang=cpp, name=Lightning var InputNode : SoundNode # IsPlaying : boolean read-only This property will be true if there are SoundInstances currently associated with this SoundEmitter, even if they are paused or otherwise not audible. ``` lang=cpp, name=Lightning var IsPlaying : Boolean # OutputNode : soundnode read-only DEPRECATED The SoundNodeOutput property should be used instead. ``` lang=cpp, name=Lightning var OutputNode : SoundNode # Paused : boolean Setting this property to true pauses all sounds currently playing through the SoundEmitter. Setting it to false will resume playback. ``` lang=cpp, name=Lightning var Paused : Boolean # Pitch : real This property affects both the pitch and speed of all sounds played through this SoundEmitter. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down. The Pitch property is linked to the Semitones property (changing one will change the other). ``` lang=cpp, name=Lightning var Pitch : Real # RearVolume : real The volume of sound heard directly behind a directional SoundEmitter. It will only reach this value in a small area, since volume is interpolated from the edge of the EmitAngle. To make the volume as quiet as possible behind the object, use a small EmitAngle. ``` lang=cpp, name=Lightning var RearVolume : Real # Semitones : real This property, specified in semitones (or half-steps), affects both the pitch and speed of all sounds played through this SoundEmitter.. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other). ``` lang=cpp, name=Lightning var Semitones : Real # SoundNodeInput : soundnode read-only The SoundNode to use for attaching other nodes to the input of the SoundEmitter. ``` lang=cpp, name=Lightning var SoundNodeInput : SoundNode # SoundNodeOutput : soundnode read-only The SoundNode to use for attaching other nodes to the output of the SoundEmitter. ``` lang=cpp, name=Lightning var SoundNodeOutput : SoundNode # Volume : real The volume adjustment applied to all sounds played through this SoundEmitter. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other). ``` lang=cpp, name=Lightning var Volume : Real # Methods # InterpolateDecibels : Void Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateDecibels(decibels : Real, interpolationTime : Real) # InterpolatePitch : Void Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolatePitch(pitch : Real, interpolationTime : Real) # InterpolateSemitones : Void Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateSemitones(pitch : Real, interpolationTime : Real) # InterpolateVolume : Void Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateVolume(volume : Real, interpolationTime : Real) # PlayCue : soundinstance Plays the SoundCue passed into the function and returns the resulting SoundInstance. |Name|Type|Description| |---|---|---| |cue| soundcue | | lang=cpp, name=Lightning function PlayCue(cue : SoundCue) : SoundInstance # PlayCuePaused : soundinstance Plays the SoundCue passed into the function and returns the resulting SoundInstance, which starts off paused. |Name|Type|Description| |---|---|---| |cue| soundcue | | lang=cpp, name=Lightning function PlayCuePaused(cue : SoundCue) : SoundInstance # SoundEmitter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SoundEmitter() ```","title":"Soundemitter"},{"location":"reference/class_reference/soundemitterdisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Soundemitterdisplay"},{"location":"reference/class_reference/soundentry/","text":"Sound (NOTE) Stores Sounds and associated properties to be used by a SoundCue. Methods Properties Base Classes Derived Classes Preview CrossFadeLoopTail Object StopPreview EndTime LoopEndTime LoopStartTime LoopTailLength Sound StartTime Weight # Properties # CrossFadeLoopTail : boolean If false, the loop tail will be added to the audio and will fade out over the specified time. If true, the audio will be cross-faded, so the beginning of the loop will fade in as the tail fades out. ``` lang=cpp, name=Lightning var CrossFadeLoopTail : Boolean # EndTime : real The time (in seconds) at which the Sound will stop playing. Defaults to the length of the audio file. Cannot be smaller than the StartTime. ``` lang=cpp, name=Lightning var EndTime : Real # LoopEndTime : real The time (in seconds) from the beginning of the audio file at which a looping SoundInstance jumps back to the LoopStartTime. If it stops looping while playing it will continue to the EndTime and then stop. Cannot be smaller than the LoopStartTime. ``` lang=cpp, name=Lightning var LoopEndTime : Real # LoopStartTime : real The time (in seconds) from the beginning of the audio file that a looping SoundInstance will jump back to after it reaches the LoopEndTime. The Sound will still start at the StartTime when it is played, but after it begins looping it will start at the LoopStartTime. Cannot be larger than the LoopEndTime. ``` lang=cpp, name=Lightning var LoopStartTime : Real # LoopTailLength : real The length (in seconds) of the tail, from the LoopEndTime, which will continue to play after the Sound jumps back to the LoopStartTime. The loop tail will fade out smoothly. ``` lang=cpp, name=Lightning var LoopTailLength : Real # Sound : sound The Sound resource that will be played by this SoundEntry. ``` lang=cpp, name=Lightning var Sound : Sound # StartTime : real The time (in seconds) at which the Sound will start playing. A value of 0 will start the Sound at the beginning of the audio file. Cannot be larger than the EndTime. ``` lang=cpp, name=Lightning var StartTime : Real # Weight : real The weighted randomization value for this particular SoundEntry to be chosen to play. The values of all SoundEntries are considered: two SoundEntries with weights of 1 and 1 will each play 50 percent of the time, as will weights of 10 and 10. ``` lang=cpp, name=Lightning var Weight : Real # Methods # Preview : Void Preview this sound with no SoundCue settings. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Preview() # StopPreview : Void Stop previewing this sound. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function StopPreview()","title":"Soundentry"},{"location":"reference/class_reference/soundentrydisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Soundentrydisplay"},{"location":"reference/class_reference/soundevent/","text":"Event Sound (NOTE) Sent for various audio-related events. Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Soundevent"},{"location":"reference/class_reference/soundinstance/","text":"Sound (NOTE) The object associated with a currently playing sound. Methods Properties Base Classes Derived Classes InterpolateDecibels CustomEventTime referencecountedeventobject InterpolatePitch Decibels InterpolateSemitones EndTime InterpolateVolume FileLength Stop IsPlaying LoopEndTime Looping LoopStartTime Paused Pitch Semitones SoundName SoundNode Time Volume # Properties # CustomEventTime : real The time (in seconds from the beginning of the file) to get a MusicCustomTime event. ``` lang=cpp, name=Lightning var CustomEventTime : Real # Decibels : real The volume adjustment (in decibels) of the SoundInstance, initially set by the SoundCue's Decibels property. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other). ``` lang=cpp, name=Lightning var Decibels : Real # EndTime : real The time in seconds from the beginning of the file that the instance will stop. ``` lang=cpp, name=Lightning var EndTime : Real # FileLength : real read-only The length of the entire audio file, in seconds. ``` lang=cpp, name=Lightning var FileLength : Real # IsPlaying : boolean read-only This Property will be true while the SoundInstance is playing, then will become false when its sound has stopped. ``` lang=cpp, name=Lightning var IsPlaying : Boolean # LoopEndTime : real The time in seconds from the beginning of the file that the instance will stop and jump back when looping. ``` lang=cpp, name=Lightning var LoopEndTime : Real # Looping : boolean When this Property is true the SoundInstance will loop indefinitely. If changed to false while a SoundInstance is looping the SoundInstance will continue playing to its EndTime and then stop. ``` lang=cpp, name=Lightning var Looping : Boolean # LoopStartTime : real The time in seconds from the beginning of the file that the instance will jump back to when it loops. ``` lang=cpp, name=Lightning var LoopStartTime : Real # Paused : boolean Setting this Property to true will pause a currently playing SoundInstance. Setting it to false will resume playback. ``` lang=cpp, name=Lightning var Paused : Boolean # Pitch : real The pitch adjustment of the SoundInstance, initially set by the SoundCue's Pitch property. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,. ``` lang=cpp, name=Lightning var Pitch : Real # Semitones : real The pitch adjustment, in semitones (or half-steps), of the SoundInstance, initially set by the SoundCue's Semitones property. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other). ``` lang=cpp, name=Lightning var Semitones : Real # SoundName : string read-only The name of the Sound being played by this SoundInstance. ``` lang=cpp, name=Lightning var SoundName : String # SoundNode : soundnode read-only The SoundNode associated with this SoundInstance. ``` lang=cpp, name=Lightning var SoundNode : SoundNode # Time : real This property tells you to the current playback position, in seconds from the beginning of the file, and allows you to tell the instance to change its playback position to a different time. Be aware that the time will not be precisely accurate. If the Sound resource used to play the SoundInstance has Streamed selected, you cannot set the playback position. ``` lang=cpp, name=Lightning var Time : Real # Volume : real The volume adjustment of the SoundInstance, initially set by the SoundCue's Volume property. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other). ``` lang=cpp, name=Lightning var Volume : Real # Methods # InterpolateDecibels : Void Interpolates the SoundInstance's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateDecibels(decibels : Real, interpolationTime : Real) # InterpolatePitch : Void Interpolates the SoundInstance's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolatePitch(pitch : Real, interpolationTime : Real) # InterpolateSemitones : Void Interpolates the SoundInstance's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitchSemitones| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateSemitones(pitchSemitones : Real, interpolationTime : Real) # InterpolateVolume : Void Interpolates the SoundInstance's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateVolume(volume : Real, interpolationTime : Real) # Stop : Void Stops the playback of this SoundInstance. It cannot be re-started. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Stop()","title":"Soundinstance"},{"location":"reference/class_reference/soundinstanceevent/","text":"Event Sound (NOTE) Sent for various SoundInstance-related events. Methods Properties Base Classes Derived Classes SoundInstance event # Properties # SoundInstance : soundinstance read-only The SoundInstance associated with this event. ``` lang=cpp, name=Lightning var SoundInstance : SoundInstance # Methods","title":"Soundinstanceevent"},{"location":"reference/class_reference/soundinstancerange/","text":"Sound Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : soundinstancerange read-only ``` lang=cpp, name=Lightning var All : SoundInstanceRange # Current : soundinstance read-only ``` lang=cpp, name=Lightning var Current : SoundInstance # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # SoundInstanceRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SoundInstanceRange() ``` # SoundInstanceRange : Void constructor Name Type Description p0 soundinstancerange ``` lang=cpp, name=Lightning function SoundInstanceRange(p0 : SoundInstanceRange) ```","title":"Soundinstancerange"},{"location":"reference/class_reference/soundlistener/","text":"Component Sound (NOTE) Uses the object's position to \"hear\" all SoundEmitters in the SoundSpace. Methods Properties Base Classes Derived Classes Constructor Active component AttenuationScale SoundNode # Properties # Active : boolean If this property is set to false the SoundListener will not produce any sound. All audio in the SoundSpace will continue to be processed, so this is not the same as pausing the sounds. ``` lang=cpp, name=Lightning var Active : Boolean # AttenuationScale : real The scale multiplier applied to the attenuation of sounds heard by this listener. If a sound uses a SoundAttenuator StopDistance of 20, and this value is 1.5, the attenuation will stop at 30. ``` lang=cpp, name=Lightning var AttenuationScale : Real # SoundNode : soundnode read-only The SoundNode associated with this SoundListener. ``` lang=cpp, name=Lightning var SoundNode : SoundNode # Methods # SoundListener : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SoundListener() ```","title":"Soundlistener"},{"location":"reference/class_reference/soundnode/","text":"Sound Methods Properties Base Classes Derived Classes AddInputNode AutoCollapse referencecountedeventobject additivesynthnode InsertNodeAfter BypassPercent addnoisenode InsertNodeBefore BypassValue bandpassnode RemoveAllInputs HasInputs chorusnode RemoveAllOutputs HasOutputs compressornode RemoveAndAttachInputsToOutputs InputCount customaudionode RemoveInputNode OutputCount delaynode ReplaceWith equalizernode expandernode flangernode generatedwavenode granularsynthnode highpassnode lowpassnode microphoneinputnode modulationnode panningnode pitchnode recordingnode reverbnode saveaudionode volumenode # Properties # AutoCollapse : boolean If true, this node will automatically remove itself from the graph when its last input node is removed. ``` lang=cpp, name=Lightning var AutoCollapse : Boolean # BypassPercent : real DEPRECATED The BypassValue property should be used instead. ``` lang=cpp, name=Lightning var BypassPercent : Real # BypassValue : real The percentage of output (0 to 1.0) that should skip whatever processing the node does. ``` lang=cpp, name=Lightning var BypassValue : Real # HasInputs : boolean read-only Will be true if this node has any input nodes. ``` lang=cpp, name=Lightning var HasInputs : Boolean # HasOutputs : boolean read-only Will be true if this node has any output nodes. ``` lang=cpp, name=Lightning var HasOutputs : Boolean # InputCount : integer read-only The number of input nodes that are currently attached to this node. ``` lang=cpp, name=Lightning var InputCount : Integer # OutputCount : integer read-only The number of output nodes that are currently attached to this node. ``` lang=cpp, name=Lightning var OutputCount : Integer # Methods # AddInputNode : Void Adds the passed in node to this node's inputs. |Name|Type|Description| |---|---|---| |node| soundnode | | lang=cpp, name=Lightning function AddInputNode(node : SoundNode) # InsertNodeAfter : Void Inserts the passed in node after this node in the signal path, placing it between this node and any nodes which were connected to this node's output. |Name|Type|Description| |---|---|---| |node| soundnode | | lang=cpp, name=Lightning function InsertNodeAfter(node : SoundNode) # InsertNodeBefore : Void Inserts the passed in node before this node in the signal path, placing it between this node and any nodes which were connected to this node as inputs. |Name|Type|Description| |---|---|---| |node| soundnode | | lang=cpp, name=Lightning function InsertNodeBefore(node : SoundNode) # RemoveAllInputs : Void Removes the connections between this node and all of its input nodes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RemoveAllInputs() # RemoveAllOutputs : Void Removes the connections between this node and all of its output nodes, disconnecting this node from the graph. If this node has no inputs it will be deleted when no longer referenced. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RemoveAllOutputs() # RemoveAndAttachInputsToOutputs : Void Removes this node from the graph by disconnecting it from all inputs and outputs and attaching the input nodes to the output nodes, keeping the rest of the graph intact. This node will be deleted when it is no longer referenced. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RemoveAndAttachInputsToOutputs() # RemoveInputNode : Void Removes the node passed in as a parameter from this node's inputs. |Name|Type|Description| |---|---|---| |node| soundnode | | lang=cpp, name=Lightning function RemoveInputNode(node : SoundNode) # ReplaceWith : Void Replaces this node in the graph with the node passed in as a parameter. This node will be deleted when it is no longer referenced. |Name|Type|Description| |---|---|---| |node| soundnode | | lang=cpp, name=Lightning function ReplaceWith(node : SoundNode)","title":"Soundnode"},{"location":"reference/class_reference/sounds/","text":"Sound Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Sounds"},{"location":"reference/class_reference/soundspace/","text":"Component Sound (NOTE) Sound functionality associated with a Space. Methods Properties Base Classes Derived Classes InterpolateDecibels Decibels component InterpolatePitch InputNode InterpolateSemitones MuteAudio InterpolateVolume OutputNode PlayCue Paused PlayCuePaused PauseWithTimeSpace Constructor Pitch PitchWithTimeSpace Semitones SoundNodeInput SoundNodeOutput Volume # Properties # Decibels : real The volume adjustment, in decibels, applied to all sounds in the space. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. ``` lang=cpp, name=Lightning var Decibels : Real # InputNode : soundnode read-only DEPRECATED The SoundNodeInput property should be used instead. ``` lang=cpp, name=Lightning var InputNode : SoundNode # MuteAudio : boolean Silences all audio output from this space but processes audio normally. ``` lang=cpp, name=Lightning var MuteAudio : Boolean # OutputNode : soundnode read-only DEPRECATED The SoundNodeOutput property should be used instead. ``` lang=cpp, name=Lightning var OutputNode : SoundNode # Paused : boolean Setting this Property to true will pause all audio in the space. Setting it to false will resume all audio. ``` lang=cpp, name=Lightning var Paused : Boolean # PauseWithTimeSpace : boolean If true, the audio of the space will pause when the space is paused. ``` lang=cpp, name=Lightning var PauseWithTimeSpace : Boolean # Pitch : real The pitch adjustment applied to all sounds in the space. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down. ``` lang=cpp, name=Lightning var Pitch : Real # PitchWithTimeSpace : boolean If true, the audio in the SoundSpace will be pitched according to the TimeScale of the Space(if time slows down the audio will slow down and lower in pitch, if it speeds up the audio will speed up and raise in pitch). ``` lang=cpp, name=Lightning var PitchWithTimeSpace : Boolean # Semitones : real The pitch adjustment, in semitones (or half-steps), applied to all sounds in the space. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound,. ``` lang=cpp, name=Lightning var Semitones : Real # SoundNodeInput : soundnode read-only The SoundNode which is the ultimate output of all sounds in this space. ``` lang=cpp, name=Lightning var SoundNodeInput : SoundNode # SoundNodeOutput : soundnode read-only The SoundNode which can be used to attach other nodes which should process all audio in the SoundSpace. ``` lang=cpp, name=Lightning var SoundNodeOutput : SoundNode # Volume : real The volume adjustment applied to all sounds in the space. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it. ``` lang=cpp, name=Lightning var Volume : Real # Methods # InterpolateDecibels : Void Interpolates the SoundSpace's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateDecibels(decibels : Real, interpolationTime : Real) # InterpolatePitch : Void Interpolates the SoundSpace's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch| real | | |time| real | | lang=cpp, name=Lightning function InterpolatePitch(pitch : Real, time : Real) # InterpolateSemitones : Void Interpolates the SoundSpace's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch| real | | |time| real | | lang=cpp, name=Lightning function InterpolateSemitones(pitch : Real, time : Real) # InterpolateVolume : Void Interpolates the SoundSpace's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |value| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateVolume(value : Real, interpolationTime : Real) # PlayCue : soundinstance Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance. |Name|Type|Description| |---|---|---| |cue| soundcue | | lang=cpp, name=Lightning function PlayCue(cue : SoundCue) : SoundInstance # PlayCuePaused : soundinstance Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance, which starts off paused. |Name|Type|Description| |---|---|---| |cue| soundcue | | lang=cpp, name=Lightning function PlayCuePaused(cue : SoundCue) : SoundInstance # SoundSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SoundSpace() ```","title":"Soundspace"},{"location":"reference/class_reference/soundtag/","text":"Resource Sound (NOTE) Controls settings on all tagged SoundInstances. Methods Properties Base Classes Derived Classes EQSetAllBands CompressorAttack dataresource InterpolateDecibels CompressorKneeWidth InterpolateVolume CompressorRatio StopSounds CompressorRelease TagSound CompressorThreshold UnTagSound Decibels EQBand1Gain EQBand2Gain EQBand3Gain EQHighPassGain EQLowPassGain InstanceCount InstanceLimit Instances Paused TagForDucking UseCompressor UseEqualizer Volume # Properties # CompressorAttack : real The time, in milliseconds, for the filter to ramp to full effect after the input reaches the threshold. ``` lang=cpp, name=Lightning var CompressorAttack : Real # CompressorKneeWidth : real The knee width of the filter, in decibels. ``` lang=cpp, name=Lightning var CompressorKneeWidth : Real # CompressorRatio : real The ratio of the compression applied by the filter. ``` lang=cpp, name=Lightning var CompressorRatio : Real # CompressorRelease : real The time, in milliseconds, for the filter to ramp from full effect to off after the input drops below the threshold. ``` lang=cpp, name=Lightning var CompressorRelease : Real # CompressorThreshold : real The threshold, in decibels, at which the volume is affected by the filter. ``` lang=cpp, name=Lightning var CompressorThreshold : Real # Decibels : real The volume adjustment, in decibels, applied to all tagged instances. ``` lang=cpp, name=Lightning var Decibels : Real # EQBand1Gain : real The volume adjustment applied to frequencies within the band centered at 150 Hz. Positive values will boost these frequencies while negative values will reduce them. ``` lang=cpp, name=Lightning var EQBand1Gain : Real # EQBand2Gain : real The volume adjustment applied to frequencies within the band centered at 600 Hz. Positive values will boost these frequencies while negative values will reduce them. ``` lang=cpp, name=Lightning var EQBand2Gain : Real # EQBand3Gain : real The volume adjustment applied to frequencies within the band centered at 2500 Hz. Positive values will boost these frequencies while negative values will reduce them. ``` lang=cpp, name=Lightning var EQBand3Gain : Real # EQHighPassGain : real The volume adjustment applied to frequencies above 5000 Hz. Positive values will boost these frequencies while negative values will reduce them. ``` lang=cpp, name=Lightning var EQHighPassGain : Real # EQLowPassGain : real The volume adjustment applied to frequencies below 80 Hz. Positive values will boost these frequencies while negative values will reduce them. ``` lang=cpp, name=Lightning var EQLowPassGain : Real # InstanceCount : integer read-only The number of SoundInstances currently associated with this SoundTag. ``` lang=cpp, name=Lightning var InstanceCount : Integer # InstanceLimit : real If this value is greater than plasma, SoundCues with this SoundTag will only play if the number of tagged SoundInstances is less than this number. ``` lang=cpp, name=Lightning var InstanceLimit : Real # Instances : soundinstancerange read-only This allows you to get all currently tagged SoundInstances. Using a foreach loop, you can access any SoundInstance functionality on each of the tagged instances. ``` lang=cpp, name=Lightning var Instances : SoundInstanceRange # Paused : boolean Setting this property to true will pause all tagged instances. Setting it to false will resume playback. ``` lang=cpp, name=Lightning var Paused : Boolean # TagForDucking : soundtag If this property is not null, the selected SoundTag will be used to trigger this SoundTag's compressor. ``` lang=cpp, name=Lightning var TagForDucking : SoundTag # UseCompressor : boolean If true, the SoundTag's compressor settings will be applied to the tagged SoundInstances. ``` lang=cpp, name=Lightning var UseCompressor : Boolean # UseEqualizer : boolean If true, the SoundTag's equalizer settings will be applied to the tagged SoundInstances. ``` lang=cpp, name=Lightning var UseEqualizer : Boolean # Volume : real The volume adjustment applied to all tagged instances. ``` lang=cpp, name=Lightning var Volume : Real # Methods # EQSetAllBands : Void Sets all equalizer band gain values at once. The parameters are in order from the lowest band to the highest. The last parameter is the number of seconds to interpolate the values over. |Name|Type|Description| |---|---|---| |lowPass| real | | |band1| real | | |band2| real | | |band3| real | | |highPass| real | | |timeToInterpolate| real | | lang=cpp, name=Lightning function EQSetAllBands(lowPass : Real, band1 : Real, band2 : Real, band3 : Real, highPass : Real, timeToInterpolate : Real) # InterpolateDecibels : Void Interpolates the SoundTag's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateDecibels(decibels : Real, interpolationTime : Real) # InterpolateVolume : Void Interpolates the SoundTag's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |value| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateVolume(value : Real, interpolationTime : Real) # StopSounds : Void Stops all currently tagged SoundInstances. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function StopSounds() # TagSound : Void Adds a new SoundInstance to this SoundTag. |Name|Type|Description| |---|---|---| |instance| soundinstance | | lang=cpp, name=Lightning function TagSound(instance : SoundInstance) # UnTagSound : Void Removes a SoundInstance from this SoundTag. |Name|Type|Description| |---|---|---| |instance| soundinstance | | lang=cpp, name=Lightning function UnTagSound(instance : SoundInstance)","title":"Soundtag"},{"location":"reference/class_reference/soundtagdisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Soundtagdisplay"},{"location":"reference/class_reference/soundtagentry/","text":"Sound (NOTE) Stores a SoundTag which will be applied to all SoundInstances created by this SoundCue. Methods Properties Base Classes Derived Classes SoundTag Object # Properties # SoundTag : soundtag This SoundTag will be added to all SoundInstances created by the SoundCue. ``` lang=cpp, name=Lightning var SoundTag : SoundTag # Methods","title":"Soundtagentry"},{"location":"reference/class_reference/soundtagentrydisplay/","text":"Sound Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Soundtagentrydisplay"},{"location":"reference/class_reference/soundtags/","text":"Sound Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Soundtags"},{"location":"reference/class_reference/space/","text":"Engine (NOTE) A space is a near boundless, three-dimensional extent in which objects and events occur and have relative position, direction, and time. Essentially a world of objects that exist together. Used to divide objects between UI, World, Editor, and others. The two most Common spaces are the 'World' for the game world and the 'Ui' for the HUD and menus. Methods Properties Base Classes Derived Classes AddObjectsFromLevel AllObjects cog Create AllRootObjects CreateAtPosition CurrentLevel CreateLink IsEditorMode DestroyAll ObjectCount DestroyAllFromLevel FindAllObjectsByName FindFirstObjectByName FindFirstRootObjectByName FindLastObjectByName FindLastRootObjectByName FindObjectByName GetModified LoadLevel MarkModified MarkNotModified ReloadLevel Constructor # Properties # AllObjects : spacerange read-only ``` lang=cpp, name=Lightning var AllObjects : SpaceRange # AllRootObjects : hierarchylistrange read-only ``` lang=cpp, name=Lightning var AllRootObjects : HierarchyListRange # CurrentLevel : level read-only Last level loaded. ``` lang=cpp, name=Lightning var CurrentLevel : Level # IsEditorMode : boolean read-only ``` lang=cpp, name=Lightning var IsEditorMode : Boolean # ObjectCount : integer read-only Number of objects in the space. ``` lang=cpp, name=Lightning var ObjectCount : Integer # Methods # AddObjectsFromLevel : level Add all objects from a level. |Name|Type|Description| |---|---|---| |levelName| level | | lang=cpp, name=Lightning function AddObjectsFromLevel(levelName : Level) : Level # Create : cog Create an object in the space. |Name|Type|Description| |---|---|---| |archetype| archetype | | lang=cpp, name=Lightning function Create(archetype : Archetype) : Cog # CreateAtPosition : cog Create a object at a position in the space. |Name|Type|Description| |---|---|---| |archetype| archetype | | |position| real3 | | lang=cpp, name=Lightning function CreateAtPosition(archetype : Archetype, position : Real3) : Cog # CreateLink : cog Name Type Description archetype archetype objectA cog objectB cog ``` lang=cpp, name=Lightning function CreateLink(archetype : Archetype, objectA : Cog, objectB : Cog) : Cog ``` # DestroyAll : Void Destroy all objects in space. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DestroyAll() # DestroyAllFromLevel : Void Destroy all objects created from level. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DestroyAllFromLevel() # FindAllObjectsByName : cognamerange Find an object in the space with a given name. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindAllObjectsByName(name : String) : CogNameRange # FindFirstObjectByName : cog Name Type Description name string ``` lang=cpp, name=Lightning function FindFirstObjectByName(name : String) : Cog ``` # FindFirstRootObjectByName : cog Name Type Description name string ``` lang=cpp, name=Lightning function FindFirstRootObjectByName(name : String) : Cog ``` # FindLastObjectByName : cog Name Type Description name string ``` lang=cpp, name=Lightning function FindLastObjectByName(name : String) : Cog ``` # FindLastRootObjectByName : cog Name Type Description name string ``` lang=cpp, name=Lightning function FindLastRootObjectByName(name : String) : Cog ``` # FindObjectByName : cog Find an object in the space with a given name. |Name|Type|Description| |---|---|---| |name| string | | lang=cpp, name=Lightning function FindObjectByName(name : String) : Cog # GetModified : boolean Name Type Description ``` lang=cpp, name=Lightning function GetModified() : Boolean ``` # LoadLevel : Void Load new level replace the current level. |Name|Type|Description| |---|---|---| |level| level | | lang=cpp, name=Lightning function LoadLevel(level : Level) # MarkModified : Void Name Type Description ``` lang=cpp, name=Lightning function MarkModified() ``` # MarkNotModified : Void Clears all modifications on this Cog. Does not clear LocalModificationOverride properties. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function MarkNotModified() # ReloadLevel : Void Reload the current level. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ReloadLevel() # Space : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Space() ```","title":"Space"},{"location":"reference/class_reference/spacemapvaluerange/","text":"Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : spacemapvaluerange read-only ``` lang=cpp, name=Lightning var All : SpaceMapValueRange # Current : space read-only ``` lang=cpp, name=Lightning var Current : Space # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # SpaceMapValueRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SpaceMapValueRange() ``` # SpaceMapValueRange : Void constructor Name Type Description p0 spacemapvaluerange ``` lang=cpp, name=Lightning function SpaceMapValueRange(p0 : SpaceMapValueRange) ```","title":"Spacemapvaluerange"},{"location":"reference/class_reference/spaceobjects/","text":"Component Engine Methods Properties Base Classes Derived Classes component # Properties # Methods","title":"Spaceobjects"},{"location":"reference/class_reference/spacer/","text":"Widget Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Spacer"},{"location":"reference/class_reference/spacerange/","text":"Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : spacerange read-only ``` lang=cpp, name=Lightning var All : SpaceRange # Current : cog read-only ``` lang=cpp, name=Lightning var Current : Cog # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # SpaceRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SpaceRange() ``` # SpaceRange : Void constructor Name Type Description p0 spacerange ``` lang=cpp, name=Lightning function SpaceRange(p0 : SpaceRange) ```","title":"Spacerange"},{"location":"reference/class_reference/sphere/","text":"Geometry Methods Properties Base Classes Derived Classes Expand Center Overlap Radius Overlaps SurfaceArea Constructor Volume # Properties # Center : real3 ``` lang=cpp, name=Lightning var Center : Real3 # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # SurfaceArea : real read-only ``` lang=cpp, name=Lightning var SurfaceArea : Real # Volume : real read-only ``` lang=cpp, name=Lightning var Volume : Real # Methods # Expand : Void Expand this sphere to contain the given point. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Expand(p0 : Real3) # Expand : sphere static Creates a sphere that contains the given sphere and point. |Name|Type|Description| |---|---|---| |p0| sphere | | |p1| real3 | | lang=cpp, name=Lightning function Expand(p0 : Sphere, p1 : Real3) : Sphere # Overlap : boolean This function is deprecated. Use Overlaps instead |Name|Type|Description| |---|---|---| |p0| sphere | | lang=cpp, name=Lightning function Overlap(p0 : Sphere) : Boolean # Overlaps : boolean Does this sphere overlap/intersect the given sphere? |Name|Type|Description| |---|---|---| |p0| sphere | | lang=cpp, name=Lightning function Overlaps(p0 : Sphere) : Boolean # Sphere : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Sphere() ``` # Sphere : Void constructor Name Type Description center real3 radius real ``` lang=cpp, name=Lightning function Sphere(center : Real3, radius : Real) ``` # Sphere : Void constructor Name Type Description p0 sphere ``` lang=cpp, name=Lightning function Sphere(p0 : Sphere) ```","title":"Sphere"},{"location":"reference/class_reference/spherecollider/","text":"Component Physics (NOTE) Defines the collision volume for a sphere defined by a radius. Methods Properties Base Classes Derived Classes Constructor Radius collider WorldRadius # Properties # Radius : real The radius of the sphere in local space (before transform is applied). ``` lang=cpp, name=Lightning var Radius : Real # WorldRadius : real read-only The radius of the sphere after transform is applied (scale). ``` lang=cpp, name=Lightning var WorldRadius : Real # Methods # SphereCollider : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SphereCollider() ```","title":"Spherecollider"},{"location":"reference/class_reference/sphericalparticleemitter/","text":"Component Graphics (NOTE) Emits particles inside a sphere. Methods Properties Base Classes Derived Classes Constructor particleemittershared # Properties # Methods # SphericalParticleEmitter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SphericalParticleEmitter() ```","title":"Sphericalparticleemitter"},{"location":"reference/class_reference/spline/","text":"Engine (NOTE) A spline built from control points. Bakes out the curve using an error term (distance from actual spline). Provides an interface to sample the curve at a given arc-length distance in order to provide constant speed interpolation. Methods Properties Base Classes Derived Classes Clone BakedPoints referencecountedeventobject Create Closed DebugDraw ControlPoints ForceRebuild Error RebuildIfModified SplineType SampleDistance TotalDistance SampleNormalized # Properties # BakedPoints : splinebakedpoints read-only The read-only curve points baked out to line segments using the provided error. ``` lang=cpp, name=Lightning var BakedPoints : SplineBakedPoints # Closed : boolean Does the spline loop back on itself? ``` lang=cpp, name=Lightning var Closed : Boolean # ControlPoints : splinecontrolpoints read-only The control points used to bake out the curve. ``` lang=cpp, name=Lightning var ControlPoints : SplineControlPoints # Error : real The max number of units that a line segment is allowed to deviate from the curve. ``` lang=cpp, name=Lightning var Error : Real # SplineType : SplineType The kind of spline (Linear, BSpline, CatmullRom). Determines how the control points affect the curve. ``` lang=cpp, name=Lightning var SplineType : SplineType # TotalDistance : real read-only The total arc-length of the curve. Use to normalize the curve if you wish. ``` lang=cpp, name=Lightning var TotalDistance : Real # Methods # Clone : spline Create a new copy of this spline. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clone() : Spline # Create : spline static Create a new instance of a spline. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Create() : Spline # DebugDraw : Void Draw the baked points of the curve with the provided color. |Name|Type|Description| |---|---|---| |color| real4 | | lang=cpp, name=Lightning function DebugDraw(color : Real4) # ForceRebuild : Void Forcibly rebuild the baked points from the control points. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ForceRebuild() # RebuildIfModified : Void Rebuild the baked points from the control points if they have changed. Should not need to be manually called unless the user wants to control the timing when the points are baked. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function RebuildIfModified() # SampleDistance : splinesampledata Samples the curve at a given arc-length distance. |Name|Type|Description| |---|---|---| |distance| real | | lang=cpp, name=Lightning function SampleDistance(distance : Real) : SplineSampleData # SampleNormalized : splinesampledata Samples the curve with a time in the range of [0, 1]. |Name|Type|Description| |---|---|---| |time| real | | lang=cpp, name=Lightning function SampleNormalized(time : Real) : SplineSampleData","title":"Spline"},{"location":"reference/class_reference/splinebakedpoint/","text":"Engine (NOTE) Data for a spline's baked point. Methods Properties Base Classes Derived Classes Constructor Position WorldPosition # Properties # Position : real3 The position of a baked point. ``` lang=cpp, name=Lightning var Position : Real3 # WorldPosition : real3 ``` lang=cpp, name=Lightning var WorldPosition : Real3 # Methods # SplineBakedPoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SplineBakedPoint() ``` # SplineBakedPoint : Void constructor Name Type Description position real3 ``` lang=cpp, name=Lightning function SplineBakedPoint(position : Real3) ```","title":"Splinebakedpoint"},{"location":"reference/class_reference/splinebakedpoints/","text":"Engine (NOTE) Read-only baked points for the Spline class. Will auto-recompute if the control points have changed. Methods Properties Base Classes Derived Classes Get Count safeid32object # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Methods # Get : splinebakedpoint Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : SplineBakedPoint ```","title":"Splinebakedpoints"},{"location":"reference/class_reference/splinecontrolpoint/","text":"Engine (NOTE) Data for a spline's control point. Methods Properties Base Classes Derived Classes Constructor Position WorldPosition # Properties # Position : real3 The position of a control point. ``` lang=cpp, name=Lightning var Position : Real3 # WorldPosition : real3 ``` lang=cpp, name=Lightning var WorldPosition : Real3 # Methods # SplineControlPoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SplineControlPoint() ``` # SplineControlPoint : Void constructor Name Type Description position real3 ``` lang=cpp, name=Lightning function SplineControlPoint(position : Real3) ```","title":"Splinecontrolpoint"},{"location":"reference/class_reference/splinecontrolpoints/","text":"Engine (NOTE) Control points for the Spline class. Modifying this will cause the spline to be marked as modified to rebuild the baked curve when needed. Methods Properties Base Classes Derived Classes Add Count safeid32object Clear Get Set # Properties # Count : integer read-only The number of control points contained. ``` lang=cpp, name=Lightning var Count : Integer # Methods # Add : Void Add a new point to the end of the array. |Name|Type|Description| |---|---|---| |controlPoint| splinecontrolpoint | | lang=cpp, name=Lightning function Add(controlPoint : SplineControlPoint) # Clear : Void Clear all control points. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # Get : splinecontrolpoint Get the control point at the given index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : SplineControlPoint # Set : Void Sets the control point at the given index. |Name|Type|Description| |---|---|---| |index| integer | | |value| splinecontrolpoint | | lang=cpp, name=Lightning function Set(index : Integer, value : SplineControlPoint)","title":"Splinecontrolpoints"},{"location":"reference/class_reference/splineevent/","text":"Event Engine (NOTE) Event sent out for notifications about a spline. Methods Properties Base Classes Derived Classes Constructor Spline event # Properties # Spline : spline ``` lang=cpp, name=Lightning var Spline : Spline # Methods # SplineEvent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SplineEvent() ``` # SplineEvent : Void constructor Name Type Description spline spline ``` lang=cpp, name=Lightning function SplineEvent(spline : Spline) ``` # SplineEvent : Void constructor Name Type Description splineevent ``` lang=cpp, name=Lightning function SplineEvent( : SplineEvent) ```","title":"Splineevent"},{"location":"reference/class_reference/splineparticleanimator/","text":"Component Gameplay Methods Properties Base Classes Derived Classes Constructor AutoCalculateLifetime particleanimator Helix HelixOffset HelixRadius HelixWaveLength Mode Speed SpringDampingRatio SpringFrequencyHz # Properties # AutoCalculateLifetime : boolean If checked, the lifetime on the SplineParticleEmitter will be updated to the time it would take to travel the entire path at the current speed. ``` lang=cpp, name=Lightning var AutoCalculateLifetime : Boolean # Helix : boolean ``` lang=cpp, name=Lightning var Helix : Boolean # HelixOffset : real Offset in radians for where the helix starts. ``` lang=cpp, name=Lightning var HelixOffset : Real # HelixRadius : real The radius of the helix. ``` lang=cpp, name=Lightning var HelixRadius : Real # HelixWaveLength : real How fast the helix rotates in radians / second. ``` lang=cpp, name=Lightning var HelixWaveLength : Real # Mode : SplineAnimatorMode The current animate mode. ``` lang=cpp, name=Lightning var Mode : SplineAnimatorMode # Speed : real The speed at which the particles move in meters / second. ``` lang=cpp, name=Lightning var Speed : Real # SpringDampingRatio : real ``` lang=cpp, name=Lightning var SpringDampingRatio : Real # SpringFrequencyHz : real Spring properties. ``` lang=cpp, name=Lightning var SpringFrequencyHz : Real # Methods # SplineParticleAnimator : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SplineParticleAnimator() ```","title":"Splineparticleanimator"},{"location":"reference/class_reference/splineparticleemitter/","text":"Component Gameplay Methods Properties Base Classes Derived Classes Constructor ClampT particleemittershared EmitRadius SpawnT SpawnTVariance Spline TargetSplineCog # Properties # ClampT : boolean ``` lang=cpp, name=Lightning var ClampT : Boolean # EmitRadius : real ``` lang=cpp, name=Lightning var EmitRadius : Real # SpawnT : real ``` lang=cpp, name=Lightning var SpawnT : Real # SpawnTVariance : real ``` lang=cpp, name=Lightning var SpawnTVariance : Real # Spline : spline ``` lang=cpp, name=Lightning var Spline : Spline # TargetSplineCog : cogpath ``` lang=cpp, name=Lightning var TargetSplineCog : CogPath # Methods # SplineParticleEmitter : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SplineParticleEmitter() ```","title":"Splineparticleemitter"},{"location":"reference/class_reference/splinesampledata/","text":"Engine (NOTE) Returned data from sampling a spline at a given arc-length distance. Methods Properties Base Classes Derived Classes Constructor Point Tangent WorldPoint WorldTangent # Properties # Point : real3 The point on the curve. ``` lang=cpp, name=Lightning var Point : Real3 # Tangent : real3 ``` lang=cpp, name=Lightning var Tangent : Real3 # WorldPoint : real3 ``` lang=cpp, name=Lightning var WorldPoint : Real3 # WorldTangent : real3 ``` lang=cpp, name=Lightning var WorldTangent : Real3 # Methods # SplineSampleData : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SplineSampleData() ```","title":"Splinesampledata"},{"location":"reference/class_reference/splitter/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Splitter"},{"location":"reference/class_reference/springcreatorsubtool/","text":"Editor Methods Properties Base Classes Derived Classes springsubtool # Properties # Methods","title":"Springcreatorsubtool"},{"location":"reference/class_reference/springpointproxy/","text":"Editor Methods Properties Base Classes Derived Classes Anchor eventobject Fixed Mass # Properties # Anchor : cog ``` lang=cpp, name=Lightning var Anchor : Cog # Fixed : boolean ``` lang=cpp, name=Lightning var Fixed : Boolean # Mass : real ``` lang=cpp, name=Lightning var Mass : Real # Methods","title":"Springpointproxy"},{"location":"reference/class_reference/springpointproxyproperty/","text":"Editor Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Springpointproxyproperty"},{"location":"reference/class_reference/springselectorsubtool/","text":"Editor Methods Properties Base Classes Derived Classes selectorspringsubtool # Properties # Methods","title":"Springselectorsubtool"},{"location":"reference/class_reference/springsubtool/","text":"Editor Methods Properties Base Classes Derived Classes Object dragselectsubtool ropecreatorsubtool springcreatorsubtool # Properties # Methods","title":"Springsubtool"},{"location":"reference/class_reference/sprite/","text":"Component Graphics (NOTE) A generated quad that addresses atlased image data for efficient frame-based animations and batched rendering. Methods Properties Base Classes Derived Classes Constructor AnimationActive basesprite AnimationSpeed CurrentFrame FlipX FlipY SpriteSource StartFrame # Properties # AnimationActive : boolean If the Sprite animation should be playing on logic update, paused if false. ``` lang=cpp, name=Lightning var AnimationActive : Boolean # AnimationSpeed : real Scalar to the amount of time passed used to advance frames of animation. ``` lang=cpp, name=Lightning var AnimationSpeed : Real # CurrentFrame : integer Index of the frame the animation is currently on. ``` lang=cpp, name=Lightning var CurrentFrame : Integer # FlipX : boolean Flips the X axis of the Sprite's image (left/right). ``` lang=cpp, name=Lightning var FlipX : Boolean # FlipY : boolean Flips the Y axis of the Sprite's image (top/bottom). ``` lang=cpp, name=Lightning var FlipY : Boolean # SpriteSource : spritesource The resource defining one or more image sequences used for frame-based animation. ``` lang=cpp, name=Lightning var SpriteSource : SpriteSource # StartFrame : integer Index of the frame to start the animation on when the object is initialized, 0-based. ``` lang=cpp, name=Lightning var StartFrame : Integer # Methods # Sprite : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Sprite() ```","title":"Sprite"},{"location":"reference/class_reference/spritedata/","text":"ContentMeta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Spritedata"},{"location":"reference/class_reference/spriteframe/","text":"Editor Methods Properties Base Classes Derived Classes Constructor # Properties # Methods # SpriteFrame : Void constructor Name Type Description p0 spriteframe ``` lang=cpp, name=Lightning function SpriteFrame(p0 : SpriteFrame) ```","title":"Spriteframe"},{"location":"reference/class_reference/spriteparticlesystem/","text":"Component Graphics (NOTE) A particle system that uses sprites to represent each particle. Methods Properties Base Classes Derived Classes Constructor BeamBaseScale particlesystem BeamVelocityScale GeometryMode ParticleAnimation ParticleSort SpriteSource VertexColor # Properties # BeamBaseScale : real How much to scale particles along their direction of movement. ``` lang=cpp, name=Lightning var BeamBaseScale : Real # BeamVelocityScale : real How much additional scale to add to particles by how fast they are moving. ``` lang=cpp, name=Lightning var BeamVelocityScale : Real # GeometryMode : SpriteParticleGeometryMode How the geometry of the particles are generated. ``` lang=cpp, name=Lightning var GeometryMode : SpriteParticleGeometryMode # ParticleAnimation : SpriteParticleAnimationMode How the sprite's animation should be used. ``` lang=cpp, name=Lightning var ParticleAnimation : SpriteParticleAnimationMode # ParticleSort : SpriteParticleSortMode How particles should be sorted with each other, determines draw order between particles. ``` lang=cpp, name=Lightning var ParticleSort : SpriteParticleSortMode # SpriteSource : spritesource The sprite definition to use for each particle. ``` lang=cpp, name=Lightning var SpriteSource : SpriteSource # VertexColor : real4 Color attribute of the generated vertices accessible in the vertex shader, value is multiplied with the particle color. ``` lang=cpp, name=Lightning var VertexColor : Real4 # Methods # SpriteParticleSystem : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SpriteParticleSystem() ```","title":"Spriteparticlesystem"},{"location":"reference/class_reference/spritepreview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Spritepreview"},{"location":"reference/class_reference/spritesheetimporter/","text":"Editor Methods Properties Base Classes Derived Classes GetOffsetX AlphaColor composite GetOffsetY CreatePalette SetOffsetX FrameCount SetOffsetY FrameHeight FrameRate FramesPerRow FrameWidth ImportFrames Name NumberOfRows Origin PixelsPerUnit PreviewAnimate PreviewFrame Smoothing SourceSizeX SourceSizeY SpacingX SpacingY UseAlphaColorKey # Properties # AlphaColor : real4 ``` lang=cpp, name=Lightning var AlphaColor : Real4 # CreatePalette : boolean ``` lang=cpp, name=Lightning var CreatePalette : Boolean # FrameCount : integer read-only ``` lang=cpp, name=Lightning var FrameCount : Integer # FrameHeight : integer ``` lang=cpp, name=Lightning var FrameHeight : Integer # FrameRate : real ``` lang=cpp, name=Lightning var FrameRate : Real # FramesPerRow : integer ``` lang=cpp, name=Lightning var FramesPerRow : Integer # FrameWidth : integer ``` lang=cpp, name=Lightning var FrameWidth : Integer # ImportFrames : ImportFrames ``` lang=cpp, name=Lightning var ImportFrames : ImportFrames # Name : string ``` lang=cpp, name=Lightning var Name : String # NumberOfRows : integer ``` lang=cpp, name=Lightning var NumberOfRows : Integer # Origin : SpriteOrigin ``` lang=cpp, name=Lightning var Origin : SpriteOrigin # PixelsPerUnit : integer ``` lang=cpp, name=Lightning var PixelsPerUnit : Integer # PreviewAnimate : boolean ``` lang=cpp, name=Lightning var PreviewAnimate : Boolean # PreviewFrame : integer ``` lang=cpp, name=Lightning var PreviewFrame : Integer # Smoothing : SpriteSampling ``` lang=cpp, name=Lightning var Smoothing : SpriteSampling # SourceSizeX : integer ``` lang=cpp, name=Lightning var SourceSizeX : Integer # SourceSizeY : integer ``` lang=cpp, name=Lightning var SourceSizeY : Integer # SpacingX : integer ``` lang=cpp, name=Lightning var SpacingX : Integer # SpacingY : integer ``` lang=cpp, name=Lightning var SpacingY : Integer # UseAlphaColorKey : boolean ``` lang=cpp, name=Lightning var UseAlphaColorKey : Boolean # Methods # GetOffsetX : integer Name Type Description ``` lang=cpp, name=Lightning function GetOffsetX() : Integer ``` # GetOffsetY : integer Name Type Description ``` lang=cpp, name=Lightning function GetOffsetY() : Integer ``` # SetOffsetX : Void Name Type Description value integer ``` lang=cpp, name=Lightning function SetOffsetX(value : Integer) ``` # SetOffsetY : Void Name Type Description value integer ``` lang=cpp, name=Lightning function SetOffsetY(value : Integer) ```","title":"Spritesheetimporter"},{"location":"reference/class_reference/spritesource/","text":"Resource Graphics Methods Properties Base Classes Derived Classes GetOrigin FrameCount Resource GetSize # Properties # FrameCount : integer ``` lang=cpp, name=Lightning var FrameCount : Integer # Methods # GetOrigin : real2 Name Type Description ``` lang=cpp, name=Lightning function GetOrigin() : Real2 ``` # GetSize : real2 Name Type Description ``` lang=cpp, name=Lightning function GetSize() : Real2 ```","title":"Spritesource"},{"location":"reference/class_reference/spritesourcebuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Bottom buildercomponent Fill Left Looping OriginX OriginY PixelsPerUnit Right Sampling Top # Properties # Bottom : integer ``` lang=cpp, name=Lightning var Bottom : Integer # Fill : SpriteFill ``` lang=cpp, name=Lightning var Fill : SpriteFill # Left : integer ``` lang=cpp, name=Lightning var Left : Integer # Looping : boolean ``` lang=cpp, name=Lightning var Looping : Boolean # OriginX : real ``` lang=cpp, name=Lightning var OriginX : Real # OriginY : real ``` lang=cpp, name=Lightning var OriginY : Real # PixelsPerUnit : real ``` lang=cpp, name=Lightning var PixelsPerUnit : Real # Right : integer ``` lang=cpp, name=Lightning var Right : Integer # Sampling : SpriteSampling ``` lang=cpp, name=Lightning var Sampling : SpriteSampling # Top : integer ``` lang=cpp, name=Lightning var Top : Integer # Methods","title":"Spritesourcebuilder"},{"location":"reference/class_reference/spritesourceeditor/","text":"Editor Methods Properties Base Classes Derived Classes Bottom composite CurrentFrame FrameRate Left Looping Origin OriginX OriginY PixelsPerUnit PreviewAnimation Right Sampling SpriteFill SpriteName Top # Properties # Bottom : integer ``` lang=cpp, name=Lightning var Bottom : Integer # CurrentFrame : integer ``` lang=cpp, name=Lightning var CurrentFrame : Integer # FrameRate : real ``` lang=cpp, name=Lightning var FrameRate : Real # Left : integer ``` lang=cpp, name=Lightning var Left : Integer # Looping : boolean ``` lang=cpp, name=Lightning var Looping : Boolean # Origin : SpriteOrigin ``` lang=cpp, name=Lightning var Origin : SpriteOrigin # OriginX : real ``` lang=cpp, name=Lightning var OriginX : Real # OriginY : real ``` lang=cpp, name=Lightning var OriginY : Real # PixelsPerUnit : real ``` lang=cpp, name=Lightning var PixelsPerUnit : Real # PreviewAnimation : boolean ``` lang=cpp, name=Lightning var PreviewAnimation : Boolean # Right : integer ``` lang=cpp, name=Lightning var Right : Integer # Sampling : SpriteSampling ``` lang=cpp, name=Lightning var Sampling : SpriteSampling # SpriteFill : SpriteFill ``` lang=cpp, name=Lightning var SpriteFill : SpriteFill # SpriteName : string ``` lang=cpp, name=Lightning var SpriteName : String # Top : integer ``` lang=cpp, name=Lightning var Top : Integer # Methods","title":"Spritesourceeditor"},{"location":"reference/class_reference/spritetext/","text":"Component Graphics (NOTE) Text that is rendered from a texture atlas in the same way that Sprites are. Methods Properties Base Classes Derived Classes GetCharacterPosition Font basesprite MeasureGivenText FontSize MeasureText PixelsPerUnit Constructor Text TextAlign # Properties # Font : font Font used to display the text. ``` lang=cpp, name=Lightning var Font : Font # FontSize : integer Size that the font will be rastered at to a texture atlas. ``` lang=cpp, name=Lightning var FontSize : Integer # PixelsPerUnit : real Number of pixels of the font size that map to one world space unit. ``` lang=cpp, name=Lightning var PixelsPerUnit : Real # Text : string Text to display. ``` lang=cpp, name=Lightning var Text : String # TextAlign : TextAlign How to position the text about the objects origin. ``` lang=cpp, name=Lightning var TextAlign : TextAlign # Methods # GetCharacterPosition : real3 Get the position in world space of a character by index. |Name|Type|Description| |---|---|---| |characterIndex| integer | | lang=cpp, name=Lightning function GetCharacterPosition(characterIndex : Integer) : Real3 # MeasureGivenText : real2 Get the effective size in world space that the SpriteText would be if this was its text. |Name|Type|Description| |---|---|---| |text| string | | lang=cpp, name=Lightning function MeasureGivenText(text : String) : Real2 # MeasureText : real2 Get the effective size in world space of the current text. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function MeasureText() : Real2 # SpriteText : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SpriteText() ```","title":"Spritetext"},{"location":"reference/class_reference/squaregizmo/","text":"Component Editor Methods Properties Base Classes Derived Classes Constructor Bordered simplegizmobase Filled Size SnapDistance ViewAligned # Properties # Bordered : boolean ``` lang=cpp, name=Lightning var Bordered : Boolean # Filled : boolean ``` lang=cpp, name=Lightning var Filled : Boolean # Size : real3 ``` lang=cpp, name=Lightning var Size : Real3 # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # ViewAligned : boolean ``` lang=cpp, name=Lightning var ViewAligned : Boolean # Methods # SquareGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SquareGizmo() ```","title":"Squaregizmo"},{"location":"reference/class_reference/stacklayout/","text":"Widget Methods Properties Base Classes Derived Classes layout # Properties # Methods","title":"Stacklayout"},{"location":"reference/class_reference/staticaabbtreebroadphase/","text":"SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase # Properties # Methods","title":"Staticaabbtreebroadphase"},{"location":"reference/class_reference/stickjoint/","text":"Component Physics (NOTE) A stick joint is used to simulate a rope or a stick. This joint forces a constant distance between the anchor points on the objects. If there is no limit, this behaves as a stick. If there is a limit, then this behaves as a rope. Motors and springs are also applied to the axis of the rope. Add on definitions: Limit: A limit will provide a min/max distance that the anchors can be between. Motor: A motor will push/pull the objects in the direction of the rope. The motor will not have any effect unless a limit or spring is present. Spring: A spring will make the rope behave spring-like at its boundaries. Methods Properties Base Classes Derived Classes SetWorldPoints Length joint Constructor LocalPointA LocalPointB WorldPointA WorldPointB # Properties # Length : real The desired length between the anchor points of object A and B. ``` lang=cpp, name=Lightning var Length : Real # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3) # StickJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function StickJoint() ```","title":"Stickjoint"},{"location":"reference/class_reference/stickjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # StickJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function StickJointBlock() ```","title":"Stickjointblock"},{"location":"reference/class_reference/stresstest/","text":"Editor Methods Properties Base Classes Derived Classes AddComponents eventobject ChangeSelection ChangeTools CreateObjects DestroyObjects Frames KeyEvents LogFile MouseEvents ParentObjects RayCasts Redo RemoveComponents Seed SetProperties StartGameInstances StopGameInstances SwitchViewports Undo UnparentObjects # Properties # AddComponents : boolean ``` lang=cpp, name=Lightning var AddComponents : Boolean # ChangeSelection : boolean ``` lang=cpp, name=Lightning var ChangeSelection : Boolean # ChangeTools : boolean ``` lang=cpp, name=Lightning var ChangeTools : Boolean # CreateObjects : boolean ``` lang=cpp, name=Lightning var CreateObjects : Boolean # DestroyObjects : boolean ``` lang=cpp, name=Lightning var DestroyObjects : Boolean # Frames : integer ``` lang=cpp, name=Lightning var Frames : Integer # KeyEvents : boolean ``` lang=cpp, name=Lightning var KeyEvents : Boolean # LogFile : string ``` lang=cpp, name=Lightning var LogFile : String # MouseEvents : boolean ``` lang=cpp, name=Lightning var MouseEvents : Boolean # ParentObjects : boolean ``` lang=cpp, name=Lightning var ParentObjects : Boolean # RayCasts : boolean ``` lang=cpp, name=Lightning var RayCasts : Boolean # Redo : boolean ``` lang=cpp, name=Lightning var Redo : Boolean # RemoveComponents : boolean ``` lang=cpp, name=Lightning var RemoveComponents : Boolean # Seed : integer ``` lang=cpp, name=Lightning var Seed : Integer # SetProperties : boolean ``` lang=cpp, name=Lightning var SetProperties : Boolean # StartGameInstances : boolean ``` lang=cpp, name=Lightning var StartGameInstances : Boolean # StopGameInstances : boolean ``` lang=cpp, name=Lightning var StopGameInstances : Boolean # SwitchViewports : boolean ``` lang=cpp, name=Lightning var SwitchViewports : Boolean # Undo : boolean ``` lang=cpp, name=Lightning var Undo : Boolean # UnparentObjects : boolean ``` lang=cpp, name=Lightning var UnparentObjects : Boolean # Methods","title":"Stresstest"},{"location":"reference/class_reference/stresstestdialog/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Stresstestdialog"},{"location":"reference/class_reference/stringcombobox/","text":"Widget Methods Properties Base Classes Derived Classes combobox # Properties # Methods","title":"Stringcombobox"},{"location":"reference/class_reference/stringnamedisplay/","text":"Meta Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Stringnamedisplay"},{"location":"reference/class_reference/subconvexmesh/","text":"Physics (NOTE) Contains the indices of a convex mesh. The triangle indices are the primary method to configure this (required for mass computations). The regular indices are used for debug drawing and to reduce intersection tests by removing duplicate points. If left empty, Indices will be auto-filled from the triangle indices. Methods Properties Base Classes Derived Classes Indices safeid32object Mesh TriangleIndices Valid # Properties # Indices : multiconvexmeshindexdata read-only The vertex indices on the main mesh used to generate the convex hull. ``` lang=cpp, name=Lightning var Indices : MultiConvexMeshIndexData # Mesh : multiconvexmesh The MultiConvexMesh that owns this sub-mesh. ``` lang=cpp, name=Lightning var Mesh : MultiConvexMesh # TriangleIndices : multiconvexmeshindexdata read-only The vertex indices on the main mesh used to generate triangle indices for computing mass information and debug drawing. More indices are needed for determining triangles than for generating the convex mesh. ``` lang=cpp, name=Lightning var TriangleIndices : MultiConvexMeshIndexData # Valid : boolean read-only Is this sub-mesh incorrectly configured. Typically means that the indices don't point to valid vertices. Also the number of triangle indices could be incorrect (multiple of 3). ``` lang=cpp, name=Lightning var Valid : Boolean # Methods","title":"Subconvexmesh"},{"location":"reference/class_reference/subrendergrouppass/","text":"Graphics (NOTE) Interface used to define unique render settings for a base RenderGroup and its sub RenderGroups. Methods Properties Base Classes Derived Classes AddSubSettings safeid32 ExcludeSubRenderGroup Reset SetDefaultSettings # Properties # Methods # AddSubSettings : Void Define the settings to use for a specific RenderGroup. Given RenderGroup must be a child of the base RenderGroup, or the base itself, that this was initialized with. |Name|Type|Description| |---|---|---| |subSettings| rendersettings | | |subGroup| rendergroup | | |subPass| materialblock | | lang=cpp, name=Lightning function AddSubSettings(subSettings : RenderSettings, subGroup : RenderGroup, subPass : MaterialBlock) # ExcludeSubRenderGroup : Void Explicitely exclude a RenderGroup from rendering when there are default settings. Given RenderGroup must be a child of the base RenderGroup, or the base itself, that this was initialized with. |Name|Type|Description| |---|---|---| |subGroup| rendergroup | | lang=cpp, name=Lightning function ExcludeSubRenderGroup(subGroup : RenderGroup) # Reset : Void Resets interface back to the initial creation state with a given base RenderGroup. |Name|Type|Description| |---|---|---| |baseRenderGroup| rendergroup | | lang=cpp, name=Lightning function Reset(baseRenderGroup : RenderGroup) # SetDefaultSettings : Void Settings to use for the base or all sub RenderGroups that do not have specified settings. Without defaults, the base or any sub RenderGroup without settings will not render. |Name|Type|Description| |---|---|---| |defaultSettings| rendersettings | | |defaultPass| materialblock | | lang=cpp, name=Lightning function SetDefaultSettings(defaultSettings : RenderSettings, defaultPass : MaterialBlock)","title":"Subrendergrouppass"},{"location":"reference/class_reference/sweepresult/","text":"Physics (NOTE) Cast result from performing a sweep test. Methods Properties Base Classes Derived Classes Constructor OtherCollider OtherObject Penetration Time WorldNormalTowardsOther WorldNormalTowardsSelf WorldPoint # Properties # OtherCollider : collider read-only The other collider being hit. ``` lang=cpp, name=Lightning var OtherCollider : Collider # OtherObject : cog read-only The other cog being hit. ``` lang=cpp, name=Lightning var OtherObject : Cog # Penetration : real read-only The amount of overlap with this object. Will typically be plasma unless the objects start in contact. ``` lang=cpp, name=Lightning var Penetration : Real # Time : real read-only The time of impact that this collision first happens. ``` lang=cpp, name=Lightning var Time : Real # WorldNormalTowardsOther : real3 read-only The contact normal pointing from the sweeping object towards the other object. ``` lang=cpp, name=Lightning var WorldNormalTowardsOther : Real3 # WorldNormalTowardsSelf : real3 read-only The contact normal pointing from the other object towards the sweeping object. ``` lang=cpp, name=Lightning var WorldNormalTowardsSelf : Real3 # WorldPoint : real3 read-only The point of intersection in world-space. ``` lang=cpp, name=Lightning var WorldPoint : Real3 # Methods # SweepResult : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SweepResult() ``` # SweepResult : Void constructor Name Type Description sweepresult ``` lang=cpp, name=Lightning function SweepResult( : SweepResult) ```","title":"Sweepresult"},{"location":"reference/class_reference/sweepresultrange/","text":"Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : sweepresultrange read-only ``` lang=cpp, name=Lightning var All : SweepResultRange # Current : sweepresult read-only ``` lang=cpp, name=Lightning var Current : SweepResult # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # SweepResultRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function SweepResultRange() ``` # SweepResultRange : Void constructor Name Type Description p0 sweepresultrange ``` lang=cpp, name=Lightning function SweepResultRange(p0 : SweepResultRange) ```","title":"Sweepresultrange"},{"location":"reference/class_reference/system/","text":"Engine Methods Properties Base Classes Derived Classes eventobject actionsystem audio factory graphicsengine osshell physicsengine timesystem tracker UnitTestSystem # Properties # Methods","title":"System"},{"location":"reference/class_reference/tabarea/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Tabarea"},{"location":"reference/class_reference/tabmodifiedevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Tabmodifiedevent"},{"location":"reference/class_reference/tabrenamedevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Tabrenamedevent"},{"location":"reference/class_reference/tagevent/","text":"Event Widget Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Tagevent"},{"location":"reference/class_reference/tcpsocket/","text":"Networking (NOTE) Manages all the client/server/peer connections . Methods Properties Base Classes Derived Classes Close ConnectionCount eventobject CloseConnection IncomingConnectionCount Connect OutgoingConnectionCount IsConnected Listen SendTo SendToAll SendToAllAndSelf SendToAllExcept # Properties # ConnectionCount : integer read-only Get the number of connections we have. ``` lang=cpp, name=Lightning var ConnectionCount : Integer # IncomingConnectionCount : integer read-only Get the number of incoming connections. ``` lang=cpp, name=Lightning var IncomingConnectionCount : Integer # OutgoingConnectionCount : integer read-only Get the number of outgoing connections. ``` lang=cpp, name=Lightning var OutgoingConnectionCount : Integer # Methods # Close : Void Close all activity (whether listening or connected to a server). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Close() # CloseConnection : Void Name Type Description index integer ``` lang=cpp, name=Lightning function CloseConnection(index : Integer) ``` # Connect : Void Attempt to connect to a host on the given port. |Name|Type|Description| |---|---|---| |host| string | | |port| integer | | lang=cpp, name=Lightning function Connect(host : String, port : Integer) # IsConnected : boolean Check if we are currently connected to anyone. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsConnected() : Boolean # Listen : boolean Listen for incoming connections. |Name|Type|Description| |---|---|---| |port| integer | | |maxConnections| integer | | lang=cpp, name=Lightning function Listen(port : Integer, maxConnections : Integer) : Boolean # Listen : boolean Listen for incoming connections. |Name|Type|Description| |---|---|---| |port| integer | | |maxConnections| integer | | |bindTo| TcpSocketBind | | lang=cpp, name=Lightning function Listen(port : Integer, maxConnections : Integer, bindTo : TcpSocketBind) : Boolean # SendTo : Void Send an event to a specific connection index. |Name|Type|Description| |---|---|---| |eventId| string | | |event| sendableevent | | |index| integer | | lang=cpp, name=Lightning function SendTo(eventId : String, event : SendableEvent, index : Integer) # SendToAll : Void Send an event to all connections. |Name|Type|Description| |---|---|---| |eventId| string | | |event| sendableevent | | lang=cpp, name=Lightning function SendToAll(eventId : String, event : SendableEvent) # SendToAllAndSelf : Void Send an event to all connections and dispatch on self. |Name|Type|Description| |---|---|---| |eventId| string | | |event| sendableevent | | lang=cpp, name=Lightning function SendToAllAndSelf(eventId : String, event : SendableEvent) # SendToAllExcept : Void Send an event to all connections except a particular connection index. |Name|Type|Description| |---|---|---| |eventId| string | | |event| sendableevent | | |exceptIndex| integer | | lang=cpp, name=Lightning function SendToAllExcept(eventId : String, event : SendableEvent, exceptIndex : Integer)","title":"Tcpsocket"},{"location":"reference/class_reference/text/","text":"Widget Methods Properties Base Classes Derived Classes widget viewporttextwidget # Properties # Methods","title":"Text"},{"location":"reference/class_reference/textblock/","text":"Resource Engine (NOTE) A Text resource is a generic resource for simple text data for game logic. Methods Properties Base Classes Derived Classes Text documentresource # Properties # Text : string read-only ``` lang=cpp, name=Lightning var Text : String # Methods","title":"Textblock"},{"location":"reference/class_reference/textbox/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Textbox"},{"location":"reference/class_reference/textbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes basetextbuilder # Properties # Methods","title":"Textbuilder"},{"location":"reference/class_reference/textbutton/","text":"Widget Methods Properties Base Classes Derived Classes buttonbase # Properties # Methods","title":"Textbutton"},{"location":"reference/class_reference/textcheckbox/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Textcheckbox"},{"location":"reference/class_reference/textcontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes contentcomposition # Properties # Methods","title":"Textcontent"},{"location":"reference/class_reference/textdefinition/","text":"Resource Graphics Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Textdefinition"},{"location":"reference/class_reference/texteditor/","text":"Editor Methods Properties Base Classes Derived Classes basescrollarea consoleui documenteditor # Properties # Methods","title":"Texteditor"},{"location":"reference/class_reference/texteditorconfig/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor AutoCompleteOnEnter component CodeFolding ColorScheme ConfidentAutoCompleteOnSymbols FontSize HighlightPartialTextMatch KeywordAndTypeCompletion LineNumbers LocalWordCompletion ShowWhiteSpace TabWidth TextMatchHighlighting # Properties # AutoCompleteOnEnter : boolean ``` lang=cpp, name=Lightning var AutoCompleteOnEnter : Boolean # CodeFolding : boolean ``` lang=cpp, name=Lightning var CodeFolding : Boolean # ColorScheme : string ``` lang=cpp, name=Lightning var ColorScheme : String # ConfidentAutoCompleteOnSymbols : boolean ``` lang=cpp, name=Lightning var ConfidentAutoCompleteOnSymbols : Boolean # FontSize : integer ``` lang=cpp, name=Lightning var FontSize : Integer # HighlightPartialTextMatch : boolean ``` lang=cpp, name=Lightning var HighlightPartialTextMatch : Boolean # KeywordAndTypeCompletion : boolean ``` lang=cpp, name=Lightning var KeywordAndTypeCompletion : Boolean # LineNumbers : boolean ``` lang=cpp, name=Lightning var LineNumbers : Boolean # LocalWordCompletion : boolean ``` lang=cpp, name=Lightning var LocalWordCompletion : Boolean # ShowWhiteSpace : boolean ``` lang=cpp, name=Lightning var ShowWhiteSpace : Boolean # TabWidth : TabWidth ``` lang=cpp, name=Lightning var TabWidth : TabWidth # TextMatchHighlighting : boolean ``` lang=cpp, name=Lightning var TextMatchHighlighting : Boolean # Methods # TextEditorConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TextEditorConfig() ```","title":"Texteditorconfig"},{"location":"reference/class_reference/texteditorevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Texteditorevent"},{"location":"reference/class_reference/texterrorevent/","text":"Event Engine Methods Properties Base Classes Derived Classes textevent # Properties # Methods","title":"Texterrorevent"},{"location":"reference/class_reference/textevent/","text":"Event Engine Methods Properties Base Classes Derived Classes Text event texterrorevent # Properties # Text : string ``` lang=cpp, name=Lightning var Text : String # Methods","title":"Textevent"},{"location":"reference/class_reference/textupdatedevent/","text":"Event Editor Methods Properties Base Classes Derived Classes ChangeAccepted event # Properties # ChangeAccepted : boolean ``` lang=cpp, name=Lightning var ChangeAccepted : Boolean # Methods","title":"Textupdatedevent"},{"location":"reference/class_reference/texture/","text":"Resource Graphics (NOTE) Data that represents a texture in the way that is intended to be used by graphics hardware. Methods Properties Base Classes Derived Classes CreateRuntime AddressingX Resource SubUpload AddressingY Upload Anisotropy CompareFunc CompareMode Compression Filtering Format Height MipMapping Size Type Width # Properties # AddressingX : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's width. ``` lang=cpp, name=Lightning var AddressingX : TextureAddressing # AddressingY : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's height. ``` lang=cpp, name=Lightning var AddressingY : TextureAddressing # Anisotropy : TextureAnisotropy Max ratio of anisotropy that filtering will account for at oblique viewing angles. ``` lang=cpp, name=Lightning var Anisotropy : TextureAnisotropy # CompareFunc : TextureCompareFunc Which method of comparison should be used if CompareMode is set to Enable. ``` lang=cpp, name=Lightning var CompareFunc : TextureCompareFunc # CompareMode : TextureCompareMode If sampling in hardware should perform comparison instead of fetching. Requires using SamplerShadow2d in the shader. ``` lang=cpp, name=Lightning var CompareMode : TextureCompareMode # Compression : TextureCompression read-only Block compression method being used. Requires pre-processing, cannot be set for runtime Textures. ``` lang=cpp, name=Lightning var Compression : TextureCompression # Filtering : TextureFiltering How samples should be blended under minification/magnification. ``` lang=cpp, name=Lightning var Filtering : TextureFiltering # Format : TextureFormat read-only Memory format of the stored pixel data. Set on Upload() for runtime Textures. ``` lang=cpp, name=Lightning var Format : TextureFormat # Height : integer read-only Height of the Texture in pixels. Set on Upload() for runtime Textures. ``` lang=cpp, name=Lightning var Height : Integer # MipMapping : TextureMipMapping If downsampled versions of the texture (mip maps) should be generated. PreGenerated is not valid for runtime Textures. ``` lang=cpp, name=Lightning var MipMapping : TextureMipMapping # Size : integer2 read-only Width and height (x, y) of the Texture in pixels. Set on Upload() for runtime Textures. ``` lang=cpp, name=Lightning var Size : Integer2 # Type : TextureType read-only The type of texture data being represented. ``` lang=cpp, name=Lightning var Type : TextureType # Width : integer read-only Width of the Texture in pixels. Set on Upload() for runtime Textures. ``` lang=cpp, name=Lightning var Width : Integer # Methods # CreateRuntime : texture static Makes an anonymous Texture resource that can be defined by script and uploaded to the gpu. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CreateRuntime() : Texture # SubUpload : Void Uploads the given texture data, overwriting a sub region of the texture data that is already on the gpu. |Name|Type|Description| |---|---|---| |textureData| texturedata | | |xOffset| integer | | |yOffset| integer | | lang=cpp, name=Lightning function SubUpload(textureData : TextureData, xOffset : Integer, yOffset : Integer) # Upload : Void Uploads the given texture data to the gpu, configured with the current settings of this Texture. |Name|Type|Description| |---|---|---| |textureData| texturedata | | lang=cpp, name=Lightning function Upload(textureData : TextureData)","title":"Texture"},{"location":"reference/class_reference/texturebuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor AddressingX buildercomponent AddressingY Anisotropy Compression Filtering GammaCorrection HalfScaleCount MipMapping Name PremultipliedAlpha Type # Properties # AddressingX : TextureAddressing ``` lang=cpp, name=Lightning var AddressingX : TextureAddressing # AddressingY : TextureAddressing ``` lang=cpp, name=Lightning var AddressingY : TextureAddressing # Anisotropy : TextureAnisotropy ``` lang=cpp, name=Lightning var Anisotropy : TextureAnisotropy # Compression : TextureCompression ``` lang=cpp, name=Lightning var Compression : TextureCompression # Filtering : TextureFiltering ``` lang=cpp, name=Lightning var Filtering : TextureFiltering # GammaCorrection : boolean ``` lang=cpp, name=Lightning var GammaCorrection : Boolean # HalfScaleCount : integer ``` lang=cpp, name=Lightning var HalfScaleCount : Integer # MipMapping : TextureMipMapping ``` lang=cpp, name=Lightning var MipMapping : TextureMipMapping # Name : string ``` lang=cpp, name=Lightning var Name : String # PremultipliedAlpha : boolean ``` lang=cpp, name=Lightning var PremultipliedAlpha : Boolean # Type : TextureType ``` lang=cpp, name=Lightning var Type : TextureType # Methods # TextureBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TextureBuilder() ```","title":"Texturebuilder"},{"location":"reference/class_reference/texturecontent/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor contentcomponent # Properties # Methods # TextureContent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TextureContent() ```","title":"Texturecontent"},{"location":"reference/class_reference/texturedata/","text":"Graphics (NOTE) Modifiable texture data that can be used to upload to a runtime Texture resource. All formats use one interface for get/set, all values are converted to/from floats and unused channels are ignored. Integer formats are represented in the normalized range [0, 1]. Methods Properties Base Classes Derived Classes Get Format Set Height Constructor PixelCount Width # Properties # Format : TextureFormat read-only Memory format of the stored pixel data. ``` lang=cpp, name=Lightning var Format : TextureFormat # Height : integer read-only Height of the texture data in pixels. ``` lang=cpp, name=Lightning var Height : Integer # PixelCount : integer read-only Total number of pixels in texture data. ``` lang=cpp, name=Lightning var PixelCount : Integer # Width : integer read-only Width of the texture data in pixels. ``` lang=cpp, name=Lightning var Width : Integer # Methods # Get : real4 Returns the pixel values at the given index. |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : Real4 # Get : real4 Returns the pixel values at the given index. |Name|Type|Description| |---|---|---| |x| integer | | |y| integer | | lang=cpp, name=Lightning function Get(x : Integer, y : Integer) : Real4 # Set : Void Sets the pixel values at the given index. |Name|Type|Description| |---|---|---| |x| integer | | |y| integer | | |value| real4 | | lang=cpp, name=Lightning function Set(x : Integer, y : Integer, value : Real4) # Set : Void Sets the pixel values at the given index. |Name|Type|Description| |---|---|---| |index| integer | | |value| real4 | | lang=cpp, name=Lightning function Set(index : Integer, value : Real4) # TextureData : Void constructor Name Type Description format TextureFormat width integer height integer ``` lang=cpp, name=Lightning function TextureData(format : TextureFormat, width : Integer, height : Integer) ```","title":"Texturedata"},{"location":"reference/class_reference/textureinfo/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor Dimensions contentcomponent FileType LoadFormat Size # Properties # Dimensions : string read-only ``` lang=cpp, name=Lightning var Dimensions : String # FileType : string read-only ``` lang=cpp, name=Lightning var FileType : String # LoadFormat : string read-only ``` lang=cpp, name=Lightning var LoadFormat : String # Size : string read-only ``` lang=cpp, name=Lightning var Size : String # Methods # TextureInfo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TextureInfo() ```","title":"Textureinfo"},{"location":"reference/class_reference/textureview/","text":"Widget Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Textureview"},{"location":"reference/class_reference/thickness/","text":"Engine Methods Properties Base Classes Derived Classes All Bottom Size Left Constructor Right TopLeft Top Zero # Properties # Bottom : real ``` lang=cpp, name=Lightning var Bottom : Real # Left : real ``` lang=cpp, name=Lightning var Left : Real # Right : real ``` lang=cpp, name=Lightning var Right : Real # Top : real ``` lang=cpp, name=Lightning var Top : Real # Zero : thickness read-only static ``` lang=cpp, name=Lightning var Zero : Thickness # Methods # All : thickness static Name Type Description p0 real ``` lang=cpp, name=Lightning function All(p0 : Real) : Thickness ``` # Size : real2 Name Type Description ``` lang=cpp, name=Lightning function Size() : Real2 ``` # Thickness : Void constructor Name Type Description p0 real p1 real ``` lang=cpp, name=Lightning function Thickness(p0 : Real, p1 : Real) ``` # Thickness : Void constructor Name Type Description p0 real p1 real p2 real p3 real ``` lang=cpp, name=Lightning function Thickness(p0 : Real, p1 : Real, p2 : Real, p3 : Real) ``` # Thickness : Void constructor Name Type Description p0 real2 ``` lang=cpp, name=Lightning function Thickness(p0 : Real2) ``` # Thickness : Void constructor Name Type Description p0 real4 ``` lang=cpp, name=Lightning function Thickness(p0 : Real4) ``` # TopLeft : real2 Name Type Description ``` lang=cpp, name=Lightning function TopLeft() : Real2 ```","title":"Thickness"},{"location":"reference/class_reference/threadedwebrequest/","text":"Networking Methods Properties Base Classes Derived Classes threadsafeid32eventobject # Properties # Methods","title":"Threadedwebrequest"},{"location":"reference/class_reference/threadsafeid32/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Threadsafeid32"},{"location":"reference/class_reference/threadsafeid32eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject chrome oswindow threadedwebrequest # Properties # Methods","title":"Threadsafeid32eventobject"},{"location":"reference/class_reference/threadsafeid64/","text":"Meta Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Threadsafeid64"},{"location":"reference/class_reference/threadsafeid64eventobject/","text":"Meta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Threadsafeid64eventobject"},{"location":"reference/class_reference/threadsafeid64object/","text":"Meta Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Threadsafeid64object"},{"location":"reference/class_reference/threadsafereferencecounted/","text":"Meta Methods Properties Base Classes Derived Classes blendsettingsmrt colortargetmrt multirendertarget # Properties # Methods","title":"Threadsafereferencecounted"},{"location":"reference/class_reference/thrusteffect/","text":"Component Physics (NOTE) Applies a directional force at the thrust effect's center. When applied to a rigid body, this will compute a torque if the force's direction does not go through the center of mass. Useful for modeling any sort of a thruster. Methods Properties Base Classes Derived Classes Constructor ForceDirection physicseffect ForceStrength LocalSpaceDirection WorldForceDirection # Properties # ForceDirection : real3 The direction that the force should be applied. ``` lang=cpp, name=Lightning var ForceDirection : Real3 # ForceStrength : real The strength of the force being applied in the force direction. ``` lang=cpp, name=Lightning var ForceStrength : Real # LocalSpaceDirection : boolean Determines if this force is to be applied in local or world space. ``` lang=cpp, name=Lightning var LocalSpaceDirection : Boolean # WorldForceDirection : real3 read-only The direction that the force should be applied in world space. ``` lang=cpp, name=Lightning var WorldForceDirection : Real3 # Methods # ThrustEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ThrustEffect() ```","title":"Thrusteffect"},{"location":"reference/class_reference/tileeditor2d/","text":"Component Editor Methods Properties Base Classes Derived Classes CreateTileMap ShowArchetype component Constructor ShowCollision ShowCoordinates ShowGrid ShowInvalid TiledDrawing ToolType # Properties # ShowArchetype : boolean ``` lang=cpp, name=Lightning var ShowArchetype : Boolean # ShowCollision : boolean ``` lang=cpp, name=Lightning var ShowCollision : Boolean # ShowCoordinates : boolean ``` lang=cpp, name=Lightning var ShowCoordinates : Boolean # ShowGrid : boolean ``` lang=cpp, name=Lightning var ShowGrid : Boolean # ShowInvalid : boolean ``` lang=cpp, name=Lightning var ShowInvalid : Boolean # TiledDrawing : boolean ``` lang=cpp, name=Lightning var TiledDrawing : Boolean # ToolType : TileEditor2DSubToolType ``` lang=cpp, name=Lightning var ToolType : TileEditor2DSubToolType # Methods # CreateTileMap : Void Name Type Description ``` lang=cpp, name=Lightning function CreateTileMap() ``` # TileEditor2D : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TileEditor2D() ```","title":"Tileeditor2d"},{"location":"reference/class_reference/tileeditor2ddrawtool/","text":"Editor Methods Properties Base Classes Derived Classes tileeditor2dsubtool # Properties # Methods","title":"Tileeditor2ddrawtool"},{"location":"reference/class_reference/tileeditor2dselecttool/","text":"Editor Methods Properties Base Classes Derived Classes tileeditor2dsubtool # Properties # Methods","title":"Tileeditor2dselecttool"},{"location":"reference/class_reference/tileeditor2dsubtool/","text":"Editor Methods Properties Base Classes Derived Classes Object tileeditor2ddrawtool tileeditor2dselecttool # Properties # Methods","title":"Tileeditor2dsubtool"},{"location":"reference/class_reference/tilemap/","text":"Component Gameplay Methods Properties Base Classes Derived Classes Constructor MeshThickness component Source # Properties # MeshThickness : real ``` lang=cpp, name=Lightning var MeshThickness : Real # Source : tilemapsource read-only ``` lang=cpp, name=Lightning var Source : TileMapSource # Methods # TileMap : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TileMap() ```","title":"Tilemap"},{"location":"reference/class_reference/tilemapsource/","text":"Resource Gameplay Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Tilemapsource"},{"location":"reference/class_reference/tilepalettesource/","text":"Resource Editor Methods Properties Base Classes Derived Classes Resource # Properties # Methods","title":"Tilepalettesource"},{"location":"reference/class_reference/tilepalettesprite/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Tilepalettesprite"},{"location":"reference/class_reference/tilepaletteview/","text":"Editor Methods Properties Base Classes Derived Classes Archetype composite Collision Mergeable Sprite TilePalette # Properties # Archetype : archetype ``` lang=cpp, name=Lightning var Archetype : Archetype # Collision : physicsmesh ``` lang=cpp, name=Lightning var Collision : PhysicsMesh # Mergeable : boolean ``` lang=cpp, name=Lightning var Mergeable : Boolean # Sprite : spritesource ``` lang=cpp, name=Lightning var Sprite : SpriteSource # TilePalette : tilepalettesource ``` lang=cpp, name=Lightning var TilePalette : TilePaletteSource # Methods","title":"Tilepaletteview"},{"location":"reference/class_reference/tileview/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Tileview"},{"location":"reference/class_reference/tileviewevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Tileviewevent"},{"location":"reference/class_reference/tileviewwidget/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Tileviewwidget"},{"location":"reference/class_reference/timespace/","text":"Component Engine (NOTE) Time space component controls time for a Space. Methods Properties Base Classes Derived Classes Step Dt component Constructor DtOrZero TogglePause Frame GloballyPaused MaxDt MinDt Paused RealDt RealTimePassed StepCount TimeMode TimePassed TimeScale # Properties # Dt : real read-only ``` lang=cpp, name=Lightning var Dt : Real # DtOrZero : real read-only ``` lang=cpp, name=Lightning var DtOrZero : Real # Frame : integer The current frame we are on (starts at 0 and counts up for every frame that is run) This value counts up regardless of if the space is paused. ``` lang=cpp, name=Lightning var Frame : Integer # GloballyPaused : boolean read-only ``` lang=cpp, name=Lightning var GloballyPaused : Boolean # MaxDt : real The maximum amount of time we send when running in 'ActualFrametime' mode If this value is set too high and the user does anything to pause their system or the game (example grabbing the window) then a large frame time will be sent out and physics objects will jump very far (causing tunneling and random bounces) ``` lang=cpp, name=Lightning var MaxDt : Real # MinDt : real The minimum amount of time we send when running in 'ActualFrametime' mode Ideally this is set to a very small non-plasma value to prevent any division by plasma errors. ``` lang=cpp, name=Lightning var MinDt : Real # Paused : boolean If the time space is paused then we cease sending out logic update events When paused, the Dt will remain at whatever it was (it will NOT be set to 0) ``` lang=cpp, name=Lightning var Paused : Boolean # RealDt : real read-only ``` lang=cpp, name=Lightning var RealDt : Real # RealTimePassed : real ``` lang=cpp, name=Lightning var RealTimePassed : Real # StepCount : integer Causes the engine to update multiple times before rendering a frame. ``` lang=cpp, name=Lightning var StepCount : Integer # TimeMode : TimeMode When set to fixed framerate the Dt/frame time will never change (it will send whatever the project frame-rate-limiter is set to) This means it is important to run with a frame-rate limiter of some kind otherwise the game will appear to run much faster/slower Note: For determinism, you should always run in FixedFrametime mode When set to actual framerate we will send out the real time that the engine is encountering (clamped by MinDt / MaxDt) ``` lang=cpp, name=Lightning var TimeMode : TimeMode # TimePassed : real ``` lang=cpp, name=Lightning var TimePassed : Real # TimeScale : real Scale the speed of time for interesting effects like bullet time or fast paced gameplay. TimeScale is clamped to be positive. ``` lang=cpp, name=Lightning var TimeScale : Real # Methods # Step : Void Allows the engine to be advance one frame forward. Useful for debugging one frame at a time. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Step() # TimeSpace : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TimeSpace() ``` # TogglePause : Void Toggles the state of paused. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TogglePause()","title":"Timespace"},{"location":"reference/class_reference/timesystem/","text":"Engine Methods Properties Base Classes Derived Classes system # Properties # Methods","title":"Timesystem"},{"location":"reference/class_reference/toggleiconbutton/","text":"Widget Methods Properties Base Classes Derived Classes iconbutton # Properties # Methods","title":"Toggleiconbutton"},{"location":"reference/class_reference/tool/","text":"Editor Methods Properties Base Classes Derived Classes BeginDrag eventobject # Properties # Methods # BeginDrag : Void Name Type Description p0 viewport ``` lang=cpp, name=Lightning function BeginDrag(p0 : Viewport) ```","title":"Tool"},{"location":"reference/class_reference/toolcontrol/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Toolcontrol"},{"location":"reference/class_reference/toolgizmoevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Toolgizmoevent"},{"location":"reference/class_reference/tooltip/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Tooltip"},{"location":"reference/class_reference/tooluievent/","text":"Event Editor (NOTE) Allows Ui customization for Tools. This will be sent on the Tool every time it is activated. Methods Properties Base Classes Derived Classes NeedsPropertyGrid event Parent SelectTool # Properties # NeedsPropertyGrid : boolean Whether or not to force show the tools window when switched to this tool. ``` lang=cpp, name=Lightning var NeedsPropertyGrid : Boolean # Parent : composite read-only Getters / setters. ``` lang=cpp, name=Lightning var Parent : Composite # SelectTool : cog read-only Easy access to the Select Tool. It's commonly used in other Tools (such as ray casting). ``` lang=cpp, name=Lightning var SelectTool : Cog # Methods","title":"Tooluievent"},{"location":"reference/class_reference/torqueeffect/","text":"Component Physics (NOTE) Applies a torque to the center of mass of a body. Methods Properties Base Classes Derived Classes Constructor LocalTorque physicseffect TorqueAxis TorqueStrength WorldTorqueAxis # Properties # LocalTorque : boolean Determines if the torque is applied in local or world space. ``` lang=cpp, name=Lightning var LocalTorque : Boolean # TorqueAxis : real3 The axis that the torque is being applied about. ``` lang=cpp, name=Lightning var TorqueAxis : Real3 # TorqueStrength : real The strength of the torque being applied. ``` lang=cpp, name=Lightning var TorqueStrength : Real # WorldTorqueAxis : real3 read-only The axis of the torque in world space (can be used to manually add torque to a RigidBody). ``` lang=cpp, name=Lightning var WorldTorqueAxis : Real3 # Methods # TorqueEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TorqueEffect() ```","title":"Torqueeffect"},{"location":"reference/class_reference/tracker/","text":"Engine Methods Properties Base Classes Derived Classes system # Properties # Methods","title":"Tracker"},{"location":"reference/class_reference/trackevent/","text":"Event ContentMeta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Trackevent"},{"location":"reference/class_reference/tracknode/","text":"ContentMeta Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Tracknode"},{"location":"reference/class_reference/transform/","text":"Component Engine (NOTE) Transform component class. The transform component provides the position, rotation and scale of an object. Methods Properties Base Classes Derived Classes RotateAnglesLocal EulerAngles component RotateAnglesWorld LocalRotation RotateAround LocalScale RotateLocal LocalTranslation RotateWorld Parent SetEulerAnglesXYZ Rotation SetRotationBases Scale Constructor Translation TransformNormal WorldMatrix TransformNormalInverse WorldRotation TransformNormalLocal WorldScale TransformPoint WorldTranslation TransformPointInverse TransformPointLocal # Properties # EulerAngles : real3 The rotation of the transform as an Euler angle vector in radians. ``` lang=cpp, name=Lightning var EulerAngles : Real3 # LocalRotation : quaternion Local rotation relative to parent. ``` lang=cpp, name=Lightning var LocalRotation : Quaternion # LocalScale : real3 Local Scale relative to parent. ``` lang=cpp, name=Lightning var LocalScale : Real3 # LocalTranslation : real3 Local Translation relative to parent. ``` lang=cpp, name=Lightning var LocalTranslation : Real3 # Parent : transform read-only ``` lang=cpp, name=Lightning var Parent : Transform # Rotation : quaternion Local rotation relative to parent. ``` lang=cpp, name=Lightning var Rotation : Quaternion # Scale : real3 Local Scale relative to parent. ``` lang=cpp, name=Lightning var Scale : Real3 # Translation : real3 Local Translation relative to parent. ``` lang=cpp, name=Lightning var Translation : Real3 # WorldMatrix : real4x4 read-only ``` lang=cpp, name=Lightning var WorldMatrix : Real4x4 # WorldRotation : quaternion Rotation in World Space. ``` lang=cpp, name=Lightning var WorldRotation : Quaternion # WorldScale : real3 Scale in World Space. ``` lang=cpp, name=Lightning var WorldScale : Real3 # WorldTranslation : real3 Translation in World Space. ``` lang=cpp, name=Lightning var WorldTranslation : Real3 # Methods # RotateAnglesLocal : Void Rotate object in local space by the given Euler angle vector (in radians). |Name|Type|Description| |---|---|---| |angles| real3 | | lang=cpp, name=Lightning function RotateAnglesLocal(angles : Real3) # RotateAnglesWorld : Void Rotate object in world space by the given Euler angle vector (in radians). |Name|Type|Description| |---|---|---| |angles| real3 | | lang=cpp, name=Lightning function RotateAnglesWorld(angles : Real3) # RotateAround : Void Rotate around a given point with the given rotation. |Name|Type|Description| |---|---|---| |point| real3 | | |rotation| quaternion | | lang=cpp, name=Lightning function RotateAround(point : Real3, rotation : Quaternion) # RotateLocal : Void Rotate object in local space. |Name|Type|Description| |---|---|---| |rotation| quaternion | | lang=cpp, name=Lightning function RotateLocal(rotation : Quaternion) # RotateWorld : Void Rotate object in world space. |Name|Type|Description| |---|---|---| |rotation| quaternion | | lang=cpp, name=Lightning function RotateWorld(rotation : Quaternion) # SetEulerAnglesXYZ : Void Sets the rotation of the transform by the given Euler angles in radians. |Name|Type|Description| |---|---|---| |xRadians| real | | |yRadians| real | | |zRadians| real | | lang=cpp, name=Lightning function SetEulerAnglesXYZ(xRadians : Real, yRadians : Real, zRadians : Real) # SetRotationBases : Void Generates a rotation matrix from the given bases. |Name|Type|Description| |---|---|---| |facing| real3 | | |up| real3 | | |right| real3 | | lang=cpp, name=Lightning function SetRotationBases(facing : Real3, up : Real3, right : Real3) # Transform : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Transform() # TransformNormal : real3 Transforms a local normal (direction) into world space. |Name|Type|Description| |---|---|---| |normal| real3 | | lang=cpp, name=Lightning function TransformNormal(normal : Real3) : Real3 # TransformNormalInverse : real3 Transforms a world normal (direction) into local space. |Name|Type|Description| |---|---|---| |normal| real3 | | lang=cpp, name=Lightning function TransformNormalInverse(normal : Real3) : Real3 # TransformNormalLocal : real3 Transforms a normal by the local matrix (ignores parent's transform) Needed now because there is no quaternion times vector in script. |Name|Type|Description| |---|---|---| |normal| real3 | | lang=cpp, name=Lightning function TransformNormalLocal(normal : Real3) : Real3 # TransformPoint : real3 Transforms a local point into world space. |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function TransformPoint(point : Real3) : Real3 # TransformPointInverse : real3 Transforms a world point into local space. |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function TransformPointInverse(point : Real3) : Real3 # TransformPointLocal : real3 Transforms a point by the local matrix (ignores parent's transform) |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function TransformPointLocal(point : Real3) : Real3","title":"Transform"},{"location":"reference/class_reference/transformmetatransform/","text":"Engine Methods Properties Base Classes Derived Classes metatransform # Properties # Methods","title":"Transformmetatransform"},{"location":"reference/class_reference/translategizmo/","text":"Component Editor (NOTE) Updates the translation of the gizmo when it's being dragged. Methods Properties Base Classes Derived Classes Constructor SnapDistance component SnapMode Snapping UpdateMode # Properties # SnapDistance : real ``` lang=cpp, name=Lightning var SnapDistance : Real # SnapMode : GizmoSnapMode ``` lang=cpp, name=Lightning var SnapMode : GizmoSnapMode # Snapping : boolean Snapping. ``` lang=cpp, name=Lightning var Snapping : Boolean # UpdateMode : UpdateMode Whether or not to automatically translate the gizmo as it's moved. ``` lang=cpp, name=Lightning var UpdateMode : UpdateMode # Methods # TranslateGizmo : Void constructor Name Type Description ``` lang=cpp, name=Lightning function TranslateGizmo() ```","title":"Translategizmo"},{"location":"reference/class_reference/translategizmoupdateevent/","text":"Event Editor Methods Properties Base Classes Derived Classes GizmoWorldTranslation gizmoupdateevent # Properties # GizmoWorldTranslation : real3 ``` lang=cpp, name=Lightning var GizmoWorldTranslation : Real3 # Methods","title":"Translategizmoupdateevent"},{"location":"reference/class_reference/treeevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Treeevent"},{"location":"reference/class_reference/treerow/","text":"Editor Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Treerow"},{"location":"reference/class_reference/treeview/","text":"Editor Methods Properties Base Classes Derived Classes widget # Properties # Methods","title":"Treeview"},{"location":"reference/class_reference/treeviewheaderaddedevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Treeviewheaderaddedevent"},{"location":"reference/class_reference/tweakables/","text":"Engine Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Tweakables"},{"location":"reference/class_reference/typeevent/","text":"Event Meta Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Typeevent"},{"location":"reference/class_reference/typenamedisplay/","text":"Meta Methods Properties Base Classes Derived Classes metadisplay # Properties # Methods","title":"Typenamedisplay"},{"location":"reference/class_reference/uidocklayout/","text":"Component UiWidget Methods Properties Base Classes Derived Classes Constructor Spacing uilayout # Properties # Spacing : real2 ``` lang=cpp, name=Lightning var Spacing : Real2 # Methods # UiDockLayout : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiDockLayout() ```","title":"Uidocklayout"},{"location":"reference/class_reference/uifilllayout/","text":"Component UiWidget Methods Properties Base Classes Derived Classes FillToParent uilayout FillToRectangle Constructor # Properties # Methods # FillToParent : Void static Name Type Description child uiwidget ``` lang=cpp, name=Lightning function FillToParent(child : UiWidget) ``` # FillToRectangle : Void static Name Type Description rect rectangle widget uiwidget ``` lang=cpp, name=Lightning function FillToRectangle(rect : Rectangle, widget : UiWidget) ``` # UiFillLayout : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiFillLayout() ```","title":"Uifilllayout"},{"location":"reference/class_reference/uifocusevent/","text":"Event UiWidget Methods Properties Base Classes Derived Classes LostFocus event ReceivedFocus # Properties # LostFocus : uiwidget read-only The object that has lost focus, or will lose focus (in the case of preview). ``` lang=cpp, name=Lightning var LostFocus : UiWidget # ReceivedFocus : uiwidget read-only The object that is gaining focus. ``` lang=cpp, name=Lightning var ReceivedFocus : UiWidget # Methods","title":"Uifocusevent"},{"location":"reference/class_reference/uilayout/","text":"Component UiWidget (NOTE) Layouts are in charge of calling UpdateTransform on all children, regardless of whether or not they ignore layouts. Methods Properties Base Classes Derived Classes Debug PaddingBottom component uidocklayout PaddingLeft uifilllayout PaddingRight uistacklayout PaddingTop # Properties # PaddingBottom : real ``` lang=cpp, name=Lightning var PaddingBottom : Real # PaddingLeft : real Padding getter / setters for binding until we have Thickness binding. ``` lang=cpp, name=Lightning var PaddingLeft : Real # PaddingRight : real ``` lang=cpp, name=Lightning var PaddingRight : Real # PaddingTop : real ``` lang=cpp, name=Lightning var PaddingTop : Real # Methods # Debug : Void Calling this will set a breakpoint before the layout is done. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Debug()","title":"Uilayout"},{"location":"reference/class_reference/uilegacytooltip/","text":"Editor Methods Properties Base Classes Derived Classes AddText BackgroundColor ClearText BorderColor SetColorScheme Padding SetPlacement SetPriority Constructor # Properties # BackgroundColor : real4 ``` lang=cpp, name=Lightning var BackgroundColor : Real4 # BorderColor : real4 ``` lang=cpp, name=Lightning var BorderColor : Real4 # Padding : thickness ``` lang=cpp, name=Lightning var Padding : Thickness # Methods # AddText : Void Name Type Description p0 string p1 real4 ``` lang=cpp, name=Lightning function AddText(p0 : String, p1 : Real4) ``` # ClearText : Void Name Type Description ``` lang=cpp, name=Lightning function ClearText() ``` # SetColorScheme : Void Name Type Description p0 ToolTipColorScheme ``` lang=cpp, name=Lightning function SetColorScheme(p0 : ToolTipColorScheme) ``` # SetPlacement : Void Name Type Description p0 cameraviewport p1 rectangle ``` lang=cpp, name=Lightning function SetPlacement(p0 : CameraViewport, p1 : Rectangle) ``` # SetPriority : Void Name Type Description p0 IndicatorSide p1 IndicatorSide p2 IndicatorSide p3 IndicatorSide ``` lang=cpp, name=Lightning function SetPriority(p0 : IndicatorSide, p1 : IndicatorSide, p2 : IndicatorSide, p3 : IndicatorSide) ``` # UiLegacyToolTip : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiLegacyToolTip() ``` # UiLegacyToolTip : Void constructor Name Type Description p0 uilegacytooltip ``` lang=cpp, name=Lightning function UiLegacyToolTip(p0 : UiLegacyToolTip) ```","title":"Uilegacytooltip"},{"location":"reference/class_reference/uirootwidget/","text":"Component UiWidget Methods Properties Base Classes Derived Classes Render DebugMouseInteraction uiwidget Constructor DebugSelected Update DepthSeparation DoubleClickTime FocusWidget MouseDownWidget MouseHoldTime MouseHoverTime MouseOverWidget # Properties # DebugMouseInteraction : boolean Whether or not to print out debug information to the console about what the mouse is currently doing. ``` lang=cpp, name=Lightning var DebugMouseInteraction : Boolean # DebugSelected : cog ``` lang=cpp, name=Lightning var DebugSelected : Cog # DepthSeparation : real Used for debugging. ``` lang=cpp, name=Lightning var DepthSeparation : Real # DoubleClickTime : real The amount of time between clicks to send the 'DoubleClick' event. ``` lang=cpp, name=Lightning var DoubleClickTime : Real # FocusWidget : uiwidget The widget that currently has focus. ``` lang=cpp, name=Lightning var FocusWidget : UiWidget # MouseDownWidget : uiwidget read-only The widget that the mouse was pressed down on. ``` lang=cpp, name=Lightning var MouseDownWidget : UiWidget # MouseHoldTime : real Only send the 'MouseHold' event when the mouse has been holding on a single widget for this amount of time. ``` lang=cpp, name=Lightning var MouseHoldTime : Real # MouseHoverTime : real Only send the MouseHover event when the mouse has been over a single widget for this amount of time. ``` lang=cpp, name=Lightning var MouseHoverTime : Real # MouseOverWidget : uiwidget read-only The widget that the mouse is currently over. ``` lang=cpp, name=Lightning var MouseOverWidget : UiWidget # Methods # Render : Void Renders the Ui to the given color render target. The depth render target must have stencil. |Name|Type|Description| |---|---|---| |e| rendertasksevent | | |color| rendertarget | | |depth| rendertarget | | |renderPass| materialblock | | lang=cpp, name=Lightning function Render(e : RenderTasksEvent, color : RenderTarget, depth : RenderTarget, renderPass : MaterialBlock) # UiRootWidget : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiRootWidget() ``` # Update : Void Updates all widgets and layouts that need to be updated. This should be called right before rendering. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Update()","title":"Uirootwidget"},{"location":"reference/class_reference/uistacklayout/","text":"Component UiWidget Methods Properties Base Classes Derived Classes Constructor Spacing uilayout StackDirection # Properties # Spacing : real2 The amount of pixels in between each child Widget. ``` lang=cpp, name=Lightning var Spacing : Real2 # StackDirection : UiStackLayoutDirection The stack direction the child Widgets will be placed in. ``` lang=cpp, name=Lightning var StackDirection : UiStackLayoutDirection # Methods # UiStackLayout : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiStackLayout() ```","title":"Uistacklayout"},{"location":"reference/class_reference/uitransformupdateevent/","text":"Event UiWidget Methods Properties Base Classes Derived Classes RootWidget event # Properties # RootWidget : uirootwidget read-only ``` lang=cpp, name=Lightning var RootWidget : UiRootWidget # Methods","title":"Uitransformupdateevent"},{"location":"reference/class_reference/uiwidget/","text":"Component UiWidget Methods Properties Base Classes Derived Classes CastPoint AbsoluteMinSize uiwidgetcomponenthierarchy uirootwidget CastRect Active LoseFocus CanTakeFocus MarkAsNeedsUpdate ClipChildren SetLocalLocation DockMode SetWorldLocation FlexSize SizeToContents HasFocus TabJump HierarchyColor TabJumpDirection HierarchyHasFocus TakeFocus HorizontalAlignment TransformPoint InLayout TransformPointInverse Interactive Constructor LocalBottom Update LocalBottomCenter LocalBottomLeft LocalBottomRight LocalCenter LocalCenterLeft LocalCenterRight LocalColor LocalLeft LocalRectangle LocalRight LocalTop LocalTopCenter LocalTopLeft LocalTopRight LocalTranslation MarginBottom MarginLeft MarginRight MarginTop MouseOver MouseOverHierarchy OnTop Root Size SizePolicyX SizePolicyY VerticalAlignment Visible WorldBottom WorldBottomCenter WorldBottomLeft WorldBottomRight WorldCenter WorldCenterLeft WorldCenterRight WorldLeft WorldRectangle WorldRight WorldTop WorldTopCenter WorldTopLeft WorldTopRight WorldTranslation # Properties # AbsoluteMinSize : real2 The minimum size this widget has to be when being laid out. ``` lang=cpp, name=Lightning var AbsoluteMinSize : Real2 # Active : boolean Active getter / setter. ``` lang=cpp, name=Lightning var Active : Boolean # CanTakeFocus : boolean ``` lang=cpp, name=Lightning var CanTakeFocus : Boolean # ClipChildren : boolean ``` lang=cpp, name=Lightning var ClipChildren : Boolean # DockMode : UiDockMode Used in the dock layout. ``` lang=cpp, name=Lightning var DockMode : UiDockMode # FlexSize : real2 Flex size used in conjunction with mSizePolicy (if FlexSize is set). ``` lang=cpp, name=Lightning var FlexSize : Real2 # HasFocus : boolean read-only ``` lang=cpp, name=Lightning var HasFocus : Boolean # HierarchyColor : real4 Color that cascades down to children. ``` lang=cpp, name=Lightning var HierarchyColor : Real4 # HierarchyHasFocus : boolean read-only ``` lang=cpp, name=Lightning var HierarchyHasFocus : Boolean # HorizontalAlignment : UiHorizontalAlignment Alignments used to shift widgets when in a layout. ``` lang=cpp, name=Lightning var HorizontalAlignment : UiHorizontalAlignment # InLayout : boolean If true, we will be ignored when our parent updates the layout. Disable this if you want to manually place this widget. ``` lang=cpp, name=Lightning var InLayout : Boolean # Interactive : boolean ``` lang=cpp, name=Lightning var Interactive : Boolean # LocalBottom : real ``` lang=cpp, name=Lightning var LocalBottom : Real # LocalBottomCenter : real2 ``` lang=cpp, name=Lightning var LocalBottomCenter : Real2 # LocalBottomLeft : real2 ``` lang=cpp, name=Lightning var LocalBottomLeft : Real2 # LocalBottomRight : real2 ``` lang=cpp, name=Lightning var LocalBottomRight : Real2 # LocalCenter : real2 ``` lang=cpp, name=Lightning var LocalCenter : Real2 # LocalCenterLeft : real2 ``` lang=cpp, name=Lightning var LocalCenterLeft : Real2 # LocalCenterRight : real2 ``` lang=cpp, name=Lightning var LocalCenterRight : Real2 # LocalColor : real4 Color that does not cascade to children. It is, however, affected by the parents color. ``` lang=cpp, name=Lightning var LocalColor : Real4 # LocalLeft : real ``` lang=cpp, name=Lightning var LocalLeft : Real # LocalRectangle : rectangle Returns our rect relative to parent. The origin of this Rect is bottom left. ``` lang=cpp, name=Lightning var LocalRectangle : Rectangle # LocalRight : real ``` lang=cpp, name=Lightning var LocalRight : Real # LocalTop : real ``` lang=cpp, name=Lightning var LocalTop : Real # LocalTopCenter : real2 ``` lang=cpp, name=Lightning var LocalTopCenter : Real2 # LocalTopLeft : real2 ``` lang=cpp, name=Lightning var LocalTopLeft : Real2 # LocalTopRight : real2 ``` lang=cpp, name=Lightning var LocalTopRight : Real2 # LocalTranslation : real2 Local Translation relative to parent. ``` lang=cpp, name=Lightning var LocalTranslation : Real2 # MarginBottom : real ``` lang=cpp, name=Lightning var MarginBottom : Real # MarginLeft : real ``` lang=cpp, name=Lightning var MarginLeft : Real # MarginRight : real ``` lang=cpp, name=Lightning var MarginRight : Real # MarginTop : real ``` lang=cpp, name=Lightning var MarginTop : Real # MouseOver : boolean read-only ``` lang=cpp, name=Lightning var MouseOver : Boolean # MouseOverHierarchy : boolean read-only ``` lang=cpp, name=Lightning var MouseOverHierarchy : Boolean # OnTop : boolean ``` lang=cpp, name=Lightning var OnTop : Boolean # Root : uirootwidget read-only Hide the ComponentHierarchy with a more specific root type. ``` lang=cpp, name=Lightning var Root : UiRootWidget # Size : real2 Size getter / setter. This acts as a shortcut to the Area Component. ``` lang=cpp, name=Lightning var Size : Real2 # SizePolicyX : UiSizePolicy ``` lang=cpp, name=Lightning var SizePolicyX : UiSizePolicy # SizePolicyY : UiSizePolicy ``` lang=cpp, name=Lightning var SizePolicyY : UiSizePolicy # VerticalAlignment : UiVerticalAlignment Alignments used to shift widgets when in a layout. ``` lang=cpp, name=Lightning var VerticalAlignment : UiVerticalAlignment # Visible : boolean ``` lang=cpp, name=Lightning var Visible : Boolean # WorldBottom : real ``` lang=cpp, name=Lightning var WorldBottom : Real # WorldBottomCenter : real2 ``` lang=cpp, name=Lightning var WorldBottomCenter : Real2 # WorldBottomLeft : real2 ``` lang=cpp, name=Lightning var WorldBottomLeft : Real2 # WorldBottomRight : real2 ``` lang=cpp, name=Lightning var WorldBottomRight : Real2 # WorldCenter : real2 ``` lang=cpp, name=Lightning var WorldCenter : Real2 # WorldCenterLeft : real2 ``` lang=cpp, name=Lightning var WorldCenterLeft : Real2 # WorldCenterRight : real2 ``` lang=cpp, name=Lightning var WorldCenterRight : Real2 # WorldLeft : real ``` lang=cpp, name=Lightning var WorldLeft : Real # WorldRectangle : rectangle Returns our world rect. The origin of this Rect is bottom left. ``` lang=cpp, name=Lightning var WorldRectangle : Rectangle # WorldRight : real ``` lang=cpp, name=Lightning var WorldRight : Real # WorldTop : real ``` lang=cpp, name=Lightning var WorldTop : Real # WorldTopCenter : real2 ``` lang=cpp, name=Lightning var WorldTopCenter : Real2 # WorldTopLeft : real2 ``` lang=cpp, name=Lightning var WorldTopLeft : Real2 # WorldTopRight : real2 ``` lang=cpp, name=Lightning var WorldTopRight : Real2 # WorldTranslation : real2 Translation in world space. ``` lang=cpp, name=Lightning var WorldTranslation : Real2 # Methods # CastPoint : uiwidget Finds the Widget at the given point. All Widgets bellow and including the 'ignore' widget will not be included. The ignore was added for trying to find the widget underneath a dragging window. The window is directly under the mouse, so we want to ignore it. |Name|Type|Description| |---|---|---| |worldPoint| real2 | | |ignore| uiwidget | | |interactiveOnly| boolean | | lang=cpp, name=Lightning function CastPoint(worldPoint : Real2, ignore : UiWidget, interactiveOnly : Boolean) : UiWidget # CastRect : uiwidgetcastresultsrange Name Type Description worldRect rectangle ignore uiwidget interactiveOnly boolean ``` lang=cpp, name=Lightning function CastRect(worldRect : Rectangle, ignore : UiWidget, interactiveOnly : Boolean) : UiWidgetCastResultsRange ``` # LoseFocus : Void Gives focus back to the root widget. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function LoseFocus() # MarkAsNeedsUpdate : Void Lets the Widget system know that this object has been modified and needs to be re-laid out. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function MarkAsNeedsUpdate() # SetLocalLocation : Void Name Type Description location Location localTranslation real2 ``` lang=cpp, name=Lightning function SetLocalLocation(location : Location, localTranslation : Real2) ``` # SetWorldLocation : Void Name Type Description location Location worldTranslation real2 ``` lang=cpp, name=Lightning function SetWorldLocation(location : Location, worldTranslation : Real2) ``` # SizeToContents : Void Name Type Description ``` lang=cpp, name=Lightning function SizeToContents() ``` # TabJump : boolean Changes focus to the next applicable widget in the direction based on the key pressed in the given keyboard event. |Name|Type|Description| |---|---|---| |e| keyboardevent | | lang=cpp, name=Lightning function TabJump(e : KeyboardEvent) : Boolean # TabJumpDirection : Void Changes focus to the next applicable widget in the given direction. |Name|Type|Description| |---|---|---| |direction| UiFocusDirection | | lang=cpp, name=Lightning function TabJumpDirection(direction : UiFocusDirection) # TakeFocus : Void Focus control. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TakeFocus() # TransformPoint : real2 Transforms a local point into world space. |Name|Type|Description| |---|---|---| |localPosition| real2 | | lang=cpp, name=Lightning function TransformPoint(localPosition : Real2) : Real2 # TransformPointInverse : real2 Transforms a world point into this Widget's local space. Note, this is not the same space as LocalTranslation. LocalTranslation is in this Widget's parent space. |Name|Type|Description| |---|---|---| |worldPosition| real2 | | lang=cpp, name=Lightning function TransformPointInverse(worldPosition : Real2) : Real2 # UiWidget : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiWidget() ``` # Update : Void Handles the updating of this Widget and the child Widgets. Once called, it will update the internal TransformUpdateState. |Name|Type|Description| |---|---|---| |e| uitransformupdateevent | | lang=cpp, name=Lightning function Update(e : UiTransformUpdateEvent)","title":"Uiwidget"},{"location":"reference/class_reference/uiwidgetcastresultsrange/","text":"UiWidget Methods Properties Base Classes Derived Classes Empty Front PopFront Size # Properties # Methods # Empty : boolean Range Interface. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Empty() : Boolean # Front : uiwidget Name Type Description ``` lang=cpp, name=Lightning function Front() : UiWidget ``` # PopFront : Void Name Type Description ``` lang=cpp, name=Lightning function PopFront() ``` # Size : integer Name Type Description ``` lang=cpp, name=Lightning function Size() : Integer ```","title":"Uiwidgetcastresultsrange"},{"location":"reference/class_reference/uiwidgetcomponenthierarchy/","text":"Component UiWidget Methods Properties Base Classes Derived Classes GetChildren ChildCount component uiwidget IsAncestorOf LastDeepestChild IsDescendantOf LastDirectChild NextInHierarchyOrder NextSibling Parent PreviousInHierarchyOrder PreviousSibling Root # Properties # ChildCount : integer read-only ``` lang=cpp, name=Lightning var ChildCount : Integer # LastDeepestChild : uiwidget read-only ``` lang=cpp, name=Lightning var LastDeepestChild : UiWidget # LastDirectChild : uiwidget read-only ``` lang=cpp, name=Lightning var LastDirectChild : UiWidget # NextInHierarchyOrder : uiwidget read-only ``` lang=cpp, name=Lightning var NextInHierarchyOrder : UiWidget # NextSibling : uiwidget read-only ``` lang=cpp, name=Lightning var NextSibling : UiWidget # Parent : uiwidget read-only ``` lang=cpp, name=Lightning var Parent : UiWidget # PreviousInHierarchyOrder : uiwidget read-only ``` lang=cpp, name=Lightning var PreviousInHierarchyOrder : UiWidget # PreviousSibling : uiwidget read-only ``` lang=cpp, name=Lightning var PreviousSibling : UiWidget # Root : uiwidget read-only ``` lang=cpp, name=Lightning var Root : UiWidget # Methods # GetChildren : uiwidgetrange Name Type Description ``` lang=cpp, name=Lightning function GetChildren() : UiWidgetRange ``` # IsAncestorOf : boolean Name Type Description uiwidget ``` lang=cpp, name=Lightning function IsAncestorOf( : UiWidget) : Boolean ``` # IsDescendantOf : boolean Name Type Description uiwidget ``` lang=cpp, name=Lightning function IsDescendantOf( : UiWidget) : Boolean ```","title":"Uiwidgetcomponenthierarchy"},{"location":"reference/class_reference/uiwidgetrange/","text":"UiWidget Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : uiwidgetrange read-only ``` lang=cpp, name=Lightning var All : UiWidgetRange # Current : uiwidget read-only ``` lang=cpp, name=Lightning var Current : UiWidget # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # UiWidgetRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UiWidgetRange() ``` # UiWidgetRange : Void constructor Name Type Description p0 uiwidgetrange ``` lang=cpp, name=Lightning function UiWidgetRange(p0 : UiWidgetRange) ```","title":"Uiwidgetrange"},{"location":"reference/class_reference/unittestmousedropevent/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor UnitTestBaseMouseEvent # Properties # Methods # UnitTestMouseDropEvent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UnitTestMouseDropEvent() ```","title":"Unittestmousedropevent"},{"location":"reference/class_reference/unittestmouseevent/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor UnitTestBaseMouseEvent # Properties # Methods # UnitTestMouseEvent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UnitTestMouseEvent() ```","title":"Unittestmouseevent"},{"location":"reference/class_reference/universaljoint/","text":"Component Physics (NOTE) A universal joint locks positional movement of two points together as well as locking rotation about one axis. This means it is a joint that constrains four axes and leaves two free rotational axes. This joint is most useful to model something like a arm or leg that has a large range of rotational movement. Methods Properties Base Classes Derived Classes SetWorldPoints LocalAxis0OfBodyA joint Constructor LocalAxis0OfBodyB LocalAxis1OfBodyA LocalAxis1OfBodyB LocalPointA LocalPointB WorldPointA WorldPointB # Properties # LocalAxis0OfBodyA : real3 One of the two axes in local space of object A that the objects are allowed to rotate about. ``` lang=cpp, name=Lightning var LocalAxis0OfBodyA : Real3 # LocalAxis0OfBodyB : real3 One of the two axes in local space of object B that the objects are allowed to rotate about. ``` lang=cpp, name=Lightning var LocalAxis0OfBodyB : Real3 # LocalAxis1OfBodyA : real3 One of the two axes in local space of object A that the objects are allowed to rotate about. ``` lang=cpp, name=Lightning var LocalAxis1OfBodyA : Real3 # LocalAxis1OfBodyB : real3 One of the two axes in local space of object B that the objects are allowed to rotate about. ``` lang=cpp, name=Lightning var LocalAxis1OfBodyB : Real3 # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3) # UniversalJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UniversalJoint() ```","title":"Universaljoint"},{"location":"reference/class_reference/universaljointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # UniversalJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UniversalJointBlock() ```","title":"Universaljointblock"},{"location":"reference/class_reference/updateevent/","text":"Event Engine (NOTE) Update event Contains current time and delta time. Methods Properties Base Classes Derived Classes Dt event RealTimePassed TimePassed # Properties # Dt : real ``` lang=cpp, name=Lightning var Dt : Real # RealTimePassed : real ``` lang=cpp, name=Lightning var RealTimePassed : Real # TimePassed : real ``` lang=cpp, name=Lightning var TimePassed : Real # Methods","title":"Updateevent"},{"location":"reference/class_reference/uprightjoint/","text":"Component Physics (NOTE) A joint to keep an object upright. Locks two axes of the objects together but allows free rotation on the plane defined by that axis. This constraint is useful for keeping any object upright. This could also be used to auto correct an object slowly by lowering the max impulse value of the constraint. Methods Properties Base Classes Derived Classes Constructor LocalAxisA joint LocalAxisB WorldAxis # Properties # LocalAxisA : real3 The locally defined axis on object A . ``` lang=cpp, name=Lightning var LocalAxisA : Real3 # LocalAxisB : real3 The locally defined axis on object B . ``` lang=cpp, name=Lightning var LocalAxisB : Real3 # WorldAxis : real3 The axis in world space that is being rotated about . ``` lang=cpp, name=Lightning var WorldAxis : Real3 # Methods # UprightJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UprightJoint() ```","title":"Uprightjoint"},{"location":"reference/class_reference/uprightjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # UprightJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UprightJointBlock() ```","title":"Uprightjointblock"},{"location":"reference/class_reference/userconfig/","text":"Component Engine (NOTE) Configuration component that Contains user info. Methods Properties Base Classes Derived Classes Constructor UserEmail component UserName # Properties # UserEmail : string ``` lang=cpp, name=Lightning var UserEmail : String # UserName : string ``` lang=cpp, name=Lightning var UserName : String # Methods # UserConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function UserConfig() ```","title":"Userconfig"},{"location":"reference/class_reference/valueeditorfactory/","text":"Editor Methods Properties Base Classes Derived Classes Object # Properties # Methods","title":"Valueeditorfactory"},{"location":"reference/class_reference/valueevent/","text":"Event Editor Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Valueevent"},{"location":"reference/class_reference/vertexbuffer/","text":"Graphics (NOTE) Vertex data and attribute semantics for defining data that can be uploaded to the gpu. Methods Properties Base Classes Derived Classes AddAttribute VertexCount safeid32 AddByte AddReal AddShort ClearAttributes ClearData GetAttributes GetElementCount GetElementType GetVertexData IsValidVertexData # Properties # VertexCount : integer read-only Returns the number of vertices that have a complete set of data stored. ``` lang=cpp, name=Lightning var VertexCount : Integer # Methods # AddAttribute : Void Adds an attribute to the definition of the vertices that are to be stored. Add the attributes in the order that they should be stored in memory on a vertex. |Name|Type|Description| |---|---|---| |semantic| VertexSemantic | | |elementType| VertexElementType | | |elementCount| integer | | lang=cpp, name=Lightning function AddAttribute(semantic : VertexSemantic, elementType : VertexElementType, elementCount : Integer) # AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value| integer | | lang=cpp, name=Lightning function AddByte(value : Integer) # AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| || integer2 | | lang=cpp, name=Lightning function AddByte( : Integer2) # AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| || integer3 | | lang=cpp, name=Lightning function AddByte( : Integer3) # AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| || integer4 | | lang=cpp, name=Lightning function AddByte( : Integer4) # AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value| real | | lang=cpp, name=Lightning function AddReal(value : Real) # AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value| real2 | | lang=cpp, name=Lightning function AddReal(value : Real2) # AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value| real3 | | lang=cpp, name=Lightning function AddReal(value : Real3) # AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value| real4 | | lang=cpp, name=Lightning function AddReal(value : Real4) # AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value| integer | | lang=cpp, name=Lightning function AddShort(value : Integer) # AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| || integer2 | | lang=cpp, name=Lightning function AddShort( : Integer2) # AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| || integer3 | | lang=cpp, name=Lightning function AddShort( : Integer3) # AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| || integer4 | | lang=cpp, name=Lightning function AddShort( : Integer4) # ClearAttributes : Void Clears all added attributes from the vertex definition so they can be redefined. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearAttributes() # ClearData : Void Clears all added vertex data so new data can be added. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ClearData() # GetAttributes : vertexsemanticrange Returns a range of attribute semantics in the order that they were added. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function GetAttributes() : VertexSemanticRange # GetElementCount : integer Returns the number of elements stored for the given attribute, throws exception if the attribute is not in the vertex definition. |Name|Type|Description| |---|---|---| |semantic| VertexSemantic | | lang=cpp, name=Lightning function GetElementCount(semantic : VertexSemantic) : Integer # GetElementType : VertexElementType Returns the type that is used to store the given attribute, throws exception if the attribute is not in the vertex definition. |Name|Type|Description| |---|---|---| |semantic| VertexSemantic | | lang=cpp, name=Lightning function GetElementType(semantic : VertexSemantic) : VertexElementType # GetVertexData : real4 Gets the data of an attribute of a vertex, returns values of 0 if read is invalid. |Name|Type|Description| |---|---|---| |vertexIndex| integer | | |semantic| VertexSemantic | | lang=cpp, name=Lightning function GetVertexData(vertexIndex : Integer, semantic : VertexSemantic) : Real4 # GetVertexData : real4 Gets the data of an attribute of a vertex, throws exception if attribute info doesn't match or read is invalid. |Name|Type|Description| |---|---|---| |vertexIndex| integer | | |semantic| VertexSemantic | | |type| VertexElementType | | |count| integer | | lang=cpp, name=Lightning function GetVertexData(vertexIndex : Integer, semantic : VertexSemantic, type : VertexElementType, count : Integer) : Real4 # IsValidVertexData : boolean Returns false if GetVertexData() would throw an exception with the same arguments. |Name|Type|Description| |---|---|---| |vertexIndex| integer | | |semantic| VertexSemantic | | |type| VertexElementType | | |count| integer | | lang=cpp, name=Lightning function IsValidVertexData(vertexIndex : Integer, semantic : VertexSemantic, type : VertexElementType, count : Integer) : Boolean","title":"Vertexbuffer"},{"location":"reference/class_reference/vertexsemanticrange/","text":"Graphics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : vertexsemanticrange read-only ``` lang=cpp, name=Lightning var All : VertexSemanticRange # Current : VertexSemantic read-only ``` lang=cpp, name=Lightning var Current : VertexSemantic # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # VertexSemanticRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function VertexSemanticRange() ``` # VertexSemanticRange : Void constructor Name Type Description p0 vertexsemanticrange ``` lang=cpp, name=Lightning function VertexSemanticRange(p0 : VertexSemanticRange) ```","title":"Vertexsemanticrange"},{"location":"reference/class_reference/viewport/","text":"Widget Methods Properties Base Classes Derived Classes composite reactiveviewport # Properties # Methods","title":"Viewport"},{"location":"reference/class_reference/viewportmouseevent/","text":"Event Gameplay (NOTE) All mouse events that are forwarded to reactive components or the space use this event to add extra data. Methods Properties Base Classes Derived Classes ToWorldPlane CameraViewport mouseevent manipulatortoolevent ToWorldViewPlane HitDistance ToWorldZPlane HitNormal HitObject HitPosition HitUv RayDirection RayStart WorldRay # Properties # CameraViewport : cameraviewport read-only Camera viewport that generated this event. ``` lang=cpp, name=Lightning var CameraViewport : CameraViewport # HitDistance : real The distance away the hit point is. Used with Reactive components. ``` lang=cpp, name=Lightning var HitDistance : Real # HitNormal : real3 The normal at the intersection point with an object. Used with Reactive components. ``` lang=cpp, name=Lightning var HitNormal : Real3 # HitObject : cog read-only Object hit in ray cast. ``` lang=cpp, name=Lightning var HitObject : Cog # HitPosition : real3 The intersection point with an object. Used with Reactive components. ``` lang=cpp, name=Lightning var HitPosition : Real3 # HitUv : real2 The uv texture coordinate at the intersection point, if applicable. Used with Reactive components. ``` lang=cpp, name=Lightning var HitUv : Real2 # RayDirection : real3 Mouse Ray Direction. ``` lang=cpp, name=Lightning var RayDirection : Real3 # RayStart : real3 Mouse Ray start. ``` lang=cpp, name=Lightning var RayStart : Real3 # WorldRay : ray The world mouse ray. ``` lang=cpp, name=Lightning var WorldRay : Ray # Methods # ToWorldPlane : real3 The world mouse position on any arbitrary plane. |Name|Type|Description| |---|---|---| |worldPlaneNormal| real3 | | |worldPlanePosition| real3 | | lang=cpp, name=Lightning function ToWorldPlane(worldPlaneNormal : Real3, worldPlanePosition : Real3) : Real3 # ToWorldViewPlane : real3 The world mouse position on the view plane at view depth. |Name|Type|Description| |---|---|---| |viewDepth| real | | lang=cpp, name=Lightning function ToWorldViewPlane(viewDepth : Real) : Real3 # ToWorldZPlane : real3 The world mouse position on the z plane at depth. |Name|Type|Description| |---|---|---| |worldDepth| real | | lang=cpp, name=Lightning function ToWorldZPlane(worldDepth : Real) : Real3","title":"Viewportmouseevent"},{"location":"reference/class_reference/viewporttextwidget/","text":"Editor Methods Properties Base Classes Derived Classes text # Properties # Methods","title":"Viewporttextwidget"},{"location":"reference/class_reference/volumenode/","text":"Sound (NOTE) Changes the volume of audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateDecibels Decibels soundnode InterpolateVolume Volume # Properties # Decibels : real The volume adjustment, in decibels, that will be applied to the node's input. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0. ``` lang=cpp, name=Lightning var Decibels : Real # Volume : real The volume adjustment that will be applied to the node's input. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible. ``` lang=cpp, name=Lightning var Volume : Real # Methods # InterpolateDecibels : Void Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volumeDB| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateDecibels(volumeDB : Real, interpolationTime : Real) # InterpolateVolume : Void Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume| real | | |interpolationTime| real | | lang=cpp, name=Lightning function InterpolateVolume(volume : Real, interpolationTime : Real)","title":"Volumenode"},{"location":"reference/class_reference/vortexeffect/","text":"Component Physics (NOTE) Applies a force about an axis at the object's center. This will apply two forces to a body: One pulls the object towards the center of the vortex and the other applies a tangential force. Useful to model a vortex. This only expects to be used as a Region effect. Methods Properties Base Classes Derived Classes Constructor EndCondition physicseffect InterpolationType InwardStrengthAtMaxDistance InwardStrengthAtMinDistance LocalAxis MaxDistance MinDistance TwistStrengthAtMaxDistance TwistStrengthAtMinDistance VortexAxis WorldVortexAxis # Properties # EndCondition : PhysicsEffectEndCondition How the interpolation should be handled at MaxDistance. ClampToMax will clamp to the max strength values. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative). ``` lang=cpp, name=Lightning var EndCondition : PhysicsEffectEndCondition # InterpolationType : PhysicsEffectInterpolationType The type of interpolation used (e.g. Linear, Quadratic) for the forces. ``` lang=cpp, name=Lightning var InterpolationType : PhysicsEffectInterpolationType # InwardStrengthAtMaxDistance : real The inward strength of the vortex at the max distance. ``` lang=cpp, name=Lightning var InwardStrengthAtMaxDistance : Real # InwardStrengthAtMinDistance : real The inward strength of the vortex at the min distance. ``` lang=cpp, name=Lightning var InwardStrengthAtMinDistance : Real # LocalAxis : boolean Determines if the vortex axis is in world or local space. ``` lang=cpp, name=Lightning var LocalAxis : Boolean # MaxDistance : real The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition. ``` lang=cpp, name=Lightning var MaxDistance : Real # MinDistance : real The first distance at which attenuation will start. If an object is under the min distance, the min strength values will be used. If an object is in between min and max, then it will attenuate. ``` lang=cpp, name=Lightning var MinDistance : Real # TwistStrengthAtMaxDistance : real The perpendicular strength (twist) of the vortex at max distance. ``` lang=cpp, name=Lightning var TwistStrengthAtMaxDistance : Real # TwistStrengthAtMinDistance : real The perpendicular strength (twist) of the vortex at min distance. ``` lang=cpp, name=Lightning var TwistStrengthAtMinDistance : Real # VortexAxis : real3 The axis the vortex spins about. ``` lang=cpp, name=Lightning var VortexAxis : Real3 # WorldVortexAxis : real3 read-only The axis the vortex spins about in world space. ``` lang=cpp, name=Lightning var WorldVortexAxis : Real3 # Methods # VortexEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function VortexEffect() ```","title":"Vortexeffect"},{"location":"reference/class_reference/webbrowser/","text":"Gameplay Methods Properties Base Classes Derived Classes Create BackgroundColor referencecountedeventobject ExecuteScript CanGoBackward ExecuteScriptFromLocation CanGoForward GoBackward Focus GoForward IsLoading Reload ScrollSpeed SimulateKey Size SimulateMouseClick Status SimulateMouseDoubleClick Texture SimulateMouseMove Title SimulateMouseScroll Transparent SimulateTextTyped Url Visible # Properties # BackgroundColor : real4 ``` lang=cpp, name=Lightning var BackgroundColor : Real4 # CanGoBackward : boolean read-only ``` lang=cpp, name=Lightning var CanGoBackward : Boolean # CanGoForward : boolean read-only ``` lang=cpp, name=Lightning var CanGoForward : Boolean # Focus : boolean ``` lang=cpp, name=Lightning var Focus : Boolean # IsLoading : boolean read-only ``` lang=cpp, name=Lightning var IsLoading : Boolean # ScrollSpeed : real2 ``` lang=cpp, name=Lightning var ScrollSpeed : Real2 # Size : integer2 ``` lang=cpp, name=Lightning var Size : Integer2 # Status : string read-only ``` lang=cpp, name=Lightning var Status : String # Texture : texture read-only ``` lang=cpp, name=Lightning var Texture : Texture # Title : string read-only ``` lang=cpp, name=Lightning var Title : String # Transparent : boolean ``` lang=cpp, name=Lightning var Transparent : Boolean # Url : string ``` lang=cpp, name=Lightning var Url : String # Visible : boolean ``` lang=cpp, name=Lightning var Visible : Boolean # Methods # Create : webbrowser static Name Type Description ``` lang=cpp, name=Lightning function Create() : WebBrowser ``` # Create : webbrowser static Name Type Description p0 webbrowsersetup ``` lang=cpp, name=Lightning function Create(p0 : WebBrowserSetup) : WebBrowser ``` # ExecuteScript : Void Name Type Description p0 string ``` lang=cpp, name=Lightning function ExecuteScript(p0 : String) ``` # ExecuteScriptFromLocation : Void Name Type Description p0 string p1 string p2 integer ``` lang=cpp, name=Lightning function ExecuteScriptFromLocation(p0 : String, p1 : String, p2 : Integer) ``` # GoBackward : Void Name Type Description ``` lang=cpp, name=Lightning function GoBackward() ``` # GoForward : Void Name Type Description ``` lang=cpp, name=Lightning function GoForward() ``` # Reload : Void Name Type Description ``` lang=cpp, name=Lightning function Reload() ``` # Reload : Void Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Reload(p0 : Boolean) ``` # SimulateKey : Void Name Type Description p0 integer p1 boolean p2 WebBrowserModifiers ``` lang=cpp, name=Lightning function SimulateKey(p0 : Integer, p1 : Boolean, p2 : WebBrowserModifiers) ``` # SimulateMouseClick : Void Name Type Description p0 integer2 p1 MouseButtons p2 boolean p3 WebBrowserModifiers ``` lang=cpp, name=Lightning function SimulateMouseClick(p0 : Integer2, p1 : MouseButtons, p2 : Boolean, p3 : WebBrowserModifiers) ``` # SimulateMouseDoubleClick : Void Name Type Description p0 integer2 p1 MouseButtons p2 WebBrowserModifiers ``` lang=cpp, name=Lightning function SimulateMouseDoubleClick(p0 : Integer2, p1 : MouseButtons, p2 : WebBrowserModifiers) ``` # SimulateMouseMove : Void Name Type Description p0 integer2 p1 WebBrowserModifiers ``` lang=cpp, name=Lightning function SimulateMouseMove(p0 : Integer2, p1 : WebBrowserModifiers) ``` # SimulateMouseScroll : Void Name Type Description p0 integer2 p1 real2 p2 WebBrowserModifiers ``` lang=cpp, name=Lightning function SimulateMouseScroll(p0 : Integer2, p1 : Real2, p2 : WebBrowserModifiers) ``` # SimulateTextTyped : Void Name Type Description p0 integer p1 WebBrowserModifiers ``` lang=cpp, name=Lightning function SimulateTextTyped(p0 : Integer, p1 : WebBrowserModifiers) ```","title":"Webbrowser"},{"location":"reference/class_reference/webbrowserconsoleevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes Line webbrowserevent Message Source # Properties # Line : integer ``` lang=cpp, name=Lightning var Line : Integer # Message : string ``` lang=cpp, name=Lightning var Message : String # Source : string ``` lang=cpp, name=Lightning var Source : String # Methods","title":"Webbrowserconsoleevent"},{"location":"reference/class_reference/webbrowsercursorevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes Cursor webbrowserevent # Properties # Cursor : Cursor ``` lang=cpp, name=Lightning var Cursor : Cursor # Methods","title":"Webbrowsercursorevent"},{"location":"reference/class_reference/webbrowserdownloadevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes Cancel webbrowserevent ContentDisposition CurrentSpeed FilePath Id IsComplete IsInProgress MimeType OriginalUrl ReceivedBytes SuggestedFileName TotalBytes Url # Properties # Cancel : boolean ``` lang=cpp, name=Lightning var Cancel : Boolean # ContentDisposition : string ``` lang=cpp, name=Lightning var ContentDisposition : String # CurrentSpeed : doubleinteger ``` lang=cpp, name=Lightning var CurrentSpeed : DoubleInteger # FilePath : string ``` lang=cpp, name=Lightning var FilePath : String # Id : integer ``` lang=cpp, name=Lightning var Id : Integer # IsComplete : boolean ``` lang=cpp, name=Lightning var IsComplete : Boolean # IsInProgress : boolean ``` lang=cpp, name=Lightning var IsInProgress : Boolean # MimeType : string ``` lang=cpp, name=Lightning var MimeType : String # OriginalUrl : string ``` lang=cpp, name=Lightning var OriginalUrl : String # ReceivedBytes : doubleinteger ``` lang=cpp, name=Lightning var ReceivedBytes : DoubleInteger # SuggestedFileName : string ``` lang=cpp, name=Lightning var SuggestedFileName : String # TotalBytes : doubleinteger ``` lang=cpp, name=Lightning var TotalBytes : DoubleInteger # Url : string ``` lang=cpp, name=Lightning var Url : String # Methods","title":"Webbrowserdownloadevent"},{"location":"reference/class_reference/webbrowserevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes WebBrowser event webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsertextevent webbrowserurlevent # Properties # WebBrowser : webbrowser read-only ``` lang=cpp, name=Lightning var WebBrowser : WebBrowser # Methods","title":"Webbrowserevent"},{"location":"reference/class_reference/webbrowsermanager/","text":"Gameplay Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Webbrowsermanager"},{"location":"reference/class_reference/webbrowserpointqueryevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes ScreenPixelPosition webbrowserevent ViewPixelPosition # Properties # ScreenPixelPosition : integer2 ``` lang=cpp, name=Lightning var ScreenPixelPosition : Integer2 # ViewPixelPosition : integer2 ``` lang=cpp, name=Lightning var ViewPixelPosition : Integer2 # Methods","title":"Webbrowserpointqueryevent"},{"location":"reference/class_reference/webbrowserpopupcreateevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes Name webbrowserevent Url # Properties # Name : string ``` lang=cpp, name=Lightning var Name : String # Url : string ``` lang=cpp, name=Lightning var Url : String # Methods","title":"Webbrowserpopupcreateevent"},{"location":"reference/class_reference/webbrowsersetup/","text":"Gameplay Methods Properties Base Classes Derived Classes Constructor BackgroundColor Object ScrollSpeed Size Transparent Url # Properties # BackgroundColor : real4 ``` lang=cpp, name=Lightning var BackgroundColor : Real4 # ScrollSpeed : real2 ``` lang=cpp, name=Lightning var ScrollSpeed : Real2 # Size : integer2 ``` lang=cpp, name=Lightning var Size : Integer2 # Transparent : boolean ``` lang=cpp, name=Lightning var Transparent : Boolean # Url : string ``` lang=cpp, name=Lightning var Url : String # Methods # WebBrowserSetup : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WebBrowserSetup() ```","title":"Webbrowsersetup"},{"location":"reference/class_reference/webbrowsertextevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes Text webbrowserevent # Properties # Text : string ``` lang=cpp, name=Lightning var Text : String # Methods","title":"Webbrowsertextevent"},{"location":"reference/class_reference/webbrowserurlevent/","text":"Event Gameplay Methods Properties Base Classes Derived Classes Handled webbrowserevent Url # Properties # Handled : boolean ``` lang=cpp, name=Lightning var Handled : Boolean # Url : string ``` lang=cpp, name=Lightning var Url : String # Methods","title":"Webbrowserurlevent"},{"location":"reference/class_reference/webbrowserwidget/","text":"Gameplay Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Webbrowserwidget"},{"location":"reference/class_reference/webrequester/","text":"Component Networking (NOTE) A component we can use to facilitate web requests. Methods Properties Base Classes Derived Classes Clear Url component Run SetHeader SetPostData Constructor # Properties # Url : string Get and set the url that we make requests to. ``` lang=cpp, name=Lightning var Url : String # Methods # Clear : Void Clear headers and post data. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Clear() # Run : Void Run the web request (we should get data back in a WebResponse event). |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Run() # SetHeader : Void Add a header to the web request . |Name|Type|Description| |---|---|---| |name| string | | |data| string | | lang=cpp, name=Lightning function SetHeader(name : String, data : String) # SetPostData : Void Add Post data to the request, this will also change the request to a post request. |Name|Type|Description| |---|---|---| |data| string | | lang=cpp, name=Lightning function SetPostData(data : String) # WebRequester : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WebRequester() ```","title":"Webrequester"},{"location":"reference/class_reference/webresponseevent/","text":"Event Networking Methods Properties Base Classes Derived Classes Data event ResponseCode # Properties # Data : string ``` lang=cpp, name=Lightning var Data : String # ResponseCode : integer ``` lang=cpp, name=Lightning var ResponseCode : Integer # Methods","title":"Webresponseevent"},{"location":"reference/class_reference/weightedcomposite/","text":"Editor Methods Properties Base Classes Derived Classes composite item itemgroup # Properties # Methods","title":"Weightedcomposite"},{"location":"reference/class_reference/weightpaintertool/","text":"Editor Methods Properties Base Classes Derived Classes FeatherRadius heightmapsubtool Radius Strength TextureChannel # Properties # FeatherRadius : real ``` lang=cpp, name=Lightning var FeatherRadius : Real # Radius : real ``` lang=cpp, name=Lightning var Radius : Real # Strength : real ``` lang=cpp, name=Lightning var Strength : Real # TextureChannel : HeightTextureSelect ``` lang=cpp, name=Lightning var TextureChannel : HeightTextureSelect # Methods","title":"Weightpaintertool"},{"location":"reference/class_reference/weldjoint/","text":"Component Physics (NOTE) A weld joint is used to lock the position and orientation of two objects together. Welds should generally not be used to make two objects rigid as they are computationally more expensive and less rigid than using composites. The primary uses for welds are for quick connections or connections that are desired to not be fully rigid. Also, while it can be done with composites too, welds can be used to model object breaking beyond some max force. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on the x, y, and z axes. Motor: A motor will attempt to drive the rotation on the x, y, and z axes. Spring: A spring will make the x, y, and z axis springy. Methods Properties Base Classes Derived Classes SetWorldPoints LocalBasisA joint Constructor LocalBasisB LocalPointA LocalPointB WorldPointA WorldPointB # Properties # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # Methods # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3) # WeldJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WeldJoint() ```","title":"Weldjoint"},{"location":"reference/class_reference/weldjointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # WeldJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WeldJointBlock() ```","title":"Weldjointblock"},{"location":"reference/class_reference/wheeljoint/","text":"Component Physics (NOTE) A joint that models a wheel with shocks. A wheel aligns the two local axes together and allows free rotation about this axis. The specified shock axis is turned into a soft constraint to model the shocks. Note: ObjectA should be the root object as the shock axis rotates with this object. If ObjectA is the wheel, then the shock axis will rotate with the wheel, causing the shocks to not stay aligned. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel. Methods Properties Base Classes Derived Classes SetWorldPoints LocalAxisA joint Constructor LocalAxisB LocalBasisA LocalBasisB LocalPointA LocalPointB ShockAxis WorldAxis WorldPointA WorldPointB WorldShockAxis # Properties # LocalAxisA : real3 The locally defined axis on object A . ``` lang=cpp, name=Lightning var LocalAxisA : Real3 # LocalAxisB : real3 The locally defined axis on object B . ``` lang=cpp, name=Lightning var LocalAxisB : Real3 # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # ShockAxis : real3 The shock axis in the local space of body A. ``` lang=cpp, name=Lightning var ShockAxis : Real3 # WorldAxis : real3 The axis in world space that is being rotated about . ``` lang=cpp, name=Lightning var WorldAxis : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # WorldShockAxis : real3 The shock axis after it has been translated into world space. ``` lang=cpp, name=Lightning var WorldShockAxis : Real3 # Methods # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3) # WheelJoint : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WheelJoint() ```","title":"Wheeljoint"},{"location":"reference/class_reference/wheeljoint2d/","text":"Component Physics (NOTE) A joint that models a wheel with shocks. This is the 2d version of WheelJoint. This joint is used in 2d mode for increased performance and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate about. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel. Methods Properties Base Classes Derived Classes SetWorldPoints LocalBasisA joint Constructor LocalBasisB LocalPointA LocalPointB ShockAxis WorldPointA WorldPointB WorldShockAxis # Properties # LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . ``` lang=cpp, name=Lightning var LocalBasisA : Quaternion # LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . ``` lang=cpp, name=Lightning var LocalBasisB : Quaternion # LocalPointA : real3 The local point of the anchor on object A . ``` lang=cpp, name=Lightning var LocalPointA : Real3 # LocalPointB : real3 The local point of the anchor on object B . ``` lang=cpp, name=Lightning var LocalPointB : Real3 # ShockAxis : real3 The shock axis of the wheel in object A's local space. ``` lang=cpp, name=Lightning var ShockAxis : Real3 # WorldPointA : real3 The position of the anchor on object A given a position in world space ``` lang=cpp, name=Lightning var WorldPointA : Real3 # WorldPointB : real3 The position of the anchor on object B given a position in world space ``` lang=cpp, name=Lightning var WorldPointB : Real3 # WorldShockAxis : real3 The shock axis of the wheel in world space. ``` lang=cpp, name=Lightning var WorldShockAxis : Real3 # Methods # SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point| real3 | | lang=cpp, name=Lightning function SetWorldPoints(point : Real3) # WheelJoint2d : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WheelJoint2d() ```","title":"Wheeljoint2d"},{"location":"reference/class_reference/wheeljoint2dblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # WheelJoint2dBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WheelJoint2dBlock() ```","title":"Wheeljoint2dblock"},{"location":"reference/class_reference/wheeljointblock/","text":"Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock # Properties # Methods # WheelJointBlock : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WheelJointBlock() ```","title":"Wheeljointblock"},{"location":"reference/class_reference/widget/","text":"Widget Methods Properties Base Classes Derived Classes eventobject composite curvedraggable edittext imagewidget mousemanipulation multiconvexmeshpoint spacer text textureview treeview # Properties # Methods","title":"Widget"},{"location":"reference/class_reference/widgetmanager/","text":"Widget Methods Properties Base Classes Derived Classes eventobject # Properties # Methods","title":"Widgetmanager"},{"location":"reference/class_reference/windeffect/","text":"Component Physics (NOTE) Applies a wind force in a given direction. The wind force is calculated from the squared wind speed and is scaled by the approximate surface area of the object in the direction of the force. Methods Properties Base Classes Derived Classes Constructor LocalSpaceDirection physicseffect WindDirection WindSpeed WorldWindDirection # Properties # LocalSpaceDirection : boolean Determines if the wind's direction is a local or world-space vector. ``` lang=cpp, name=Lightning var LocalSpaceDirection : Boolean # WindDirection : real3 The direction that the wind is blowing. ``` lang=cpp, name=Lightning var WindDirection : Real3 # WindSpeed : real The speed that the wind is blowing. ``` lang=cpp, name=Lightning var WindSpeed : Real # WorldWindDirection : real3 read-only The direction of the wind in world space. ``` lang=cpp, name=Lightning var WorldWindDirection : Real3 # Methods # WindEffect : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WindEffect() ```","title":"Windeffect"},{"location":"reference/class_reference/window/","text":"Widget Methods Properties Base Classes Derived Classes composite # Properties # Methods","title":"Window"},{"location":"reference/class_reference/windowlaunchsettings/","text":"Component Engine (NOTE) Settings for how the application window should be sized when launched. Methods Properties Base Classes Derived Classes Constructor LaunchFullscreen component WindowedResolution # Properties # LaunchFullscreen : boolean If a pre-launch popup should be used to determine how application window is sized. ``` lang=cpp, name=Lightning var LaunchFullscreen : Boolean # WindowedResolution : integer2 Resolution of application when launched in windowed mode. ``` lang=cpp, name=Lightning var WindowedResolution : Integer2 # Methods # WindowLaunchSettings : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WindowLaunchSettings() ```","title":"Windowlaunchsettings"},{"location":"reference/class_reference/windowsoswindow/","text":"WindowsShellSystem Methods Properties Base Classes Derived Classes Constructor oswindow # Properties # Methods # WindowsOsWindow : Void constructor Name Type Description ``` lang=cpp, name=Lightning function WindowsOsWindow() ```","title":"Windowsoswindow"},{"location":"reference/class_reference/windowtabevent/","text":"Event Widget Methods Properties Base Classes Derived Classes handleableevent # Properties # Methods","title":"Windowtabevent"},{"location":"reference/class_reference/zero/","text":"Gameplay (NOTE) Global functionality exposed to Lightning script. Bound as \"Plasma\" to script (e.g. Plasma.Keyboard) PlasmaStatic was used to avoid the conflict with namespace Plasma). Methods Properties Base Classes Derived Classes Connect Audio Disconnect Editor DisconnectAll Engine Environment Gamepads Joysticks Keyboard Mouse ObjectStore OsShell ResourceSystem # Properties # Audio : audio read-only static ``` lang=cpp, name=Lightning var Audio : Audio # Editor : editor read-only static ``` lang=cpp, name=Lightning var Editor : Editor # Engine : engine read-only static ``` lang=cpp, name=Lightning var Engine : Engine # Environment : environment read-only static ``` lang=cpp, name=Lightning var Environment : Environment # Gamepads : gamepads read-only static ``` lang=cpp, name=Lightning var Gamepads : Gamepads # Joysticks : joysticks read-only static ``` lang=cpp, name=Lightning var Joysticks : Joysticks # Keyboard : keyboard read-only static ``` lang=cpp, name=Lightning var Keyboard : Keyboard # Mouse : mouse read-only static ``` lang=cpp, name=Lightning var Mouse : Mouse # ObjectStore : objectstore read-only static ``` lang=cpp, name=Lightning var ObjectStore : ObjectStore # OsShell : osshell read-only static ``` lang=cpp, name=Lightning var OsShell : OsShell # ResourceSystem : resourcesystem read-only static ``` lang=cpp, name=Lightning var ResourceSystem : ResourceSystem # Methods # Connect : Void static Connection invokes the given delegate when sender dispatches the specified event. |Name|Type|Description| |---|---|---| |sender|Object| | |eventId| string | | |receiverDelegate|delegate()| | lang=cpp, name=Lightning function Connect(sender : Object, eventId : String, receiverDelegate : delegate()) # Disconnect : Void static Removes specified event connection, if connection delegate was a component method then receiver object is just the component. |Name|Type|Description| |---|---|---| |sender|Object| | |eventId| string | | |receiver|Object| | lang=cpp, name=Lightning function Disconnect(sender : Object, eventId : String, receiver : Object) # DisconnectAll : Void static Name Type Description Object Object ``` lang=cpp, name=Lightning function DisconnectAll( : Object, : Object) ```","title":"Zero"},{"location":"reference/class_reference/zerometaarrayanimationclips/","text":"ContentMeta Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Zerometaarrayanimationclips"},{"location":"reference/class_reference/zerometaarraycontentlibraryreferencearray/","text":"Engine Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Zerometaarraycontentlibraryreferencearray"},{"location":"reference/class_reference/zerometaarraynetpropertyinfos/","text":"Networking Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Zerometaarraynetpropertyinfos"},{"location":"reference/class_reference/zerometaarrayrevisions/","text":"Meta Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Zerometaarrayrevisions"},{"location":"reference/class_reference/zerometaarraysounds/","text":"Sound Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Zerometaarraysounds"},{"location":"reference/class_reference/zerometaarraysoundtags/","text":"Sound Methods Properties Base Classes Derived Classes metaarray # Properties # Methods","title":"Zerometaarraysoundtags"},{"location":"reference/class_reference/zilchcompiledevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Zilchcompiledevent"},{"location":"reference/class_reference/zilchcompileevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Zilchcompileevent"},{"location":"reference/class_reference/zilchcompilefragmentevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Zilchcompilefragmentevent"},{"location":"reference/class_reference/zilchcomponent/","text":"Component LightningScript (NOTE) A base class for all Lightning components defined in script. Methods Properties Base Classes Derived Classes Constructor component # Properties # Methods # LightningComponent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LightningComponent() ```","title":"Zilchcomponent"},{"location":"reference/class_reference/zilchdocumentresource/","text":"Resource Engine Methods Properties Base Classes Derived Classes Text documentresource lightningfragment lightningscript # Properties # Text : string read-only ``` lang=cpp, name=Lightning var Text : String # Methods","title":"Zilchdocumentresource"},{"location":"reference/class_reference/zilchevent/","text":"Event LightningScript Methods Properties Base Classes Derived Classes Constructor event # Properties # Methods # LightningEvent : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LightningEvent() ```","title":"Zilchevent"},{"location":"reference/class_reference/zilchfragment/","text":"Resource Graphics Methods Properties Base Classes Derived Classes lightningdocumentresource # Properties # Methods","title":"Zilchfragment"},{"location":"reference/class_reference/zilchfragmentbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes basetextbuilder # Properties # Methods","title":"Zilchfragmentbuilder"},{"location":"reference/class_reference/zilchlibraryresource/","text":"Resource Engine Methods Properties Base Classes Derived Classes Resource lightningpluginlibrary # Properties # Methods","title":"Zilchlibraryresource"},{"location":"reference/class_reference/zilchobject/","text":"LightningScript Methods Properties Base Classes Derived Classes DispatchEvent eventobject Constructor # Properties # Methods # DispatchEvent : Void Name Type Description p0 string p1 event ``` lang=cpp, name=Lightning function DispatchEvent(p0 : String, p1 : Event) ``` # LightningObject : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LightningObject() ```","title":"Zilchobject"},{"location":"reference/class_reference/zilchpluginbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes Constructor databuilder # Properties # Methods # LightningPluginBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LightningPluginBuilder() ```","title":"Zilchpluginbuilder"},{"location":"reference/class_reference/zilchpluginconfig/","text":"Component Engine Methods Properties Base Classes Derived Classes Constructor AttemptedIdeToolsInstall component # Properties # AttemptedIdeToolsInstall : boolean If on this machine we attempted to install IDE tools for plugins. ``` lang=cpp, name=Lightning var AttemptedIdeToolsInstall : Boolean # Methods # LightningPluginConfig : Void constructor Name Type Description ``` lang=cpp, name=Lightning function LightningPluginConfig() ```","title":"Zilchpluginconfig"},{"location":"reference/class_reference/zilchpluginlibrary/","text":"Resource LightningScript Methods Properties Base Classes Derived Classes lightninglibraryresource # Properties # Methods","title":"Zilchpluginlibrary"},{"location":"reference/class_reference/zilchpluginsource/","text":"Resource LightningScript Methods Properties Base Classes Derived Classes Clean dataresource CompileDebug CompileRelease CopyPluginDependencies InstallIdeTools OpenDirectory OpenIde # Properties # Methods # Clean : Void Name Type Description ``` lang=cpp, name=Lightning function Clean() ``` # CompileDebug : Void Name Type Description ``` lang=cpp, name=Lightning function CompileDebug() ``` # CompileRelease : Void Name Type Description ``` lang=cpp, name=Lightning function CompileRelease() ``` # CopyPluginDependencies : Void Name Type Description ``` lang=cpp, name=Lightning function CopyPluginDependencies() ``` # InstallIdeTools : Void Name Type Description ``` lang=cpp, name=Lightning function InstallIdeTools() ``` # OpenDirectory : Void Name Type Description ``` lang=cpp, name=Lightning function OpenDirectory() ``` # OpenIde : Void Name Type Description ``` lang=cpp, name=Lightning function OpenIde() ```","title":"Zilchpluginsource"},{"location":"reference/class_reference/zilchprecompilationevent/","text":"Event Engine Methods Properties Base Classes Derived Classes event # Properties # Methods","title":"Zilchprecompilationevent"},{"location":"reference/class_reference/zilchscript/","text":"Resource LightningScript (NOTE) Lightning script file Resource. Methods Properties Base Classes Derived Classes lightningdocumentresource # Properties # Methods","title":"Zilchscript"},{"location":"reference/class_reference/zilchscriptbuilder/","text":"ContentMeta Methods Properties Base Classes Derived Classes basetextbuilder # Properties # Methods","title":"Zilchscriptbuilder"},{"location":"reference/lightning_base_types/anyhandle/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Anyhandle"},{"location":"reference/lightning_base_types/anytype/","text":"Core Methods Properties Base Classes Derived Classes type # Properties # Methods","title":"Anytype"},{"location":"reference/lightning_base_types/array_t/","text":"Core Methods Properties Base Classes Derived Classes Add All Constructor Capacity Clear Count Copy LastIndex FindFirstIndex Get Insert Pop Push Range RemoveAll RemoveAt RemoveFirst RemoveSwap Reserve Resize Set Sort # Properties # All : ArrayRange[T] read-only ``` lang=cpp, name=Lightning var All : ArrayRange[T] # Capacity : integer read-only ``` lang=cpp, name=Lightning var Capacity : Integer # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # LastIndex : integer read-only ``` lang=cpp, name=Lightning var LastIndex : Integer # Methods # Add : Void Name Type Description p0 T ``` lang=cpp, name=Lightning function Add(p0 : T) ``` # Array[T] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array T ``` # Array[T] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array T ``` # Array[T] : Void constructor Name Type Description size integer defaultValue T ``` lang=cpp, name=Lightning function Array T ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Copy : Array[T] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[T] ``` # FindFirstIndex : integer Name Type Description value T ``` lang=cpp, name=Lightning function FindFirstIndex(value : T) : Integer ``` # Get : T Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : T ``` # Insert : Void Name Type Description index integer value T ``` lang=cpp, name=Lightning function Insert(index : Integer, value : T) ``` # Pop : T Name Type Description ``` lang=cpp, name=Lightning function Pop() : T ``` # Push : Void Name Type Description p0 T ``` lang=cpp, name=Lightning function Push(p0 : T) ``` # Range : ArrayRange[T] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[T] ``` # RemoveAll : integer Name Type Description value T ``` lang=cpp, name=Lightning function RemoveAll(value : T) : Integer ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveFirst : boolean Name Type Description value T ``` lang=cpp, name=Lightning function RemoveFirst(value : T) : Boolean ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer defaultValue T ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : T) ``` # Set : Void Name Type Description index integer value T ``` lang=cpp, name=Lightning function Set(index : Integer, value : T) ``` # Sort : Void Name Type Description compare delegate(left:any,right:any): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:any,right:any):Boolean) ``` # Sort : Void Name Type Description compare delegate(left:any,right:any): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:any,right:any):Integer) ```","title":"Array t"},{"location":"reference/lightning_base_types/array_type/","text":"Core Methods Properties Base Classes Derived Classes Add All Constructor Capacity Clear Count Copy LastIndex FindFirstIndex Get Insert Pop Push Range RemoveAll RemoveAt RemoveFirst RemoveSwap Reserve Resize Set Sort # Properties # All : ArrayRange read-only ``` lang=cpp, name=Lightning var All : ArrayRange # Capacity : integer read-only ``` lang=cpp, name=Lightning var Capacity : Integer # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # LastIndex : integer read-only ``` lang=cpp, name=Lightning var LastIndex : Integer # Methods # Add : Void Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function Add(p0 : AnyHandle) ``` # Add : Void Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Add(p0 : Boolean) ``` # Add : Void Name Type Description p0 boolean2 ``` lang=cpp, name=Lightning function Add(p0 : Boolean2) ``` # Add : Void Name Type Description p0 boolean3 ``` lang=cpp, name=Lightning function Add(p0 : Boolean3) ``` # Add : Void Name Type Description p0 boolean4 ``` lang=cpp, name=Lightning function Add(p0 : Boolean4) ``` # Add : Void Name Type Description p0 byte ``` lang=cpp, name=Lightning function Add(p0 : Byte) ``` # Add : Void Name Type Description p0 cog ``` lang=cpp, name=Lightning function Add(p0 : Cog) ``` # Add : Void Name Type Description p0 delegate() ``` lang=cpp, name=Lightning function Add(p0 : delegate()) ``` # Add : Void Name Type Description p0 doubleinteger ``` lang=cpp, name=Lightning function Add(p0 : DoubleInteger) ``` # Add : Void Name Type Description p0 doublereal ``` lang=cpp, name=Lightning function Add(p0 : DoubleReal) ``` # Add : Void Name Type Description p0 integer ``` lang=cpp, name=Lightning function Add(p0 : Integer) ``` # Add : Void Name Type Description p0 integer2 ``` lang=cpp, name=Lightning function Add(p0 : Integer2) ``` # Add : Void Name Type Description p0 integer3 ``` lang=cpp, name=Lightning function Add(p0 : Integer3) ``` # Add : Void Name Type Description p0 integer4 ``` lang=cpp, name=Lightning function Add(p0 : Integer4) ``` # Add : Void Name Type Description p0 Key ``` lang=cpp, name=Lightning function Add(p0 : Key) ``` # Add : Void Name Type Description p0 quaternion ``` lang=cpp, name=Lightning function Add(p0 : Quaternion) ``` # Add : Void Name Type Description p0 real ``` lang=cpp, name=Lightning function Add(p0 : Real) ``` # Add : Void Name Type Description p0 real2 ``` lang=cpp, name=Lightning function Add(p0 : Real2) ``` # Add : Void Name Type Description p0 real3 ``` lang=cpp, name=Lightning function Add(p0 : Real3) ``` # Add : Void Name Type Description p0 real4 ``` lang=cpp, name=Lightning function Add(p0 : Real4) ``` # Add : Void Name Type Description p0 string ``` lang=cpp, name=Lightning function Add(p0 : String) ``` # Add : Void Name Type Description p0 T ``` lang=cpp, name=Lightning function Add(p0 : T) ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue anyhandle ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue boolean ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue boolean2 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue boolean3 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue boolean4 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue byte ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue cog ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue delegate() ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue doubleinteger ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue doublereal ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue integer ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue integer2 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue integer3 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue integer4 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue Key ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue quaternion ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue real ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue real2 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue real3 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue real4 ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue string ``` lang=cpp, name=Lightning function Array Type ``` # Array[Type] : Void constructor Name Type Description size integer defaultValue T ``` lang=cpp, name=Lightning function Array Type ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Copy : Array[ integer2 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Integer2] ``` # Copy : Array[ boolean4 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Boolean4] ``` # Copy : Array[ cog ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Cog] ``` # Copy : Array[ integer4 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Integer4] ``` # Copy : Array[ byte ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Byte] ``` # Copy : Array[ integer ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Integer] ``` # Copy : Array[ anyhandle ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[AnyHandle] ``` # Copy : Array[delegate()] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[delegate()] ``` # Copy : Array[ string ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[String] ``` # Copy : Array[ real3 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Real3] ``` # Copy : Array[ real4 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Real4] ``` # Copy : Array[ type ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Type] ``` # Copy : Array[ real ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Real] ``` # Copy : Array[ quaternion ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Quaternion] ``` # Copy : Array[ boolean3 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Boolean3] ``` # Copy : Array[ doubleinteger ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[DoubleInteger] ``` # Copy : Array[ integer3 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Integer3] ``` # Copy : Array[any] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[any] ``` # Copy : Array[ boolean ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Boolean] ``` # Copy : Array[ real2 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Real2] ``` # Copy : Array[ doublereal ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[DoubleReal] ``` # Copy : Array[ boolean2 ] Name Type Description ``` lang=cpp, name=Lightning function Copy() : Array[Boolean2] ``` # FindFirstIndex : integer Name Type Description value anyhandle ``` lang=cpp, name=Lightning function FindFirstIndex(value : AnyHandle) : Integer ``` # FindFirstIndex : integer Name Type Description value boolean ``` lang=cpp, name=Lightning function FindFirstIndex(value : Boolean) : Integer ``` # FindFirstIndex : integer Name Type Description value boolean2 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Boolean2) : Integer ``` # FindFirstIndex : integer Name Type Description value boolean3 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Boolean3) : Integer ``` # FindFirstIndex : integer Name Type Description value boolean4 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Boolean4) : Integer ``` # FindFirstIndex : integer Name Type Description value byte ``` lang=cpp, name=Lightning function FindFirstIndex(value : Byte) : Integer ``` # FindFirstIndex : integer Name Type Description value cog ``` lang=cpp, name=Lightning function FindFirstIndex(value : Cog) : Integer ``` # FindFirstIndex : integer Name Type Description value delegate() ``` lang=cpp, name=Lightning function FindFirstIndex(value : delegate()) : Integer ``` # FindFirstIndex : integer Name Type Description value doubleinteger ``` lang=cpp, name=Lightning function FindFirstIndex(value : DoubleInteger) : Integer ``` # FindFirstIndex : integer Name Type Description value doublereal ``` lang=cpp, name=Lightning function FindFirstIndex(value : DoubleReal) : Integer ``` # FindFirstIndex : integer Name Type Description value integer ``` lang=cpp, name=Lightning function FindFirstIndex(value : Integer) : Integer ``` # FindFirstIndex : integer Name Type Description value integer2 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Integer2) : Integer ``` # FindFirstIndex : integer Name Type Description value integer3 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Integer3) : Integer ``` # FindFirstIndex : integer Name Type Description value integer4 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Integer4) : Integer ``` # FindFirstIndex : integer Name Type Description value Key ``` lang=cpp, name=Lightning function FindFirstIndex(value : Key) : Integer ``` # FindFirstIndex : integer Name Type Description value quaternion ``` lang=cpp, name=Lightning function FindFirstIndex(value : Quaternion) : Integer ``` # FindFirstIndex : integer Name Type Description value real ``` lang=cpp, name=Lightning function FindFirstIndex(value : Real) : Integer ``` # FindFirstIndex : integer Name Type Description value real2 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Real2) : Integer ``` # FindFirstIndex : integer Name Type Description value real3 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Real3) : Integer ``` # FindFirstIndex : integer Name Type Description value real4 ``` lang=cpp, name=Lightning function FindFirstIndex(value : Real4) : Integer ``` # FindFirstIndex : integer Name Type Description value string ``` lang=cpp, name=Lightning function FindFirstIndex(value : String) : Integer ``` # FindFirstIndex : integer Name Type Description value T ``` lang=cpp, name=Lightning function FindFirstIndex(value : T) : Integer ``` # Get : Key Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Key ``` # Get : quaternion Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Quaternion ``` # Get : cog Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Cog ``` # Get : real2 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Real2 ``` # Get : real3 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Real3 ``` # Get : boolean2 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Boolean2 ``` # Get : real Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Real ``` # Get : integer4 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Integer4 ``` # Get : delegate() Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : delegate() ``` # Get : byte Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Byte ``` # Get : doublereal Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : DoubleReal ``` # Get : integer Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Integer ``` # Get : string Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : String ``` # Get : real4 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Real4 ``` # Get : boolean3 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Boolean3 ``` # Get : doubleinteger Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : DoubleInteger ``` # Get : boolean4 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Boolean4 ``` # Get : integer2 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Integer2 ``` # Get : integer3 Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Integer3 ``` # Get : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : Boolean ``` # Get : T Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : T ``` # Get : anyhandle Name Type Description index integer ``` lang=cpp, name=Lightning function Get(index : Integer) : AnyHandle ``` # Insert : Void Name Type Description index integer value anyhandle ``` lang=cpp, name=Lightning function Insert(index : Integer, value : AnyHandle) ``` # Insert : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Boolean) ``` # Insert : Void Name Type Description index integer value boolean2 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Boolean2) ``` # Insert : Void Name Type Description index integer value boolean3 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Boolean3) ``` # Insert : Void Name Type Description index integer value boolean4 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Boolean4) ``` # Insert : Void Name Type Description index integer value byte ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Byte) ``` # Insert : Void Name Type Description index integer value cog ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Cog) ``` # Insert : Void Name Type Description index integer value delegate() ``` lang=cpp, name=Lightning function Insert(index : Integer, value : delegate()) ``` # Insert : Void Name Type Description index integer value doubleinteger ``` lang=cpp, name=Lightning function Insert(index : Integer, value : DoubleInteger) ``` # Insert : Void Name Type Description index integer value doublereal ``` lang=cpp, name=Lightning function Insert(index : Integer, value : DoubleReal) ``` # Insert : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Integer) ``` # Insert : Void Name Type Description index integer value integer2 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Integer2) ``` # Insert : Void Name Type Description index integer value integer3 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Integer3) ``` # Insert : Void Name Type Description index integer value integer4 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Integer4) ``` # Insert : Void Name Type Description index integer value Key ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Key) ``` # Insert : Void Name Type Description index integer value quaternion ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Quaternion) ``` # Insert : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Real) ``` # Insert : Void Name Type Description index integer value real2 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Real2) ``` # Insert : Void Name Type Description index integer value real3 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Real3) ``` # Insert : Void Name Type Description index integer value real4 ``` lang=cpp, name=Lightning function Insert(index : Integer, value : Real4) ``` # Insert : Void Name Type Description index integer value string ``` lang=cpp, name=Lightning function Insert(index : Integer, value : String) ``` # Insert : Void Name Type Description index integer value T ``` lang=cpp, name=Lightning function Insert(index : Integer, value : T) ``` # Pop : integer4 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Integer4 ``` # Pop : string Name Type Description ``` lang=cpp, name=Lightning function Pop() : String ``` # Pop : boolean2 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Boolean2 ``` # Pop : T Name Type Description ``` lang=cpp, name=Lightning function Pop() : T ``` # Pop : Key Name Type Description ``` lang=cpp, name=Lightning function Pop() : Key ``` # Pop : real3 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Real3 ``` # Pop : delegate() Name Type Description ``` lang=cpp, name=Lightning function Pop() : delegate() ``` # Pop : doublereal Name Type Description ``` lang=cpp, name=Lightning function Pop() : DoubleReal ``` # Pop : real4 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Real4 ``` # Pop : integer3 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Integer3 ``` # Pop : real2 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Real2 ``` # Pop : boolean Name Type Description ``` lang=cpp, name=Lightning function Pop() : Boolean ``` # Pop : boolean3 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Boolean3 ``` # Pop : integer Name Type Description ``` lang=cpp, name=Lightning function Pop() : Integer ``` # Pop : anyhandle Name Type Description ``` lang=cpp, name=Lightning function Pop() : AnyHandle ``` # Pop : boolean4 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Boolean4 ``` # Pop : cog Name Type Description ``` lang=cpp, name=Lightning function Pop() : Cog ``` # Pop : doubleinteger Name Type Description ``` lang=cpp, name=Lightning function Pop() : DoubleInteger ``` # Pop : real Name Type Description ``` lang=cpp, name=Lightning function Pop() : Real ``` # Pop : integer2 Name Type Description ``` lang=cpp, name=Lightning function Pop() : Integer2 ``` # Pop : byte Name Type Description ``` lang=cpp, name=Lightning function Pop() : Byte ``` # Pop : quaternion Name Type Description ``` lang=cpp, name=Lightning function Pop() : Quaternion ``` # Push : Void Name Type Description p0 anyhandle ``` lang=cpp, name=Lightning function Push(p0 : AnyHandle) ``` # Push : Void Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Push(p0 : Boolean) ``` # Push : Void Name Type Description p0 boolean2 ``` lang=cpp, name=Lightning function Push(p0 : Boolean2) ``` # Push : Void Name Type Description p0 boolean3 ``` lang=cpp, name=Lightning function Push(p0 : Boolean3) ``` # Push : Void Name Type Description p0 boolean4 ``` lang=cpp, name=Lightning function Push(p0 : Boolean4) ``` # Push : Void Name Type Description p0 byte ``` lang=cpp, name=Lightning function Push(p0 : Byte) ``` # Push : Void Name Type Description p0 cog ``` lang=cpp, name=Lightning function Push(p0 : Cog) ``` # Push : Void Name Type Description p0 delegate() ``` lang=cpp, name=Lightning function Push(p0 : delegate()) ``` # Push : Void Name Type Description p0 doubleinteger ``` lang=cpp, name=Lightning function Push(p0 : DoubleInteger) ``` # Push : Void Name Type Description p0 doublereal ``` lang=cpp, name=Lightning function Push(p0 : DoubleReal) ``` # Push : Void Name Type Description p0 integer ``` lang=cpp, name=Lightning function Push(p0 : Integer) ``` # Push : Void Name Type Description p0 integer2 ``` lang=cpp, name=Lightning function Push(p0 : Integer2) ``` # Push : Void Name Type Description p0 integer3 ``` lang=cpp, name=Lightning function Push(p0 : Integer3) ``` # Push : Void Name Type Description p0 integer4 ``` lang=cpp, name=Lightning function Push(p0 : Integer4) ``` # Push : Void Name Type Description p0 Key ``` lang=cpp, name=Lightning function Push(p0 : Key) ``` # Push : Void Name Type Description p0 quaternion ``` lang=cpp, name=Lightning function Push(p0 : Quaternion) ``` # Push : Void Name Type Description p0 real ``` lang=cpp, name=Lightning function Push(p0 : Real) ``` # Push : Void Name Type Description p0 real2 ``` lang=cpp, name=Lightning function Push(p0 : Real2) ``` # Push : Void Name Type Description p0 real3 ``` lang=cpp, name=Lightning function Push(p0 : Real3) ``` # Push : Void Name Type Description p0 real4 ``` lang=cpp, name=Lightning function Push(p0 : Real4) ``` # Push : Void Name Type Description p0 string ``` lang=cpp, name=Lightning function Push(p0 : String) ``` # Push : Void Name Type Description p0 T ``` lang=cpp, name=Lightning function Push(p0 : T) ``` # Range : ArrayRange[ real ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Real] ``` # Range : ArrayRange Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange ``` # Range : ArrayRange[ integer3 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Integer3] ``` # Range : ArrayRange[ doublereal ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[DoubleReal] ``` # Range : ArrayRange[ real3 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Real3] ``` # Range : ArrayRange[ boolean ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Boolean] ``` # Range : ArrayRange[any] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[any] ``` # Range : ArrayRange[ integer ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Integer] ``` # Range : ArrayRange[ byte ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Byte] ``` # Range : ArrayRange[ boolean3 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Boolean3] ``` # Range : ArrayRange[ cog ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Cog] ``` # Range : ArrayRange[ real4 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Real4] ``` # Range : ArrayRange[ doubleinteger ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[DoubleInteger] ``` # Range : ArrayRange[ anyhandle ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[AnyHandle] ``` # Range : ArrayRange[ real2 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Real2] ``` # Range : ArrayRange[ boolean2 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Boolean2] ``` # Range : ArrayRange[ string ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[String] ``` # Range : ArrayRange[ integer2 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Integer2] ``` # Range : ArrayRange[ integer4 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Integer4] ``` # Range : ArrayRange[delegate()] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[delegate()] ``` # Range : ArrayRange[ quaternion ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Quaternion] ``` # Range : ArrayRange[ boolean4 ] Name Type Description start integer count integer ``` lang=cpp, name=Lightning function Range(start : Integer, count : Integer) : ArrayRange[Boolean4] ``` # RemoveAll : integer Name Type Description value anyhandle ``` lang=cpp, name=Lightning function RemoveAll(value : AnyHandle) : Integer ``` # RemoveAll : integer Name Type Description value boolean ``` lang=cpp, name=Lightning function RemoveAll(value : Boolean) : Integer ``` # RemoveAll : integer Name Type Description value boolean2 ``` lang=cpp, name=Lightning function RemoveAll(value : Boolean2) : Integer ``` # RemoveAll : integer Name Type Description value boolean3 ``` lang=cpp, name=Lightning function RemoveAll(value : Boolean3) : Integer ``` # RemoveAll : integer Name Type Description value boolean4 ``` lang=cpp, name=Lightning function RemoveAll(value : Boolean4) : Integer ``` # RemoveAll : integer Name Type Description value byte ``` lang=cpp, name=Lightning function RemoveAll(value : Byte) : Integer ``` # RemoveAll : integer Name Type Description value cog ``` lang=cpp, name=Lightning function RemoveAll(value : Cog) : Integer ``` # RemoveAll : integer Name Type Description value delegate() ``` lang=cpp, name=Lightning function RemoveAll(value : delegate()) : Integer ``` # RemoveAll : integer Name Type Description value doubleinteger ``` lang=cpp, name=Lightning function RemoveAll(value : DoubleInteger) : Integer ``` # RemoveAll : integer Name Type Description value doublereal ``` lang=cpp, name=Lightning function RemoveAll(value : DoubleReal) : Integer ``` # RemoveAll : integer Name Type Description value integer ``` lang=cpp, name=Lightning function RemoveAll(value : Integer) : Integer ``` # RemoveAll : integer Name Type Description value integer2 ``` lang=cpp, name=Lightning function RemoveAll(value : Integer2) : Integer ``` # RemoveAll : integer Name Type Description value integer3 ``` lang=cpp, name=Lightning function RemoveAll(value : Integer3) : Integer ``` # RemoveAll : integer Name Type Description value integer4 ``` lang=cpp, name=Lightning function RemoveAll(value : Integer4) : Integer ``` # RemoveAll : integer Name Type Description value Key ``` lang=cpp, name=Lightning function RemoveAll(value : Key) : Integer ``` # RemoveAll : integer Name Type Description value quaternion ``` lang=cpp, name=Lightning function RemoveAll(value : Quaternion) : Integer ``` # RemoveAll : integer Name Type Description value real ``` lang=cpp, name=Lightning function RemoveAll(value : Real) : Integer ``` # RemoveAll : integer Name Type Description value real2 ``` lang=cpp, name=Lightning function RemoveAll(value : Real2) : Integer ``` # RemoveAll : integer Name Type Description value real3 ``` lang=cpp, name=Lightning function RemoveAll(value : Real3) : Integer ``` # RemoveAll : integer Name Type Description value real4 ``` lang=cpp, name=Lightning function RemoveAll(value : Real4) : Integer ``` # RemoveAll : integer Name Type Description value string ``` lang=cpp, name=Lightning function RemoveAll(value : String) : Integer ``` # RemoveAll : integer Name Type Description value T ``` lang=cpp, name=Lightning function RemoveAll(value : T) : Integer ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveAt : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveAt(index : Integer) ``` # RemoveFirst : boolean Name Type Description value anyhandle ``` lang=cpp, name=Lightning function RemoveFirst(value : AnyHandle) : Boolean ``` # RemoveFirst : boolean Name Type Description value boolean ``` lang=cpp, name=Lightning function RemoveFirst(value : Boolean) : Boolean ``` # RemoveFirst : boolean Name Type Description value boolean2 ``` lang=cpp, name=Lightning function RemoveFirst(value : Boolean2) : Boolean ``` # RemoveFirst : boolean Name Type Description value boolean3 ``` lang=cpp, name=Lightning function RemoveFirst(value : Boolean3) : Boolean ``` # RemoveFirst : boolean Name Type Description value boolean4 ``` lang=cpp, name=Lightning function RemoveFirst(value : Boolean4) : Boolean ``` # RemoveFirst : boolean Name Type Description value byte ``` lang=cpp, name=Lightning function RemoveFirst(value : Byte) : Boolean ``` # RemoveFirst : boolean Name Type Description value cog ``` lang=cpp, name=Lightning function RemoveFirst(value : Cog) : Boolean ``` # RemoveFirst : boolean Name Type Description value delegate() ``` lang=cpp, name=Lightning function RemoveFirst(value : delegate()) : Boolean ``` # RemoveFirst : boolean Name Type Description value doubleinteger ``` lang=cpp, name=Lightning function RemoveFirst(value : DoubleInteger) : Boolean ``` # RemoveFirst : boolean Name Type Description value doublereal ``` lang=cpp, name=Lightning function RemoveFirst(value : DoubleReal) : Boolean ``` # RemoveFirst : boolean Name Type Description value integer ``` lang=cpp, name=Lightning function RemoveFirst(value : Integer) : Boolean ``` # RemoveFirst : boolean Name Type Description value integer2 ``` lang=cpp, name=Lightning function RemoveFirst(value : Integer2) : Boolean ``` # RemoveFirst : boolean Name Type Description value integer3 ``` lang=cpp, name=Lightning function RemoveFirst(value : Integer3) : Boolean ``` # RemoveFirst : boolean Name Type Description value integer4 ``` lang=cpp, name=Lightning function RemoveFirst(value : Integer4) : Boolean ``` # RemoveFirst : boolean Name Type Description value Key ``` lang=cpp, name=Lightning function RemoveFirst(value : Key) : Boolean ``` # RemoveFirst : boolean Name Type Description value quaternion ``` lang=cpp, name=Lightning function RemoveFirst(value : Quaternion) : Boolean ``` # RemoveFirst : boolean Name Type Description value real ``` lang=cpp, name=Lightning function RemoveFirst(value : Real) : Boolean ``` # RemoveFirst : boolean Name Type Description value real2 ``` lang=cpp, name=Lightning function RemoveFirst(value : Real2) : Boolean ``` # RemoveFirst : boolean Name Type Description value real3 ``` lang=cpp, name=Lightning function RemoveFirst(value : Real3) : Boolean ``` # RemoveFirst : boolean Name Type Description value real4 ``` lang=cpp, name=Lightning function RemoveFirst(value : Real4) : Boolean ``` # RemoveFirst : boolean Name Type Description value string ``` lang=cpp, name=Lightning function RemoveFirst(value : String) : Boolean ``` # RemoveFirst : boolean Name Type Description value T ``` lang=cpp, name=Lightning function RemoveFirst(value : T) : Boolean ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # RemoveSwap : Void Name Type Description index integer ``` lang=cpp, name=Lightning function RemoveSwap(index : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Reserve : Void Name Type Description capacity integer ``` lang=cpp, name=Lightning function Reserve(capacity : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer ``` lang=cpp, name=Lightning function Resize(size : Integer) ``` # Resize : Void Name Type Description size integer defaultValue anyhandle ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : AnyHandle) ``` # Resize : Void Name Type Description size integer defaultValue boolean ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Boolean) ``` # Resize : Void Name Type Description size integer defaultValue boolean2 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Boolean2) ``` # Resize : Void Name Type Description size integer defaultValue boolean3 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Boolean3) ``` # Resize : Void Name Type Description size integer defaultValue boolean4 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Boolean4) ``` # Resize : Void Name Type Description size integer defaultValue byte ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Byte) ``` # Resize : Void Name Type Description size integer defaultValue cog ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Cog) ``` # Resize : Void Name Type Description size integer defaultValue delegate() ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : delegate()) ``` # Resize : Void Name Type Description size integer defaultValue doubleinteger ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : DoubleInteger) ``` # Resize : Void Name Type Description size integer defaultValue doublereal ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : DoubleReal) ``` # Resize : Void Name Type Description size integer defaultValue integer ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Integer) ``` # Resize : Void Name Type Description size integer defaultValue integer2 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Integer2) ``` # Resize : Void Name Type Description size integer defaultValue integer3 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Integer3) ``` # Resize : Void Name Type Description size integer defaultValue integer4 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Integer4) ``` # Resize : Void Name Type Description size integer defaultValue Key ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Key) ``` # Resize : Void Name Type Description size integer defaultValue quaternion ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Quaternion) ``` # Resize : Void Name Type Description size integer defaultValue real ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Real) ``` # Resize : Void Name Type Description size integer defaultValue real2 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Real2) ``` # Resize : Void Name Type Description size integer defaultValue real3 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Real3) ``` # Resize : Void Name Type Description size integer defaultValue real4 ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : Real4) ``` # Resize : Void Name Type Description size integer defaultValue string ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : String) ``` # Resize : Void Name Type Description size integer defaultValue T ``` lang=cpp, name=Lightning function Resize(size : Integer, defaultValue : T) ``` # Set : Void Name Type Description index integer value anyhandle ``` lang=cpp, name=Lightning function Set(index : Integer, value : AnyHandle) ``` # Set : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function Set(index : Integer, value : Boolean) ``` # Set : Void Name Type Description index integer value boolean2 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Boolean2) ``` # Set : Void Name Type Description index integer value boolean3 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Boolean3) ``` # Set : Void Name Type Description index integer value boolean4 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Boolean4) ``` # Set : Void Name Type Description index integer value byte ``` lang=cpp, name=Lightning function Set(index : Integer, value : Byte) ``` # Set : Void Name Type Description index integer value cog ``` lang=cpp, name=Lightning function Set(index : Integer, value : Cog) ``` # Set : Void Name Type Description index integer value delegate() ``` lang=cpp, name=Lightning function Set(index : Integer, value : delegate()) ``` # Set : Void Name Type Description index integer value doubleinteger ``` lang=cpp, name=Lightning function Set(index : Integer, value : DoubleInteger) ``` # Set : Void Name Type Description index integer value doublereal ``` lang=cpp, name=Lightning function Set(index : Integer, value : DoubleReal) ``` # Set : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function Set(index : Integer, value : Integer) ``` # Set : Void Name Type Description index integer value integer2 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Integer2) ``` # Set : Void Name Type Description index integer value integer3 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Integer3) ``` # Set : Void Name Type Description index integer value integer4 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Integer4) ``` # Set : Void Name Type Description index integer value Key ``` lang=cpp, name=Lightning function Set(index : Integer, value : Key) ``` # Set : Void Name Type Description index integer value quaternion ``` lang=cpp, name=Lightning function Set(index : Integer, value : Quaternion) ``` # Set : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function Set(index : Integer, value : Real) ``` # Set : Void Name Type Description index integer value real2 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Real2) ``` # Set : Void Name Type Description index integer value real3 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Real3) ``` # Set : Void Name Type Description index integer value real4 ``` lang=cpp, name=Lightning function Set(index : Integer, value : Real4) ``` # Set : Void Name Type Description index integer value string ``` lang=cpp, name=Lightning function Set(index : Integer, value : String) ``` # Set : Void Name Type Description index integer value T ``` lang=cpp, name=Lightning function Set(index : Integer, value : T) ``` # Sort : Void Name Type Description compare delegate(left:any,right:any): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:any,right:any):Boolean) ``` # Sort : Void Name Type Description compare delegate(left:any,right:any): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:any,right:any):Integer) ``` # Sort : Void Name Type Description compare delegate(left: anyhandle ,right: anyhandle ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:AnyHandle,right:AnyHandle):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: anyhandle ,right: anyhandle ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:AnyHandle,right:AnyHandle):Integer) ``` # Sort : Void Name Type Description compare delegate(left: boolean ,right: boolean ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean,right:Boolean):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: boolean ,right: boolean ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean,right:Boolean):Integer) ``` # Sort : Void Name Type Description compare delegate(left: boolean2 ,right: boolean2 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean2,right:Boolean2):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: boolean2 ,right: boolean2 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean2,right:Boolean2):Integer) ``` # Sort : Void Name Type Description compare delegate(left: boolean3 ,right: boolean3 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean3,right:Boolean3):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: boolean3 ,right: boolean3 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean3,right:Boolean3):Integer) ``` # Sort : Void Name Type Description compare delegate(left: boolean4 ,right: boolean4 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean4,right:Boolean4):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: boolean4 ,right: boolean4 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Boolean4,right:Boolean4):Integer) ``` # Sort : Void Name Type Description compare delegate(left: byte ,right: byte ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Byte,right:Byte):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: byte ,right: byte ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Byte,right:Byte):Integer) ``` # Sort : Void Name Type Description compare delegate(left: cog ,right: cog ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Cog,right:Cog):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: cog ,right: cog ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Cog,right:Cog):Integer) ``` # Sort : Void Name Type Description compare delegate(left:delegate(),right:delegate()): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:delegate(),right:delegate()):Boolean) ``` # Sort : Void Name Type Description compare delegate(left:delegate(),right:delegate()): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:delegate(),right:delegate()):Integer) ``` # Sort : Void Name Type Description compare delegate(left: doubleinteger ,right: doubleinteger ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:DoubleInteger,right:DoubleInteger):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: doubleinteger ,right: doubleinteger ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:DoubleInteger,right:DoubleInteger):Integer) ``` # Sort : Void Name Type Description compare delegate(left: doublereal ,right: doublereal ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:DoubleReal,right:DoubleReal):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: doublereal ,right: doublereal ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:DoubleReal,right:DoubleReal):Integer) ``` # Sort : Void Name Type Description compare delegate(left: integer ,right: integer ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer,right:Integer):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: integer ,right: integer ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer,right:Integer):Integer) ``` # Sort : Void Name Type Description compare delegate(left: integer2 ,right: integer2 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer2,right:Integer2):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: integer2 ,right: integer2 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer2,right:Integer2):Integer) ``` # Sort : Void Name Type Description compare delegate(left: integer3 ,right: integer3 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer3,right:Integer3):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: integer3 ,right: integer3 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer3,right:Integer3):Integer) ``` # Sort : Void Name Type Description compare delegate(left: integer4 ,right: integer4 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer4,right:Integer4):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: integer4 ,right: integer4 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Integer4,right:Integer4):Integer) ``` # Sort : Void Name Type Description compare delegate(left:Key,right:Key): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Key,right:Key):Boolean) ``` # Sort : Void Name Type Description compare delegate(left:Key,right:Key): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Key,right:Key):Integer) ``` # Sort : Void Name Type Description compare delegate(left: quaternion ,right: quaternion ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Quaternion,right:Quaternion):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: quaternion ,right: quaternion ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Quaternion,right:Quaternion):Integer) ``` # Sort : Void Name Type Description compare delegate(left: real ,right: real ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real,right:Real):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: real ,right: real ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real,right:Real):Integer) ``` # Sort : Void Name Type Description compare delegate(left: real2 ,right: real2 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real2,right:Real2):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: real2 ,right: real2 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real2,right:Real2):Integer) ``` # Sort : Void Name Type Description compare delegate(left: real3 ,right: real3 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real3,right:Real3):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: real3 ,right: real3 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real3,right:Real3):Integer) ``` # Sort : Void Name Type Description compare delegate(left: real4 ,right: real4 ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real4,right:Real4):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: real4 ,right: real4 ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:Real4,right:Real4):Integer) ``` # Sort : Void Name Type Description compare delegate(left: string ,right: string ): boolean ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:String,right:String):Boolean) ``` # Sort : Void Name Type Description compare delegate(left: string ,right: string ): integer ``` lang=cpp, name=Lightning function Sort(compare : delegate(left:String,right:String):Integer) ```","title":"Array type"},{"location":"reference/lightning_base_types/arrayrange_t/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current Reset IsEmpty IsNotEmpty # Properties # All : ArrayRange[T] read-only ``` lang=cpp, name=Lightning var All : ArrayRange[T] # Current : T read-only ``` lang=cpp, name=Lightning var Current : T # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # ArrayRange[T] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function ArrayRange T ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ```","title":"Arrayrange t"},{"location":"reference/lightning_base_types/asciiencoding/","text":"Core Methods Properties Base Classes Derived Classes iencoding # Properties # Methods","title":"Asciiencoding"},{"location":"reference/lightning_base_types/boolean/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis XAxis Set Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # One : boolean read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Boolean # XAxis : boolean read-only static ``` lang=cpp, name=Lightning var XAxis : Boolean # Zero : boolean read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Boolean # Methods # Boolean : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean() ``` # Boolean : Void constructor Name Type Description scalar boolean ``` lang=cpp, name=Lightning function Boolean(scalar : Boolean) ``` # Get : boolean Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Boolean ``` # GetAxis : boolean static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Boolean # Set : Void Name Type Description p0 integer p1 boolean ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Boolean) ```","title":"Boolean"},{"location":"reference/lightning_base_types/boolean2/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis XAxis Set YAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # One : boolean2 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Boolean2 # XAxis : boolean2 read-only static ``` lang=cpp, name=Lightning var XAxis : Boolean2 # YAxis : boolean2 read-only static ``` lang=cpp, name=Lightning var YAxis : Boolean2 # Zero : boolean2 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Boolean2 # Methods # Boolean2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean2() ``` # Boolean2 : Void constructor Name Type Description scalar boolean ``` lang=cpp, name=Lightning function Boolean2(scalar : Boolean) ``` # Boolean2 : Void constructor Name Type Description p0 boolean p1 boolean ``` lang=cpp, name=Lightning function Boolean2(p0 : Boolean, p1 : Boolean) ``` # Boolean2 : Void constructor Name Type Description p0 boolean2 ``` lang=cpp, name=Lightning function Boolean2(p0 : Boolean2) ``` # Get : boolean Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Boolean ``` # GetAxis : boolean2 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Boolean2 # Set : Void Name Type Description p0 integer p1 boolean ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Boolean) ```","title":"Boolean2"},{"location":"reference/lightning_base_types/boolean2x2/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M10 M11 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # Methods # Boolean2x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean2x2() ``` # Boolean2x2 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean2x2(p0 : Boolean) ``` # Boolean2x2 : Void constructor Name Type Description m00 boolean m01 boolean m10 boolean m11 boolean ``` lang=cpp, name=Lightning function Boolean2x2(m00 : Boolean, m01 : Boolean, m10 : Boolean, m11 : Boolean) ``` # Get : boolean2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean2 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean2) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean2x2"},{"location":"reference/lightning_base_types/boolean2x3/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M10 M11 M12 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M02 : boolean ``` lang=cpp, name=Lightning var M02 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M12 : boolean ``` lang=cpp, name=Lightning var M12 : Boolean # Methods # Boolean2x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean2x3() ``` # Boolean2x3 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean2x3(p0 : Boolean) ``` # Boolean2x3 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m10 boolean m11 boolean m12 boolean ``` lang=cpp, name=Lightning function Boolean2x3(m00 : Boolean, m01 : Boolean, m02 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean) ``` # Get : boolean3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean3 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean3) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean2x3"},{"location":"reference/lightning_base_types/boolean2x4/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M02 : boolean ``` lang=cpp, name=Lightning var M02 : Boolean # M03 : boolean ``` lang=cpp, name=Lightning var M03 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M12 : boolean ``` lang=cpp, name=Lightning var M12 : Boolean # M13 : boolean ``` lang=cpp, name=Lightning var M13 : Boolean # Methods # Boolean2x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean2x4() ``` # Boolean2x4 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean2x4(p0 : Boolean) ``` # Boolean2x4 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m03 boolean m10 boolean m11 boolean m12 boolean m13 boolean ``` lang=cpp, name=Lightning function Boolean2x4(m00 : Boolean, m01 : Boolean, m02 : Boolean, m03 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m13 : Boolean) ``` # Get : boolean4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean4 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean4) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean2x4"},{"location":"reference/lightning_base_types/boolean3/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis XAxis Set YAxis ZAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # One : boolean3 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Boolean3 # XAxis : boolean3 read-only static ``` lang=cpp, name=Lightning var XAxis : Boolean3 # YAxis : boolean3 read-only static ``` lang=cpp, name=Lightning var YAxis : Boolean3 # ZAxis : boolean3 read-only static ``` lang=cpp, name=Lightning var ZAxis : Boolean3 # Zero : boolean3 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Boolean3 # Methods # Boolean3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean3() ``` # Boolean3 : Void constructor Name Type Description scalar boolean ``` lang=cpp, name=Lightning function Boolean3(scalar : Boolean) ``` # Boolean3 : Void constructor Name Type Description p0 boolean p1 boolean p2 boolean ``` lang=cpp, name=Lightning function Boolean3(p0 : Boolean, p1 : Boolean, p2 : Boolean) ``` # Boolean3 : Void constructor Name Type Description p0 boolean p1 boolean2 ``` lang=cpp, name=Lightning function Boolean3(p0 : Boolean, p1 : Boolean2) ``` # Boolean3 : Void constructor Name Type Description p0 boolean2 p1 boolean ``` lang=cpp, name=Lightning function Boolean3(p0 : Boolean2, p1 : Boolean) ``` # Get : boolean Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Boolean ``` # GetAxis : boolean3 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Boolean3 # Set : Void Name Type Description p0 integer p1 boolean ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Boolean) ```","title":"Boolean3"},{"location":"reference/lightning_base_types/boolean3x2/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M10 M11 M20 M21 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M20 : boolean ``` lang=cpp, name=Lightning var M20 : Boolean # M21 : boolean ``` lang=cpp, name=Lightning var M21 : Boolean # Methods # Boolean3x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean3x2() ``` # Boolean3x2 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean3x2(p0 : Boolean) ``` # Boolean3x2 : Void constructor Name Type Description m00 boolean m01 boolean m10 boolean m11 boolean m20 boolean m21 boolean ``` lang=cpp, name=Lightning function Boolean3x2(m00 : Boolean, m01 : Boolean, m10 : Boolean, m11 : Boolean, m20 : Boolean, m21 : Boolean) ``` # Get : boolean2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean2 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean2) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean3x2"},{"location":"reference/lightning_base_types/boolean3x3/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M02 : boolean ``` lang=cpp, name=Lightning var M02 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M12 : boolean ``` lang=cpp, name=Lightning var M12 : Boolean # M20 : boolean ``` lang=cpp, name=Lightning var M20 : Boolean # M21 : boolean ``` lang=cpp, name=Lightning var M21 : Boolean # M22 : boolean ``` lang=cpp, name=Lightning var M22 : Boolean # Methods # Boolean3x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean3x3() ``` # Boolean3x3 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean3x3(p0 : Boolean) ``` # Boolean3x3 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m10 boolean m11 boolean m12 boolean m20 boolean m21 boolean m22 boolean ``` lang=cpp, name=Lightning function Boolean3x3(m00 : Boolean, m01 : Boolean, m02 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean) ``` # Get : boolean3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean3 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean3) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean3x3"},{"location":"reference/lightning_base_types/boolean3x4/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M02 : boolean ``` lang=cpp, name=Lightning var M02 : Boolean # M03 : boolean ``` lang=cpp, name=Lightning var M03 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M12 : boolean ``` lang=cpp, name=Lightning var M12 : Boolean # M13 : boolean ``` lang=cpp, name=Lightning var M13 : Boolean # M20 : boolean ``` lang=cpp, name=Lightning var M20 : Boolean # M21 : boolean ``` lang=cpp, name=Lightning var M21 : Boolean # M22 : boolean ``` lang=cpp, name=Lightning var M22 : Boolean # M23 : boolean ``` lang=cpp, name=Lightning var M23 : Boolean # Methods # Boolean3x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean3x4() ``` # Boolean3x4 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean3x4(p0 : Boolean) ``` # Boolean3x4 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m03 boolean m10 boolean m11 boolean m12 boolean m13 boolean m20 boolean m21 boolean m22 boolean m23 boolean ``` lang=cpp, name=Lightning function Boolean3x4(m00 : Boolean, m01 : Boolean, m02 : Boolean, m03 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m13 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean, m23 : Boolean) ``` # Get : boolean4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean4 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean4) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean3x4"},{"location":"reference/lightning_base_types/boolean4/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis WAxis Set XAxis YAxis ZAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # One : boolean4 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Boolean4 # WAxis : boolean4 read-only static ``` lang=cpp, name=Lightning var WAxis : Boolean4 # XAxis : boolean4 read-only static ``` lang=cpp, name=Lightning var XAxis : Boolean4 # YAxis : boolean4 read-only static ``` lang=cpp, name=Lightning var YAxis : Boolean4 # ZAxis : boolean4 read-only static ``` lang=cpp, name=Lightning var ZAxis : Boolean4 # Zero : boolean4 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Boolean4 # Methods # Boolean4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean4() ``` # Boolean4 : Void constructor Name Type Description scalar boolean ``` lang=cpp, name=Lightning function Boolean4(scalar : Boolean) ``` # Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean p2 boolean p3 boolean ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean, p1 : Boolean, p2 : Boolean, p3 : Boolean) ``` # Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean p2 boolean2 ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean, p1 : Boolean, p2 : Boolean2) ``` # Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean2 p2 boolean ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean, p1 : Boolean2, p2 : Boolean) ``` # Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean3 ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean, p1 : Boolean3) ``` # Boolean4 : Void constructor Name Type Description p0 boolean2 p1 boolean p2 boolean ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean2, p1 : Boolean, p2 : Boolean) ``` # Boolean4 : Void constructor Name Type Description p0 boolean2 p1 boolean2 ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean2, p1 : Boolean2) ``` # Boolean4 : Void constructor Name Type Description p0 boolean3 p1 boolean ``` lang=cpp, name=Lightning function Boolean4(p0 : Boolean3, p1 : Boolean) ``` # Get : boolean Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Boolean ``` # GetAxis : boolean4 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Boolean4 # Set : Void Name Type Description p0 integer p1 boolean ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Boolean) ```","title":"Boolean4"},{"location":"reference/lightning_base_types/boolean4x2/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M10 M11 M20 M21 M30 M31 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M20 : boolean ``` lang=cpp, name=Lightning var M20 : Boolean # M21 : boolean ``` lang=cpp, name=Lightning var M21 : Boolean # M30 : boolean ``` lang=cpp, name=Lightning var M30 : Boolean # M31 : boolean ``` lang=cpp, name=Lightning var M31 : Boolean # Methods # Boolean4x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean4x2() ``` # Boolean4x2 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean4x2(p0 : Boolean) ``` # Boolean4x2 : Void constructor Name Type Description m00 boolean m01 boolean m10 boolean m11 boolean m20 boolean m21 boolean m30 boolean m31 boolean ``` lang=cpp, name=Lightning function Boolean4x2(m00 : Boolean, m01 : Boolean, m10 : Boolean, m11 : Boolean, m20 : Boolean, m21 : Boolean, m30 : Boolean, m31 : Boolean) ``` # Get : boolean2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean2 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean2) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean4x2"},{"location":"reference/lightning_base_types/boolean4x3/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 M30 M31 M32 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M02 : boolean ``` lang=cpp, name=Lightning var M02 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M12 : boolean ``` lang=cpp, name=Lightning var M12 : Boolean # M20 : boolean ``` lang=cpp, name=Lightning var M20 : Boolean # M21 : boolean ``` lang=cpp, name=Lightning var M21 : Boolean # M22 : boolean ``` lang=cpp, name=Lightning var M22 : Boolean # M30 : boolean ``` lang=cpp, name=Lightning var M30 : Boolean # M31 : boolean ``` lang=cpp, name=Lightning var M31 : Boolean # M32 : boolean ``` lang=cpp, name=Lightning var M32 : Boolean # Methods # Boolean4x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean4x3() ``` # Boolean4x3 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean4x3(p0 : Boolean) ``` # Boolean4x3 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m10 boolean m11 boolean m12 boolean m20 boolean m21 boolean m22 boolean m30 boolean m31 boolean m32 boolean ``` lang=cpp, name=Lightning function Boolean4x3(m00 : Boolean, m01 : Boolean, m02 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean, m30 : Boolean, m31 : Boolean, m32 : Boolean) ``` # Get : boolean3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean3 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean3) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean4x3"},{"location":"reference/lightning_base_types/boolean4x4/","text":"Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 M30 M31 M32 M33 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : boolean ``` lang=cpp, name=Lightning var M00 : Boolean # M01 : boolean ``` lang=cpp, name=Lightning var M01 : Boolean # M02 : boolean ``` lang=cpp, name=Lightning var M02 : Boolean # M03 : boolean ``` lang=cpp, name=Lightning var M03 : Boolean # M10 : boolean ``` lang=cpp, name=Lightning var M10 : Boolean # M11 : boolean ``` lang=cpp, name=Lightning var M11 : Boolean # M12 : boolean ``` lang=cpp, name=Lightning var M12 : Boolean # M13 : boolean ``` lang=cpp, name=Lightning var M13 : Boolean # M20 : boolean ``` lang=cpp, name=Lightning var M20 : Boolean # M21 : boolean ``` lang=cpp, name=Lightning var M21 : Boolean # M22 : boolean ``` lang=cpp, name=Lightning var M22 : Boolean # M23 : boolean ``` lang=cpp, name=Lightning var M23 : Boolean # M30 : boolean ``` lang=cpp, name=Lightning var M30 : Boolean # M31 : boolean ``` lang=cpp, name=Lightning var M31 : Boolean # M32 : boolean ``` lang=cpp, name=Lightning var M32 : Boolean # M33 : boolean ``` lang=cpp, name=Lightning var M33 : Boolean # Methods # Boolean4x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Boolean4x4() ``` # Boolean4x4 : Void constructor Name Type Description p0 boolean ``` lang=cpp, name=Lightning function Boolean4x4(p0 : Boolean) ``` # Boolean4x4 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m03 boolean m10 boolean m11 boolean m12 boolean m13 boolean m20 boolean m21 boolean m22 boolean m23 boolean m30 boolean m31 boolean m32 boolean m33 boolean ``` lang=cpp, name=Lightning function Boolean4x4(m00 : Boolean, m01 : Boolean, m02 : Boolean, m03 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m13 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean, m23 : Boolean, m30 : Boolean, m31 : Boolean, m32 : Boolean, m33 : Boolean) ``` # Get : boolean4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Boolean4 ``` # Get : boolean Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Boolean ``` # GetByIndex : boolean Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Boolean ``` # Set : Void Name Type Description y integer value boolean4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Boolean4) ``` # Set : Void Name Type Description y integer x integer value boolean ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Boolean) ``` # SetByIndex : Void Name Type Description index integer value boolean ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Boolean) ```","title":"Boolean4x4"},{"location":"reference/lightning_base_types/boundtype/","text":"Core Methods Properties Base Classes Derived Classes GetConstructor BaseType type GetField DefaultConstructor GetFunction Destructor GetGetterSetter Fields GetMember Functions GetProperty GetterSetters InstantiatePreConstructedObject IsNative IsTypeOrBaseNative Members PreConstructor Properties TemplateBaseName # Properties # BaseType : boundtype read-only ``` lang=cpp, name=Lightning var BaseType : BoundType # DefaultConstructor : function read-only ``` lang=cpp, name=Lightning var DefaultConstructor : Function # Destructor : function read-only ``` lang=cpp, name=Lightning var Destructor : Function # Fields : fieldrange read-only ``` lang=cpp, name=Lightning var Fields : FieldRange # Functions : functionrange read-only ``` lang=cpp, name=Lightning var Functions : FunctionRange # GetterSetters : gettersetterrange read-only ``` lang=cpp, name=Lightning var GetterSetters : GetterSetterRange # IsNative : boolean read-only ``` lang=cpp, name=Lightning var IsNative : Boolean # IsTypeOrBaseNative : boolean read-only ``` lang=cpp, name=Lightning var IsTypeOrBaseNative : Boolean # Members : memberrange read-only ``` lang=cpp, name=Lightning var Members : MemberRange # PreConstructor : function read-only ``` lang=cpp, name=Lightning var PreConstructor : Function # Properties : propertyrange read-only ``` lang=cpp, name=Lightning var Properties : PropertyRange # TemplateBaseName : string read-only ``` lang=cpp, name=Lightning var TemplateBaseName : String # Methods # GetConstructor : function Name Type Description signatureType delegatetype inherited boolean ``` lang=cpp, name=Lightning function GetConstructor(signatureType : DelegateType, inherited : Boolean) : Function ``` # GetField : field Name Type Description name string ``` lang=cpp, name=Lightning function GetField(name : String) : Field ``` # GetField : field Name Type Description name string options Members ``` lang=cpp, name=Lightning function GetField(name : String, options : Members) : Field ``` # GetField : field Name Type Description name string declaredType type options Members ``` lang=cpp, name=Lightning function GetField(name : String, declaredType : Type, options : Members) : Field ``` # GetFunction : function Name Type Description name string ``` lang=cpp, name=Lightning function GetFunction(name : String) : Function ``` # GetFunction : function Name Type Description name string signatureType delegatetype options Members ``` lang=cpp, name=Lightning function GetFunction(name : String, signatureType : DelegateType, options : Members) : Function ``` # GetFunction : function Name Type Description name string options Members ``` lang=cpp, name=Lightning function GetFunction(name : String, options : Members) : Function ``` # GetGetterSetter : gettersetter Name Type Description name string ``` lang=cpp, name=Lightning function GetGetterSetter(name : String) : GetterSetter ``` # GetGetterSetter : gettersetter Name Type Description name string options Members ``` lang=cpp, name=Lightning function GetGetterSetter(name : String, options : Members) : GetterSetter ``` # GetGetterSetter : gettersetter Name Type Description name string declaredType type options Members ``` lang=cpp, name=Lightning function GetGetterSetter(name : String, declaredType : Type, options : Members) : GetterSetter ``` # GetMember : member Name Type Description name string ``` lang=cpp, name=Lightning function GetMember(name : String) : Member ``` # GetMember : member Name Type Description name string options Members ``` lang=cpp, name=Lightning function GetMember(name : String, options : Members) : Member ``` # GetMember : member Name Type Description name string declaredType type options Members ``` lang=cpp, name=Lightning function GetMember(name : String, declaredType : Type, options : Members) : Member ``` # GetProperty : Property Name Type Description name string ``` lang=cpp, name=Lightning function GetProperty(name : String) : Property ``` # GetProperty : Property Name Type Description name string options Members ``` lang=cpp, name=Lightning function GetProperty(name : String, options : Members) : Property ``` # GetProperty : Property Name Type Description name string declaredType type options Members ``` lang=cpp, name=Lightning function GetProperty(name : String, declaredType : Type, options : Members) : Property ``` # InstantiatePreConstructedObject : T Name Type Description ``` lang=cpp, name=Lightning function InstantiatePreConstructedObject() : T ```","title":"Boundtype"},{"location":"reference/lightning_base_types/buildevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Buildevent"},{"location":"reference/lightning_base_types/byte/","text":"Core Methods Properties Base Classes Derived Classes Parse PositiveMax PositiveValueClosestToZero # Properties # PositiveMax : byte read-only static The largest (most positive) value that can be represented by a Byte. ``` lang=cpp, name=Lightning var PositiveMax : Byte # PositiveValueClosestToZero : byte read-only static The positive value closest to zero that can be represented by a Byte. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Byte # Methods # Parse : byte static Attempt to convert the given StringRange to a Byte. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Parse(p0 : StringRange) : Byte","title":"Byte"},{"location":"reference/lightning_base_types/color/","text":"Core Methods Properties Base Classes Derived Classes FromBytes FromHexString FromHsva FromInteger ToBytes ToHexString ToHsva ToInteger # Properties # Methods # FromBytes : real4 static Converts RGB Bytes [0-255] into an RGBA Real4 (alpha defaults to 1.0). Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r| integer | | |g| integer | | |b| integer | | lang=cpp, name=Lightning function FromBytes(r : Integer, g : Integer, b : Integer) : Real4 # FromBytes : real4 static Converts RGBA Bytes [0-255] into an RGBA Real4. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r| integer | | |g| integer | | |b| integer | | |a| integer | | lang=cpp, name=Lightning function FromBytes(r : Integer, g : Integer, b : Integer, a : Integer) : Real4 # FromBytes : real4 static Converts RGBA Bytes [0-255] into an RGBA Real4. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |rgba| integer4 | | lang=cpp, name=Lightning function FromBytes(rgba : Integer4) : Real4 # FromHexString : real4 static Converts a hex String into an RGBA Real4. Must be a 3, 4, 6, or 8 digit RGB[A] representation with an optional preceding '#' or '0x' (case insensitive). E.g. #f00, #F00F, ff0000, 0x00FF00FF. |Name|Type|Description| |---|---|---| |value| string | | lang=cpp, name=Lightning function FromHexString(value : String) : Real4 # FromHsva : real4 static Converts HSV Reals into an RGBA Real4 (alpha defaults to 1.0). The hue parameter will wrap if is beyond [0-1]. The saturation and value parameters may go beyond [0-1] to represent HDR values. |Name|Type|Description| |---|---|---| |h| real | | |s| real | | |v| real | | lang=cpp, name=Lightning function FromHsva(h : Real, s : Real, v : Real) : Real4 # FromHsva : real4 static Converts HSVA Reals into an RGBA Real4. The hue parameter will wrap if is beyond [0-1]. The saturation and value parameters may go beyond [0-1] to represent HDR values. |Name|Type|Description| |---|---|---| |h| real | | |s| real | | |v| real | | |a| real | | lang=cpp, name=Lightning function FromHsva(h : Real, s : Real, v : Real, a : Real) : Real4 # FromHsva : real4 static Converts an HSVA Real4 into an RGBA Real4. The hue parameter will wrap if is beyond [0-1]. The saturation and value parameters may go beyond [0-1] to represent HDR values. |Name|Type|Description| |---|---|---| |hsva| real4 | | lang=cpp, name=Lightning function FromHsva(hsva : Real4) : Real4 # FromInteger : real4 static Converts an RGBA packed Integer into an RGBA Real4. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgba| integer | | lang=cpp, name=Lightning function FromInteger(rgba : Integer) : Real4 # FromInteger : real4 static Converts an RGB packed Integer and an alpha Byte [0-255] into an RGBA Real4. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgb| integer | | |a| integer | | lang=cpp, name=Lightning function FromInteger(rgb : Integer, a : Integer) : Real4 # FromInteger : real4 static Converts an RGB packed Integer and an alpha Real into an RGBA Real4. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgb| integer | | |a| real | | lang=cpp, name=Lightning function FromInteger(rgb : Integer, a : Real) : Real4 # ToBytes : integer4 static Converts RGB Reals into an RGBA Integer4 [0-255] (alpha defaults to 255). Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | lang=cpp, name=Lightning function ToBytes(r : Real, g : Real, b : Real) : Integer4 # ToBytes : integer4 static Converts RGBA Reals into an RGBA Integer4 [0-255]. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | |a| real | | lang=cpp, name=Lightning function ToBytes(r : Real, g : Real, b : Real, a : Real) : Integer4 # ToBytes : integer4 static Converts an RGBA Real4 into an RGBA Integer4 [0-255]. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |rgba| real4 | | lang=cpp, name=Lightning function ToBytes(rgba : Real4) : Integer4 # ToHexString : string static Converts RGB Reals into the 8 digit hex format RRGGBBAA (alpha defaults to 1.0 so the end will always be FF). |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | lang=cpp, name=Lightning function ToHexString(r : Real, g : Real, b : Real) : String # ToHexString : string static Converts RGBA Reals into the 8 digit hex format RRGGBBAA. |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | |a| real | | lang=cpp, name=Lightning function ToHexString(r : Real, g : Real, b : Real, a : Real) : String # ToHexString : string static Converts an RGBA Real4 into the 8 digit hex format RRGGBBAA. |Name|Type|Description| |---|---|---| |rgba| real4 | | lang=cpp, name=Lightning function ToHexString(rgba : Real4) : String # ToHsva : real4 static Converts RGB Reals into an HSVA Real4 (alpha defaults to 1.0). |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | lang=cpp, name=Lightning function ToHsva(r : Real, g : Real, b : Real) : Real4 # ToHsva : real4 static Converts RGBA Reals into an HSVA Real4. |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | |a| real | | lang=cpp, name=Lightning function ToHsva(r : Real, g : Real, b : Real, a : Real) : Real4 # ToHsva : real4 static Converts an RGBA Real4 into an HSVA Real4. |Name|Type|Description| |---|---|---| |rgba| real4 | | lang=cpp, name=Lightning function ToHsva(rgba : Real4) : Real4 # ToInteger : integer static Converts RGB Reals into an RGBA packed Integer (alpha defaults to 255). Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | lang=cpp, name=Lightning function ToInteger(r : Real, g : Real, b : Real) : Integer # ToInteger : integer static Converts RGBA Reals into an RGBA packed Integer. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |r| real | | |g| real | | |b| real | | |a| real | | lang=cpp, name=Lightning function ToInteger(r : Real, g : Real, b : Real, a : Real) : Integer # ToInteger : integer static Converts an RGBA Real4 into an RGBA packed Integer. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgba| real4 | | lang=cpp, name=Lightning function ToInteger(rgba : Real4) : Integer","title":"Color"},{"location":"reference/lightning_base_types/colors/","text":"Core Methods Properties Base Classes Derived Classes AliceBlue AntiqueWhite Aqua Aquamarine Azure Beige Bisque Black BlanchedAlmond Blue BlueViolet Brown Burlywood CadetBlue Chartreuse Chocolate Clear Coral Cornflower Cornsilk Crimson Cyan DarkGoldenrod DarkGray DarkKhaki DarkMagenta DarkOliveGreen DarkOrange DarkOrchid DarkSalmon DarkSeaGreen DarkSlateBlue DarkSlateGray DarkTurquoise DarkViolet DeepGreen DeepPink DeepSkyBlue DimGray DodgerBlue Firebrick FloralWhite ForestGreen Fuchsia Gainsboro GhostWhite Gold Goldenrod Gray Green GreenYellow Honeydew HotPink IndianRed Indigo Ivory Khaki Lavender LavenderBlush LawnGreen LemonChiffon LightBlue LightCoral LightCyan LightGoldenrod LightGray LightGreen LightPink LightSalmon LightSeaGreen LightSkyBlue LightSlateGray LightSteelBlue LightYellow Lime LimeGreen Linen Magenta Maroon MediumAquamarine MediumBlue MediumOrchid MediumPurple MediumSeaGreen MediumSlateBlue MediumSpringGreen MediumTurquoise MediumVioletRed MidnightBlue MintCream MistyRose Moccasin NavajoWhite Navy OldLace Olive OliveDrab Orange OrangeRed Orchid PaleGoldenrod PaleGreen PaleTurquoise PaleVioletRed PapayaWhip PeachPuff Peru Pink Plum PowderBlue Purple RebeccaPurple Red RosyBrown RoyalBlue SaddleBrown Salmon SandyBrown SeaGreen Seashell Sienna Silver SkyBlue SlateBlue SlateGray Snow SpringGreen SteelBlue Tan Teal Thistle Tomato Turquoise Violet Wheat White WhiteSmoke Yellow YellowGreen # Properties # AliceBlue : real4 read-only static RGBA color of Real4(0.941176, 0.972549, 1, 1) or hex 0xF0F8FFFF ``` lang=cpp, name=Lightning var AliceBlue : Real4 # AntiqueWhite : real4 read-only static RGBA color of Real4(0.980392, 0.921569, 0.843137, 1) or hex 0xFAEBD7FF ``` lang=cpp, name=Lightning var AntiqueWhite : Real4 # Aqua : real4 read-only static RGBA color of Real4(0, 1, 1, 1) or hex 0x00FFFFFF ``` lang=cpp, name=Lightning var Aqua : Real4 # Aquamarine : real4 read-only static RGBA color of Real4(0.498039, 1, 0.831373, 1) or hex 0x7FFFD4FF ``` lang=cpp, name=Lightning var Aquamarine : Real4 # Azure : real4 read-only static RGBA color of Real4(0.941176, 1, 1, 1) or hex 0xF0FFFFFF ``` lang=cpp, name=Lightning var Azure : Real4 # Beige : real4 read-only static RGBA color of Real4(0.960784, 0.960784, 0.862745, 1) or hex 0xF5F5DCFF ``` lang=cpp, name=Lightning var Beige : Real4 # Bisque : real4 read-only static RGBA color of Real4(1, 0.894118, 0.768627, 1) or hex 0xFFE4C4FF ``` lang=cpp, name=Lightning var Bisque : Real4 # Black : real4 read-only static RGBA color of Real4(0, 0, 0, 1) or hex 0x000000FF ``` lang=cpp, name=Lightning var Black : Real4 # BlanchedAlmond : real4 read-only static RGBA color of Real4(1, 0.921569, 0.803922, 1) or hex 0xFFEBCDFF ``` lang=cpp, name=Lightning var BlanchedAlmond : Real4 # Blue : real4 read-only static RGBA color of Real4(0, 0, 1, 1) or hex 0x0000FFFF ``` lang=cpp, name=Lightning var Blue : Real4 # BlueViolet : real4 read-only static RGBA color of Real4(0.541176, 0.168627, 0.886275, 1) or hex 0x8A2BE2FF ``` lang=cpp, name=Lightning var BlueViolet : Real4 # Brown : real4 read-only static RGBA color of Real4(0.647059, 0.164706, 0.164706, 1) or hex 0xA52A2AFF ``` lang=cpp, name=Lightning var Brown : Real4 # Burlywood : real4 read-only static RGBA color of Real4(0.870588, 0.721569, 0.529412, 1) or hex 0xDEB887FF ``` lang=cpp, name=Lightning var Burlywood : Real4 # CadetBlue : real4 read-only static RGBA color of Real4(0.372549, 0.619608, 0.627451, 1) or hex 0x5F9EA0FF ``` lang=cpp, name=Lightning var CadetBlue : Real4 # Chartreuse : real4 read-only static RGBA color of Real4(0.498039, 1, 0, 1) or hex 0x7FFF00FF ``` lang=cpp, name=Lightning var Chartreuse : Real4 # Chocolate : real4 read-only static RGBA color of Real4(0.823529, 0.411765, 0.117647, 1) or hex 0xD2691EFF ``` lang=cpp, name=Lightning var Chocolate : Real4 # Clear : real4 read-only static RGBA color of Real4(1, 1, 1, 0) or hex 0xFFFFFF00 ``` lang=cpp, name=Lightning var Clear : Real4 # Coral : real4 read-only static RGBA color of Real4(1, 0.498039, 0.313726, 1) or hex 0xFF7F50FF ``` lang=cpp, name=Lightning var Coral : Real4 # Cornflower : real4 read-only static RGBA color of Real4(0.392157, 0.584314, 0.929412, 1) or hex 0x6495EDFF ``` lang=cpp, name=Lightning var Cornflower : Real4 # Cornsilk : real4 read-only static RGBA color of Real4(1, 0.972549, 0.862745, 1) or hex 0xFFF8DCFF ``` lang=cpp, name=Lightning var Cornsilk : Real4 # Crimson : real4 read-only static RGBA color of Real4(0.862745, 0.0784314, 0.235294, 1) or hex 0xDC143CFF ``` lang=cpp, name=Lightning var Crimson : Real4 # Cyan : real4 read-only static RGBA color of Real4(0, 1, 1, 1) or hex 0x00FFFFFF ``` lang=cpp, name=Lightning var Cyan : Real4 # DarkGoldenrod : real4 read-only static RGBA color of Real4(0.721569, 0.52549, 0.0431373, 1) or hex 0xB8860BFF ``` lang=cpp, name=Lightning var DarkGoldenrod : Real4 # DarkGray : real4 read-only static RGBA color of Real4(0.662745, 0.662745, 0.662745, 1) or hex 0xA9A9A9FF ``` lang=cpp, name=Lightning var DarkGray : Real4 # DarkKhaki : real4 read-only static RGBA color of Real4(0.741176, 0.717647, 0.419608, 1) or hex 0xBDB76BFF ``` lang=cpp, name=Lightning var DarkKhaki : Real4 # DarkMagenta : real4 read-only static RGBA color of Real4(0.545098, 0, 0.545098, 1) or hex 0x8B008BFF ``` lang=cpp, name=Lightning var DarkMagenta : Real4 # DarkOliveGreen : real4 read-only static RGBA color of Real4(0.333333, 0.419608, 0.184314, 1) or hex 0x556B2FFF ``` lang=cpp, name=Lightning var DarkOliveGreen : Real4 # DarkOrange : real4 read-only static RGBA color of Real4(1, 0.54902, 0, 1) or hex 0xFF8C00FF ``` lang=cpp, name=Lightning var DarkOrange : Real4 # DarkOrchid : real4 read-only static RGBA color of Real4(0.6, 0.196078, 0.8, 1) or hex 0x9932CCFF ``` lang=cpp, name=Lightning var DarkOrchid : Real4 # DarkSalmon : real4 read-only static RGBA color of Real4(0.913725, 0.588235, 0.478431, 1) or hex 0xE9967AFF ``` lang=cpp, name=Lightning var DarkSalmon : Real4 # DarkSeaGreen : real4 read-only static RGBA color of Real4(0.560784, 0.737255, 0.560784, 1) or hex 0x8FBC8FFF ``` lang=cpp, name=Lightning var DarkSeaGreen : Real4 # DarkSlateBlue : real4 read-only static RGBA color of Real4(0.282353, 0.239216, 0.545098, 1) or hex 0x483D8BFF ``` lang=cpp, name=Lightning var DarkSlateBlue : Real4 # DarkSlateGray : real4 read-only static RGBA color of Real4(0.184314, 0.309804, 0.309804, 1) or hex 0x2F4F4FFF ``` lang=cpp, name=Lightning var DarkSlateGray : Real4 # DarkTurquoise : real4 read-only static RGBA color of Real4(0, 0.807843, 0.819608, 1) or hex 0x00CED1FF ``` lang=cpp, name=Lightning var DarkTurquoise : Real4 # DarkViolet : real4 read-only static RGBA color of Real4(0.580392, 0, 0.827451, 1) or hex 0x9400D3FF ``` lang=cpp, name=Lightning var DarkViolet : Real4 # DeepGreen : real4 read-only static RGBA color of Real4(0, 0.498039, 0, 1) or hex 0x007F00FF ``` lang=cpp, name=Lightning var DeepGreen : Real4 # DeepPink : real4 read-only static RGBA color of Real4(1, 0.0784314, 0.576471, 1) or hex 0xFF1493FF ``` lang=cpp, name=Lightning var DeepPink : Real4 # DeepSkyBlue : real4 read-only static RGBA color of Real4(0, 0.74902, 1, 1) or hex 0x00BFFFFF ``` lang=cpp, name=Lightning var DeepSkyBlue : Real4 # DimGray : real4 read-only static RGBA color of Real4(0.411765, 0.411765, 0.411765, 1) or hex 0x696969FF ``` lang=cpp, name=Lightning var DimGray : Real4 # DodgerBlue : real4 read-only static RGBA color of Real4(0.117647, 0.564706, 1, 1) or hex 0x1E90FFFF ``` lang=cpp, name=Lightning var DodgerBlue : Real4 # Firebrick : real4 read-only static RGBA color of Real4(0.698039, 0.133333, 0.133333, 1) or hex 0xB22222FF ``` lang=cpp, name=Lightning var Firebrick : Real4 # FloralWhite : real4 read-only static RGBA color of Real4(1, 0.980392, 0.941176, 1) or hex 0xFFFAF0FF ``` lang=cpp, name=Lightning var FloralWhite : Real4 # ForestGreen : real4 read-only static RGBA color of Real4(0.133333, 0.545098, 0.133333, 1) or hex 0x228B22FF ``` lang=cpp, name=Lightning var ForestGreen : Real4 # Fuchsia : real4 read-only static RGBA color of Real4(1, 0, 1, 1) or hex 0xFF00FFFF ``` lang=cpp, name=Lightning var Fuchsia : Real4 # Gainsboro : real4 read-only static RGBA color of Real4(0.862745, 0.862745, 0.862745, 1) or hex 0xDCDCDCFF ``` lang=cpp, name=Lightning var Gainsboro : Real4 # GhostWhite : real4 read-only static RGBA color of Real4(0.972549, 0.972549, 1, 1) or hex 0xF8F8FFFF ``` lang=cpp, name=Lightning var GhostWhite : Real4 # Gold : real4 read-only static RGBA color of Real4(1, 0.843137, 0, 1) or hex 0xFFD700FF ``` lang=cpp, name=Lightning var Gold : Real4 # Goldenrod : real4 read-only static RGBA color of Real4(0.854902, 0.647059, 0.12549, 1) or hex 0xDAA520FF ``` lang=cpp, name=Lightning var Goldenrod : Real4 # Gray : real4 read-only static RGBA color of Real4(0.498039, 0.498039, 0.498039, 1) or hex 0x7F7F7FFF ``` lang=cpp, name=Lightning var Gray : Real4 # Green : real4 read-only static RGBA color of Real4(0, 1, 0, 1) or hex 0x00FF00FF ``` lang=cpp, name=Lightning var Green : Real4 # GreenYellow : real4 read-only static RGBA color of Real4(0.678431, 1, 0.184314, 1) or hex 0xADFF2FFF ``` lang=cpp, name=Lightning var GreenYellow : Real4 # Honeydew : real4 read-only static RGBA color of Real4(0.941176, 1, 0.941176, 1) or hex 0xF0FFF0FF ``` lang=cpp, name=Lightning var Honeydew : Real4 # HotPink : real4 read-only static RGBA color of Real4(1, 0.411765, 0.705882, 1) or hex 0xFF69B4FF ``` lang=cpp, name=Lightning var HotPink : Real4 # IndianRed : real4 read-only static RGBA color of Real4(0.803922, 0.360784, 0.360784, 1) or hex 0xCD5C5CFF ``` lang=cpp, name=Lightning var IndianRed : Real4 # Indigo : real4 read-only static RGBA color of Real4(0.294118, 0, 0.509804, 1) or hex 0x4B0082FF ``` lang=cpp, name=Lightning var Indigo : Real4 # Ivory : real4 read-only static RGBA color of Real4(1, 1, 0.941176, 1) or hex 0xFFFFF0FF ``` lang=cpp, name=Lightning var Ivory : Real4 # Khaki : real4 read-only static RGBA color of Real4(0.941176, 0.901961, 0.54902, 1) or hex 0xF0E68CFF ``` lang=cpp, name=Lightning var Khaki : Real4 # Lavender : real4 read-only static RGBA color of Real4(0.901961, 0.901961, 0.980392, 1) or hex 0xE6E6FAFF ``` lang=cpp, name=Lightning var Lavender : Real4 # LavenderBlush : real4 read-only static RGBA color of Real4(1, 0.941176, 0.960784, 1) or hex 0xFFF0F5FF ``` lang=cpp, name=Lightning var LavenderBlush : Real4 # LawnGreen : real4 read-only static RGBA color of Real4(0.486275, 0.988235, 0, 1) or hex 0x7CFC00FF ``` lang=cpp, name=Lightning var LawnGreen : Real4 # LemonChiffon : real4 read-only static RGBA color of Real4(1, 0.980392, 0.803922, 1) or hex 0xFFFACDFF ``` lang=cpp, name=Lightning var LemonChiffon : Real4 # LightBlue : real4 read-only static RGBA color of Real4(0.678431, 0.847059, 0.901961, 1) or hex 0xADD8E6FF ``` lang=cpp, name=Lightning var LightBlue : Real4 # LightCoral : real4 read-only static RGBA color of Real4(0.941176, 0.501961, 0.501961, 1) or hex 0xF08080FF ``` lang=cpp, name=Lightning var LightCoral : Real4 # LightCyan : real4 read-only static RGBA color of Real4(0.878431, 1, 1, 1) or hex 0xE0FFFFFF ``` lang=cpp, name=Lightning var LightCyan : Real4 # LightGoldenrod : real4 read-only static RGBA color of Real4(0.980392, 0.980392, 0.823529, 1) or hex 0xFAFAD2FF ``` lang=cpp, name=Lightning var LightGoldenrod : Real4 # LightGray : real4 read-only static RGBA color of Real4(0.827451, 0.827451, 0.827451, 1) or hex 0xD3D3D3FF ``` lang=cpp, name=Lightning var LightGray : Real4 # LightGreen : real4 read-only static RGBA color of Real4(0.564706, 0.933333, 0.564706, 1) or hex 0x90EE90FF ``` lang=cpp, name=Lightning var LightGreen : Real4 # LightPink : real4 read-only static RGBA color of Real4(1, 0.713726, 0.756863, 1) or hex 0xFFB6C1FF ``` lang=cpp, name=Lightning var LightPink : Real4 # LightSalmon : real4 read-only static RGBA color of Real4(1, 0.627451, 0.478431, 1) or hex 0xFFA07AFF ``` lang=cpp, name=Lightning var LightSalmon : Real4 # LightSeaGreen : real4 read-only static RGBA color of Real4(0.12549, 0.698039, 0.666667, 1) or hex 0x20B2AAFF ``` lang=cpp, name=Lightning var LightSeaGreen : Real4 # LightSkyBlue : real4 read-only static RGBA color of Real4(0.529412, 0.807843, 0.980392, 1) or hex 0x87CEFAFF ``` lang=cpp, name=Lightning var LightSkyBlue : Real4 # LightSlateGray : real4 read-only static RGBA color of Real4(0.466667, 0.533333, 0.6, 1) or hex 0x778899FF ``` lang=cpp, name=Lightning var LightSlateGray : Real4 # LightSteelBlue : real4 read-only static RGBA color of Real4(0.690196, 0.768627, 0.870588, 1) or hex 0xB0C4DEFF ``` lang=cpp, name=Lightning var LightSteelBlue : Real4 # LightYellow : real4 read-only static RGBA color of Real4(1, 1, 0.878431, 1) or hex 0xFFFFE0FF ``` lang=cpp, name=Lightning var LightYellow : Real4 # Lime : real4 read-only static RGBA color of Real4(0, 1, 0, 1) or hex 0x00FF00FF ``` lang=cpp, name=Lightning var Lime : Real4 # LimeGreen : real4 read-only static RGBA color of Real4(0.196078, 0.803922, 0.196078, 1) or hex 0x32CD32FF ``` lang=cpp, name=Lightning var LimeGreen : Real4 # Linen : real4 read-only static RGBA color of Real4(0.980392, 0.941176, 0.901961, 1) or hex 0xFAF0E6FF ``` lang=cpp, name=Lightning var Linen : Real4 # Magenta : real4 read-only static RGBA color of Real4(1, 0, 1, 1) or hex 0xFF00FFFF ``` lang=cpp, name=Lightning var Magenta : Real4 # Maroon : real4 read-only static RGBA color of Real4(0.498039, 0, 0, 1) or hex 0x7F0000FF ``` lang=cpp, name=Lightning var Maroon : Real4 # MediumAquamarine : real4 read-only static RGBA color of Real4(0.4, 0.803922, 0.666667, 1) or hex 0x66CDAAFF ``` lang=cpp, name=Lightning var MediumAquamarine : Real4 # MediumBlue : real4 read-only static RGBA color of Real4(0, 0, 0.803922, 1) or hex 0x0000CDFF ``` lang=cpp, name=Lightning var MediumBlue : Real4 # MediumOrchid : real4 read-only static RGBA color of Real4(0.729412, 0.333333, 0.827451, 1) or hex 0xBA55D3FF ``` lang=cpp, name=Lightning var MediumOrchid : Real4 # MediumPurple : real4 read-only static RGBA color of Real4(0.576471, 0.439216, 0.858824, 1) or hex 0x9370DBFF ``` lang=cpp, name=Lightning var MediumPurple : Real4 # MediumSeaGreen : real4 read-only static RGBA color of Real4(0.235294, 0.701961, 0.443137, 1) or hex 0x3CB371FF ``` lang=cpp, name=Lightning var MediumSeaGreen : Real4 # MediumSlateBlue : real4 read-only static RGBA color of Real4(0.482353, 0.407843, 0.933333, 1) or hex 0x7B68EEFF ``` lang=cpp, name=Lightning var MediumSlateBlue : Real4 # MediumSpringGreen : real4 read-only static RGBA color of Real4(0, 0.980392, 0.603922, 1) or hex 0x00FA9AFF ``` lang=cpp, name=Lightning var MediumSpringGreen : Real4 # MediumTurquoise : real4 read-only static RGBA color of Real4(0.282353, 0.819608, 0.8, 1) or hex 0x48D1CCFF ``` lang=cpp, name=Lightning var MediumTurquoise : Real4 # MediumVioletRed : real4 read-only static RGBA color of Real4(0.780392, 0.0823529, 0.521569, 1) or hex 0xC71585FF ``` lang=cpp, name=Lightning var MediumVioletRed : Real4 # MidnightBlue : real4 read-only static RGBA color of Real4(0.0980392, 0.0980392, 0.439216, 1) or hex 0x191970FF ``` lang=cpp, name=Lightning var MidnightBlue : Real4 # MintCream : real4 read-only static RGBA color of Real4(0.960784, 1, 0.980392, 1) or hex 0xF5FFFAFF ``` lang=cpp, name=Lightning var MintCream : Real4 # MistyRose : real4 read-only static RGBA color of Real4(1, 0.894118, 0.882353, 1) or hex 0xFFE4E1FF ``` lang=cpp, name=Lightning var MistyRose : Real4 # Moccasin : real4 read-only static RGBA color of Real4(1, 0.894118, 0.709804, 1) or hex 0xFFE4B5FF ``` lang=cpp, name=Lightning var Moccasin : Real4 # NavajoWhite : real4 read-only static RGBA color of Real4(1, 0.870588, 0.678431, 1) or hex 0xFFDEADFF ``` lang=cpp, name=Lightning var NavajoWhite : Real4 # Navy : real4 read-only static RGBA color of Real4(0, 0, 0.501961, 1) or hex 0x000080FF ``` lang=cpp, name=Lightning var Navy : Real4 # OldLace : real4 read-only static RGBA color of Real4(0.992157, 0.960784, 0.901961, 1) or hex 0xFDF5E6FF ``` lang=cpp, name=Lightning var OldLace : Real4 # Olive : real4 read-only static RGBA color of Real4(0.501961, 0.501961, 0, 1) or hex 0x808000FF ``` lang=cpp, name=Lightning var Olive : Real4 # OliveDrab : real4 read-only static RGBA color of Real4(0.419608, 0.556863, 0.137255, 1) or hex 0x6B8E23FF ``` lang=cpp, name=Lightning var OliveDrab : Real4 # Orange : real4 read-only static RGBA color of Real4(1, 0.647059, 0, 1) or hex 0xFFA500FF ``` lang=cpp, name=Lightning var Orange : Real4 # OrangeRed : real4 read-only static RGBA color of Real4(1, 0.270588, 0, 1) or hex 0xFF4500FF ``` lang=cpp, name=Lightning var OrangeRed : Real4 # Orchid : real4 read-only static RGBA color of Real4(0.854902, 0.439216, 0.839216, 1) or hex 0xDA70D6FF ``` lang=cpp, name=Lightning var Orchid : Real4 # PaleGoldenrod : real4 read-only static RGBA color of Real4(0.933333, 0.909804, 0.666667, 1) or hex 0xEEE8AAFF ``` lang=cpp, name=Lightning var PaleGoldenrod : Real4 # PaleGreen : real4 read-only static RGBA color of Real4(0.596078, 0.984314, 0.596078, 1) or hex 0x98FB98FF ``` lang=cpp, name=Lightning var PaleGreen : Real4 # PaleTurquoise : real4 read-only static RGBA color of Real4(0.686275, 0.933333, 0.933333, 1) or hex 0xAFEEEEFF ``` lang=cpp, name=Lightning var PaleTurquoise : Real4 # PaleVioletRed : real4 read-only static RGBA color of Real4(0.858824, 0.439216, 0.576471, 1) or hex 0xDB7093FF ``` lang=cpp, name=Lightning var PaleVioletRed : Real4 # PapayaWhip : real4 read-only static RGBA color of Real4(1, 0.937255, 0.835294, 1) or hex 0xFFEFD5FF ``` lang=cpp, name=Lightning var PapayaWhip : Real4 # PeachPuff : real4 read-only static RGBA color of Real4(1, 0.854902, 0.72549, 1) or hex 0xFFDAB9FF ``` lang=cpp, name=Lightning var PeachPuff : Real4 # Peru : real4 read-only static RGBA color of Real4(0.803922, 0.521569, 0.247059, 1) or hex 0xCD853FFF ``` lang=cpp, name=Lightning var Peru : Real4 # Pink : real4 read-only static RGBA color of Real4(1, 0.752941, 0.796078, 1) or hex 0xFFC0CBFF ``` lang=cpp, name=Lightning var Pink : Real4 # Plum : real4 read-only static RGBA color of Real4(0.866667, 0.627451, 0.866667, 1) or hex 0xDDA0DDFF ``` lang=cpp, name=Lightning var Plum : Real4 # PowderBlue : real4 read-only static RGBA color of Real4(0.690196, 0.878431, 0.901961, 1) or hex 0xB0E0E6FF ``` lang=cpp, name=Lightning var PowderBlue : Real4 # Purple : real4 read-only static RGBA color of Real4(0.498039, 0, 0.498039, 1) or hex 0x7F007FFF ``` lang=cpp, name=Lightning var Purple : Real4 # RebeccaPurple : real4 read-only static RGBA color of Real4(0.4, 0.2, 0.6, 1) or hex 0x663399FF ``` lang=cpp, name=Lightning var RebeccaPurple : Real4 # Red : real4 read-only static RGBA color of Real4(1, 0, 0, 1) or hex 0xFF0000FF ``` lang=cpp, name=Lightning var Red : Real4 # RosyBrown : real4 read-only static RGBA color of Real4(0.737255, 0.560784, 0.560784, 1) or hex 0xBC8F8FFF ``` lang=cpp, name=Lightning var RosyBrown : Real4 # RoyalBlue : real4 read-only static RGBA color of Real4(0.254902, 0.411765, 0.882353, 1) or hex 0x4169E1FF ``` lang=cpp, name=Lightning var RoyalBlue : Real4 # SaddleBrown : real4 read-only static RGBA color of Real4(0.545098, 0.270588, 0.0745098, 1) or hex 0x8B4513FF ``` lang=cpp, name=Lightning var SaddleBrown : Real4 # Salmon : real4 read-only static RGBA color of Real4(0.980392, 0.501961, 0.447059, 1) or hex 0xFA8072FF ``` lang=cpp, name=Lightning var Salmon : Real4 # SandyBrown : real4 read-only static RGBA color of Real4(0.956863, 0.643137, 0.376471, 1) or hex 0xF4A460FF ``` lang=cpp, name=Lightning var SandyBrown : Real4 # SeaGreen : real4 read-only static RGBA color of Real4(0.180392, 0.545098, 0.341176, 1) or hex 0x2E8B57FF ``` lang=cpp, name=Lightning var SeaGreen : Real4 # Seashell : real4 read-only static RGBA color of Real4(1, 0.960784, 0.933333, 1) or hex 0xFFF5EEFF ``` lang=cpp, name=Lightning var Seashell : Real4 # Sienna : real4 read-only static RGBA color of Real4(0.627451, 0.321569, 0.176471, 1) or hex 0xA0522DFF ``` lang=cpp, name=Lightning var Sienna : Real4 # Silver : real4 read-only static RGBA color of Real4(0.752941, 0.752941, 0.752941, 1) or hex 0xC0C0C0FF ``` lang=cpp, name=Lightning var Silver : Real4 # SkyBlue : real4 read-only static RGBA color of Real4(0.529412, 0.807843, 0.921569, 1) or hex 0x87CEEBFF ``` lang=cpp, name=Lightning var SkyBlue : Real4 # SlateBlue : real4 read-only static RGBA color of Real4(0.415686, 0.352941, 0.803922, 1) or hex 0x6A5ACDFF ``` lang=cpp, name=Lightning var SlateBlue : Real4 # SlateGray : real4 read-only static RGBA color of Real4(0.439216, 0.501961, 0.564706, 1) or hex 0x708090FF ``` lang=cpp, name=Lightning var SlateGray : Real4 # Snow : real4 read-only static RGBA color of Real4(1, 0.980392, 0.980392, 1) or hex 0xFFFAFAFF ``` lang=cpp, name=Lightning var Snow : Real4 # SpringGreen : real4 read-only static RGBA color of Real4(0, 1, 0.498039, 1) or hex 0x00FF7FFF ``` lang=cpp, name=Lightning var SpringGreen : Real4 # SteelBlue : real4 read-only static RGBA color of Real4(0.27451, 0.509804, 0.705882, 1) or hex 0x4682B4FF ``` lang=cpp, name=Lightning var SteelBlue : Real4 # Tan : real4 read-only static RGBA color of Real4(0.823529, 0.705882, 0.54902, 1) or hex 0xD2B48CFF ``` lang=cpp, name=Lightning var Tan : Real4 # Teal : real4 read-only static RGBA color of Real4(0, 0.501961, 0.501961, 1) or hex 0x008080FF ``` lang=cpp, name=Lightning var Teal : Real4 # Thistle : real4 read-only static RGBA color of Real4(0.847059, 0.74902, 0.847059, 1) or hex 0xD8BFD8FF ``` lang=cpp, name=Lightning var Thistle : Real4 # Tomato : real4 read-only static RGBA color of Real4(1, 0.388235, 0.278431, 1) or hex 0xFF6347FF ``` lang=cpp, name=Lightning var Tomato : Real4 # Turquoise : real4 read-only static RGBA color of Real4(0.25098, 0.878431, 0.815686, 1) or hex 0x40E0D0FF ``` lang=cpp, name=Lightning var Turquoise : Real4 # Violet : real4 read-only static RGBA color of Real4(0.933333, 0.509804, 0.933333, 1) or hex 0xEE82EEFF ``` lang=cpp, name=Lightning var Violet : Real4 # Wheat : real4 read-only static RGBA color of Real4(0.960784, 0.870588, 0.701961, 1) or hex 0xF5DEB3FF ``` lang=cpp, name=Lightning var Wheat : Real4 # White : real4 read-only static RGBA color of Real4(1, 1, 1, 1) or hex 0xFFFFFFFF ``` lang=cpp, name=Lightning var White : Real4 # WhiteSmoke : real4 read-only static RGBA color of Real4(0.960784, 0.960784, 0.960784, 1) or hex 0xF5F5F5FF ``` lang=cpp, name=Lightning var WhiteSmoke : Real4 # Yellow : real4 read-only static RGBA color of Real4(1, 1, 0, 1) or hex 0xFFFF00FF ``` lang=cpp, name=Lightning var Yellow : Real4 # YellowGreen : real4 read-only static RGBA color of Real4(0.603922, 0.803922, 0.196078, 1) or hex 0x9ACD32FF ``` lang=cpp, name=Lightning var YellowGreen : Real4 # Methods","title":"Colors"},{"location":"reference/lightning_base_types/console/","text":"Core Methods Properties Base Classes Derived Classes DumpValue ReadBoolean ReadInteger ReadReal ReadString Write WriteLine # Properties # Methods # DumpValue : Void static Name Type Description p0 T ``` lang=cpp, name=Lightning function DumpValue(p0 : T) ``` # DumpValue : Void static Name Type Description p0 T p1 integer ``` lang=cpp, name=Lightning function DumpValue(p0 : T, p1 : Integer) ``` # ReadBoolean : boolean static Name Type Description ``` lang=cpp, name=Lightning function ReadBoolean() : Boolean ``` # ReadInteger : integer static Name Type Description ``` lang=cpp, name=Lightning function ReadInteger() : Integer ``` # ReadReal : real static Name Type Description ``` lang=cpp, name=Lightning function ReadReal() : Real ``` # ReadString : string static Name Type Description ``` lang=cpp, name=Lightning function ReadString() : String ``` # Write : Void static Name Type Description p0 T ``` lang=cpp, name=Lightning function Write(p0 : T) ``` # Write : Void static Name Type Description p0 T p1 T ``` lang=cpp, name=Lightning function Write(p0 : T, p1 : T) ``` # Write : Void static Name Type Description p0 T p1 T p2 T ``` lang=cpp, name=Lightning function Write(p0 : T, p1 : T, p2 : T) ``` # Write : Void static Name Type Description p0 T p1 T p2 T p3 T ``` lang=cpp, name=Lightning function Write(p0 : T, p1 : T, p2 : T, p3 : T) ``` # Write : Void static Name Type Description p0 T p1 T p2 T p3 T p4 T ``` lang=cpp, name=Lightning function Write(p0 : T, p1 : T, p2 : T, p3 : T, p4 : T) ``` # WriteLine : Void static Name Type Description ``` lang=cpp, name=Lightning function WriteLine() ``` # WriteLine : Void static Name Type Description p0 T ``` lang=cpp, name=Lightning function WriteLine(p0 : T) ``` # WriteLine : Void static Name Type Description p0 T p1 T ``` lang=cpp, name=Lightning function WriteLine(p0 : T, p1 : T) ``` # WriteLine : Void static Name Type Description p0 T p1 T p2 T ``` lang=cpp, name=Lightning function WriteLine(p0 : T, p1 : T, p2 : T) ``` # WriteLine : Void static Name Type Description p0 T p1 T p2 T p3 T ``` lang=cpp, name=Lightning function WriteLine(p0 : T, p1 : T, p2 : T, p3 : T) ``` # WriteLine : Void static Name Type Description p0 T p1 T p2 T p3 T p4 T ``` lang=cpp, name=Lightning function WriteLine(p0 : T, p1 : T, p2 : T, p3 : T, p4 : T) ```","title":"Console"},{"location":"reference/lightning_base_types/consoleevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Consoleevent"},{"location":"reference/lightning_base_types/debuggerevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Debuggerevent"},{"location":"reference/lightning_base_types/delegateparameter/","text":"Core Methods Properties Base Classes Derived Classes Name Type # Properties # Name : string read-only ``` lang=cpp, name=Lightning var Name : String # Type : type read-only ``` lang=cpp, name=Lightning var Type : Type # Methods","title":"Delegateparameter"},{"location":"reference/lightning_base_types/delegateparameterrange/","text":"Core Methods Properties Base Classes Derived Classes Constructor [[plasma_engine_documentation/code_reference/lightning_base_types/delegateparameterrange/#all-delegate() All]] MoveNext [[plasma_engine_documentation/code_reference/lightning_base_types/delegateparameterrange/#current-delegate() Current]] IsEmpty IsNotEmpty # Properties # All : delegate() read-only ``` lang=cpp, name=Lightning var All : delegate() # Current : delegate() read-only ``` lang=cpp, name=Lightning var Current : delegate() # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # DelegateParameterRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function DelegateParameterRange() ``` # DelegateParameterRange : Void constructor Name Type Description p0 delegate() ``` lang=cpp, name=Lightning function DelegateParameterRange(p0 : delegate()) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Delegateparameterrange"},{"location":"reference/lightning_base_types/delegatetype/","text":"Core Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/lightning_base_types/delegatetype/#parameters-delegate() Parameters]] type Return Signature # Properties # Parameters : delegate() read-only ``` lang=cpp, name=Lightning var Parameters : delegate() # Return : type read-only ``` lang=cpp, name=Lightning var Return : Type # Signature : string read-only ``` lang=cpp, name=Lightning var Signature : String # Methods","title":"Delegatetype"},{"location":"reference/lightning_base_types/doubleinteger/","text":"Core Methods Properties Base Classes Derived Classes Parse NegativeMin NegativeValueClosestToZero PositiveMax PositiveValueClosestToZero # Properties # NegativeMin : doubleinteger read-only static The smallest (most negative) value that can be represented by a DoubleInteger. ``` lang=cpp, name=Lightning var NegativeMin : DoubleInteger # NegativeValueClosestToZero : doubleinteger read-only static The negative value closest to zero that can be represented by a DoubleInteger. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : DoubleInteger # PositiveMax : doubleinteger read-only static The largest (most positive) value that can be represented by a DoubleInteger. ``` lang=cpp, name=Lightning var PositiveMax : DoubleInteger # PositiveValueClosestToZero : doubleinteger read-only static The positive value closest to zero that can be represented by a DoubleInteger. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : DoubleInteger # Methods # Parse : doubleinteger static Attempt to convert the given StringRange to a DoubleInteger. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Parse(p0 : StringRange) : DoubleInteger","title":"Doubleinteger"},{"location":"reference/lightning_base_types/doublereal/","text":"Core Methods Properties Base Classes Derived Classes Parse NegativeMin NegativeValueClosestToZero PositiveMax PositiveValueClosestToZero # Properties # NegativeMin : doublereal read-only static The smallest (most negative) value that can be represented by a DoubleReal. ``` lang=cpp, name=Lightning var NegativeMin : DoubleReal # NegativeValueClosestToZero : doublereal read-only static The negative value closest to zero that can be represented by a DoubleReal. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : DoubleReal # PositiveMax : doublereal read-only static The largest (most positive) value that can be represented by a DoubleReal. ``` lang=cpp, name=Lightning var PositiveMax : DoubleReal # PositiveValueClosestToZero : doublereal read-only static The positive value closest to zero that can be represented by a DoubleReal. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : DoubleReal # Methods # Parse : doublereal static Attempt to convert the given StringRange to a DoubleReal. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Parse(p0 : StringRange) : DoubleReal","title":"Doublereal"},{"location":"reference/lightning_base_types/enum/","text":"Core Methods Properties Base Classes Derived Classes filemode members streamcapabilities streamorigin # Properties # Methods","title":"Enum"},{"location":"reference/lightning_base_types/errorevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Errorevent"},{"location":"reference/lightning_base_types/errortype/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Errortype"},{"location":"reference/lightning_base_types/eventdata/","text":"Core Methods Properties Base Classes Derived Classes Constructor buildevent consoleevent debuggerevent errorevent exceptionevent fatalerrorevent memoryleakevent opcodeevent parseevent pluginevent # Properties # Methods # EventData : Void constructor Name Type Description ``` lang=cpp, name=Lightning function EventData() ```","title":"Eventdata"},{"location":"reference/lightning_base_types/eventhandler/","text":"Core Methods Properties Base Classes Derived Classes Constructor executablestate # Properties # Methods # EventHandler : Void constructor Name Type Description ``` lang=cpp, name=Lightning function EventHandler() ```","title":"Eventhandler"},{"location":"reference/lightning_base_types/events/","text":"Core Methods Properties Base Classes Derived Classes Connect Send # Properties # Methods # Connect : Void static Name Type Description sender anyhandle eventName string callback delegate() ``` lang=cpp, name=Lightning function Connect(sender : AnyHandle, eventName : String, callback : delegate()) ``` # Send : integer static Name Type Description sender anyhandle eventName string event eventdata ``` lang=cpp, name=Lightning function Send(sender : AnyHandle, eventName : String, event : EventData) : Integer ```","title":"Events"},{"location":"reference/lightning_base_types/exception/","text":"Core Methods Properties Base Classes Derived Classes Constructor Message # Properties # Message : string ``` lang=cpp, name=Lightning var Message : String # Methods # Exception : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Exception() ``` # Exception : Void constructor Name Type Description p0 string ``` lang=cpp, name=Lightning function Exception(p0 : String) ```","title":"Exception"},{"location":"reference/lightning_base_types/exceptionevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Exceptionevent"},{"location":"reference/lightning_base_types/executablestate/","text":"Core Methods Properties Base Classes Derived Classes ExecuteStatement CallingState eventhandler # Properties # CallingState : executablestate read-only static ``` lang=cpp, name=Lightning var CallingState : ExecutableState # Methods # ExecuteStatement : T Name Type Description p0 string ``` lang=cpp, name=Lightning function ExecuteStatement(p0 : String) : T ```","title":"Executablestate"},{"location":"reference/lightning_base_types/fatalerrorevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Fatalerrorevent"},{"location":"reference/lightning_base_types/field/","text":"Core Methods Properties Base Classes Derived Classes Property # Properties # Methods","title":"Field"},{"location":"reference/lightning_base_types/fieldrange/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : fieldrange read-only ``` lang=cpp, name=Lightning var All : FieldRange # Current : field read-only ``` lang=cpp, name=Lightning var Current : Field # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # FieldRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FieldRange() ``` # FieldRange : Void constructor Name Type Description p0 fieldrange ``` lang=cpp, name=Lightning function FieldRange(p0 : FieldRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Fieldrange"},{"location":"reference/lightning_base_types/filemode/","text":"Core Methods Properties Base Classes Derived Classes Append enum Read Sequential ShareDelete ShareRead ShareWrite Write # Properties # Append : filemode read-only static ``` lang=cpp, name=Lightning var Append : FileMode # Read : filemode read-only static ``` lang=cpp, name=Lightning var Read : FileMode # Sequential : filemode read-only static ``` lang=cpp, name=Lightning var Sequential : FileMode # ShareDelete : filemode read-only static ``` lang=cpp, name=Lightning var ShareDelete : FileMode # ShareRead : filemode read-only static ``` lang=cpp, name=Lightning var ShareRead : FileMode # ShareWrite : filemode read-only static ``` lang=cpp, name=Lightning var ShareWrite : FileMode # Write : filemode read-only static ``` lang=cpp, name=Lightning var Write : FileMode # Methods","title":"Filemode"},{"location":"reference/lightning_base_types/filepath/","text":"Core Methods Properties Base Classes Derived Classes AddTrailingDirectorySeparator DirectorySeparator ChangeExtension ExecutableDirectory CombineDirectories ExecutableFile CombineDirectoriesAndFile TemporaryDirectory GetCanonicalizedPathFromAbsolutePath UserDocumentsDirectory GetComparablePathFromAbsolutePath UserLocalDirectory GetDirectoryName WorkingDirectory GetDirectoryPath GetExtensionWithDot GetExtensionWithoutDot GetFileNameWithExtension GetFileNameWithoutExtension IsRelative RemoveTrailingDirectorySeparator # Properties # DirectorySeparator : string read-only static Gets the character(s) used for separating directories and files. This value is often different depending on the operating system (generally either '/' or '\\') ``` lang=cpp, name=Lightning var DirectorySeparator : String # ExecutableDirectory : string read-only static The directory the executable lives with in (exe, elf...). This will always include a directory separator at the end of the result. ``` lang=cpp, name=Lightning var ExecutableDirectory : String # ExecutableFile : string read-only static A path directly to the executable itself (exe, elf...). ``` lang=cpp, name=Lightning var ExecutableFile : String # TemporaryDirectory : string read-only static Temporary files should be placed here. This will always include a directory separator at the end of the result. ``` lang=cpp, name=Lightning var TemporaryDirectory : String # UserDocumentsDirectory : string read-only static User saved data that the user can backup or modify should be placed here (read/write/create permissions should be allowed). This will always include a directory separator at the end of the result. ``` lang=cpp, name=Lightning var UserDocumentsDirectory : String # UserLocalDirectory : string read-only static Application saved information should be placed here (read/write/create permissions should be allowed). This will always include a directory separator at the end of the result. ``` lang=cpp, name=Lightning var UserLocalDirectory : String # WorkingDirectory : string static A directory that all relative paths start resolving from. In general the changing of the working directory is discouraged because it may affect assumptions of the host application. This will always include a directory separator at the end of the result. ``` lang=cpp, name=Lightning var WorkingDirectory : String # Methods # AddTrailingDirectorySeparator : string static Pass in a directory path with or without the separator and this will add it at the end (if needed). Example: ('Content\\Powerups') results in 'Content\\Powerups\\' Example: ('Content\\Powerups\\') results in 'Content\\Powerups\\' Name Type Description p0 string ``` lang=cpp, name=Lightning function AddTrailingDirectorySeparator(p0 : String) : String ``` # ChangeExtension : string static Changes the extension of a path (with file name at the end) to a new extension. If the file has no extension, then this will automatically add the extension to the end. The extension is allowed to contain a leading dot '.' character (or not). The path is also allowed to contain a trailing dot '.' character (or not). Example: ('Content\\Player.png', 'jpg') results in 'Content\\Player.jpg' Example: ('Content\\Player', 'jpg') results in 'Content\\Player.jpg' Example: ('Content\\Player.', '.jpg') results in 'Content\\Player.jpg' Name Type Description p0 string p1 string ``` lang=cpp, name=Lightning function ChangeExtension(p0 : String, p1 : String) : String ``` # CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups\\' Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\' Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\' Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\' Name Type Description dir0 string dir1 string ``` lang=cpp, name=Lightning function CombineDirectories(dir0 : String, dir1 : String) : String ``` # CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups\\' Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\' Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\' Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\' Name Type Description dir0 string dir1 string dir2 string ``` lang=cpp, name=Lightning function CombineDirectories(dir0 : String, dir1 : String, dir2 : String) : String ``` # CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups\\' Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\' Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\' Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\' Name Type Description dir0 string dir1 string dir2 string dir3 string ``` lang=cpp, name=Lightning function CombineDirectories(dir0 : String, dir1 : String, dir2 : String, dir3 : String) : String ``` # CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups\\' Example: ('Content\\', 'Powerups\\') results in 'Content\\Powerups\\' Example: ('Content\\', '', 'Powerups') results in 'Content\\Powerups\\' Example: ('C:\\Sandbox\\', 'Content') results in 'C:\\Sandbox\\Content\\' Name Type Description dir0 string dir1 string dir2 string dir3 string dir4 string ``` lang=cpp, name=Lightning function CombineDirectories(dir0 : String, dir1 : String, dir2 : String, dir3 : String, dir4 : String) : String ``` # CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string fileName string ``` lang=cpp, name=Lightning function CombineDirectoriesAndFile(dir0 : String, fileName : String) : String ``` # CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string dir1 string fileName string ``` lang=cpp, name=Lightning function CombineDirectoriesAndFile(dir0 : String, dir1 : String, fileName : String) : String ``` # CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string dir1 string dir2 string fileName string ``` lang=cpp, name=Lightning function CombineDirectoriesAndFile(dir0 : String, dir1 : String, dir2 : String, fileName : String) : String ``` # CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups\\', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox\\', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string dir1 string dir2 string dir3 string fileName string ``` lang=cpp, name=Lightning function CombineDirectoriesAndFile(dir0 : String, dir1 : String, dir2 : String, dir3 : String, fileName : String) : String ``` # GetCanonicalizedPathFromAbsolutePath : string static Changes all directory separators to be the current operating system directory separator, removes duplicate separators, and removes '..' and '.' from the paths. Canonicalized is only guaranteed to work on absolute paths. This behavior is operating system dependent and may call the related OS functions. Example: ('C:/Sandbox//Engine/../Content/./Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetCanonicalizedPathFromAbsolutePath(p0 : String) : String ``` # GetComparablePathFromAbsolutePath : string static First this normalizes the path, then if the operating system is case insensative, it will make the path all lowercase so that it compares. Example: ('C:\\Sandbox\\Engine..\\Content.\\Player.png') results in 'c:\\sandbox\\content\\player.png' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetComparablePathFromAbsolutePath(p0 : String) : String ``` # GetDirectoryName : string static If a file path is passed in, this will return the name of the parent directory. If a directory path is passed in (ending in a separator), this will return the name of the directory. A directory path without a trailing separator is abiguous with a file that has no extension. In this case, we always assume it is a file and therefore get the parent directory's name. Example: ('Content\\Powerups\\Recharge.png') results in 'Powerups' Example: ('Content\\Powerups\\') results in 'Powerups' Example: ('Content\\Powerups') results in 'Content' Example: ('Content') results in '' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetDirectoryName(p0 : String) : String ``` # GetDirectoryPath : string static If a file path is passed in, this will return the parent directory. If a directory path is passed in (ending in a separator), this will return the directy back with no modifications. A directory path without a trailing separator is abiguous with a file that has no extension. This will always include a directory separator at the end of the result. In this case, we always assume it is a file and therefore get the parent directory's name. Example: ('Content\\Powerups\\Recharge.png') results in 'Content\\Powerups\\' Example: ('Content\\Powerups\\') results in 'Content\\Powerups\\' Example: ('Content\\Powerups') results in 'Content\\' Example: ('Content') results in '' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetDirectoryPath(p0 : String) : String ``` # GetExtensionWithDot : string static Returns only the extension of a file (everything after the last dot, including the dot). If the file has no extension then this will return an empty string. Example: ('Content\\Player.png') results in '.png' Example: ('Content\\Player.') results in '' Example: ('Parent.Directory\\Log') results in '' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetExtensionWithDot(p0 : String) : String ``` # GetExtensionWithoutDot : string static Returns only the extension of a file (everything after the last dot, not including the dot). If the file has no extension then this will return an empty string. Example: ('Content\\Player.png') results in 'png' Example: ('Content\\Player.') results in '' Example: ('Parent.Directory\\Log') results in '' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetExtensionWithoutDot(p0 : String) : String ``` # GetFileNameWithExtension : string static Returns only the file portion of a path (everything past the last separator including the extension). Example: ('Content\\Player.png') results in 'Player.png' Example: ('Content\\Powerups\\') results in '' Example: ('Content\\Powerups') results in 'Powerups' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetFileNameWithExtension(p0 : String) : String ``` # GetFileNameWithoutExtension : string static Returns only the file portion of a path (everything past the last separator excluding the extension). Example: ('Content\\Player.png') results in 'Player' Example: ('Content\\Powerups\\') results in '' Example: ('Content\\Powerups') results in 'Powerups' Name Type Description p0 string ``` lang=cpp, name=Lightning function GetFileNameWithoutExtension(p0 : String) : String ``` # IsRelative : boolean static Returns true if a path has no root (such as a volume/hard drive specifier, or unix like systems a beginning slash). Even a beginning slash that means 'relative to the current working directory volume' is still relative. Empty paths will return that they are relative. Example: ('C:\\Sandbox\\Engine..\\Content.\\Player.png') results in 'false' Example: ('Sandbox') results in 'true' Example: ('Content\\Powerups\\Recharge.png') results in 'true' Example: ('/usr/Content/Player.png') results in 'false' Name Type Description p0 string ``` lang=cpp, name=Lightning function IsRelative(p0 : String) : Boolean ``` # RemoveTrailingDirectorySeparator : string static Pass in a directory path with or without the separator and this will remove it from the end (if needed). Example: ('Content\\Powerups') results in 'Content\\Powerups' Example: ('Content\\Powerups\\') results in 'Content\\Powerups' Name Type Description p0 string ``` lang=cpp, name=Lightning function RemoveTrailingDirectorySeparator(p0 : String) : String ```","title":"Filepath"},{"location":"reference/lightning_base_types/filestream/","text":"Core Methods Properties Base Classes Derived Classes Close istream Constructor # Properties # Methods # Close : Void Name Type Description ``` lang=cpp, name=Lightning function Close() ``` # FileStream : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FileStream() ``` # FileStream : Void constructor Name Type Description p0 filestream ``` lang=cpp, name=Lightning function FileStream(p0 : FileStream) ``` # FileStream : Void constructor Name Type Description filePath string mode FileMode ``` lang=cpp, name=Lightning function FileStream(filePath : String, mode : FileMode) ```","title":"Filestream"},{"location":"reference/lightning_base_types/function/","text":"Core Methods Properties Base Classes Derived Classes CreateDelegate Type member Invoke # Properties # Type : delegatetype read-only ``` lang=cpp, name=Lightning var Type : DelegateType # Methods # CreateDelegate : T Name Type Description instance T ``` lang=cpp, name=Lightning function CreateDelegate(instance : T) : T ``` # Invoke : T Name Type Description instance T arguments Array[any] ``` lang=cpp, name=Lightning function Invoke(instance : T, arguments : Array[any]) : T ```","title":"Function"},{"location":"reference/lightning_base_types/functionrange/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : functionrange read-only ``` lang=cpp, name=Lightning var All : FunctionRange # Current : function read-only ``` lang=cpp, name=Lightning var Current : Function # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # FunctionRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function FunctionRange() ``` # FunctionRange : Void constructor Name Type Description p0 functionrange ``` lang=cpp, name=Lightning function FunctionRange(p0 : FunctionRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Functionrange"},{"location":"reference/lightning_base_types/gettersetter/","text":"Core Methods Properties Base Classes Derived Classes Property # Properties # Methods","title":"Gettersetter"},{"location":"reference/lightning_base_types/gettersetterrange/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : gettersetterrange read-only ``` lang=cpp, name=Lightning var All : GetterSetterRange # Current : gettersetter read-only ``` lang=cpp, name=Lightning var Current : GetterSetter # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # GetterSetterRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function GetterSetterRange() ``` # GetterSetterRange : Void constructor Name Type Description p0 gettersetterrange ``` lang=cpp, name=Lightning function GetterSetterRange(p0 : GetterSetterRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Gettersetterrange"},{"location":"reference/lightning_base_types/hashmap_key%2C_value/","text":"Core (NOTE) Hash Map is an Associative Hashed Container. Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#add-void Add]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#all-plasma-engine-document All]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#clear-void Clear]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#count-plasma-engine-docume Count]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#contains-plasma-engine-doc Contains]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#keys-plasma-engine-documen Keys]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#get-plasma-engine-document Get]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#values-plasma-engine-docum Values]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#getordefault-plasma-engine GetOrDefault]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#getorerror-plasma-engine-d GetOrError]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#hashmap-key, value-void Constructor]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#removeorerror-void RemoveOrError]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#removeorignore-plasma-engi RemoveOrIgnore]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#set-plasma-engine-document Set]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#setorerror-void SetOrError]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#setorignore-plasma-engine SetOrIgnore]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key, value /#setoroverwrite-plasma-engi SetOrOverwrite]] # Properties # All : HashMapRange[Key,Value] read-only ``` lang=cpp, name=Lightning var All : HashMapRange[Key, Value] # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Keys : HashMapKeyRange[Key] read-only ``` lang=cpp, name=Lightning var Keys : HashMapKeyRange[Key] # Values : HashMapValueRange[Value] read-only ``` lang=cpp, name=Lightning var Values : HashMapValueRange[Value] # Methods # Add : Void Name Type Description Key Value ``` lang=cpp, name=Lightning function Add( : Key, : Value) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Contains : boolean Name Type Description Key ``` lang=cpp, name=Lightning function Contains( : Key) : Boolean ``` # Get : Value Name Type Description Key ``` lang=cpp, name=Lightning function Get( : Key) : Value ``` # GetOrDefault : Value Name Type Description Key ``` lang=cpp, name=Lightning function GetOrDefault( : Key) : Value ``` # GetOrDefault : Value Name Type Description Key Value ``` lang=cpp, name=Lightning function GetOrDefault( : Key, : Value) : Value ``` # GetOrError : Value Name Type Description Key ``` lang=cpp, name=Lightning function GetOrError( : Key) : Value ``` # HashMap[Key, Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMap Key, Value ``` # RemoveOrError : Void Name Type Description Key ``` lang=cpp, name=Lightning function RemoveOrError( : Key) ``` # RemoveOrIgnore : boolean Name Type Description Key ``` lang=cpp, name=Lightning function RemoveOrIgnore( : Key) : Boolean ``` # Set : boolean Name Type Description Key Value ``` lang=cpp, name=Lightning function Set( : Key, : Value) : Boolean ``` # SetOrError : Void Name Type Description Key Value ``` lang=cpp, name=Lightning function SetOrError( : Key, : Value) ``` # SetOrIgnore : boolean Name Type Description Key Value ``` lang=cpp, name=Lightning function SetOrIgnore( : Key, : Value) : Boolean ``` # SetOrOverwrite : boolean Name Type Description Key Value ``` lang=cpp, name=Lightning function SetOrOverwrite( : Key, : Value) : Boolean ```","title":"Hashmap key, value"},{"location":"reference/lightning_base_types/hashmap_key%2Cvalue/","text":"Core (NOTE) Hash Map is an Associative Hashed Container. Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#add-void Add]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#all-plasma-engine-document All]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#clear-void Clear]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#count-plasma-engine-docume Count]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#contains-plasma-engine-doc Contains]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#keys-plasma-engine-documen Keys]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#get-plasma-engine-document Get]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#values-plasma-engine-docum Values]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#getordefault-plasma-engine GetOrDefault]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#getorerror-plasma-engine-d GetOrError]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#hashmap-key,value-void Constructor]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#removeorerror-void RemoveOrError]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#removeorignore-plasma-engi RemoveOrIgnore]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#set-plasma-engine-document Set]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#setorerror-void SetOrError]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#setorignore-plasma-engine SetOrIgnore]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmap_key,value /#setoroverwrite-plasma-engi SetOrOverwrite]] # Properties # All : HashMapRange[Key,Value] read-only ``` lang=cpp, name=Lightning var All : HashMapRange[Key,Value] # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Keys : HashMapKeyRange[Key] read-only ``` lang=cpp, name=Lightning var Keys : HashMapKeyRange[Key] # Values : HashMap[Value] read-only ``` lang=cpp, name=Lightning var Values : HashMap[Value] # Methods # Add : Void Name Type Description Key Value ``` lang=cpp, name=Lightning function Add( : Key, : Value) ``` # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # Contains : boolean Name Type Description Key ``` lang=cpp, name=Lightning function Contains( : Key) : Boolean ``` # Get : Value Name Type Description Key ``` lang=cpp, name=Lightning function Get( : Key) : Value ``` # GetOrDefault : Value Name Type Description Key ``` lang=cpp, name=Lightning function GetOrDefault( : Key) : Value ``` # GetOrDefault : Value Name Type Description Key Value ``` lang=cpp, name=Lightning function GetOrDefault( : Key, : Value) : Value ``` # GetOrError : Value Name Type Description Key ``` lang=cpp, name=Lightning function GetOrError( : Key) : Value ``` # HashMap[Key,Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMap Key,Value ``` # RemoveOrError : Void Name Type Description Key ``` lang=cpp, name=Lightning function RemoveOrError( : Key) ``` # RemoveOrIgnore : boolean Name Type Description Key ``` lang=cpp, name=Lightning function RemoveOrIgnore( : Key) : Boolean ``` # Set : boolean Name Type Description Key Value ``` lang=cpp, name=Lightning function Set( : Key, : Value) : Boolean ``` # SetOrError : Void Name Type Description Key Value ``` lang=cpp, name=Lightning function SetOrError( : Key, : Value) ``` # SetOrIgnore : boolean Name Type Description Key Value ``` lang=cpp, name=Lightning function SetOrIgnore( : Key, : Value) : Boolean ``` # SetOrOverwrite : boolean Name Type Description Key Value ``` lang=cpp, name=Lightning function SetOrOverwrite( : Key, : Value) : Boolean ```","title":"Hashmap key,value"},{"location":"reference/lightning_base_types/hashmapkeyrange_key/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current Reset IsEmpty IsNotEmpty # Properties # All : HashMapKeyRange[Key] read-only ``` lang=cpp, name=Lightning var All : HashMapKeyRange[Key] # Current : Key read-only ``` lang=cpp, name=Lightning var Current : Key # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HashMapKeyRange[Key] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapKeyRange Key ``` # HashMapKeyRange[Key] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapKeyRange Key ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ```","title":"Hashmapkeyrange key"},{"location":"reference/lightning_base_types/hashmaprange_key%2C_value/","text":"Core Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#hashmaprange-key, value Constructor]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#all-plasma-engine-document All]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#movenext-void MoveNext]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#current-plasma-engine-docu Current]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#reset-void Reset]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#isempty-plasma-engine-docu IsEmpty]] [[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key, value /#isnotempty-plasma-engine-d IsNotEmpty]] # Properties # All : HashMapRange[Key,Value] read-only ``` lang=cpp, name=Lightning var All : HashMapRange[Key, Value] # Current : KeyValue[Key,Value] read-only ``` lang=cpp, name=Lightning var Current : KeyValue[Key, Value] # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HashMapRange[Key, Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapRange Key, Value ``` # HashMapRange[Key, Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapRange Key, Value ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ```","title":"Hashmaprange key, value"},{"location":"reference/lightning_base_types/hashmaprange_key%2Cvalue/","text":"Core |Methods|Properties|Base Classes|Derived Classes| |---|---|---|---| |[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#hashmaprange-key,value-v | Constructor]]|[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#all-plasma-engine-document | All]]| | | |[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#movenext-void | MoveNext]]|[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#current-plasma-engine-docu | Current]]| | | |[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#reset-void | Reset]]|[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#isempty-plasma-engine-docu | IsEmpty]]| | | | |[[plasma_engine_documentation/code_reference/lightning_base_types/hashmaprange_key,value /#isnotempty-plasma-engine-d | IsNotEmpty]]| | | # Properties # All : HashMapRange[Key,Value] read-only ``` lang=cpp, name=Lightning var All : HashMapRange[Key,Value] # Current : KeyValue[Key,Value] read-only ``` lang=cpp, name=Lightning var Current : KeyValue[Key,Value] # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HashMapRange[Key,Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapRange Key,Value ``` # HashMapRange[Key,Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapRange Key,Value ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ```","title":"Hashmaprange key,value"},{"location":"reference/lightning_base_types/hashmapvaluerange_value/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current Reset IsEmpty IsNotEmpty # Properties # All : HashMapValueRange[Value] read-only ``` lang=cpp, name=Lightning var All : HashMapValueRange[Value] # Current : Key read-only ``` lang=cpp, name=Lightning var Current : Key # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # HashMapValueRange[Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapValueRange Value ``` # HashMapValueRange[Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function HashMapValueRange Value ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ``` # Reset : Void Name Type Description ``` lang=cpp, name=Lightning function Reset() ```","title":"Hashmapvaluerange value"},{"location":"reference/lightning_base_types/iencoding/","text":"Core Methods Properties Base Classes Derived Classes Constructor Ascii asciiencoding Read Utf8 utf8encoding Write # Properties # Ascii : asciiencoding read-only static ``` lang=cpp, name=Lightning var Ascii : AsciiEncoding # Utf8 : utf8encoding read-only static ``` lang=cpp, name=Lightning var Utf8 : Utf8Encoding # Methods # IEncoding : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IEncoding() ``` # Read : rune Name Type Description p0 istream ``` lang=cpp, name=Lightning function Read(p0 : IStream) : Rune ``` # Write : integer Name Type Description p0 rune p1 istream ``` lang=cpp, name=Lightning function Write(p0 : Rune, p1 : IStream) : Integer ```","title":"Iencoding"},{"location":"reference/lightning_base_types/indirectiontype/","text":"Core Methods Properties Base Classes Derived Classes ReferencedType type # Properties # ReferencedType : boundtype read-only ``` lang=cpp, name=Lightning var ReferencedType : BoundType # Methods","title":"Indirectiontype"},{"location":"reference/lightning_base_types/integer/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Parse One Reinterpret PositiveMax Set PositiveValueClosestToZero XAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : integer read-only static The smallest (most negative) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeMin : Integer # NegativeValueClosestToZero : integer read-only static The negative value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Integer # One : integer read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Integer # PositiveMax : integer read-only static The largest (most positive) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveMax : Integer # PositiveValueClosestToZero : integer read-only static The positive value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Integer # XAxis : integer read-only static ``` lang=cpp, name=Lightning var XAxis : Integer # Zero : integer read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Integer # Methods # Get : integer Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Integer ``` # GetAxis : integer static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Integer # Integer : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer() ``` # Integer : Void constructor Name Type Description scalar integer ``` lang=cpp, name=Lightning function Integer(scalar : Integer) ``` # Parse : integer static Attempt to convert the given StringRange to an Integer. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Parse(p0 : StringRange) : Integer # Reinterpret : integer static Name Type Description p0 real ``` lang=cpp, name=Lightning function Reinterpret(p0 : Real) : Integer ``` # Set : Void Name Type Description p0 integer p1 integer ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Integer) ```","title":"Integer"},{"location":"reference/lightning_base_types/integer2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : integer2 read-only static The smallest (most negative) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeMin : Integer2 # NegativeValueClosestToZero : integer2 read-only static The negative value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Integer2 # One : integer2 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Integer2 # PositiveMax : integer2 read-only static The largest (most positive) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveMax : Integer2 # PositiveValueClosestToZero : integer2 read-only static The positive value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Integer2 # XAxis : integer2 read-only static ``` lang=cpp, name=Lightning var XAxis : Integer2 # YAxis : integer2 read-only static ``` lang=cpp, name=Lightning var YAxis : Integer2 # Zero : integer2 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Integer2 # Methods # Get : integer Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Integer ``` # GetAxis : integer2 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Integer2 # Integer2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer2() ``` # Integer2 : Void constructor Name Type Description scalar integer ``` lang=cpp, name=Lightning function Integer2(scalar : Integer) ``` # Integer2 : Void constructor Name Type Description p0 integer p1 integer ``` lang=cpp, name=Lightning function Integer2(p0 : Integer, p1 : Integer) ``` # Integer2 : Void constructor Name Type Description p0 integer2 ``` lang=cpp, name=Lightning function Integer2(p0 : Integer2) ``` # Set : Void Name Type Description p0 integer p1 integer ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Integer) ```","title":"Integer2"},{"location":"reference/lightning_base_types/integer2x2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # Methods # Get : integer2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer2 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer2x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer2x2() ``` # Integer2x2 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer2x2(p0 : Integer) ``` # Integer2x2 : Void constructor Name Type Description m00 integer m01 integer m10 integer m11 integer ``` lang=cpp, name=Lightning function Integer2x2(m00 : Integer, m01 : Integer, m10 : Integer, m11 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer2) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer2x2"},{"location":"reference/lightning_base_types/integer2x3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M02 : integer ``` lang=cpp, name=Lightning var M02 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M12 : integer ``` lang=cpp, name=Lightning var M12 : Integer # Methods # Get : integer3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer3 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer2x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer2x3() ``` # Integer2x3 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer2x3(p0 : Integer) ``` # Integer2x3 : Void constructor Name Type Description m00 integer m01 integer m02 integer m10 integer m11 integer m12 integer ``` lang=cpp, name=Lightning function Integer2x3(m00 : Integer, m01 : Integer, m02 : Integer, m10 : Integer, m11 : Integer, m12 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer3) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer2x3"},{"location":"reference/lightning_base_types/integer2x4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M02 : integer ``` lang=cpp, name=Lightning var M02 : Integer # M03 : integer ``` lang=cpp, name=Lightning var M03 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M12 : integer ``` lang=cpp, name=Lightning var M12 : Integer # M13 : integer ``` lang=cpp, name=Lightning var M13 : Integer # Methods # Get : integer4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer4 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer2x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer2x4() ``` # Integer2x4 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer2x4(p0 : Integer) ``` # Integer2x4 : Void constructor Name Type Description m00 integer m01 integer m02 integer m03 integer m10 integer m11 integer m12 integer m13 integer ``` lang=cpp, name=Lightning function Integer2x4(m00 : Integer, m01 : Integer, m02 : Integer, m03 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m13 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer4) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer2x4"},{"location":"reference/lightning_base_types/integer3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis ZAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : integer3 read-only static The smallest (most negative) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeMin : Integer3 # NegativeValueClosestToZero : integer3 read-only static The negative value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Integer3 # One : integer3 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Integer3 # PositiveMax : integer3 read-only static The largest (most positive) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveMax : Integer3 # PositiveValueClosestToZero : integer3 read-only static The positive value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Integer3 # XAxis : integer3 read-only static ``` lang=cpp, name=Lightning var XAxis : Integer3 # YAxis : integer3 read-only static ``` lang=cpp, name=Lightning var YAxis : Integer3 # ZAxis : integer3 read-only static ``` lang=cpp, name=Lightning var ZAxis : Integer3 # Zero : integer3 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Integer3 # Methods # Get : integer Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Integer ``` # GetAxis : integer3 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Integer3 # Integer3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer3() ``` # Integer3 : Void constructor Name Type Description scalar integer ``` lang=cpp, name=Lightning function Integer3(scalar : Integer) ``` # Integer3 : Void constructor Name Type Description p0 integer p1 integer p2 integer ``` lang=cpp, name=Lightning function Integer3(p0 : Integer, p1 : Integer, p2 : Integer) ``` # Integer3 : Void constructor Name Type Description p0 integer p1 integer2 ``` lang=cpp, name=Lightning function Integer3(p0 : Integer, p1 : Integer2) ``` # Integer3 : Void constructor Name Type Description p0 integer2 p1 integer ``` lang=cpp, name=Lightning function Integer3(p0 : Integer2, p1 : Integer) ``` # Set : Void Name Type Description p0 integer p1 integer ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Integer) ```","title":"Integer3"},{"location":"reference/lightning_base_types/integer3x2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M20 : integer ``` lang=cpp, name=Lightning var M20 : Integer # M21 : integer ``` lang=cpp, name=Lightning var M21 : Integer # Methods # Get : integer2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer2 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer3x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer3x2() ``` # Integer3x2 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer3x2(p0 : Integer) ``` # Integer3x2 : Void constructor Name Type Description m00 integer m01 integer m10 integer m11 integer m20 integer m21 integer ``` lang=cpp, name=Lightning function Integer3x2(m00 : Integer, m01 : Integer, m10 : Integer, m11 : Integer, m20 : Integer, m21 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer2) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer3x2"},{"location":"reference/lightning_base_types/integer3x3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M02 : integer ``` lang=cpp, name=Lightning var M02 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M12 : integer ``` lang=cpp, name=Lightning var M12 : Integer # M20 : integer ``` lang=cpp, name=Lightning var M20 : Integer # M21 : integer ``` lang=cpp, name=Lightning var M21 : Integer # M22 : integer ``` lang=cpp, name=Lightning var M22 : Integer # Methods # Get : integer3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer3 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer3x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer3x3() ``` # Integer3x3 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer3x3(p0 : Integer) ``` # Integer3x3 : Void constructor Name Type Description m00 integer m01 integer m02 integer m10 integer m11 integer m12 integer m20 integer m21 integer m22 integer ``` lang=cpp, name=Lightning function Integer3x3(m00 : Integer, m01 : Integer, m02 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m20 : Integer, m21 : Integer, m22 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer3) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer3x3"},{"location":"reference/lightning_base_types/integer3x4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M02 : integer ``` lang=cpp, name=Lightning var M02 : Integer # M03 : integer ``` lang=cpp, name=Lightning var M03 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M12 : integer ``` lang=cpp, name=Lightning var M12 : Integer # M13 : integer ``` lang=cpp, name=Lightning var M13 : Integer # M20 : integer ``` lang=cpp, name=Lightning var M20 : Integer # M21 : integer ``` lang=cpp, name=Lightning var M21 : Integer # M22 : integer ``` lang=cpp, name=Lightning var M22 : Integer # M23 : integer ``` lang=cpp, name=Lightning var M23 : Integer # Methods # Get : integer4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer4 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer3x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer3x4() ``` # Integer3x4 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer3x4(p0 : Integer) ``` # Integer3x4 : Void constructor Name Type Description m00 integer m01 integer m02 integer m03 integer m10 integer m11 integer m12 integer m13 integer m20 integer m21 integer m22 integer m23 integer ``` lang=cpp, name=Lightning function Integer3x4(m00 : Integer, m01 : Integer, m02 : Integer, m03 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m13 : Integer, m20 : Integer, m21 : Integer, m22 : Integer, m23 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer4) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer3x4"},{"location":"reference/lightning_base_types/integer4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero WAxis XAxis YAxis ZAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : integer4 read-only static The smallest (most negative) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeMin : Integer4 # NegativeValueClosestToZero : integer4 read-only static The negative value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Integer4 # One : integer4 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Integer4 # PositiveMax : integer4 read-only static The largest (most positive) value that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveMax : Integer4 # PositiveValueClosestToZero : integer4 read-only static The positive value closest to zero that can be represented by an Integer. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Integer4 # WAxis : integer4 read-only static ``` lang=cpp, name=Lightning var WAxis : Integer4 # XAxis : integer4 read-only static ``` lang=cpp, name=Lightning var XAxis : Integer4 # YAxis : integer4 read-only static ``` lang=cpp, name=Lightning var YAxis : Integer4 # ZAxis : integer4 read-only static ``` lang=cpp, name=Lightning var ZAxis : Integer4 # Zero : integer4 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Integer4 # Methods # Get : integer Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Integer ``` # GetAxis : integer4 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Integer4 # Integer4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer4() ``` # Integer4 : Void constructor Name Type Description scalar integer ``` lang=cpp, name=Lightning function Integer4(scalar : Integer) ``` # Integer4 : Void constructor Name Type Description p0 integer p1 integer p2 integer p3 integer ``` lang=cpp, name=Lightning function Integer4(p0 : Integer, p1 : Integer, p2 : Integer, p3 : Integer) ``` # Integer4 : Void constructor Name Type Description p0 integer p1 integer p2 integer2 ``` lang=cpp, name=Lightning function Integer4(p0 : Integer, p1 : Integer, p2 : Integer2) ``` # Integer4 : Void constructor Name Type Description p0 integer p1 integer2 p2 integer ``` lang=cpp, name=Lightning function Integer4(p0 : Integer, p1 : Integer2, p2 : Integer) ``` # Integer4 : Void constructor Name Type Description p0 integer p1 integer3 ``` lang=cpp, name=Lightning function Integer4(p0 : Integer, p1 : Integer3) ``` # Integer4 : Void constructor Name Type Description p0 integer2 p1 integer p2 integer ``` lang=cpp, name=Lightning function Integer4(p0 : Integer2, p1 : Integer, p2 : Integer) ``` # Integer4 : Void constructor Name Type Description p0 integer2 p1 integer2 ``` lang=cpp, name=Lightning function Integer4(p0 : Integer2, p1 : Integer2) ``` # Integer4 : Void constructor Name Type Description p0 integer3 p1 integer ``` lang=cpp, name=Lightning function Integer4(p0 : Integer3, p1 : Integer) ``` # Set : Void Name Type Description p0 integer p1 integer ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Integer) ```","title":"Integer4"},{"location":"reference/lightning_base_types/integer4x2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 M30 M31 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M20 : integer ``` lang=cpp, name=Lightning var M20 : Integer # M21 : integer ``` lang=cpp, name=Lightning var M21 : Integer # M30 : integer ``` lang=cpp, name=Lightning var M30 : Integer # M31 : integer ``` lang=cpp, name=Lightning var M31 : Integer # Methods # Get : integer2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer2 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer4x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer4x2() ``` # Integer4x2 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer4x2(p0 : Integer) ``` # Integer4x2 : Void constructor Name Type Description m00 integer m01 integer m10 integer m11 integer m20 integer m21 integer m30 integer m31 integer ``` lang=cpp, name=Lightning function Integer4x2(m00 : Integer, m01 : Integer, m10 : Integer, m11 : Integer, m20 : Integer, m21 : Integer, m30 : Integer, m31 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer2) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer4x2"},{"location":"reference/lightning_base_types/integer4x3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 M30 M31 M32 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M02 : integer ``` lang=cpp, name=Lightning var M02 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M12 : integer ``` lang=cpp, name=Lightning var M12 : Integer # M20 : integer ``` lang=cpp, name=Lightning var M20 : Integer # M21 : integer ``` lang=cpp, name=Lightning var M21 : Integer # M22 : integer ``` lang=cpp, name=Lightning var M22 : Integer # M30 : integer ``` lang=cpp, name=Lightning var M30 : Integer # M31 : integer ``` lang=cpp, name=Lightning var M31 : Integer # M32 : integer ``` lang=cpp, name=Lightning var M32 : Integer # Methods # Get : integer3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer3 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer4x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer4x3() ``` # Integer4x3 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer4x3(p0 : Integer) ``` # Integer4x3 : Void constructor Name Type Description m00 integer m01 integer m02 integer m10 integer m11 integer m12 integer m20 integer m21 integer m22 integer m30 integer m31 integer m32 integer ``` lang=cpp, name=Lightning function Integer4x3(m00 : Integer, m01 : Integer, m02 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m20 : Integer, m21 : Integer, m22 : Integer, m30 : Integer, m31 : Integer, m32 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer3) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer4x3"},{"location":"reference/lightning_base_types/integer4x4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 M30 M31 M32 M33 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : integer ``` lang=cpp, name=Lightning var M00 : Integer # M01 : integer ``` lang=cpp, name=Lightning var M01 : Integer # M02 : integer ``` lang=cpp, name=Lightning var M02 : Integer # M03 : integer ``` lang=cpp, name=Lightning var M03 : Integer # M10 : integer ``` lang=cpp, name=Lightning var M10 : Integer # M11 : integer ``` lang=cpp, name=Lightning var M11 : Integer # M12 : integer ``` lang=cpp, name=Lightning var M12 : Integer # M13 : integer ``` lang=cpp, name=Lightning var M13 : Integer # M20 : integer ``` lang=cpp, name=Lightning var M20 : Integer # M21 : integer ``` lang=cpp, name=Lightning var M21 : Integer # M22 : integer ``` lang=cpp, name=Lightning var M22 : Integer # M23 : integer ``` lang=cpp, name=Lightning var M23 : Integer # M30 : integer ``` lang=cpp, name=Lightning var M30 : Integer # M31 : integer ``` lang=cpp, name=Lightning var M31 : Integer # M32 : integer ``` lang=cpp, name=Lightning var M32 : Integer # M33 : integer ``` lang=cpp, name=Lightning var M33 : Integer # Methods # Get : integer4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Integer4 ``` # Get : integer Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Integer ``` # GetByIndex : integer Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Integer ``` # Integer4x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Integer4x4() ``` # Integer4x4 : Void constructor Name Type Description p0 integer ``` lang=cpp, name=Lightning function Integer4x4(p0 : Integer) ``` # Integer4x4 : Void constructor Name Type Description m00 integer m01 integer m02 integer m03 integer m10 integer m11 integer m12 integer m13 integer m20 integer m21 integer m22 integer m23 integer m30 integer m31 integer m32 integer m33 integer ``` lang=cpp, name=Lightning function Integer4x4(m00 : Integer, m01 : Integer, m02 : Integer, m03 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m13 : Integer, m20 : Integer, m21 : Integer, m22 : Integer, m23 : Integer, m30 : Integer, m31 : Integer, m32 : Integer, m33 : Integer) ``` # Set : Void Name Type Description y integer x integer value integer ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Integer) ``` # Set : Void Name Type Description y integer value integer4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Integer4) ``` # SetByIndex : Void Name Type Description index integer value integer ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Integer) ```","title":"Integer4x4"},{"location":"reference/lightning_base_types/istream/","text":"Core Methods Properties Base Classes Derived Classes Flush Capabilities filestream Constructor Count Read Position ReadAllText ReadByte ReadLine Seek Write WriteByte WriteText # Properties # Capabilities : StreamCapabilities read-only ``` lang=cpp, name=Lightning var Capabilities : StreamCapabilities # Count : doubleinteger ``` lang=cpp, name=Lightning var Count : DoubleInteger # Position : doubleinteger ``` lang=cpp, name=Lightning var Position : DoubleInteger # Methods # Flush : Void Name Type Description ``` lang=cpp, name=Lightning function Flush() ``` # IStream : Void constructor Name Type Description ``` lang=cpp, name=Lightning function IStream() ``` # Read : integer Name Type Description data Array[ byte ] byteStart integer byteCount integer ``` lang=cpp, name=Lightning function Read(data : Array[Byte], byteStart : Integer, byteCount : Integer) : Integer ``` # ReadAllText : string Name Type Description ``` lang=cpp, name=Lightning function ReadAllText() : String ``` # ReadAllText : string Name Type Description p0 iencoding ``` lang=cpp, name=Lightning function ReadAllText(p0 : IEncoding) : String ``` # ReadByte : integer Name Type Description ``` lang=cpp, name=Lightning function ReadByte() : Integer ``` # ReadLine : string Name Type Description ``` lang=cpp, name=Lightning function ReadLine() : String ``` # ReadLine : string Name Type Description p0 iencoding ``` lang=cpp, name=Lightning function ReadLine(p0 : IEncoding) : String ``` # Seek : boolean Name Type Description position doubleinteger origin StreamOrigin ``` lang=cpp, name=Lightning function Seek(position : DoubleInteger, origin : StreamOrigin) : Boolean ``` # Write : integer Name Type Description data Array[ byte ] ``` lang=cpp, name=Lightning function Write(data : Array[Byte]) : Integer ``` # Write : integer Name Type Description data Array[ byte ] byteStart integer byteCount integer ``` lang=cpp, name=Lightning function Write(data : Array[Byte], byteStart : Integer, byteCount : Integer) : Integer ``` # WriteByte : integer Name Type Description p0 byte ``` lang=cpp, name=Lightning function WriteByte(p0 : Byte) : Integer ``` # WriteText : integer Name Type Description text string ``` lang=cpp, name=Lightning function WriteText(text : String) : Integer ``` # WriteText : integer Name Type Description text string sourceStreamEncoding iencoding ``` lang=cpp, name=Lightning function WriteText(text : String, sourceStreamEncoding : IEncoding) : Integer ```","title":"Istream"},{"location":"reference/lightning_base_types/keyvalue_key%2C_value/","text":"Core Methods Properties Base Classes Derived Classes [[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key, value /#keyvalue-key, value-void Constructor]] [[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key, value /#key-key Key]] [[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key, value /#value-value Value]] # Properties # Key : Key ``` lang=cpp, name=Lightning var Key : Key # Value : Value ``` lang=cpp, name=Lightning var Value : Value # Methods # KeyValue[Key, Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function KeyValue Key, Value ``` # KeyValue[Key, Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function KeyValue Key, Value ```","title":"Keyvalue key, value"},{"location":"reference/lightning_base_types/keyvalue_key%2Cvalue/","text":"Core |Methods|Properties|Base Classes|Derived Classes| |---|---|---|---| |[[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key,value /#keyvalue-key,value-void | Constructor]]|[[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key,value /#key-plasma-engine-document | Key]]| | | | |[[plasma_engine_documentation/code_reference/lightning_base_types/keyvalue_key,value /#value-plasma-engine-docume | Value]]| | | # Properties # Key : Key ``` lang=cpp, name=Lightning var Key : Key # Value : Value ``` lang=cpp, name=Lightning var Value : Value # Methods # KeyValue[Key,Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function KeyValue Key,Value ``` # KeyValue[Key,Value] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function KeyValue Key,Value ```","title":"Keyvalue key,value"},{"location":"reference/lightning_base_types/library/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Library"},{"location":"reference/lightning_base_types/math/","text":"Core Methods Properties Base Classes Derived Classes Abs E ACos Pi AllNonZero Angle2D AngleBetween AnyNonZero ApproximatelyEqual ASin ATan ATan2 AxisAngle Ceil Clamp Cos Cosh CountBits Cross Determinant Distance DistanceSq Dot Euler Exp Exp2 Floor FMod Frac GenerateRotationMatrix2x2 GenerateRotationMatrix3x3 GenerateRotationMatrix4x4 GenerateScaleMatrix2x2 GenerateScaleMatrix3x3 GenerateScaleMatrix4x4 GenerateTransformMatrix2x2 GenerateTransformMatrix3x3 GenerateTransformMatrix4x4 GenerateTranslationMatrix3x3 GenerateTranslationMatrix4x4 Invert Length LengthSq Lerp Log Log10 Log2 Max Min Multiply MultiplyNormal MultiplyPoint MultiplyPointNoDivide Normalize Pow Project ProjectOnPlane ProjectOnVector ReflectAcrossPlane ReflectAcrossVector Refract RotateTowards RotateVector RotationQuaternionBetween Round RSqrt Saturate Sign SignedAngle Sin Sinh Slerp SlerpUnnormalized SmoothStep Sqrt Step Tan Tanh ToDegrees ToQuaternion ToRadians ToReal3x3 Transpose Truncate # Properties # E : real read-only static Euler's number. ``` lang=cpp, name=Lightning var E : Real # Pi : real read-only static ``` lang=cpp, name=Lightning var Pi : Real # Methods # Abs : integer static Returns the absolute value of value. |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function Abs(p0 : Integer) : Integer # Abs : integer2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2 | | lang=cpp, name=Lightning function Abs(p0 : Integer2) : Integer2 # Abs : integer2x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | lang=cpp, name=Lightning function Abs(p0 : Integer2x2) : Integer2x2 # Abs : integer2x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | lang=cpp, name=Lightning function Abs(p0 : Integer2x3) : Integer2x3 # Abs : integer2x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | lang=cpp, name=Lightning function Abs(p0 : Integer2x4) : Integer2x4 # Abs : integer3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3 | | lang=cpp, name=Lightning function Abs(p0 : Integer3) : Integer3 # Abs : integer3x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | lang=cpp, name=Lightning function Abs(p0 : Integer3x2) : Integer3x2 # Abs : integer3x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | lang=cpp, name=Lightning function Abs(p0 : Integer3x3) : Integer3x3 # Abs : integer3x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | lang=cpp, name=Lightning function Abs(p0 : Integer3x4) : Integer3x4 # Abs : integer4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4 | | lang=cpp, name=Lightning function Abs(p0 : Integer4) : Integer4 # Abs : integer4x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | lang=cpp, name=Lightning function Abs(p0 : Integer4x2) : Integer4x2 # Abs : integer4x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | lang=cpp, name=Lightning function Abs(p0 : Integer4x3) : Integer4x3 # Abs : integer4x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | lang=cpp, name=Lightning function Abs(p0 : Integer4x4) : Integer4x4 # Abs : real static Returns the absolute value of value. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Abs(p0 : Real) : Real # Abs : real2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Abs(p0 : Real2) : Real2 # Abs : real2x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Abs(p0 : Real2x2) : Real2x2 # Abs : real2x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Abs(p0 : Real2x3) : Real2x3 # Abs : real2x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Abs(p0 : Real2x4) : Real2x4 # Abs : real3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Abs(p0 : Real3) : Real3 # Abs : real3x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Abs(p0 : Real3x2) : Real3x2 # Abs : real3x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Abs(p0 : Real3x3) : Real3x3 # Abs : real3x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Abs(p0 : Real3x4) : Real3x4 # Abs : real4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Abs(p0 : Real4) : Real4 # Abs : real4x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Abs(p0 : Real4x2) : Real4x2 # Abs : real4x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Abs(p0 : Real4x3) : Real4x3 # Abs : real4x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Abs(p0 : Real4x4) : Real4x4 # ACos : real static The transcendental function arc-cosine |Name|Type|Description| |---|---|---| |units| real | | lang=cpp, name=Lightning function ACos(units : Real) : Real # ACos : real2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2 | | lang=cpp, name=Lightning function ACos(units : Real2) : Real2 # ACos : real2x2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x2 | | lang=cpp, name=Lightning function ACos(units : Real2x2) : Real2x2 # ACos : real2x3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x3 | | lang=cpp, name=Lightning function ACos(units : Real2x3) : Real2x3 # ACos : real2x4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x4 | | lang=cpp, name=Lightning function ACos(units : Real2x4) : Real2x4 # ACos : real3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3 | | lang=cpp, name=Lightning function ACos(units : Real3) : Real3 # ACos : real3x2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x2 | | lang=cpp, name=Lightning function ACos(units : Real3x2) : Real3x2 # ACos : real3x3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x3 | | lang=cpp, name=Lightning function ACos(units : Real3x3) : Real3x3 # ACos : real3x4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x4 | | lang=cpp, name=Lightning function ACos(units : Real3x4) : Real3x4 # ACos : real4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4 | | lang=cpp, name=Lightning function ACos(units : Real4) : Real4 # ACos : real4x2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x2 | | lang=cpp, name=Lightning function ACos(units : Real4x2) : Real4x2 # ACos : real4x3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x3 | | lang=cpp, name=Lightning function ACos(units : Real4x3) : Real4x3 # ACos : real4x4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x4 | | lang=cpp, name=Lightning function ACos(units : Real4x4) : Real4x4 # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean2) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean2x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean2x2) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean2x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean2x3) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean2x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean2x4) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean3) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean3x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean3x2) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean3x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean3x3) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean3x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean3x4) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean4) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean4x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean4x2) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean4x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean4x3) : Boolean # AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0| boolean4x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Boolean4x4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer2x2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer2x3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer2x4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer3x2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer3x3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer3x4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer4x2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer4x3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Integer4x4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function AllNonZero(p0 : Real) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real2x2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real2x3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real2x4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real3x2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real3x3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real3x4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real4) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real4x2) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real4x3) : Boolean # AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function AllNonZero(p0 : Real4x4) : Boolean # Angle2D : real static Computes the angle (in radians) about the z-axis between the vector and the x-axis. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Angle2D(p0 : Real3) : Real # AngleBetween : real static Returns the angle between two Quaternions in radians. |Name|Type|Description| |---|---|---| |p0| quaternion | | |p1| quaternion | | lang=cpp, name=Lightning function AngleBetween(p0 : Quaternion, p1 : Quaternion) : Real # AngleBetween : real static Returns the angle between two Real2s in radians. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function AngleBetween(p0 : Real2, p1 : Real2) : Real # AngleBetween : real static Returns the angle between two Real3s in radians. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function AngleBetween(p0 : Real3, p1 : Real3) : Real # AngleBetween : real static Returns the angle between two Real4s in radians. |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | lang=cpp, name=Lightning function AngleBetween(p0 : Real4, p1 : Real4) : Real # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean2) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean2x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean2x2) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean2x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean2x3) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean2x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean2x4) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean3) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean3x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean3x2) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean3x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean3x3) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean3x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean3x4) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean4) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean4x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean4x2) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean4x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean4x3) : Boolean # AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0| boolean4x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Boolean4x4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer2x2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer2x3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer2x4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer3x2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer3x3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer3x4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer4x2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer4x3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Integer4x4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real2x2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real2x3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real2x4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real3x2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real3x3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real3x4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real4) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real4x2) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real4x3) : Boolean # AnyNonZero : boolean static Returns true if any value is not plasma. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function AnyNonZero(p0 : Real4x4) : Boolean # ApproximatelyEqual : boolean static Checks if the two values are within epsilon distance from each other. |Name|Type|Description| |---|---|---| |p0| real | | |p1| real | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real, p1 : Real, epsilon : Real) : Boolean # ApproximatelyEqual : boolean2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real2, p1 : Real2, epsilon : Real) : Boolean2 # ApproximatelyEqual : boolean2x2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | |p1| real2x2 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real2x2, p1 : Real2x2, epsilon : Real) : Boolean2x2 # ApproximatelyEqual : boolean2x3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | |p1| real2x3 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real2x3, p1 : Real2x3, epsilon : Real) : Boolean2x3 # ApproximatelyEqual : boolean2x4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | |p1| real2x4 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real2x4, p1 : Real2x4, epsilon : Real) : Boolean2x4 # ApproximatelyEqual : boolean3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real3, p1 : Real3, epsilon : Real) : Boolean3 # ApproximatelyEqual : boolean3x2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | |p1| real3x2 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real3x2, p1 : Real3x2, epsilon : Real) : Boolean3x2 # ApproximatelyEqual : boolean3x3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | |p1| real3x3 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real3x3, p1 : Real3x3, epsilon : Real) : Boolean3x3 # ApproximatelyEqual : boolean3x4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | |p1| real3x4 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real3x4, p1 : Real3x4, epsilon : Real) : Boolean3x4 # ApproximatelyEqual : boolean4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real4, p1 : Real4, epsilon : Real) : Boolean4 # ApproximatelyEqual : boolean4x2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | |p1| real4x2 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real4x2, p1 : Real4x2, epsilon : Real) : Boolean4x2 # ApproximatelyEqual : boolean4x3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | |p1| real4x3 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real4x3, p1 : Real4x3, epsilon : Real) : Boolean4x3 # ApproximatelyEqual : boolean4x4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | |p1| real4x4 | | |epsilon| real | | lang=cpp, name=Lightning function ApproximatelyEqual(p0 : Real4x4, p1 : Real4x4, epsilon : Real) : Boolean4x4 # ASin : real static The transcendental function arc-sine |Name|Type|Description| |---|---|---| |units| real | | lang=cpp, name=Lightning function ASin(units : Real) : Real # ASin : real2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2 | | lang=cpp, name=Lightning function ASin(units : Real2) : Real2 # ASin : real2x2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x2 | | lang=cpp, name=Lightning function ASin(units : Real2x2) : Real2x2 # ASin : real2x3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x3 | | lang=cpp, name=Lightning function ASin(units : Real2x3) : Real2x3 # ASin : real2x4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x4 | | lang=cpp, name=Lightning function ASin(units : Real2x4) : Real2x4 # ASin : real3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3 | | lang=cpp, name=Lightning function ASin(units : Real3) : Real3 # ASin : real3x2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x2 | | lang=cpp, name=Lightning function ASin(units : Real3x2) : Real3x2 # ASin : real3x3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x3 | | lang=cpp, name=Lightning function ASin(units : Real3x3) : Real3x3 # ASin : real3x4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x4 | | lang=cpp, name=Lightning function ASin(units : Real3x4) : Real3x4 # ASin : real4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4 | | lang=cpp, name=Lightning function ASin(units : Real4) : Real4 # ASin : real4x2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x2 | | lang=cpp, name=Lightning function ASin(units : Real4x2) : Real4x2 # ASin : real4x3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x3 | | lang=cpp, name=Lightning function ASin(units : Real4x3) : Real4x3 # ASin : real4x4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x4 | | lang=cpp, name=Lightning function ASin(units : Real4x4) : Real4x4 # ATan : real static The transcendental function arc-tangent. The return type is in radians. |Name|Type|Description| |---|---|---| |units| real | | lang=cpp, name=Lightning function ATan(units : Real) : Real # ATan : real2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2 | | lang=cpp, name=Lightning function ATan(units : Real2) : Real2 # ATan : real2x2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x2 | | lang=cpp, name=Lightning function ATan(units : Real2x2) : Real2x2 # ATan : real2x3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x3 | | lang=cpp, name=Lightning function ATan(units : Real2x3) : Real2x3 # ATan : real2x4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real2x4 | | lang=cpp, name=Lightning function ATan(units : Real2x4) : Real2x4 # ATan : real3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3 | | lang=cpp, name=Lightning function ATan(units : Real3) : Real3 # ATan : real3x2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x2 | | lang=cpp, name=Lightning function ATan(units : Real3x2) : Real3x2 # ATan : real3x3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x3 | | lang=cpp, name=Lightning function ATan(units : Real3x3) : Real3x3 # ATan : real3x4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real3x4 | | lang=cpp, name=Lightning function ATan(units : Real3x4) : Real3x4 # ATan : real4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4 | | lang=cpp, name=Lightning function ATan(units : Real4) : Real4 # ATan : real4x2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x2 | | lang=cpp, name=Lightning function ATan(units : Real4x2) : Real4x2 # ATan : real4x3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x3 | | lang=cpp, name=Lightning function ATan(units : Real4x3) : Real4x3 # ATan : real4x4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units| real4x4 | | lang=cpp, name=Lightning function ATan(units : Real4x4) : Real4x4 # ATan2 : real static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. |Name|Type|Description| |---|---|---| |y| real | | |x| real | | lang=cpp, name=Lightning function ATan2(y : Real, x : Real) : Real # ATan2 : real2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2 | | |x| real2 | | lang=cpp, name=Lightning function ATan2(y : Real2, x : Real2) : Real2 # ATan2 : real2x2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2x2 | | |x| real2x2 | | lang=cpp, name=Lightning function ATan2(y : Real2x2, x : Real2x2) : Real2x2 # ATan2 : real2x3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2x3 | | |x| real2x3 | | lang=cpp, name=Lightning function ATan2(y : Real2x3, x : Real2x3) : Real2x3 # ATan2 : real2x4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2x4 | | |x| real2x4 | | lang=cpp, name=Lightning function ATan2(y : Real2x4, x : Real2x4) : Real2x4 # ATan2 : real3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3 | | |x| real3 | | lang=cpp, name=Lightning function ATan2(y : Real3, x : Real3) : Real3 # ATan2 : real3x2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3x2 | | |x| real3x2 | | lang=cpp, name=Lightning function ATan2(y : Real3x2, x : Real3x2) : Real3x2 # ATan2 : real3x3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3x3 | | |x| real3x3 | | lang=cpp, name=Lightning function ATan2(y : Real3x3, x : Real3x3) : Real3x3 # ATan2 : real3x4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3x4 | | |x| real3x4 | | lang=cpp, name=Lightning function ATan2(y : Real3x4, x : Real3x4) : Real3x4 # ATan2 : real4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4 | | |x| real4 | | lang=cpp, name=Lightning function ATan2(y : Real4, x : Real4) : Real4 # ATan2 : real4x2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4x2 | | |x| real4x2 | | lang=cpp, name=Lightning function ATan2(y : Real4x2, x : Real4x2) : Real4x2 # ATan2 : real4x3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4x3 | | |x| real4x3 | | lang=cpp, name=Lightning function ATan2(y : Real4x3, x : Real4x3) : Real4x3 # ATan2 : real4x4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4x4 | | |x| real4x4 | | lang=cpp, name=Lightning function ATan2(y : Real4x4, x : Real4x4) : Real4x4 # AxisAngle : quaternion static Generates the quaternion that rotates about the axis vector by the given radians. |Name|Type|Description| |---|---|---| |axis| real3 | | |radians| real | | lang=cpp, name=Lightning function AxisAngle(axis : Real3, radians : Real) : Quaternion # Ceil : real static Rounds value upward. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Ceil(p0 : Real) : Real # Ceil : real static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real, places : Integer) : Real # Ceil : real static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real, places : Integer, numericalBase : Integer) : Real # Ceil : real2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Ceil(p0 : Real2) : Real2 # Ceil : real2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real2, places : Integer) : Real2 # Ceil : real2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real2, places : Integer, numericalBase : Integer) : Real2 # Ceil : real2x2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Ceil(p0 : Real2x2) : Real2x2 # Ceil : real2x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real2x2, places : Integer) : Real2x2 # Ceil : real2x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 # Ceil : real2x3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Ceil(p0 : Real2x3) : Real2x3 # Ceil : real2x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real2x3, places : Integer) : Real2x3 # Ceil : real2x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 # Ceil : real2x4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Ceil(p0 : Real2x4) : Real2x4 # Ceil : real2x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real2x4, places : Integer) : Real2x4 # Ceil : real2x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 # Ceil : real3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Ceil(p0 : Real3) : Real3 # Ceil : real3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real3, places : Integer) : Real3 # Ceil : real3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real3, places : Integer, numericalBase : Integer) : Real3 # Ceil : real3x2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Ceil(p0 : Real3x2) : Real3x2 # Ceil : real3x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real3x2, places : Integer) : Real3x2 # Ceil : real3x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 # Ceil : real3x3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Ceil(p0 : Real3x3) : Real3x3 # Ceil : real3x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real3x3, places : Integer) : Real3x3 # Ceil : real3x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 # Ceil : real3x4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Ceil(p0 : Real3x4) : Real3x4 # Ceil : real3x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real3x4, places : Integer) : Real3x4 # Ceil : real3x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 # Ceil : real4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Ceil(p0 : Real4) : Real4 # Ceil : real4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real4, places : Integer) : Real4 # Ceil : real4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real4, places : Integer, numericalBase : Integer) : Real4 # Ceil : real4x2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Ceil(p0 : Real4x2) : Real4x2 # Ceil : real4x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real4x2, places : Integer) : Real4x2 # Ceil : real4x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 # Ceil : real4x3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Ceil(p0 : Real4x3) : Real4x3 # Ceil : real4x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real4x3, places : Integer) : Real4x3 # Ceil : real4x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 # Ceil : real4x4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Ceil(p0 : Real4x4) : Real4x4 # Ceil : real4x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | lang=cpp, name=Lightning function Ceil(value : Real4x4, places : Integer) : Real4x4 # Ceil : real4x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Ceil(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4 # Clamp : integer static Limits the value between the provided min and max. |Name|Type|Description| |---|---|---| |value| integer | | |min| integer | | |max| integer | | lang=cpp, name=Lightning function Clamp(value : Integer, min : Integer, max : Integer) : Integer # Clamp : integer2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer2 | | |min| integer2 | | |max| integer2 | | lang=cpp, name=Lightning function Clamp(value : Integer2, min : Integer2, max : Integer2) : Integer2 # Clamp : integer2x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer2x2 | | |min| integer2x2 | | |max| integer2x2 | | lang=cpp, name=Lightning function Clamp(value : Integer2x2, min : Integer2x2, max : Integer2x2) : Integer2x2 # Clamp : integer2x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer2x3 | | |min| integer2x3 | | |max| integer2x3 | | lang=cpp, name=Lightning function Clamp(value : Integer2x3, min : Integer2x3, max : Integer2x3) : Integer2x3 # Clamp : integer2x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer2x4 | | |min| integer2x4 | | |max| integer2x4 | | lang=cpp, name=Lightning function Clamp(value : Integer2x4, min : Integer2x4, max : Integer2x4) : Integer2x4 # Clamp : integer3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer3 | | |min| integer3 | | |max| integer3 | | lang=cpp, name=Lightning function Clamp(value : Integer3, min : Integer3, max : Integer3) : Integer3 # Clamp : integer3x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer3x2 | | |min| integer3x2 | | |max| integer3x2 | | lang=cpp, name=Lightning function Clamp(value : Integer3x2, min : Integer3x2, max : Integer3x2) : Integer3x2 # Clamp : integer3x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer3x3 | | |min| integer3x3 | | |max| integer3x3 | | lang=cpp, name=Lightning function Clamp(value : Integer3x3, min : Integer3x3, max : Integer3x3) : Integer3x3 # Clamp : integer3x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer3x4 | | |min| integer3x4 | | |max| integer3x4 | | lang=cpp, name=Lightning function Clamp(value : Integer3x4, min : Integer3x4, max : Integer3x4) : Integer3x4 # Clamp : integer4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer4 | | |min| integer4 | | |max| integer4 | | lang=cpp, name=Lightning function Clamp(value : Integer4, min : Integer4, max : Integer4) : Integer4 # Clamp : integer4x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer4x2 | | |min| integer4x2 | | |max| integer4x2 | | lang=cpp, name=Lightning function Clamp(value : Integer4x2, min : Integer4x2, max : Integer4x2) : Integer4x2 # Clamp : integer4x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer4x3 | | |min| integer4x3 | | |max| integer4x3 | | lang=cpp, name=Lightning function Clamp(value : Integer4x3, min : Integer4x3, max : Integer4x3) : Integer4x3 # Clamp : integer4x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| integer4x4 | | |min| integer4x4 | | |max| integer4x4 | | lang=cpp, name=Lightning function Clamp(value : Integer4x4, min : Integer4x4, max : Integer4x4) : Integer4x4 # Clamp : real static Limits the value between the provided min and max. |Name|Type|Description| |---|---|---| |value| real | | |min| real | | |max| real | | lang=cpp, name=Lightning function Clamp(value : Real, min : Real, max : Real) : Real # Clamp : real2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |min| real2 | | |max| real2 | | lang=cpp, name=Lightning function Clamp(value : Real2, min : Real2, max : Real2) : Real2 # Clamp : real2x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |min| real2x2 | | |max| real2x2 | | lang=cpp, name=Lightning function Clamp(value : Real2x2, min : Real2x2, max : Real2x2) : Real2x2 # Clamp : real2x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |min| real2x3 | | |max| real2x3 | | lang=cpp, name=Lightning function Clamp(value : Real2x3, min : Real2x3, max : Real2x3) : Real2x3 # Clamp : real2x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |min| real2x4 | | |max| real2x4 | | lang=cpp, name=Lightning function Clamp(value : Real2x4, min : Real2x4, max : Real2x4) : Real2x4 # Clamp : real3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |min| real3 | | |max| real3 | | lang=cpp, name=Lightning function Clamp(value : Real3, min : Real3, max : Real3) : Real3 # Clamp : real3x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |min| real3x2 | | |max| real3x2 | | lang=cpp, name=Lightning function Clamp(value : Real3x2, min : Real3x2, max : Real3x2) : Real3x2 # Clamp : real3x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |min| real3x3 | | |max| real3x3 | | lang=cpp, name=Lightning function Clamp(value : Real3x3, min : Real3x3, max : Real3x3) : Real3x3 # Clamp : real3x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |min| real3x4 | | |max| real3x4 | | lang=cpp, name=Lightning function Clamp(value : Real3x4, min : Real3x4, max : Real3x4) : Real3x4 # Clamp : real4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |min| real4 | | |max| real4 | | lang=cpp, name=Lightning function Clamp(value : Real4, min : Real4, max : Real4) : Real4 # Clamp : real4x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |min| real4x2 | | |max| real4x2 | | lang=cpp, name=Lightning function Clamp(value : Real4x2, min : Real4x2, max : Real4x2) : Real4x2 # Clamp : real4x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |min| real4x3 | | |max| real4x3 | | lang=cpp, name=Lightning function Clamp(value : Real4x3, min : Real4x3, max : Real4x3) : Real4x3 # Clamp : real4x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |min| real4x4 | | |max| real4x4 | | lang=cpp, name=Lightning function Clamp(value : Real4x4, min : Real4x4, max : Real4x4) : Real4x4 # Cos : real static The transcendental function cosine. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function Cos(radians : Real) : Real # Cos : real2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function Cos(radians : Real2) : Real2 # Cos : real2x2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function Cos(radians : Real2x2) : Real2x2 # Cos : real2x3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function Cos(radians : Real2x3) : Real2x3 # Cos : real2x4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function Cos(radians : Real2x4) : Real2x4 # Cos : real3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function Cos(radians : Real3) : Real3 # Cos : real3x2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function Cos(radians : Real3x2) : Real3x2 # Cos : real3x3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function Cos(radians : Real3x3) : Real3x3 # Cos : real3x4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function Cos(radians : Real3x4) : Real3x4 # Cos : real4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function Cos(radians : Real4) : Real4 # Cos : real4x2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function Cos(radians : Real4x2) : Real4x2 # Cos : real4x3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function Cos(radians : Real4x3) : Real4x3 # Cos : real4x4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function Cos(radians : Real4x4) : Real4x4 # Cosh : real static The hyperbolic cosine function. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function Cosh(radians : Real) : Real # Cosh : real2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function Cosh(radians : Real2) : Real2 # Cosh : real2x2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function Cosh(radians : Real2x2) : Real2x2 # Cosh : real2x3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function Cosh(radians : Real2x3) : Real2x3 # Cosh : real2x4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function Cosh(radians : Real2x4) : Real2x4 # Cosh : real3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function Cosh(radians : Real3) : Real3 # Cosh : real3x2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function Cosh(radians : Real3x2) : Real3x2 # Cosh : real3x3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function Cosh(radians : Real3x3) : Real3x3 # Cosh : real3x4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function Cosh(radians : Real3x4) : Real3x4 # Cosh : real4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function Cosh(radians : Real4) : Real4 # Cosh : real4x2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function Cosh(radians : Real4x2) : Real4x2 # Cosh : real4x3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function Cosh(radians : Real4x3) : Real4x3 # Cosh : real4x4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function Cosh(radians : Real4x4) : Real4x4 # CountBits : integer static Counts the number of bits set on the input. |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function CountBits(p0 : Integer) : Integer # CountBits : integer2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2 | | lang=cpp, name=Lightning function CountBits(p0 : Integer2) : Integer2 # CountBits : integer2x2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | lang=cpp, name=Lightning function CountBits(p0 : Integer2x2) : Integer2x2 # CountBits : integer2x3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | lang=cpp, name=Lightning function CountBits(p0 : Integer2x3) : Integer2x3 # CountBits : integer2x4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | lang=cpp, name=Lightning function CountBits(p0 : Integer2x4) : Integer2x4 # CountBits : integer3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3 | | lang=cpp, name=Lightning function CountBits(p0 : Integer3) : Integer3 # CountBits : integer3x2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | lang=cpp, name=Lightning function CountBits(p0 : Integer3x2) : Integer3x2 # CountBits : integer3x3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | lang=cpp, name=Lightning function CountBits(p0 : Integer3x3) : Integer3x3 # CountBits : integer3x4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | lang=cpp, name=Lightning function CountBits(p0 : Integer3x4) : Integer3x4 # CountBits : integer4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4 | | lang=cpp, name=Lightning function CountBits(p0 : Integer4) : Integer4 # CountBits : integer4x2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | lang=cpp, name=Lightning function CountBits(p0 : Integer4x2) : Integer4x2 # CountBits : integer4x3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | lang=cpp, name=Lightning function CountBits(p0 : Integer4x3) : Integer4x3 # CountBits : integer4x4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | lang=cpp, name=Lightning function CountBits(p0 : Integer4x4) : Integer4x4 # Cross : real2 static 2D cross product. Equivalent to Cross(Real3(0, 0, p0), Real3(p1.x, p1.y, 0)). |Name|Type|Description| |---|---|---| |p0| real | | |p1| real2 | | lang=cpp, name=Lightning function Cross(p0 : Real, p1 : Real2) : Real2 # Cross : real2 static 2D cross product. Equivalent to Cross(Real3(p0.x, p0.y, 0), Real3(0, 0, p1)). |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real | | lang=cpp, name=Lightning function Cross(p0 : Real2, p1 : Real) : Real2 # Cross : real static 2D cross product. Equivalent to Cross(Real3(p0.x, p0.y, 0), Real3(p1.x, p1.y, 0)). |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function Cross(p0 : Real2, p1 : Real2) : Real # Cross : real3 static The vector cross product. Creates a new vector perpendicular to p0 and p1 using the right hand rule. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function Cross(p0 : Real3, p1 : Real3) : Real3 # Determinant : real static Computes the determinant of the given matrix |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Determinant(p0 : Real2x2) : Real # Determinant : real static Computes the determinant of the given matrix |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Determinant(p0 : Real3x3) : Real # Determinant : real static Computes the determinant of the given matrix |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Determinant(p0 : Real4x4) : Real # Distance : real static Returns the distance between two points. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function Distance(p0 : Real2, p1 : Real2) : Real # Distance : real static Returns the distance between two points. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function Distance(p0 : Real3, p1 : Real3) : Real # Distance : real static Returns the distance between two points. |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | lang=cpp, name=Lightning function Distance(p0 : Real4, p1 : Real4) : Real # DistanceSq : real static Returns the squared distance between two points. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function DistanceSq(p0 : Real2, p1 : Real2) : Real # DistanceSq : real static Returns the squared distance between two points. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function DistanceSq(p0 : Real3, p1 : Real3) : Real # DistanceSq : real static Returns the squared distance between two points. |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | lang=cpp, name=Lightning function DistanceSq(p0 : Real4, p1 : Real4) : Real # Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0| quaternion | | |p1| quaternion | | lang=cpp, name=Lightning function Dot(p0 : Quaternion, p1 : Quaternion) : Real # Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function Dot(p0 : Real2, p1 : Real2) : Real # Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function Dot(p0 : Real3, p1 : Real3) : Real # Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | lang=cpp, name=Lightning function Dot(p0 : Real4, p1 : Real4) : Real # Euler : quaternion static Generates the orientation from the given Euler angle vector |Name|Type|Description| |---|---|---| |eulerRadians| real3 | | lang=cpp, name=Lightning function Euler(eulerRadians : Real3) : Quaternion # Exp : real static Returns the base-e exponentiation of value, which is e^value. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Exp(p0 : Real) : Real # Exp : real2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Exp(p0 : Real2) : Real2 # Exp : real2x2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Exp(p0 : Real2x2) : Real2x2 # Exp : real2x3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Exp(p0 : Real2x3) : Real2x3 # Exp : real2x4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Exp(p0 : Real2x4) : Real2x4 # Exp : real3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Exp(p0 : Real3) : Real3 # Exp : real3x2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Exp(p0 : Real3x2) : Real3x2 # Exp : real3x3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Exp(p0 : Real3x3) : Real3x3 # Exp : real3x4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Exp(p0 : Real3x4) : Real3x4 # Exp : real4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Exp(p0 : Real4) : Real4 # Exp : real4x2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Exp(p0 : Real4x2) : Real4x2 # Exp : real4x3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Exp(p0 : Real4x3) : Real4x3 # Exp : real4x4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Exp(p0 : Real4x4) : Real4x4 # Exp2 : real static Returns the base-2 exponentiation of value, which is 2^value. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Exp2(p0 : Real) : Real # Exp2 : real2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Exp2(p0 : Real2) : Real2 # Exp2 : real2x2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Exp2(p0 : Real2x2) : Real2x2 # Exp2 : real2x3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Exp2(p0 : Real2x3) : Real2x3 # Exp2 : real2x4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Exp2(p0 : Real2x4) : Real2x4 # Exp2 : real3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Exp2(p0 : Real3) : Real3 # Exp2 : real3x2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Exp2(p0 : Real3x2) : Real3x2 # Exp2 : real3x3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Exp2(p0 : Real3x3) : Real3x3 # Exp2 : real3x4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Exp2(p0 : Real3x4) : Real3x4 # Exp2 : real4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Exp2(p0 : Real4) : Real4 # Exp2 : real4x2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Exp2(p0 : Real4x2) : Real4x2 # Exp2 : real4x3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Exp2(p0 : Real4x3) : Real4x3 # Exp2 : real4x4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Exp2(p0 : Real4x4) : Real4x4 # Floor : real static Rounds value downward. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Floor(p0 : Real) : Real # Floor : real static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real, places : Integer) : Real # Floor : real static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real, places : Integer, numericalBase : Integer) : Real # Floor : real2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Floor(p0 : Real2) : Real2 # Floor : real2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real2, places : Integer) : Real2 # Floor : real2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real2, places : Integer, numericalBase : Integer) : Real2 # Floor : real2x2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Floor(p0 : Real2x2) : Real2x2 # Floor : real2x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real2x2, places : Integer) : Real2x2 # Floor : real2x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 # Floor : real2x3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Floor(p0 : Real2x3) : Real2x3 # Floor : real2x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real2x3, places : Integer) : Real2x3 # Floor : real2x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 # Floor : real2x4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Floor(p0 : Real2x4) : Real2x4 # Floor : real2x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real2x4, places : Integer) : Real2x4 # Floor : real2x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 # Floor : real3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Floor(p0 : Real3) : Real3 # Floor : real3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real3, places : Integer) : Real3 # Floor : real3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real3, places : Integer, numericalBase : Integer) : Real3 # Floor : real3x2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Floor(p0 : Real3x2) : Real3x2 # Floor : real3x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real3x2, places : Integer) : Real3x2 # Floor : real3x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 # Floor : real3x3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Floor(p0 : Real3x3) : Real3x3 # Floor : real3x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real3x3, places : Integer) : Real3x3 # Floor : real3x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 # Floor : real3x4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Floor(p0 : Real3x4) : Real3x4 # Floor : real3x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real3x4, places : Integer) : Real3x4 # Floor : real3x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 # Floor : real4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Floor(p0 : Real4) : Real4 # Floor : real4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real4, places : Integer) : Real4 # Floor : real4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real4, places : Integer, numericalBase : Integer) : Real4 # Floor : real4x2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Floor(p0 : Real4x2) : Real4x2 # Floor : real4x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real4x2, places : Integer) : Real4x2 # Floor : real4x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 # Floor : real4x3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Floor(p0 : Real4x3) : Real4x3 # Floor : real4x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real4x3, places : Integer) : Real4x3 # Floor : real4x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 # Floor : real4x4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Floor(p0 : Real4x4) : Real4x4 # Floor : real4x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | lang=cpp, name=Lightning function Floor(value : Real4x4, places : Integer) : Real4x4 # Floor : real4x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Floor(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4 # FMod : real static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). |Name|Type|Description| |---|---|---| |numerator| real | | |denominator| real | | lang=cpp, name=Lightning function FMod(numerator : Real, denominator : Real) : Real # FMod : real2 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real2 | | |denominator| real2 | | lang=cpp, name=Lightning function FMod(numerator : Real2, denominator : Real2) : Real2 # FMod : real2x2 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real2x2 | | |denominator| real2x2 | | lang=cpp, name=Lightning function FMod(numerator : Real2x2, denominator : Real2x2) : Real2x2 # FMod : real2x3 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real2x3 | | |denominator| real2x3 | | lang=cpp, name=Lightning function FMod(numerator : Real2x3, denominator : Real2x3) : Real2x3 # FMod : real2x4 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real2x4 | | |denominator| real2x4 | | lang=cpp, name=Lightning function FMod(numerator : Real2x4, denominator : Real2x4) : Real2x4 # FMod : real3 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real3 | | |denominator| real3 | | lang=cpp, name=Lightning function FMod(numerator : Real3, denominator : Real3) : Real3 # FMod : real3x2 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real3x2 | | |denominator| real3x2 | | lang=cpp, name=Lightning function FMod(numerator : Real3x2, denominator : Real3x2) : Real3x2 # FMod : real3x3 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real3x3 | | |denominator| real3x3 | | lang=cpp, name=Lightning function FMod(numerator : Real3x3, denominator : Real3x3) : Real3x3 # FMod : real3x4 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real3x4 | | |denominator| real3x4 | | lang=cpp, name=Lightning function FMod(numerator : Real3x4, denominator : Real3x4) : Real3x4 # FMod : real4 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real4 | | |denominator| real4 | | lang=cpp, name=Lightning function FMod(numerator : Real4, denominator : Real4) : Real4 # FMod : real4x2 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real4x2 | | |denominator| real4x2 | | lang=cpp, name=Lightning function FMod(numerator : Real4x2, denominator : Real4x2) : Real4x2 # FMod : real4x3 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real4x3 | | |denominator| real4x3 | | lang=cpp, name=Lightning function FMod(numerator : Real4x3, denominator : Real4x3) : Real4x3 # FMod : real4x4 static Returns the floating-point remainder of numerator/denominator (rounded towards plasma). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator| real4x4 | | |denominator| real4x4 | | lang=cpp, name=Lightning function FMod(numerator : Real4x4, denominator : Real4x4) : Real4x4 # Frac : real static Returns the fractional part of value, a value between 0 and 1. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Frac(p0 : Real) : Real # Frac : real2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Frac(p0 : Real2) : Real2 # Frac : real2x2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Frac(p0 : Real2x2) : Real2x2 # Frac : real2x3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Frac(p0 : Real2x3) : Real2x3 # Frac : real2x4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Frac(p0 : Real2x4) : Real2x4 # Frac : real3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Frac(p0 : Real3) : Real3 # Frac : real3x2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Frac(p0 : Real3x2) : Real3x2 # Frac : real3x3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Frac(p0 : Real3x3) : Real3x3 # Frac : real3x4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Frac(p0 : Real3x4) : Real3x4 # Frac : real4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Frac(p0 : Real4) : Real4 # Frac : real4x2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Frac(p0 : Real4x2) : Real4x2 # Frac : real4x3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Frac(p0 : Real4x3) : Real4x3 # Frac : real4x4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Frac(p0 : Real4x4) : Real4x4 # GenerateRotationMatrix2x2 : real2x2 static Generates a two-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function GenerateRotationMatrix2x2(radians : Real) : Real2x2 # GenerateRotationMatrix3x3 : real3x3 static Generates a two-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function GenerateRotationMatrix3x3(radians : Real) : Real3x3 # GenerateRotationMatrix3x3 : real3x3 static Generates a three-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |axis| real3 | | |radians| real | | lang=cpp, name=Lightning function GenerateRotationMatrix3x3(axis : Real3, radians : Real) : Real3x3 # GenerateRotationMatrix4x4 : real4x4 static Generates a three-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |axis| real3 | | |radians| real | | lang=cpp, name=Lightning function GenerateRotationMatrix4x4(axis : Real3, radians : Real) : Real4x4 # GenerateScaleMatrix2x2 : real2x2 static Generates a two-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale| real2 | | lang=cpp, name=Lightning function GenerateScaleMatrix2x2(scale : Real2) : Real2x2 # GenerateScaleMatrix3x3 : real3x3 static Generates a two-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale| real2 | | lang=cpp, name=Lightning function GenerateScaleMatrix3x3(scale : Real2) : Real3x3 # GenerateScaleMatrix3x3 : real3x3 static Generates a three-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale| real3 | | lang=cpp, name=Lightning function GenerateScaleMatrix3x3(scale : Real3) : Real3x3 # GenerateScaleMatrix4x4 : real4x4 static Generates a three-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale| real3 | | lang=cpp, name=Lightning function GenerateScaleMatrix4x4(scale : Real3) : Real4x4 # GenerateTransformMatrix2x2 : real2x2 static Generates a two-dimensional transform. |Name|Type|Description| |---|---|---| |radians| real | | |scale| real2 | | lang=cpp, name=Lightning function GenerateTransformMatrix2x2(radians : Real, scale : Real2) : Real2x2 # GenerateTransformMatrix3x3 : real3x3 static Generates a three-dimensions transform. |Name|Type|Description| |---|---|---| |rotation| quaternion | | |scale| real3 | | lang=cpp, name=Lightning function GenerateTransformMatrix3x3(rotation : Quaternion, scale : Real3) : Real3x3 # GenerateTransformMatrix3x3 : real3x3 static Generates a two-dimensions transform. |Name|Type|Description| |---|---|---| |translation| real2 | | |radians| real | | |scale| real2 | | lang=cpp, name=Lightning function GenerateTransformMatrix3x3(translation : Real2, radians : Real, scale : Real2) : Real3x3 # GenerateTransformMatrix3x3 : real3x3 static Generates a three-dimensions transform. |Name|Type|Description| |---|---|---| |rotation| real3x3 | | |scale| real3 | | lang=cpp, name=Lightning function GenerateTransformMatrix3x3(rotation : Real3x3, scale : Real3) : Real3x3 # GenerateTransformMatrix4x4 : real4x4 static Generates a three-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation| real3 | | |rotation| quaternion | | |scale| real3 | | lang=cpp, name=Lightning function GenerateTransformMatrix4x4(translation : Real3, rotation : Quaternion, scale : Real3) : Real4x4 # GenerateTransformMatrix4x4 : real4x4 static Generates a three-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation| real3 | | |rotation| real3x3 | | |scale| real3 | | lang=cpp, name=Lightning function GenerateTransformMatrix4x4(translation : Real3, rotation : Real3x3, scale : Real3) : Real4x4 # GenerateTranslationMatrix3x3 : real3x3 static Generates a two-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation| real2 | | lang=cpp, name=Lightning function GenerateTranslationMatrix3x3(translation : Real2) : Real3x3 # GenerateTranslationMatrix4x4 : real4x4 static Generates a three-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation| real3 | | lang=cpp, name=Lightning function GenerateTranslationMatrix4x4(translation : Real3) : Real4x4 # Invert : quaternion static Returns the inverse rotation. |Name|Type|Description| |---|---|---| |p0| quaternion | | lang=cpp, name=Lightning function Invert(p0 : Quaternion) : Quaternion # Invert : real2x2 static Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Invert(p0 : Real2x2) : Real2x2 # Invert : real3x3 static Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Invert(p0 : Real3x3) : Real3x3 # Invert : real4x4 static Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Invert(p0 : Real4x4) : Real4x4 # Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0| quaternion | | lang=cpp, name=Lightning function Length(p0 : Quaternion) : Real # Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Length(p0 : Real2) : Real # Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Length(p0 : Real3) : Real # Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Length(p0 : Real4) : Real # LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0| quaternion | | lang=cpp, name=Lightning function LengthSq(p0 : Quaternion) : Real # LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function LengthSq(p0 : Real2) : Real # LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function LengthSq(p0 : Real3) : Real # LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function LengthSq(p0 : Real4) : Real # Lerp : real static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. |Name|Type|Description| |---|---|---| |start| real | | |end| real | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real, end : Real, t : Real) : Real # Lerp : real2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2 | | |end| real2 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real2, end : Real2, t : Real) : Real2 # Lerp : real2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2 | | |end| real2 | | |t| real2 | | lang=cpp, name=Lightning function Lerp(start : Real2, end : Real2, t : Real2) : Real2 # Lerp : real2x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2x2 | | |end| real2x2 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real2x2, end : Real2x2, t : Real) : Real2x2 # Lerp : real2x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2x2 | | |end| real2x2 | | |t| real2x2 | | lang=cpp, name=Lightning function Lerp(start : Real2x2, end : Real2x2, t : Real2x2) : Real2x2 # Lerp : real2x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2x3 | | |end| real2x3 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real2x3, end : Real2x3, t : Real) : Real2x3 # Lerp : real2x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2x3 | | |end| real2x3 | | |t| real2x3 | | lang=cpp, name=Lightning function Lerp(start : Real2x3, end : Real2x3, t : Real2x3) : Real2x3 # Lerp : real2x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2x4 | | |end| real2x4 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real2x4, end : Real2x4, t : Real) : Real2x4 # Lerp : real2x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real2x4 | | |end| real2x4 | | |t| real2x4 | | lang=cpp, name=Lightning function Lerp(start : Real2x4, end : Real2x4, t : Real2x4) : Real2x4 # Lerp : real3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3 | | |end| real3 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real3, end : Real3, t : Real) : Real3 # Lerp : real3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3 | | |end| real3 | | |t| real3 | | lang=cpp, name=Lightning function Lerp(start : Real3, end : Real3, t : Real3) : Real3 # Lerp : real3x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3x2 | | |end| real3x2 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real3x2, end : Real3x2, t : Real) : Real3x2 # Lerp : real3x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3x2 | | |end| real3x2 | | |t| real3x2 | | lang=cpp, name=Lightning function Lerp(start : Real3x2, end : Real3x2, t : Real3x2) : Real3x2 # Lerp : real3x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3x3 | | |end| real3x3 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real3x3, end : Real3x3, t : Real) : Real3x3 # Lerp : real3x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3x3 | | |end| real3x3 | | |t| real3x3 | | lang=cpp, name=Lightning function Lerp(start : Real3x3, end : Real3x3, t : Real3x3) : Real3x3 # Lerp : real3x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3x4 | | |end| real3x4 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real3x4, end : Real3x4, t : Real) : Real3x4 # Lerp : real3x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real3x4 | | |end| real3x4 | | |t| real3x4 | | lang=cpp, name=Lightning function Lerp(start : Real3x4, end : Real3x4, t : Real3x4) : Real3x4 # Lerp : real4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4 | | |end| real4 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real4, end : Real4, t : Real) : Real4 # Lerp : real4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4 | | |end| real4 | | |t| real4 | | lang=cpp, name=Lightning function Lerp(start : Real4, end : Real4, t : Real4) : Real4 # Lerp : real4x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4x2 | | |end| real4x2 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real4x2, end : Real4x2, t : Real) : Real4x2 # Lerp : real4x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4x2 | | |end| real4x2 | | |t| real4x2 | | lang=cpp, name=Lightning function Lerp(start : Real4x2, end : Real4x2, t : Real4x2) : Real4x2 # Lerp : real4x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4x3 | | |end| real4x3 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real4x3, end : Real4x3, t : Real) : Real4x3 # Lerp : real4x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4x3 | | |end| real4x3 | | |t| real4x3 | | lang=cpp, name=Lightning function Lerp(start : Real4x3, end : Real4x3, t : Real4x3) : Real4x3 # Lerp : real4x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4x4 | | |end| real4x4 | | |t| real | | lang=cpp, name=Lightning function Lerp(start : Real4x4, end : Real4x4, t : Real) : Real4x4 # Lerp : real4x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start| real4x4 | | |end| real4x4 | | |t| real4x4 | | lang=cpp, name=Lightning function Lerp(start : Real4x4, end : Real4x4, t : Real4x4) : Real4x4 # Log : real static Base e logarithm. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Log(p0 : Real) : Real # Log : real2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Log(p0 : Real2) : Real2 # Log : real2x2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Log(p0 : Real2x2) : Real2x2 # Log : real2x3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Log(p0 : Real2x3) : Real2x3 # Log : real2x4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Log(p0 : Real2x4) : Real2x4 # Log : real3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Log(p0 : Real3) : Real3 # Log : real3x2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Log(p0 : Real3x2) : Real3x2 # Log : real3x3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Log(p0 : Real3x3) : Real3x3 # Log : real3x4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Log(p0 : Real3x4) : Real3x4 # Log : real4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Log(p0 : Real4) : Real4 # Log : real4x2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Log(p0 : Real4x2) : Real4x2 # Log : real4x3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Log(p0 : Real4x3) : Real4x3 # Log : real4x4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Log(p0 : Real4x4) : Real4x4 # Log10 : real static Base 10 logarithm. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Log10(p0 : Real) : Real # Log10 : real2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Log10(p0 : Real2) : Real2 # Log10 : real2x2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Log10(p0 : Real2x2) : Real2x2 # Log10 : real2x3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Log10(p0 : Real2x3) : Real2x3 # Log10 : real2x4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Log10(p0 : Real2x4) : Real2x4 # Log10 : real3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Log10(p0 : Real3) : Real3 # Log10 : real3x2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Log10(p0 : Real3x2) : Real3x2 # Log10 : real3x3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Log10(p0 : Real3x3) : Real3x3 # Log10 : real3x4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Log10(p0 : Real3x4) : Real3x4 # Log10 : real4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Log10(p0 : Real4) : Real4 # Log10 : real4x2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Log10(p0 : Real4x2) : Real4x2 # Log10 : real4x3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Log10(p0 : Real4x3) : Real4x3 # Log10 : real4x4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Log10(p0 : Real4x4) : Real4x4 # Log2 : real static Base 2 logarithm. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Log2(p0 : Real) : Real # Log2 : real2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Log2(p0 : Real2) : Real2 # Log2 : real2x2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Log2(p0 : Real2x2) : Real2x2 # Log2 : real2x3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Log2(p0 : Real2x3) : Real2x3 # Log2 : real2x4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Log2(p0 : Real2x4) : Real2x4 # Log2 : real3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Log2(p0 : Real3) : Real3 # Log2 : real3x2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Log2(p0 : Real3x2) : Real3x2 # Log2 : real3x3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Log2(p0 : Real3x3) : Real3x3 # Log2 : real3x4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Log2(p0 : Real3x4) : Real3x4 # Log2 : real4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Log2(p0 : Real4) : Real4 # Log2 : real4x2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Log2(p0 : Real4x2) : Real4x2 # Log2 : real4x3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Log2(p0 : Real4x3) : Real4x3 # Log2 : real4x4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Log2(p0 : Real4x4) : Real4x4 # Max : integer static Returns whichever value is larger. |Name|Type|Description| |---|---|---| |p0| integer | | |p1| integer | | lang=cpp, name=Lightning function Max(p0 : Integer, p1 : Integer) : Integer # Max : integer2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2 | | |p1| integer2 | | lang=cpp, name=Lightning function Max(p0 : Integer2, p1 : Integer2) : Integer2 # Max : integer2x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | |p1| integer2x2 | | lang=cpp, name=Lightning function Max(p0 : Integer2x2, p1 : Integer2x2) : Integer2x2 # Max : integer2x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | |p1| integer2x3 | | lang=cpp, name=Lightning function Max(p0 : Integer2x3, p1 : Integer2x3) : Integer2x3 # Max : integer2x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | |p1| integer2x4 | | lang=cpp, name=Lightning function Max(p0 : Integer2x4, p1 : Integer2x4) : Integer2x4 # Max : integer3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3 | | |p1| integer3 | | lang=cpp, name=Lightning function Max(p0 : Integer3, p1 : Integer3) : Integer3 # Max : integer3x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | |p1| integer3x2 | | lang=cpp, name=Lightning function Max(p0 : Integer3x2, p1 : Integer3x2) : Integer3x2 # Max : integer3x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | |p1| integer3x3 | | lang=cpp, name=Lightning function Max(p0 : Integer3x3, p1 : Integer3x3) : Integer3x3 # Max : integer3x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | |p1| integer3x4 | | lang=cpp, name=Lightning function Max(p0 : Integer3x4, p1 : Integer3x4) : Integer3x4 # Max : integer4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4 | | |p1| integer4 | | lang=cpp, name=Lightning function Max(p0 : Integer4, p1 : Integer4) : Integer4 # Max : integer4x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | |p1| integer4x2 | | lang=cpp, name=Lightning function Max(p0 : Integer4x2, p1 : Integer4x2) : Integer4x2 # Max : integer4x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | |p1| integer4x3 | | lang=cpp, name=Lightning function Max(p0 : Integer4x3, p1 : Integer4x3) : Integer4x3 # Max : integer4x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | |p1| integer4x4 | | lang=cpp, name=Lightning function Max(p0 : Integer4x4, p1 : Integer4x4) : Integer4x4 # Max : real static Returns whichever value is larger. |Name|Type|Description| |---|---|---| |p0| real | | |p1| real | | lang=cpp, name=Lightning function Max(p0 : Real, p1 : Real) : Real # Max : real2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function Max(p0 : Real2, p1 : Real2) : Real2 # Max : real2x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | |p1| real2x2 | | lang=cpp, name=Lightning function Max(p0 : Real2x2, p1 : Real2x2) : Real2x2 # Max : real2x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | |p1| real2x3 | | lang=cpp, name=Lightning function Max(p0 : Real2x3, p1 : Real2x3) : Real2x3 # Max : real2x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | |p1| real2x4 | | lang=cpp, name=Lightning function Max(p0 : Real2x4, p1 : Real2x4) : Real2x4 # Max : real3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function Max(p0 : Real3, p1 : Real3) : Real3 # Max : real3x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | |p1| real3x2 | | lang=cpp, name=Lightning function Max(p0 : Real3x2, p1 : Real3x2) : Real3x2 # Max : real3x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | |p1| real3x3 | | lang=cpp, name=Lightning function Max(p0 : Real3x3, p1 : Real3x3) : Real3x3 # Max : real3x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | |p1| real3x4 | | lang=cpp, name=Lightning function Max(p0 : Real3x4, p1 : Real3x4) : Real3x4 # Max : real4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | lang=cpp, name=Lightning function Max(p0 : Real4, p1 : Real4) : Real4 # Max : real4x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | |p1| real4x2 | | lang=cpp, name=Lightning function Max(p0 : Real4x2, p1 : Real4x2) : Real4x2 # Max : real4x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | |p1| real4x3 | | lang=cpp, name=Lightning function Max(p0 : Real4x3, p1 : Real4x3) : Real4x3 # Max : real4x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | |p1| real4x4 | | lang=cpp, name=Lightning function Max(p0 : Real4x4, p1 : Real4x4) : Real4x4 # Min : integer static Returns whichever value is smaller. |Name|Type|Description| |---|---|---| |p0| integer | | |p1| integer | | lang=cpp, name=Lightning function Min(p0 : Integer, p1 : Integer) : Integer # Min : integer2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2 | | |p1| integer2 | | lang=cpp, name=Lightning function Min(p0 : Integer2, p1 : Integer2) : Integer2 # Min : integer2x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | |p1| integer2x2 | | lang=cpp, name=Lightning function Min(p0 : Integer2x2, p1 : Integer2x2) : Integer2x2 # Min : integer2x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | |p1| integer2x3 | | lang=cpp, name=Lightning function Min(p0 : Integer2x3, p1 : Integer2x3) : Integer2x3 # Min : integer2x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | |p1| integer2x4 | | lang=cpp, name=Lightning function Min(p0 : Integer2x4, p1 : Integer2x4) : Integer2x4 # Min : integer3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3 | | |p1| integer3 | | lang=cpp, name=Lightning function Min(p0 : Integer3, p1 : Integer3) : Integer3 # Min : integer3x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | |p1| integer3x2 | | lang=cpp, name=Lightning function Min(p0 : Integer3x2, p1 : Integer3x2) : Integer3x2 # Min : integer3x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | |p1| integer3x3 | | lang=cpp, name=Lightning function Min(p0 : Integer3x3, p1 : Integer3x3) : Integer3x3 # Min : integer3x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | |p1| integer3x4 | | lang=cpp, name=Lightning function Min(p0 : Integer3x4, p1 : Integer3x4) : Integer3x4 # Min : integer4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4 | | |p1| integer4 | | lang=cpp, name=Lightning function Min(p0 : Integer4, p1 : Integer4) : Integer4 # Min : integer4x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | |p1| integer4x2 | | lang=cpp, name=Lightning function Min(p0 : Integer4x2, p1 : Integer4x2) : Integer4x2 # Min : integer4x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | |p1| integer4x3 | | lang=cpp, name=Lightning function Min(p0 : Integer4x3, p1 : Integer4x3) : Integer4x3 # Min : integer4x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | |p1| integer4x4 | | lang=cpp, name=Lightning function Min(p0 : Integer4x4, p1 : Integer4x4) : Integer4x4 # Min : real static Returns whichever value is smaller. |Name|Type|Description| |---|---|---| |p0| real | | |p1| real | | lang=cpp, name=Lightning function Min(p0 : Real, p1 : Real) : Real # Min : real2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | lang=cpp, name=Lightning function Min(p0 : Real2, p1 : Real2) : Real2 # Min : real2x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | |p1| real2x2 | | lang=cpp, name=Lightning function Min(p0 : Real2x2, p1 : Real2x2) : Real2x2 # Min : real2x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | |p1| real2x3 | | lang=cpp, name=Lightning function Min(p0 : Real2x3, p1 : Real2x3) : Real2x3 # Min : real2x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | |p1| real2x4 | | lang=cpp, name=Lightning function Min(p0 : Real2x4, p1 : Real2x4) : Real2x4 # Min : real3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | lang=cpp, name=Lightning function Min(p0 : Real3, p1 : Real3) : Real3 # Min : real3x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | |p1| real3x2 | | lang=cpp, name=Lightning function Min(p0 : Real3x2, p1 : Real3x2) : Real3x2 # Min : real3x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | |p1| real3x3 | | lang=cpp, name=Lightning function Min(p0 : Real3x3, p1 : Real3x3) : Real3x3 # Min : real3x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | |p1| real3x4 | | lang=cpp, name=Lightning function Min(p0 : Real3x4, p1 : Real3x4) : Real3x4 # Min : real4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | |p1| real4 | | lang=cpp, name=Lightning function Min(p0 : Real4, p1 : Real4) : Real4 # Min : real4x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | |p1| real4x2 | | lang=cpp, name=Lightning function Min(p0 : Real4x2, p1 : Real4x2) : Real4x2 # Min : real4x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | |p1| real4x3 | | lang=cpp, name=Lightning function Min(p0 : Real4x3, p1 : Real4x3) : Real4x3 # Min : real4x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | |p1| real4x4 | | lang=cpp, name=Lightning function Min(p0 : Real4x4, p1 : Real4x4) : Real4x4 # Multiply : integer2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x2 | | |the| integer2 | | lang=cpp, name=Lightning function Multiply(by : Integer2x2, the : Integer2) : Integer2 # Multiply : integer2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x2 | | |the| integer2x2 | | lang=cpp, name=Lightning function Multiply(by : Integer2x2, the : Integer2x2) : Integer2x2 # Multiply : integer2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x2 | | |the| integer2x3 | | lang=cpp, name=Lightning function Multiply(by : Integer2x2, the : Integer2x3) : Integer2x3 # Multiply : integer2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x2 | | |the| integer2x4 | | lang=cpp, name=Lightning function Multiply(by : Integer2x2, the : Integer2x4) : Integer2x4 # Multiply : integer2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x3 | | |the| integer3 | | lang=cpp, name=Lightning function Multiply(by : Integer2x3, the : Integer3) : Integer2 # Multiply : integer2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x3 | | |the| integer3x2 | | lang=cpp, name=Lightning function Multiply(by : Integer2x3, the : Integer3x2) : Integer2x2 # Multiply : integer2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x3 | | |the| integer3x3 | | lang=cpp, name=Lightning function Multiply(by : Integer2x3, the : Integer3x3) : Integer2x3 # Multiply : integer2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x3 | | |the| integer3x4 | | lang=cpp, name=Lightning function Multiply(by : Integer2x3, the : Integer3x4) : Integer2x4 # Multiply : integer2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x4 | | |the| integer4 | | lang=cpp, name=Lightning function Multiply(by : Integer2x4, the : Integer4) : Integer2 # Multiply : integer2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x4 | | |the| integer4x2 | | lang=cpp, name=Lightning function Multiply(by : Integer2x4, the : Integer4x2) : Integer2x2 # Multiply : integer2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x4 | | |the| integer4x3 | | lang=cpp, name=Lightning function Multiply(by : Integer2x4, the : Integer4x3) : Integer2x3 # Multiply : integer2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer2x4 | | |the| integer4x4 | | lang=cpp, name=Lightning function Multiply(by : Integer2x4, the : Integer4x4) : Integer2x4 # Multiply : integer3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x2 | | |the| integer2 | | lang=cpp, name=Lightning function Multiply(by : Integer3x2, the : Integer2) : Integer3 # Multiply : integer3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x2 | | |the| integer2x2 | | lang=cpp, name=Lightning function Multiply(by : Integer3x2, the : Integer2x2) : Integer3x2 # Multiply : integer3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x2 | | |the| integer2x3 | | lang=cpp, name=Lightning function Multiply(by : Integer3x2, the : Integer2x3) : Integer3x3 # Multiply : integer3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x2 | | |the| integer2x4 | | lang=cpp, name=Lightning function Multiply(by : Integer3x2, the : Integer2x4) : Integer3x4 # Multiply : integer3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x3 | | |the| integer3 | | lang=cpp, name=Lightning function Multiply(by : Integer3x3, the : Integer3) : Integer3 # Multiply : integer3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x3 | | |the| integer3x2 | | lang=cpp, name=Lightning function Multiply(by : Integer3x3, the : Integer3x2) : Integer3x2 # Multiply : integer3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x3 | | |the| integer3x3 | | lang=cpp, name=Lightning function Multiply(by : Integer3x3, the : Integer3x3) : Integer3x3 # Multiply : integer3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x3 | | |the| integer3x4 | | lang=cpp, name=Lightning function Multiply(by : Integer3x3, the : Integer3x4) : Integer3x4 # Multiply : integer3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x4 | | |the| integer4 | | lang=cpp, name=Lightning function Multiply(by : Integer3x4, the : Integer4) : Integer3 # Multiply : integer3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x4 | | |the| integer4x2 | | lang=cpp, name=Lightning function Multiply(by : Integer3x4, the : Integer4x2) : Integer3x2 # Multiply : integer3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x4 | | |the| integer4x3 | | lang=cpp, name=Lightning function Multiply(by : Integer3x4, the : Integer4x3) : Integer3x3 # Multiply : integer3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer3x4 | | |the| integer4x4 | | lang=cpp, name=Lightning function Multiply(by : Integer3x4, the : Integer4x4) : Integer3x4 # Multiply : integer4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x2 | | |the| integer2 | | lang=cpp, name=Lightning function Multiply(by : Integer4x2, the : Integer2) : Integer4 # Multiply : integer4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x2 | | |the| integer2x2 | | lang=cpp, name=Lightning function Multiply(by : Integer4x2, the : Integer2x2) : Integer4x2 # Multiply : integer4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x2 | | |the| integer2x3 | | lang=cpp, name=Lightning function Multiply(by : Integer4x2, the : Integer2x3) : Integer4x3 # Multiply : integer4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x2 | | |the| integer2x4 | | lang=cpp, name=Lightning function Multiply(by : Integer4x2, the : Integer2x4) : Integer4x4 # Multiply : integer4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x3 | | |the| integer3 | | lang=cpp, name=Lightning function Multiply(by : Integer4x3, the : Integer3) : Integer4 # Multiply : integer4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x3 | | |the| integer3x2 | | lang=cpp, name=Lightning function Multiply(by : Integer4x3, the : Integer3x2) : Integer4x2 # Multiply : integer4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x3 | | |the| integer3x3 | | lang=cpp, name=Lightning function Multiply(by : Integer4x3, the : Integer3x3) : Integer4x3 # Multiply : integer4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x3 | | |the| integer3x4 | | lang=cpp, name=Lightning function Multiply(by : Integer4x3, the : Integer3x4) : Integer4x4 # Multiply : integer4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x4 | | |the| integer4 | | lang=cpp, name=Lightning function Multiply(by : Integer4x4, the : Integer4) : Integer4 # Multiply : integer4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x4 | | |the| integer4x2 | | lang=cpp, name=Lightning function Multiply(by : Integer4x4, the : Integer4x2) : Integer4x2 # Multiply : integer4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x4 | | |the| integer4x3 | | lang=cpp, name=Lightning function Multiply(by : Integer4x4, the : Integer4x3) : Integer4x3 # Multiply : integer4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| integer4x4 | | |the| integer4x4 | | lang=cpp, name=Lightning function Multiply(by : Integer4x4, the : Integer4x4) : Integer4x4 # Multiply : quaternion static Creates a new rotation that represents rotating by parameter 2 and then parameter 1. |Name|Type|Description| |---|---|---| |by| quaternion | | |the| quaternion | | lang=cpp, name=Lightning function Multiply(by : Quaternion, the : Quaternion) : Quaternion # Multiply : real3 static Creates a new vector that represents parameter 2 being rotated by parameter 1. |Name|Type|Description| |---|---|---| |by| quaternion | | |the| real3 | | lang=cpp, name=Lightning function Multiply(by : Quaternion, the : Real3) : Real3 # Multiply : real2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real2 | | lang=cpp, name=Lightning function Multiply(by : Real2x2, the : Real2) : Real2 # Multiply : real2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real2x2 | | lang=cpp, name=Lightning function Multiply(by : Real2x2, the : Real2x2) : Real2x2 # Multiply : real2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real2x3 | | lang=cpp, name=Lightning function Multiply(by : Real2x2, the : Real2x3) : Real2x3 # Multiply : real2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real2x4 | | lang=cpp, name=Lightning function Multiply(by : Real2x2, the : Real2x4) : Real2x4 # Multiply : real2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x3 | | |the| real3 | | lang=cpp, name=Lightning function Multiply(by : Real2x3, the : Real3) : Real2 # Multiply : real2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x3 | | |the| real3x2 | | lang=cpp, name=Lightning function Multiply(by : Real2x3, the : Real3x2) : Real2x2 # Multiply : real2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x3 | | |the| real3x3 | | lang=cpp, name=Lightning function Multiply(by : Real2x3, the : Real3x3) : Real2x3 # Multiply : real2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x3 | | |the| real3x4 | | lang=cpp, name=Lightning function Multiply(by : Real2x3, the : Real3x4) : Real2x4 # Multiply : real2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x4 | | |the| real4 | | lang=cpp, name=Lightning function Multiply(by : Real2x4, the : Real4) : Real2 # Multiply : real2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x4 | | |the| real4x2 | | lang=cpp, name=Lightning function Multiply(by : Real2x4, the : Real4x2) : Real2x2 # Multiply : real2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x4 | | |the| real4x3 | | lang=cpp, name=Lightning function Multiply(by : Real2x4, the : Real4x3) : Real2x3 # Multiply : real2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real2x4 | | |the| real4x4 | | lang=cpp, name=Lightning function Multiply(by : Real2x4, the : Real4x4) : Real2x4 # Multiply : real3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x2 | | |the| real2 | | lang=cpp, name=Lightning function Multiply(by : Real3x2, the : Real2) : Real3 # Multiply : real3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x2 | | |the| real2x2 | | lang=cpp, name=Lightning function Multiply(by : Real3x2, the : Real2x2) : Real3x2 # Multiply : real3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x2 | | |the| real2x3 | | lang=cpp, name=Lightning function Multiply(by : Real3x2, the : Real2x3) : Real3x3 # Multiply : real3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x2 | | |the| real2x4 | | lang=cpp, name=Lightning function Multiply(by : Real3x2, the : Real2x4) : Real3x4 # Multiply : real3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real3 | | lang=cpp, name=Lightning function Multiply(by : Real3x3, the : Real3) : Real3 # Multiply : real3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real3x2 | | lang=cpp, name=Lightning function Multiply(by : Real3x3, the : Real3x2) : Real3x2 # Multiply : real3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real3x3 | | lang=cpp, name=Lightning function Multiply(by : Real3x3, the : Real3x3) : Real3x3 # Multiply : real3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real3x4 | | lang=cpp, name=Lightning function Multiply(by : Real3x3, the : Real3x4) : Real3x4 # Multiply : real3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x4 | | |the| real4 | | lang=cpp, name=Lightning function Multiply(by : Real3x4, the : Real4) : Real3 # Multiply : real3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x4 | | |the| real4x2 | | lang=cpp, name=Lightning function Multiply(by : Real3x4, the : Real4x2) : Real3x2 # Multiply : real3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x4 | | |the| real4x3 | | lang=cpp, name=Lightning function Multiply(by : Real3x4, the : Real4x3) : Real3x3 # Multiply : real3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real3x4 | | |the| real4x4 | | lang=cpp, name=Lightning function Multiply(by : Real3x4, the : Real4x4) : Real3x4 # Multiply : real4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x2 | | |the| real2 | | lang=cpp, name=Lightning function Multiply(by : Real4x2, the : Real2) : Real4 # Multiply : real4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x2 | | |the| real2x2 | | lang=cpp, name=Lightning function Multiply(by : Real4x2, the : Real2x2) : Real4x2 # Multiply : real4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x2 | | |the| real2x3 | | lang=cpp, name=Lightning function Multiply(by : Real4x2, the : Real2x3) : Real4x3 # Multiply : real4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x2 | | |the| real2x4 | | lang=cpp, name=Lightning function Multiply(by : Real4x2, the : Real2x4) : Real4x4 # Multiply : real4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x3 | | |the| real3 | | lang=cpp, name=Lightning function Multiply(by : Real4x3, the : Real3) : Real4 # Multiply : real4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x3 | | |the| real3x2 | | lang=cpp, name=Lightning function Multiply(by : Real4x3, the : Real3x2) : Real4x2 # Multiply : real4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x3 | | |the| real3x3 | | lang=cpp, name=Lightning function Multiply(by : Real4x3, the : Real3x3) : Real4x3 # Multiply : real4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x3 | | |the| real3x4 | | lang=cpp, name=Lightning function Multiply(by : Real4x3, the : Real3x4) : Real4x4 # Multiply : real4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real4 | | lang=cpp, name=Lightning function Multiply(by : Real4x4, the : Real4) : Real4 # Multiply : real4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real4x2 | | lang=cpp, name=Lightning function Multiply(by : Real4x4, the : Real4x2) : Real4x2 # Multiply : real4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real4x3 | | lang=cpp, name=Lightning function Multiply(by : Real4x4, the : Real4x3) : Real4x3 # Multiply : real4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real4x4 | | lang=cpp, name=Lightning function Multiply(by : Real4x4, the : Real4x4) : Real4x4 # MultiplyNormal : real static Multiplies the given vector as a vector (0 for the last component) |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real | | lang=cpp, name=Lightning function MultiplyNormal(by : Real2x2, the : Real) : Real # MultiplyNormal : real2 static Multiplies the given vector as a vector (0 for the last component) |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real2 | | lang=cpp, name=Lightning function MultiplyNormal(by : Real3x3, the : Real2) : Real2 # MultiplyNormal : real3 static Multiplies the given vector as a vector (0 for the last component) |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real3 | | lang=cpp, name=Lightning function MultiplyNormal(by : Real4x4, the : Real3) : Real3 # MultiplyPoint : real static Multiplies the given vector as a point while performing the homogeneous division |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real | | lang=cpp, name=Lightning function MultiplyPoint(by : Real2x2, the : Real) : Real # MultiplyPoint : real2 static Multiplies the given vector as a point while performing the homogeneous division |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real2 | | lang=cpp, name=Lightning function MultiplyPoint(by : Real3x3, the : Real2) : Real2 # MultiplyPoint : real3 static Multiplies the given vector as a point while performing the homogeneous division |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real3 | | lang=cpp, name=Lightning function MultiplyPoint(by : Real4x4, the : Real3) : Real3 # MultiplyPointNoDivide : real static Multiplies the given vector as a point without performing the homogeneous division |Name|Type|Description| |---|---|---| |by| real2x2 | | |the| real | | lang=cpp, name=Lightning function MultiplyPointNoDivide(by : Real2x2, the : Real) : Real # MultiplyPointNoDivide : real2 static Multiplies the given vector as a point without performing the homogeneous division |Name|Type|Description| |---|---|---| |by| real3x3 | | |the| real2 | | lang=cpp, name=Lightning function MultiplyPointNoDivide(by : Real3x3, the : Real2) : Real2 # MultiplyPointNoDivide : real3 static Multiplies the given vector as a point without performing the homogeneous division |Name|Type|Description| |---|---|---| |by| real4x4 | | |the| real3 | | lang=cpp, name=Lightning function MultiplyPointNoDivide(by : Real4x4, the : Real3) : Real3 # Normalize : quaternion static Returns a unit quaternion that represents a pure rotation. |Name|Type|Description| |---|---|---| |p0| quaternion | | lang=cpp, name=Lightning function Normalize(p0 : Quaternion) : Quaternion # Normalize : real2 static Returns a vector that points in the same direction but has a length of 1. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Normalize(p0 : Real2) : Real2 # Normalize : real3 static Returns a vector that points in the same direction but has a length of 1. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Normalize(p0 : Real3) : Real3 # Normalize : real4 static Returns a vector that points in the same direction but has a length of 1. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Normalize(p0 : Real4) : Real4 # Pow : real static Returns base raised to the power of the exponent. |Name|Type|Description| |---|---|---| |base| real | | |exponent| real | | lang=cpp, name=Lightning function Pow(base : Real, exponent : Real) : Real # Pow : real2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real2 | | |exponent| real2 | | lang=cpp, name=Lightning function Pow(base : Real2, exponent : Real2) : Real2 # Pow : real2x2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real2x2 | | |exponent| real2x2 | | lang=cpp, name=Lightning function Pow(base : Real2x2, exponent : Real2x2) : Real2x2 # Pow : real2x3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real2x3 | | |exponent| real2x3 | | lang=cpp, name=Lightning function Pow(base : Real2x3, exponent : Real2x3) : Real2x3 # Pow : real2x4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real2x4 | | |exponent| real2x4 | | lang=cpp, name=Lightning function Pow(base : Real2x4, exponent : Real2x4) : Real2x4 # Pow : real3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real3 | | |exponent| real3 | | lang=cpp, name=Lightning function Pow(base : Real3, exponent : Real3) : Real3 # Pow : real3x2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real3x2 | | |exponent| real3x2 | | lang=cpp, name=Lightning function Pow(base : Real3x2, exponent : Real3x2) : Real3x2 # Pow : real3x3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real3x3 | | |exponent| real3x3 | | lang=cpp, name=Lightning function Pow(base : Real3x3, exponent : Real3x3) : Real3x3 # Pow : real3x4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real3x4 | | |exponent| real3x4 | | lang=cpp, name=Lightning function Pow(base : Real3x4, exponent : Real3x4) : Real3x4 # Pow : real4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real4 | | |exponent| real4 | | lang=cpp, name=Lightning function Pow(base : Real4, exponent : Real4) : Real4 # Pow : real4x2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real4x2 | | |exponent| real4x2 | | lang=cpp, name=Lightning function Pow(base : Real4x2, exponent : Real4x2) : Real4x2 # Pow : real4x3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real4x3 | | |exponent| real4x3 | | lang=cpp, name=Lightning function Pow(base : Real4x3, exponent : Real4x3) : Real4x3 # Pow : real4x4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base| real4x4 | | |exponent| real4x4 | | lang=cpp, name=Lightning function Pow(base : Real4x4, exponent : Real4x4) : Real4x4 # Project : real3 static Projects the input vector onto the given normalized vector. Note: This function is legacy. Instead call ProjectOnVector. |Name|Type|Description| |---|---|---| |toBeProjected| real3 | | |normalizedVector| real3 | | lang=cpp, name=Lightning function Project(toBeProjected : Real3, normalizedVector : Real3) : Real3 # ProjectOnPlane : real2 static Projects the input vector onto plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeProjected| real2 | | |planeNormal| real2 | | lang=cpp, name=Lightning function ProjectOnPlane(toBeProjected : Real2, planeNormal : Real2) : Real2 # ProjectOnPlane : real3 static Projects the input vector onto plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeProjected| real3 | | |planeNormal| real3 | | lang=cpp, name=Lightning function ProjectOnPlane(toBeProjected : Real3, planeNormal : Real3) : Real3 # ProjectOnPlane : real4 static Projects the input vector onto plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeProjected| real4 | | |planeNormal| real4 | | lang=cpp, name=Lightning function ProjectOnPlane(toBeProjected : Real4, planeNormal : Real4) : Real4 # ProjectOnVector : real2 static Projects the input vector onto the given normalized vector. |Name|Type|Description| |---|---|---| |toBeProjected| real2 | | |normalizedVector| real2 | | lang=cpp, name=Lightning function ProjectOnVector(toBeProjected : Real2, normalizedVector : Real2) : Real2 # ProjectOnVector : real3 static Projects the input vector onto the given normalized vector. |Name|Type|Description| |---|---|---| |toBeProjected| real3 | | |normalizedVector| real3 | | lang=cpp, name=Lightning function ProjectOnVector(toBeProjected : Real3, normalizedVector : Real3) : Real3 # ProjectOnVector : real4 static Projects the input vector onto the given normalized vector. |Name|Type|Description| |---|---|---| |toBeProjected| real4 | | |normalizedVector| real4 | | lang=cpp, name=Lightning function ProjectOnVector(toBeProjected : Real4, normalizedVector : Real4) : Real4 # ReflectAcrossPlane : real2 static Reflects the input vector across the plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeReflected| real2 | | |planeNormal| real2 | | lang=cpp, name=Lightning function ReflectAcrossPlane(toBeReflected : Real2, planeNormal : Real2) : Real2 # ReflectAcrossPlane : real3 static Reflects the input vector across the plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeReflected| real3 | | |planeNormal| real3 | | lang=cpp, name=Lightning function ReflectAcrossPlane(toBeReflected : Real3, planeNormal : Real3) : Real3 # ReflectAcrossPlane : real4 static Reflects the input vector across the plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeReflected| real4 | | |planeNormal| real4 | | lang=cpp, name=Lightning function ReflectAcrossPlane(toBeReflected : Real4, planeNormal : Real4) : Real4 # ReflectAcrossVector : real2 static Reflects the input vector across the given vector. |Name|Type|Description| |---|---|---| |toBeReflected| real2 | | |vector| real2 | | lang=cpp, name=Lightning function ReflectAcrossVector(toBeReflected : Real2, vector : Real2) : Real2 # ReflectAcrossVector : real3 static Reflects the input vector across the given vector. |Name|Type|Description| |---|---|---| |toBeReflected| real3 | | |vector| real3 | | lang=cpp, name=Lightning function ReflectAcrossVector(toBeReflected : Real3, vector : Real3) : Real3 # ReflectAcrossVector : real4 static Reflects the input vector across the given vector. |Name|Type|Description| |---|---|---| |toBeReflected| real4 | | |vector| real4 | | lang=cpp, name=Lightning function ReflectAcrossVector(toBeReflected : Real4, vector : Real4) : Real4 # Refract : real2 static Calculates the refraction vector through a plane given a certain index of refraction. |Name|Type|Description| |---|---|---| |toBeRefracted| real2 | | |planeNormal| real2 | | |refractionIndex| real | | lang=cpp, name=Lightning function Refract(toBeRefracted : Real2, planeNormal : Real2, refractionIndex : Real) : Real2 # Refract : real3 static Calculates the refraction vector through a plane given a certain index of refraction. |Name|Type|Description| |---|---|---| |toBeRefracted| real3 | | |planeNormal| real3 | | |refractionIndex| real | | lang=cpp, name=Lightning function Refract(toBeRefracted : Real3, planeNormal : Real3, refractionIndex : Real) : Real3 # Refract : real4 static Calculates the refraction vector through a plane given a certain index of refraction. |Name|Type|Description| |---|---|---| |toBeRefracted| real4 | | |planeNormal| real4 | | |refractionIndex| real | | lang=cpp, name=Lightning function Refract(toBeRefracted : Real4, planeNormal : Real4, refractionIndex : Real) : Real4 # RotateTowards : quaternion static Rotate a quaternion towards another quaternion changing at most maxRadians. |Name|Type|Description| |---|---|---| |p0| quaternion | | |p1| quaternion | | |maxRadians| real | | lang=cpp, name=Lightning function RotateTowards(p0 : Quaternion, p1 : Quaternion, maxRadians : Real) : Quaternion # RotateTowards : real2 static Rotate a vector towards another vector changing at most maxRadians. |Name|Type|Description| |---|---|---| |p0| real2 | | |p1| real2 | | |maxRadians| real | | lang=cpp, name=Lightning function RotateTowards(p0 : Real2, p1 : Real2, maxRadians : Real) : Real2 # RotateTowards : real3 static Rotate a vector towards another vector changing at most maxRadians. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | |maxRadians| real | | lang=cpp, name=Lightning function RotateTowards(p0 : Real3, p1 : Real3, maxRadians : Real) : Real3 # RotateVector : real3 static Rotate a vector about an axis by the given radians. |Name|Type|Description| |---|---|---| |vector| real3 | | |axis| real3 | | |radians| real | | lang=cpp, name=Lightning function RotateVector(vector : Real3, axis : Real3, radians : Real) : Real3 # RotationQuaternionBetween : quaternion static Generates the quaternion that rotates from parameter 1 to parameter 2. |Name|Type|Description| |---|---|---| |start| real3 | | |end| real3 | | lang=cpp, name=Lightning function RotationQuaternionBetween(start : Real3, end : Real3) : Quaternion # Round : real static Returns the integer value closest to value. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Round(p0 : Real) : Real # Round : real static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real, places : Integer) : Real # Round : real static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real, places : Integer, numericalBase : Integer) : Real # Round : real2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Round(p0 : Real2) : Real2 # Round : real2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real2, places : Integer) : Real2 # Round : real2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real2, places : Integer, numericalBase : Integer) : Real2 # Round : real2x2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Round(p0 : Real2x2) : Real2x2 # Round : real2x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real2x2, places : Integer) : Real2x2 # Round : real2x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 # Round : real2x3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Round(p0 : Real2x3) : Real2x3 # Round : real2x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real2x3, places : Integer) : Real2x3 # Round : real2x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 # Round : real2x4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Round(p0 : Real2x4) : Real2x4 # Round : real2x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real2x4, places : Integer) : Real2x4 # Round : real2x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 # Round : real3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Round(p0 : Real3) : Real3 # Round : real3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real3, places : Integer) : Real3 # Round : real3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real3, places : Integer, numericalBase : Integer) : Real3 # Round : real3x2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Round(p0 : Real3x2) : Real3x2 # Round : real3x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real3x2, places : Integer) : Real3x2 # Round : real3x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 # Round : real3x3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Round(p0 : Real3x3) : Real3x3 # Round : real3x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real3x3, places : Integer) : Real3x3 # Round : real3x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 # Round : real3x4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Round(p0 : Real3x4) : Real3x4 # Round : real3x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real3x4, places : Integer) : Real3x4 # Round : real3x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 # Round : real4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Round(p0 : Real4) : Real4 # Round : real4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real4, places : Integer) : Real4 # Round : real4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real4, places : Integer, numericalBase : Integer) : Real4 # Round : real4x2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Round(p0 : Real4x2) : Real4x2 # Round : real4x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real4x2, places : Integer) : Real4x2 # Round : real4x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 # Round : real4x3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Round(p0 : Real4x3) : Real4x3 # Round : real4x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real4x3, places : Integer) : Real4x3 # Round : real4x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 # Round : real4x4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Round(p0 : Real4x4) : Real4x4 # Round : real4x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | lang=cpp, name=Lightning function Round(value : Real4x4, places : Integer) : Real4x4 # Round : real4x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Round(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4 # RSqrt : real static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function RSqrt(p0 : Real) : Real # RSqrt : real2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function RSqrt(p0 : Real2) : Real2 # RSqrt : real2x2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function RSqrt(p0 : Real2x2) : Real2x2 # RSqrt : real2x3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function RSqrt(p0 : Real2x3) : Real2x3 # RSqrt : real2x4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function RSqrt(p0 : Real2x4) : Real2x4 # RSqrt : real3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function RSqrt(p0 : Real3) : Real3 # RSqrt : real3x2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function RSqrt(p0 : Real3x2) : Real3x2 # RSqrt : real3x3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function RSqrt(p0 : Real3x3) : Real3x3 # RSqrt : real3x4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function RSqrt(p0 : Real3x4) : Real3x4 # RSqrt : real4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function RSqrt(p0 : Real4) : Real4 # RSqrt : real4x2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function RSqrt(p0 : Real4x2) : Real4x2 # RSqrt : real4x3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function RSqrt(p0 : Real4x3) : Real4x3 # RSqrt : real4x4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function RSqrt(p0 : Real4x4) : Real4x4 # Saturate : real static Limits the value between 0 and 1 |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Saturate(p0 : Real) : Real # Saturate : real2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Saturate(p0 : Real2) : Real2 # Saturate : real2x2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Saturate(p0 : Real2x2) : Real2x2 # Saturate : real2x3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Saturate(p0 : Real2x3) : Real2x3 # Saturate : real2x4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Saturate(p0 : Real2x4) : Real2x4 # Saturate : real3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Saturate(p0 : Real3) : Real3 # Saturate : real3x2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Saturate(p0 : Real3x2) : Real3x2 # Saturate : real3x3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Saturate(p0 : Real3x3) : Real3x3 # Saturate : real3x4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Saturate(p0 : Real3x4) : Real3x4 # Saturate : real4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Saturate(p0 : Real4) : Real4 # Saturate : real4x2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Saturate(p0 : Real4x2) : Real4x2 # Saturate : real4x3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Saturate(p0 : Real4x3) : Real4x3 # Saturate : real4x4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Saturate(p0 : Real4x4) : Real4x4 # Sign : integer static Returns the sign of the value as either 1 or -1. |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function Sign(p0 : Integer) : Integer # Sign : integer2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2 | | lang=cpp, name=Lightning function Sign(p0 : Integer2) : Integer2 # Sign : integer2x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x2 | | lang=cpp, name=Lightning function Sign(p0 : Integer2x2) : Integer2x2 # Sign : integer2x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x3 | | lang=cpp, name=Lightning function Sign(p0 : Integer2x3) : Integer2x3 # Sign : integer2x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer2x4 | | lang=cpp, name=Lightning function Sign(p0 : Integer2x4) : Integer2x4 # Sign : integer3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3 | | lang=cpp, name=Lightning function Sign(p0 : Integer3) : Integer3 # Sign : integer3x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x2 | | lang=cpp, name=Lightning function Sign(p0 : Integer3x2) : Integer3x2 # Sign : integer3x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x3 | | lang=cpp, name=Lightning function Sign(p0 : Integer3x3) : Integer3x3 # Sign : integer3x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer3x4 | | lang=cpp, name=Lightning function Sign(p0 : Integer3x4) : Integer3x4 # Sign : integer4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4 | | lang=cpp, name=Lightning function Sign(p0 : Integer4) : Integer4 # Sign : integer4x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x2 | | lang=cpp, name=Lightning function Sign(p0 : Integer4x2) : Integer4x2 # Sign : integer4x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x3 | | lang=cpp, name=Lightning function Sign(p0 : Integer4x3) : Integer4x3 # Sign : integer4x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| integer4x4 | | lang=cpp, name=Lightning function Sign(p0 : Integer4x4) : Integer4x4 # Sign : integer static Returns the sign of the value as either 1 or -1. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Sign(p0 : Real) : Integer # Sign : integer2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Sign(p0 : Real2) : Integer2 # Sign : integer2x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Sign(p0 : Real2x2) : Integer2x2 # Sign : integer2x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Sign(p0 : Real2x3) : Integer2x3 # Sign : integer2x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Sign(p0 : Real2x4) : Integer2x4 # Sign : integer3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Sign(p0 : Real3) : Integer3 # Sign : integer3x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Sign(p0 : Real3x2) : Integer3x2 # Sign : integer3x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Sign(p0 : Real3x3) : Integer3x3 # Sign : integer3x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Sign(p0 : Real3x4) : Integer3x4 # Sign : integer4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Sign(p0 : Real4) : Integer4 # Sign : integer4x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Sign(p0 : Real4x2) : Integer4x2 # Sign : integer4x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Sign(p0 : Real4x3) : Integer4x3 # Sign : integer4x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Sign(p0 : Real4x4) : Integer4x4 # SignedAngle : real static Get the rotation angle between two vectors in radians. |Name|Type|Description| |---|---|---| |p0| real3 | | |p1| real3 | | |up| real3 | | lang=cpp, name=Lightning function SignedAngle(p0 : Real3, p1 : Real3, up : Real3) : Real # Sin : real static The transcendental function sine. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function Sin(radians : Real) : Real # Sin : real2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function Sin(radians : Real2) : Real2 # Sin : real2x2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function Sin(radians : Real2x2) : Real2x2 # Sin : real2x3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function Sin(radians : Real2x3) : Real2x3 # Sin : real2x4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function Sin(radians : Real2x4) : Real2x4 # Sin : real3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function Sin(radians : Real3) : Real3 # Sin : real3x2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function Sin(radians : Real3x2) : Real3x2 # Sin : real3x3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function Sin(radians : Real3x3) : Real3x3 # Sin : real3x4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function Sin(radians : Real3x4) : Real3x4 # Sin : real4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function Sin(radians : Real4) : Real4 # Sin : real4x2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function Sin(radians : Real4x2) : Real4x2 # Sin : real4x3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function Sin(radians : Real4x3) : Real4x3 # Sin : real4x4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function Sin(radians : Real4x4) : Real4x4 # Sinh : real static The hyperbolic sine function. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function Sinh(radians : Real) : Real # Sinh : real2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function Sinh(radians : Real2) : Real2 # Sinh : real2x2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function Sinh(radians : Real2x2) : Real2x2 # Sinh : real2x3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function Sinh(radians : Real2x3) : Real2x3 # Sinh : real2x4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function Sinh(radians : Real2x4) : Real2x4 # Sinh : real3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function Sinh(radians : Real3) : Real3 # Sinh : real3x2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function Sinh(radians : Real3x2) : Real3x2 # Sinh : real3x3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function Sinh(radians : Real3x3) : Real3x3 # Sinh : real3x4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function Sinh(radians : Real3x4) : Real3x4 # Sinh : real4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function Sinh(radians : Real4) : Real4 # Sinh : real4x2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function Sinh(radians : Real4x2) : Real4x2 # Sinh : real4x3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function Sinh(radians : Real4x3) : Real4x3 # Sinh : real4x4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function Sinh(radians : Real4x4) : Real4x4 # Slerp : quaternion static Spherical linear interpolation. Used to interpolate between two rotations by the parameter t. |Name|Type|Description| |---|---|---| |start| quaternion | | |end| quaternion | | |t| real | | lang=cpp, name=Lightning function Slerp(start : Quaternion, end : Quaternion, t : Real) : Quaternion # Slerp : real2 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. |Name|Type|Description| |---|---|---| |start| real2 | | |end| real2 | | |t| real | | lang=cpp, name=Lightning function Slerp(start : Real2, end : Real2, t : Real) : Real2 # Slerp : real3 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. |Name|Type|Description| |---|---|---| |start| real3 | | |end| real3 | | |t| real | | lang=cpp, name=Lightning function Slerp(start : Real3, end : Real3, t : Real) : Real3 # SlerpUnnormalized : real2 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. This is the 'pure' mathematical Slerp function that works on un-normalized input. This effectively traces along an ellipse defined by the two input vectors. |Name|Type|Description| |---|---|---| |start| real2 | | |end| real2 | | |t| real | | lang=cpp, name=Lightning function SlerpUnnormalized(start : Real2, end : Real2, t : Real) : Real2 # SlerpUnnormalized : real3 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. This is the 'pure' mathematical Slerp function that works on un-normalized input. This effectively traces along an ellipse defined by the two input vectors. |Name|Type|Description| |---|---|---| |start| real3 | | |end| real3 | | |t| real | | lang=cpp, name=Lightning function SlerpUnnormalized(start : Real3, end : Real3, t : Real) : Real3 # SmoothStep : real static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. |Name|Type|Description| |---|---|---| |min| real | | |max| real | | |x| real | | lang=cpp, name=Lightning function SmoothStep(min : Real, max : Real, x : Real) : Real # SmoothStep : real2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2 | | |max| real2 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real2, max : Real2, t : Real) : Real2 # SmoothStep : real2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2 | | |max| real2 | | |x| real2 | | lang=cpp, name=Lightning function SmoothStep(min : Real2, max : Real2, x : Real2) : Real2 # SmoothStep : real2x2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2x2 | | |max| real2x2 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real2x2, max : Real2x2, t : Real) : Real2x2 # SmoothStep : real2x2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2x2 | | |max| real2x2 | | |x| real2x2 | | lang=cpp, name=Lightning function SmoothStep(min : Real2x2, max : Real2x2, x : Real2x2) : Real2x2 # SmoothStep : real2x3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2x3 | | |max| real2x3 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real2x3, max : Real2x3, t : Real) : Real2x3 # SmoothStep : real2x3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2x3 | | |max| real2x3 | | |x| real2x3 | | lang=cpp, name=Lightning function SmoothStep(min : Real2x3, max : Real2x3, x : Real2x3) : Real2x3 # SmoothStep : real2x4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2x4 | | |max| real2x4 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real2x4, max : Real2x4, t : Real) : Real2x4 # SmoothStep : real2x4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real2x4 | | |max| real2x4 | | |x| real2x4 | | lang=cpp, name=Lightning function SmoothStep(min : Real2x4, max : Real2x4, x : Real2x4) : Real2x4 # SmoothStep : real3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3 | | |max| real3 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real3, max : Real3, t : Real) : Real3 # SmoothStep : real3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3 | | |max| real3 | | |x| real3 | | lang=cpp, name=Lightning function SmoothStep(min : Real3, max : Real3, x : Real3) : Real3 # SmoothStep : real3x2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3x2 | | |max| real3x2 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real3x2, max : Real3x2, t : Real) : Real3x2 # SmoothStep : real3x2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3x2 | | |max| real3x2 | | |x| real3x2 | | lang=cpp, name=Lightning function SmoothStep(min : Real3x2, max : Real3x2, x : Real3x2) : Real3x2 # SmoothStep : real3x3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3x3 | | |max| real3x3 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real3x3, max : Real3x3, t : Real) : Real3x3 # SmoothStep : real3x3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3x3 | | |max| real3x3 | | |x| real3x3 | | lang=cpp, name=Lightning function SmoothStep(min : Real3x3, max : Real3x3, x : Real3x3) : Real3x3 # SmoothStep : real3x4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3x4 | | |max| real3x4 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real3x4, max : Real3x4, t : Real) : Real3x4 # SmoothStep : real3x4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real3x4 | | |max| real3x4 | | |x| real3x4 | | lang=cpp, name=Lightning function SmoothStep(min : Real3x4, max : Real3x4, x : Real3x4) : Real3x4 # SmoothStep : real4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4 | | |max| real4 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real4, max : Real4, t : Real) : Real4 # SmoothStep : real4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4 | | |max| real4 | | |x| real4 | | lang=cpp, name=Lightning function SmoothStep(min : Real4, max : Real4, x : Real4) : Real4 # SmoothStep : real4x2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4x2 | | |max| real4x2 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real4x2, max : Real4x2, t : Real) : Real4x2 # SmoothStep : real4x2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4x2 | | |max| real4x2 | | |x| real4x2 | | lang=cpp, name=Lightning function SmoothStep(min : Real4x2, max : Real4x2, x : Real4x2) : Real4x2 # SmoothStep : real4x3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4x3 | | |max| real4x3 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real4x3, max : Real4x3, t : Real) : Real4x3 # SmoothStep : real4x3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4x3 | | |max| real4x3 | | |x| real4x3 | | lang=cpp, name=Lightning function SmoothStep(min : Real4x3, max : Real4x3, x : Real4x3) : Real4x3 # SmoothStep : real4x4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4x4 | | |max| real4x4 | | |t| real | | lang=cpp, name=Lightning function SmoothStep(min : Real4x4, max : Real4x4, t : Real) : Real4x4 # SmoothStep : real4x4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min| real4x4 | | |max| real4x4 | | |x| real4x4 | | lang=cpp, name=Lightning function SmoothStep(min : Real4x4, max : Real4x4, x : Real4x4) : Real4x4 # Sqrt : real static Computes the square root |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Sqrt(p0 : Real) : Real # Sqrt : real2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Sqrt(p0 : Real2) : Real2 # Sqrt : real2x2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Sqrt(p0 : Real2x2) : Real2x2 # Sqrt : real2x3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Sqrt(p0 : Real2x3) : Real2x3 # Sqrt : real2x4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Sqrt(p0 : Real2x4) : Real2x4 # Sqrt : real3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Sqrt(p0 : Real3) : Real3 # Sqrt : real3x2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Sqrt(p0 : Real3x2) : Real3x2 # Sqrt : real3x3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Sqrt(p0 : Real3x3) : Real3x3 # Sqrt : real3x4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Sqrt(p0 : Real3x4) : Real3x4 # Sqrt : real4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Sqrt(p0 : Real4) : Real4 # Sqrt : real4x2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Sqrt(p0 : Real4x2) : Real4x2 # Sqrt : real4x3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Sqrt(p0 : Real4x3) : Real4x3 # Sqrt : real4x4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Sqrt(p0 : Real4x4) : Real4x4 # Step : real static If y <= x then 1 is returned, otherwise 0 is returned. |Name|Type|Description| |---|---|---| |y| real | | |x| real | | lang=cpp, name=Lightning function Step(y : Real, x : Real) : Real # Step : real2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2 | | |x| real2 | | lang=cpp, name=Lightning function Step(y : Real2, x : Real2) : Real2 # Step : real2x2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2x2 | | |x| real2x2 | | lang=cpp, name=Lightning function Step(y : Real2x2, x : Real2x2) : Real2x2 # Step : real2x3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2x3 | | |x| real2x3 | | lang=cpp, name=Lightning function Step(y : Real2x3, x : Real2x3) : Real2x3 # Step : real2x4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real2x4 | | |x| real2x4 | | lang=cpp, name=Lightning function Step(y : Real2x4, x : Real2x4) : Real2x4 # Step : real3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3 | | |x| real3 | | lang=cpp, name=Lightning function Step(y : Real3, x : Real3) : Real3 # Step : real3x2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3x2 | | |x| real3x2 | | lang=cpp, name=Lightning function Step(y : Real3x2, x : Real3x2) : Real3x2 # Step : real3x3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3x3 | | |x| real3x3 | | lang=cpp, name=Lightning function Step(y : Real3x3, x : Real3x3) : Real3x3 # Step : real3x4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real3x4 | | |x| real3x4 | | lang=cpp, name=Lightning function Step(y : Real3x4, x : Real3x4) : Real3x4 # Step : real4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4 | | |x| real4 | | lang=cpp, name=Lightning function Step(y : Real4, x : Real4) : Real4 # Step : real4x2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4x2 | | |x| real4x2 | | lang=cpp, name=Lightning function Step(y : Real4x2, x : Real4x2) : Real4x2 # Step : real4x3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4x3 | | |x| real4x3 | | lang=cpp, name=Lightning function Step(y : Real4x3, x : Real4x3) : Real4x3 # Step : real4x4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y| real4x4 | | |x| real4x4 | | lang=cpp, name=Lightning function Step(y : Real4x4, x : Real4x4) : Real4x4 # Tan : real static The transcendental function tangent. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function Tan(radians : Real) : Real # Tan : real2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function Tan(radians : Real2) : Real2 # Tan : real2x2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function Tan(radians : Real2x2) : Real2x2 # Tan : real2x3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function Tan(radians : Real2x3) : Real2x3 # Tan : real2x4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function Tan(radians : Real2x4) : Real2x4 # Tan : real3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function Tan(radians : Real3) : Real3 # Tan : real3x2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function Tan(radians : Real3x2) : Real3x2 # Tan : real3x3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function Tan(radians : Real3x3) : Real3x3 # Tan : real3x4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function Tan(radians : Real3x4) : Real3x4 # Tan : real4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function Tan(radians : Real4) : Real4 # Tan : real4x2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function Tan(radians : Real4x2) : Real4x2 # Tan : real4x3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function Tan(radians : Real4x3) : Real4x3 # Tan : real4x4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function Tan(radians : Real4x4) : Real4x4 # Tanh : real static The hyperbolic tangent function. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function Tanh(radians : Real) : Real # Tanh : real2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function Tanh(radians : Real2) : Real2 # Tanh : real2x2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function Tanh(radians : Real2x2) : Real2x2 # Tanh : real2x3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function Tanh(radians : Real2x3) : Real2x3 # Tanh : real2x4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function Tanh(radians : Real2x4) : Real2x4 # Tanh : real3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function Tanh(radians : Real3) : Real3 # Tanh : real3x2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function Tanh(radians : Real3x2) : Real3x2 # Tanh : real3x3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function Tanh(radians : Real3x3) : Real3x3 # Tanh : real3x4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function Tanh(radians : Real3x4) : Real3x4 # Tanh : real4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function Tanh(radians : Real4) : Real4 # Tanh : real4x2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function Tanh(radians : Real4x2) : Real4x2 # Tanh : real4x3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function Tanh(radians : Real4x3) : Real4x3 # Tanh : real4x4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function Tanh(radians : Real4x4) : Real4x4 # ToDegrees : real static Converts the given radians to degrees. |Name|Type|Description| |---|---|---| |radians| real | | lang=cpp, name=Lightning function ToDegrees(radians : Real) : Real # ToDegrees : real2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2 | | lang=cpp, name=Lightning function ToDegrees(radians : Real2) : Real2 # ToDegrees : real2x2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x2 | | lang=cpp, name=Lightning function ToDegrees(radians : Real2x2) : Real2x2 # ToDegrees : real2x3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x3 | | lang=cpp, name=Lightning function ToDegrees(radians : Real2x3) : Real2x3 # ToDegrees : real2x4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real2x4 | | lang=cpp, name=Lightning function ToDegrees(radians : Real2x4) : Real2x4 # ToDegrees : real3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3 | | lang=cpp, name=Lightning function ToDegrees(radians : Real3) : Real3 # ToDegrees : real3x2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x2 | | lang=cpp, name=Lightning function ToDegrees(radians : Real3x2) : Real3x2 # ToDegrees : real3x3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x3 | | lang=cpp, name=Lightning function ToDegrees(radians : Real3x3) : Real3x3 # ToDegrees : real3x4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real3x4 | | lang=cpp, name=Lightning function ToDegrees(radians : Real3x4) : Real3x4 # ToDegrees : real4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4 | | lang=cpp, name=Lightning function ToDegrees(radians : Real4) : Real4 # ToDegrees : real4x2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x2 | | lang=cpp, name=Lightning function ToDegrees(radians : Real4x2) : Real4x2 # ToDegrees : real4x3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x3 | | lang=cpp, name=Lightning function ToDegrees(radians : Real4x3) : Real4x3 # ToDegrees : real4x4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians| real4x4 | | lang=cpp, name=Lightning function ToDegrees(radians : Real4x4) : Real4x4 # ToQuaternion : quaternion static Generates the orientation from the given Euler angles. |Name|Type|Description| |---|---|---| |xRadians| real | | |yRadians| real | | |zRadians| real | | lang=cpp, name=Lightning function ToQuaternion(xRadians : Real, yRadians : Real, zRadians : Real) : Quaternion # ToQuaternion : quaternion static Generates the orientation from the given Euler angle vector |Name|Type|Description| |---|---|---| |eulerRadians| real3 | | lang=cpp, name=Lightning function ToQuaternion(eulerRadians : Real3) : Quaternion # ToQuaternion : quaternion static Generates the quaternion that rotates about the axis vector by the given radians. |Name|Type|Description| |---|---|---| |axis| real3 | | |radians| real | | lang=cpp, name=Lightning function ToQuaternion(axis : Real3, radians : Real) : Quaternion # ToQuaternion : quaternion static Generates the orientation represented by the given facing and up vectors. |Name|Type|Description| |---|---|---| |facing| real3 | | |up| real3 | | lang=cpp, name=Lightning function ToQuaternion(facing : Real3, up : Real3) : Quaternion # ToQuaternion : quaternion static Generates the orientation represented by the given facing, up, and right vectors. |Name|Type|Description| |---|---|---| |facing| real3 | | |up| real3 | | |right| real3 | | lang=cpp, name=Lightning function ToQuaternion(facing : Real3, up : Real3, right : Real3) : Quaternion # ToQuaternion : quaternion static Converts a rotation matrix into a quaternion. |Name|Type|Description| |---|---|---| |rotationMatrix| real3x3 | | lang=cpp, name=Lightning function ToQuaternion(rotationMatrix : Real3x3) : Quaternion # ToRadians : real static Converts the given degrees to radians. |Name|Type|Description| |---|---|---| |degrees| real | | lang=cpp, name=Lightning function ToRadians(degrees : Real) : Real # ToRadians : real2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real2 | | lang=cpp, name=Lightning function ToRadians(degrees : Real2) : Real2 # ToRadians : real2x2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real2x2 | | lang=cpp, name=Lightning function ToRadians(degrees : Real2x2) : Real2x2 # ToRadians : real2x3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real2x3 | | lang=cpp, name=Lightning function ToRadians(degrees : Real2x3) : Real2x3 # ToRadians : real2x4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real2x4 | | lang=cpp, name=Lightning function ToRadians(degrees : Real2x4) : Real2x4 # ToRadians : real3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real3 | | lang=cpp, name=Lightning function ToRadians(degrees : Real3) : Real3 # ToRadians : real3x2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real3x2 | | lang=cpp, name=Lightning function ToRadians(degrees : Real3x2) : Real3x2 # ToRadians : real3x3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real3x3 | | lang=cpp, name=Lightning function ToRadians(degrees : Real3x3) : Real3x3 # ToRadians : real3x4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real3x4 | | lang=cpp, name=Lightning function ToRadians(degrees : Real3x4) : Real3x4 # ToRadians : real4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real4 | | lang=cpp, name=Lightning function ToRadians(degrees : Real4) : Real4 # ToRadians : real4x2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real4x2 | | lang=cpp, name=Lightning function ToRadians(degrees : Real4x2) : Real4x2 # ToRadians : real4x3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real4x3 | | lang=cpp, name=Lightning function ToRadians(degrees : Real4x3) : Real4x3 # ToRadians : real4x4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees| real4x4 | | lang=cpp, name=Lightning function ToRadians(degrees : Real4x4) : Real4x4 # ToReal3x3 : real3x3 static Converts a quaternion into a rotation matrix. |Name|Type|Description| |---|---|---| |rotation| quaternion | | lang=cpp, name=Lightning function ToReal3x3(rotation : Quaternion) : Real3x3 # ToReal3x3 : real3x3 static Generates the orientation from the given Euler angles. |Name|Type|Description| |---|---|---| |xRadians| real | | |yRadians| real | | |zRadians| real | | lang=cpp, name=Lightning function ToReal3x3(xRadians : Real, yRadians : Real, zRadians : Real) : Real3x3 # ToReal3x3 : real3x3 static Generates the three dimensional rotation matrix that rotates about 'axis' by 'radians'. |Name|Type|Description| |---|---|---| |axis| real3 | | |radians| real | | lang=cpp, name=Lightning function ToReal3x3(axis : Real3, radians : Real) : Real3x3 # ToReal3x3 : real3x3 static Generates the orientation represented by the given facing and up vectors. |Name|Type|Description| |---|---|---| |facing| real3 | | |up| real3 | | lang=cpp, name=Lightning function ToReal3x3(facing : Real3, up : Real3) : Real3x3 # ToReal3x3 : real3x3 static Generates the orientation represented by the given facing, up, and right vectors. |Name|Type|Description| |---|---|---| |facing| real3 | | |up| real3 | | |right| real3 | | lang=cpp, name=Lightning function ToReal3x3(facing : Real3, up : Real3, right : Real3) : Real3x3 # Transpose : boolean2x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean2x2 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean2x2) : Boolean2x2 # Transpose : boolean3x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean2x3 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean2x3) : Boolean3x2 # Transpose : boolean4x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean2x4 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean2x4) : Boolean4x2 # Transpose : boolean2x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean3x2 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean3x2) : Boolean2x3 # Transpose : boolean3x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean3x3 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean3x3) : Boolean3x3 # Transpose : boolean4x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean3x4 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean3x4) : Boolean4x3 # Transpose : boolean2x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean4x2 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean4x2) : Boolean2x4 # Transpose : boolean3x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean4x3 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean4x3) : Boolean3x4 # Transpose : boolean4x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| boolean4x4 | | lang=cpp, name=Lightning function Transpose(p0 : Boolean4x4) : Boolean4x4 # Transpose : integer2x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer2x2 | | lang=cpp, name=Lightning function Transpose(p0 : Integer2x2) : Integer2x2 # Transpose : integer3x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer2x3 | | lang=cpp, name=Lightning function Transpose(p0 : Integer2x3) : Integer3x2 # Transpose : integer4x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer2x4 | | lang=cpp, name=Lightning function Transpose(p0 : Integer2x4) : Integer4x2 # Transpose : integer2x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer3x2 | | lang=cpp, name=Lightning function Transpose(p0 : Integer3x2) : Integer2x3 # Transpose : integer3x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer3x3 | | lang=cpp, name=Lightning function Transpose(p0 : Integer3x3) : Integer3x3 # Transpose : integer4x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer3x4 | | lang=cpp, name=Lightning function Transpose(p0 : Integer3x4) : Integer4x3 # Transpose : integer2x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer4x2 | | lang=cpp, name=Lightning function Transpose(p0 : Integer4x2) : Integer2x4 # Transpose : integer3x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer4x3 | | lang=cpp, name=Lightning function Transpose(p0 : Integer4x3) : Integer3x4 # Transpose : integer4x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| integer4x4 | | lang=cpp, name=Lightning function Transpose(p0 : Integer4x4) : Integer4x4 # Transpose : real2x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Transpose(p0 : Real2x2) : Real2x2 # Transpose : real3x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Transpose(p0 : Real2x3) : Real3x2 # Transpose : real4x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Transpose(p0 : Real2x4) : Real4x2 # Transpose : real2x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Transpose(p0 : Real3x2) : Real2x3 # Transpose : real3x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Transpose(p0 : Real3x3) : Real3x3 # Transpose : real4x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Transpose(p0 : Real3x4) : Real4x3 # Transpose : real2x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Transpose(p0 : Real4x2) : Real2x4 # Transpose : real3x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Transpose(p0 : Real4x3) : Real3x4 # Transpose : real4x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Transpose(p0 : Real4x4) : Real4x4 # Truncate : real static Rounds value towards plasma. |Name|Type|Description| |---|---|---| |p0| real | | lang=cpp, name=Lightning function Truncate(p0 : Real) : Real # Truncate : real static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real, places : Integer) : Real # Truncate : real static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value| real | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real, places : Integer, numericalBase : Integer) : Real # Truncate : real2 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2 | | lang=cpp, name=Lightning function Truncate(p0 : Real2) : Real2 # Truncate : real2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real2, places : Integer) : Real2 # Truncate : real2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real2, places : Integer, numericalBase : Integer) : Real2 # Truncate : real2x2 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x2 | | lang=cpp, name=Lightning function Truncate(p0 : Real2x2) : Real2x2 # Truncate : real2x2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real2x2, places : Integer) : Real2x2 # Truncate : real2x2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 # Truncate : real2x3 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x3 | | lang=cpp, name=Lightning function Truncate(p0 : Real2x3) : Real2x3 # Truncate : real2x3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real2x3, places : Integer) : Real2x3 # Truncate : real2x3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 # Truncate : real2x4 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real2x4 | | lang=cpp, name=Lightning function Truncate(p0 : Real2x4) : Real2x4 # Truncate : real2x4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real2x4, places : Integer) : Real2x4 # Truncate : real2x4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real2x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 # Truncate : real3 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3 | | lang=cpp, name=Lightning function Truncate(p0 : Real3) : Real3 # Truncate : real3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real3, places : Integer) : Real3 # Truncate : real3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real3, places : Integer, numericalBase : Integer) : Real3 # Truncate : real3x2 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x2 | | lang=cpp, name=Lightning function Truncate(p0 : Real3x2) : Real3x2 # Truncate : real3x2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real3x2, places : Integer) : Real3x2 # Truncate : real3x2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 # Truncate : real3x3 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x3 | | lang=cpp, name=Lightning function Truncate(p0 : Real3x3) : Real3x3 # Truncate : real3x3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real3x3, places : Integer) : Real3x3 # Truncate : real3x3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 # Truncate : real3x4 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real3x4 | | lang=cpp, name=Lightning function Truncate(p0 : Real3x4) : Real3x4 # Truncate : real3x4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real3x4, places : Integer) : Real3x4 # Truncate : real3x4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real3x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 # Truncate : real4 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4 | | lang=cpp, name=Lightning function Truncate(p0 : Real4) : Real4 # Truncate : real4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real4, places : Integer) : Real4 # Truncate : real4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real4, places : Integer, numericalBase : Integer) : Real4 # Truncate : real4x2 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x2 | | lang=cpp, name=Lightning function Truncate(p0 : Real4x2) : Real4x2 # Truncate : real4x2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real4x2, places : Integer) : Real4x2 # Truncate : real4x2 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x2 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 # Truncate : real4x3 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x3 | | lang=cpp, name=Lightning function Truncate(p0 : Real4x3) : Real4x3 # Truncate : real4x3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real4x3, places : Integer) : Real4x3 # Truncate : real4x3 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x3 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 # Truncate : real4x4 static Rounds value towards plasma. Performed component-wise. |Name|Type|Description| |---|---|---| |p0| real4x4 | | lang=cpp, name=Lightning function Truncate(p0 : Real4x4) : Real4x4 # Truncate : real4x4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | lang=cpp, name=Lightning function Truncate(value : Real4x4, places : Integer) : Real4x4 # Truncate : real4x4 static Rounds value towards plasma. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value| real4x4 | | |places| integer | | |numericalBase| integer | | lang=cpp, name=Lightning function Truncate(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4","title":"Math"},{"location":"reference/lightning_base_types/member/","text":"Core Methods Properties Base Classes Derived Classes IsStatic reflectionobject function Library Name Owner Type # Properties # IsStatic : boolean read-only ``` lang=cpp, name=Lightning var IsStatic : Boolean # Library : library read-only ``` lang=cpp, name=Lightning var Library : Library # Name : string read-only ``` lang=cpp, name=Lightning var Name : String # Owner : boundtype read-only ``` lang=cpp, name=Lightning var Owner : BoundType # Type : type read-only ``` lang=cpp, name=Lightning var Type : Type # Methods","title":"Member"},{"location":"reference/lightning_base_types/memberrange/","text":"Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty # Properties # All : memberrange read-only ``` lang=cpp, name=Lightning var All : MemberRange # Current : member read-only ``` lang=cpp, name=Lightning var Current : Member # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MemberRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function MemberRange() ``` # MemberRange : Void constructor Name Type Description p0 memberrange ``` lang=cpp, name=Lightning function MemberRange(p0 : MemberRange) ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Memberrange"},{"location":"reference/lightning_base_types/members/","text":"Core Methods Properties Base Classes Derived Classes All enum Extension Inherited InheritedInstance InheritedInstanceStatic InheritedStatic Instance InstanceStatic Static # Properties # All : members read-only static ``` lang=cpp, name=Lightning var All : Members # Extension : members read-only static ``` lang=cpp, name=Lightning var Extension : Members # Inherited : members read-only static ``` lang=cpp, name=Lightning var Inherited : Members # InheritedInstance : members read-only static ``` lang=cpp, name=Lightning var InheritedInstance : Members # InheritedInstanceStatic : members read-only static ``` lang=cpp, name=Lightning var InheritedInstanceStatic : Members # InheritedStatic : members read-only static ``` lang=cpp, name=Lightning var InheritedStatic : Members # Instance : members read-only static ``` lang=cpp, name=Lightning var Instance : Members # InstanceStatic : members read-only static ``` lang=cpp, name=Lightning var InstanceStatic : Members # Static : members read-only static ``` lang=cpp, name=Lightning var Static : Members # Methods","title":"Members"},{"location":"reference/lightning_base_types/memoryleakevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Memoryleakevent"},{"location":"reference/lightning_base_types/multiplemethodsofthesamename/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Multiplemethodsofthesamename"},{"location":"reference/lightning_base_types/multiprimitive/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Multiprimitive"},{"location":"reference/lightning_base_types/null/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Null"},{"location":"reference/lightning_base_types/opcodeevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Opcodeevent"},{"location":"reference/lightning_base_types/parseevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Parseevent"},{"location":"reference/lightning_base_types/pluginevent/","text":"Core Methods Properties Base Classes Derived Classes eventdata # Properties # Methods","title":"Pluginevent"},{"location":"reference/lightning_base_types/processclass/","text":"Core Methods Properties Base Classes Derived Classes Close StandardError IsRunning StandardInput Constructor StandardOutput Start Terminate WaitForClose # Properties # StandardError : filestream read-only The stream where standard error is re-directed to. Null if not re-directed ``` lang=cpp, name=Lightning var StandardError : FileStream # StandardInput : filestream read-only The stream where standard input is re-directed to. Null if not re-directed ``` lang=cpp, name=Lightning var StandardInput : FileStream # StandardOutput : filestream read-only The stream where standard output is re-directed to. Null if not re-directed ``` lang=cpp, name=Lightning var StandardOutput : FileStream # Methods # Close : Void Closes the wrapper around the process, does not close the process launched. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Close() # IsRunning : boolean Returns true if the process is still running, false otherwise. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function IsRunning() : Boolean # ProcessClass : Void constructor Process class used for managing external processes and redirecting their stdio. Used to launch and monitor various external programs. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ProcessClass() # Start : Void Begins the execution of another process using the given parameters. |Name|Type|Description| |---|---|---| |startInfo| processstartinfo | | lang=cpp, name=Lightning function Start(startInfo : ProcessStartInfo) # Terminate : Void Attempts to manually shut down the process. This is not safe for the other process or what it's handling. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Terminate() # WaitForClose : integer Waits for a process to close, this will block until the process closes. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function WaitForClose() : Integer","title":"Processclass"},{"location":"reference/lightning_base_types/processstartinfo/","text":"Core Methods Properties Base Classes Derived Classes Constructor ApplicationName Arguments RedirectStandardError RedirectStandardInput RedirectStandardOutput SearchPath ShowWindow WorkingDirectory # Properties # ApplicationName : string Name of the application to execute. No quoting of this string is necessary. ``` lang=cpp, name=Lightning var ApplicationName : String # Arguments : string Arguments to pass to the application. ``` lang=cpp, name=Lightning var Arguments : String # RedirectStandardError : boolean Whether or not we should redirect the Standard Error of the process for capturing. ``` lang=cpp, name=Lightning var RedirectStandardError : Boolean # RedirectStandardInput : boolean Whether or not we should redirect the Standard Input of the process for writing. ``` lang=cpp, name=Lightning var RedirectStandardInput : Boolean # RedirectStandardOutput : boolean Whether or not we should redirect the Standard Output of the process for capturing. ``` lang=cpp, name=Lightning var RedirectStandardOutput : Boolean # SearchPath : boolean Whether or not we should search the path for the application. ``` lang=cpp, name=Lightning var SearchPath : Boolean # ShowWindow : boolean Whether or not the window of the launched application should be shown. ``` lang=cpp, name=Lightning var ShowWindow : Boolean # WorkingDirectory : string The working directory for the process to start with. No quoting of this string is necessary. ``` lang=cpp, name=Lightning var WorkingDirectory : String # Methods # ProcessStartInfo : Void constructor Class used to set up parameters before launching a process. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ProcessStartInfo()","title":"Processstartinfo"},{"location":"reference/lightning_base_types/property/","text":"Methods Properties Base Classes Derived Classes GetValue Getter member field SetValue Setter gettersetter # Properties # Getter : function read-only ``` lang=cpp, name=Lightning var Getter : Function # Setter : function read-only ``` lang=cpp, name=Lightning var Setter : Function # Methods # GetValue : T Name Type Description instance T ``` lang=cpp, name=Lightning function GetValue(instance : T) : T ``` # SetValue : Void Name Type Description instance T value T ``` lang=cpp, name=Lightning function SetValue(instance : T, value : T) ```","title":"Property"},{"location":"reference/lightning_base_types/property_type/","text":"Core Methods Properties Base Classes Derived Classes GetValue [[plasma_engine_documentation/code_reference/lightning_base_types/property_type /#get-delegate () : key Get]] Constructor Getter SetValue Instance Property [[plasma_engine_documentation/code_reference/lightning_base_types/property_type /#set-delegate (value : ke Set]] Setter # Properties # Get : delegate():Key ``` lang=cpp, name=Lightning var Get : delegate () : Key # Getter : function read-only ``` lang=cpp, name=Lightning var Getter : Function # Instance : T ``` lang=cpp, name=Lightning var Instance : T # Property : Property[ type ] ``` lang=cpp, name=Lightning var Property : Property[Type] # Set : delegate(value:Key) ``` lang=cpp, name=Lightning var Set : delegate (value : Key) # Setter : function read-only ``` lang=cpp, name=Lightning var Setter : Function # Methods # GetValue : T Name Type Description instance T ``` lang=cpp, name=Lightning function GetValue(instance : T) : T ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # Property[Type] : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Property Type ``` # SetValue : Void Name Type Description instance T value T ``` lang=cpp, name=Lightning function SetValue(instance : T, value : T) ```","title":"Property type"},{"location":"reference/lightning_base_types/propertyrange/","text":"Core Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty # Properties # All : propertyrange read-only ``` lang=cpp, name=Lightning var All : PropertyRange # Current : Property read-only ``` lang=cpp, name=Lightning var Current : Property # IsEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsEmpty : Boolean # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # PropertyRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function PropertyRange() ``` # PropertyRange : Void constructor Name Type Description p0 propertyrange ``` lang=cpp, name=Lightning function PropertyRange(p0 : PropertyRange) ```","title":"Propertyrange"},{"location":"reference/lightning_base_types/quaternion/","text":"Core Methods Properties Base Classes Derived Classes Get Count Constructor Identity Set # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # Identity : quaternion read-only static ``` lang=cpp, name=Lightning var Identity : Quaternion # Methods # Get : real Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Real ``` # Quaternion : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Quaternion() ``` # Quaternion : Void constructor Name Type Description scalar real ``` lang=cpp, name=Lightning function Quaternion(scalar : Real) ``` # Quaternion : Void constructor Name Type Description p0 real p1 real p2 real p3 real ``` lang=cpp, name=Lightning function Quaternion(p0 : Real, p1 : Real, p2 : Real, p3 : Real) ``` # Quaternion : Void constructor Name Type Description p0 real p1 real p2 real2 ``` lang=cpp, name=Lightning function Quaternion(p0 : Real, p1 : Real, p2 : Real2) ``` # Quaternion : Void constructor Name Type Description p0 real p1 real2 p2 real ``` lang=cpp, name=Lightning function Quaternion(p0 : Real, p1 : Real2, p2 : Real) ``` # Quaternion : Void constructor Name Type Description p0 real p1 real3 ``` lang=cpp, name=Lightning function Quaternion(p0 : Real, p1 : Real3) ``` # Quaternion : Void constructor Name Type Description p0 real2 p1 real p2 real ``` lang=cpp, name=Lightning function Quaternion(p0 : Real2, p1 : Real, p2 : Real) ``` # Quaternion : Void constructor Name Type Description p0 real2 p1 real2 ``` lang=cpp, name=Lightning function Quaternion(p0 : Real2, p1 : Real2) ``` # Quaternion : Void constructor Name Type Description p0 real3 p1 real ``` lang=cpp, name=Lightning function Quaternion(p0 : Real3, p1 : Real) ``` # Set : Void Name Type Description p0 integer p1 real ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Real) ```","title":"Quaternion"},{"location":"reference/lightning_base_types/random/","text":"Core (NOTE) Contains utility functions for random generation. Methods Properties Base Classes Derived Classes BellCurve MaxInteger Boolean Seed CoinFlip DieRoll DoubleRange DoubleReal Integer Probability Quaternion Constructor Range RangeExclusiveMax RangeInclusiveMax Real Real2 Real3 Rotation UnitReal2 UnitReal3 Variance # Properties # MaxInteger : integer read-only static Returns the max integer value that can be returned. ``` lang=cpp, name=Lightning var MaxInteger : Integer # Seed : integer The seed controls what random numbers are generated in a sequence (determanistically) The same seed will always generate the same string of random numbers. ``` lang=cpp, name=Lightning var Seed : Integer # Methods # BellCurve : real Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function BellCurve() : Real # BellCurve : real Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1. |Name|Type|Description| |---|---|---| |center| real | | |range| real | | lang=cpp, name=Lightning function BellCurve(center : Real, range : Real) : Real # BellCurve : real Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation. |Name|Type|Description| |---|---|---| |center| real | | |range| real | | |standardDeviation| real | | lang=cpp, name=Lightning function BellCurve(center : Real, range : Real, standardDeviation : Real) : Real # Boolean : boolean Returns a random boolean value. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Boolean() : Boolean # CoinFlip : boolean Returns true if the coin flips heads. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function CoinFlip() : Boolean # DieRoll : integer Randomly rolls a number in the range [1, sides]. |Name|Type|Description| |---|---|---| |sides| integer | | lang=cpp, name=Lightning function DieRoll(sides : Integer) : Integer # DoubleRange : doublereal Name Type Description doublereal doublereal ``` lang=cpp, name=Lightning function DoubleRange( : DoubleReal, : DoubleReal) : DoubleReal ``` # DoubleReal : doublereal Returns a random double real in the range [0,1]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function DoubleReal() : DoubleReal # Integer : integer Returns a random integer in the range of [0, MaxInt]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Integer() : Integer # Probability : boolean Takes a given probability that we get a true value. |Name|Type|Description| |---|---|---| |probOfTrue| real | | lang=cpp, name=Lightning function Probability(probOfTrue : Real) : Boolean # Quaternion : quaternion Random unit length quaternion. This is also a unit quaternion. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Quaternion() : Quaternion # Random : Void constructor Default constructor (grabs the random seed) |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Random() # Random : Void constructor Construct a random generator with a specific seed. |Name|Type|Description| |---|---|---| |seed| integer | | lang=cpp, name=Lightning function Random(seed : Integer) # Range : real A random Real in the range [min,max]. |Name|Type|Description| |---|---|---| |min| real | | |max| real | | lang=cpp, name=Lightning function Range(min : Real, max : Real) : Real # RangeExclusiveMax : integer Integer in the range [min, max]. |Name|Type|Description| |---|---|---| |min| integer | | |max| integer | | lang=cpp, name=Lightning function RangeExclusiveMax(min : Integer, max : Integer) : Integer # RangeInclusiveMax : integer Integer in the range [min, max) |Name|Type|Description| |---|---|---| |min| integer | | |max| integer | | lang=cpp, name=Lightning function RangeInclusiveMax(min : Integer, max : Integer) : Integer # Real : real Returns a random real in the range [0,1]. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Real() : Real # Real2 : real2 Randomly generates a Real2 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength| real | | |maxLength| real | | lang=cpp, name=Lightning function Real2(minLength : Real, maxLength : Real) : Real2 # Real3 : real3 Randomly generates a Real3 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength| real | | |maxLength| real | | lang=cpp, name=Lightning function Real3(minLength : Real, maxLength : Real) : Real3 # Rotation : quaternion Random rotation quaternion. This is the same as calling Quaternion() |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Rotation() : Quaternion # UnitReal2 : real2 Generates a unit length Real2. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UnitReal2() : Real2 # UnitReal3 : real3 Generates a unit length Real3. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function UnitReal3() : Real3 # Variance : doublereal Integer in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| || doublereal | | || doublereal | | lang=cpp, name=Lightning function Variance( : DoubleReal, : DoubleReal) : DoubleReal # Variance : integer Integer in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base| integer | | |variance| integer | | lang=cpp, name=Lightning function Variance(base : Integer, variance : Integer) : Integer # Variance : real Returns a number in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base| real | | |variance| real | | lang=cpp, name=Lightning function Variance(base : Real, variance : Real) : Real","title":"Random"},{"location":"reference/lightning_base_types/real/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Parse NegativeValueClosestToZero Constructor One Reinterpret PositiveMax Set PositiveValueClosestToZero XAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : real read-only static The smallest (most negative) value that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeMin : Real # NegativeValueClosestToZero : real read-only static The negative value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Real # One : real read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Real # PositiveMax : real read-only static The largest (most positive) value that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveMax : Real # PositiveValueClosestToZero : real read-only static The positive value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Real # XAxis : real read-only static ``` lang=cpp, name=Lightning var XAxis : Real # Zero : real read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Real # Methods # Get : real Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Real ``` # GetAxis : real static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Real # Parse : real static Attempt to convert the given StringRange to a Real. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Parse(p0 : StringRange) : Real # Real : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real() ``` # Real : Void constructor Name Type Description scalar real ``` lang=cpp, name=Lightning function Real(scalar : Real) ``` # Reinterpret : real static Name Type Description p0 integer ``` lang=cpp, name=Lightning function Reinterpret(p0 : Integer) : Real ``` # Set : Void Name Type Description p0 integer p1 real ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Real) ```","title":"Real"},{"location":"reference/lightning_base_types/real2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : real2 read-only static The smallest (most negative) value that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeMin : Real2 # NegativeValueClosestToZero : real2 read-only static The negative value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Real2 # One : real2 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Real2 # PositiveMax : real2 read-only static The largest (most positive) value that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveMax : Real2 # PositiveValueClosestToZero : real2 read-only static The positive value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Real2 # XAxis : real2 read-only static ``` lang=cpp, name=Lightning var XAxis : Real2 # YAxis : real2 read-only static ``` lang=cpp, name=Lightning var YAxis : Real2 # Zero : real2 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Real2 # Methods # Get : real Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Real ``` # GetAxis : real2 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Real2 # Real2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real2() ``` # Real2 : Void constructor Name Type Description scalar real ``` lang=cpp, name=Lightning function Real2(scalar : Real) ``` # Real2 : Void constructor Name Type Description p0 real p1 real ``` lang=cpp, name=Lightning function Real2(p0 : Real, p1 : Real) ``` # Real2 : Void constructor Name Type Description p0 real2 ``` lang=cpp, name=Lightning function Real2(p0 : Real2) ``` # Set : Void Name Type Description p0 integer p1 real ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Real) ```","title":"Real2"},{"location":"reference/lightning_base_types/real2x2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # Methods # Get : real2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real2 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real2x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real2x2() ``` # Real2x2 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real2x2(p0 : Real) ``` # Real2x2 : Void constructor Name Type Description m00 real m01 real m10 real m11 real ``` lang=cpp, name=Lightning function Real2x2(m00 : Real, m01 : Real, m10 : Real, m11 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real2) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real2x2"},{"location":"reference/lightning_base_types/real2x3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M02 : real ``` lang=cpp, name=Lightning var M02 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M12 : real ``` lang=cpp, name=Lightning var M12 : Real # Methods # Get : real3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real3 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real2x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real2x3() ``` # Real2x3 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real2x3(p0 : Real) ``` # Real2x3 : Void constructor Name Type Description m00 real m01 real m02 real m10 real m11 real m12 real ``` lang=cpp, name=Lightning function Real2x3(m00 : Real, m01 : Real, m02 : Real, m10 : Real, m11 : Real, m12 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real3) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real2x3"},{"location":"reference/lightning_base_types/real2x4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M02 : real ``` lang=cpp, name=Lightning var M02 : Real # M03 : real ``` lang=cpp, name=Lightning var M03 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M12 : real ``` lang=cpp, name=Lightning var M12 : Real # M13 : real ``` lang=cpp, name=Lightning var M13 : Real # Methods # Get : real4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real4 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real2x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real2x4() ``` # Real2x4 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real2x4(p0 : Real) ``` # Real2x4 : Void constructor Name Type Description m00 real m01 real m02 real m03 real m10 real m11 real m12 real m13 real ``` lang=cpp, name=Lightning function Real2x4(m00 : Real, m01 : Real, m02 : Real, m03 : Real, m10 : Real, m11 : Real, m12 : Real, m13 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real4) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real2x4"},{"location":"reference/lightning_base_types/real3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis ZAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : real3 read-only static The smallest (most negative) value that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeMin : Real3 # NegativeValueClosestToZero : real3 read-only static The negative value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Real3 # One : real3 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Real3 # PositiveMax : real3 read-only static The largest (most positive) value that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveMax : Real3 # PositiveValueClosestToZero : real3 read-only static The positive value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Real3 # XAxis : real3 read-only static ``` lang=cpp, name=Lightning var XAxis : Real3 # YAxis : real3 read-only static ``` lang=cpp, name=Lightning var YAxis : Real3 # ZAxis : real3 read-only static ``` lang=cpp, name=Lightning var ZAxis : Real3 # Zero : real3 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Real3 # Methods # Get : real Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Real ``` # GetAxis : real3 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Real3 # Real3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real3() ``` # Real3 : Void constructor Name Type Description scalar real ``` lang=cpp, name=Lightning function Real3(scalar : Real) ``` # Real3 : Void constructor Name Type Description p0 real p1 real p2 real ``` lang=cpp, name=Lightning function Real3(p0 : Real, p1 : Real, p2 : Real) ``` # Real3 : Void constructor Name Type Description p0 real p1 real2 ``` lang=cpp, name=Lightning function Real3(p0 : Real, p1 : Real2) ``` # Real3 : Void constructor Name Type Description p0 real2 p1 real ``` lang=cpp, name=Lightning function Real3(p0 : Real2, p1 : Real) ``` # Set : Void Name Type Description p0 integer p1 real ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Real) ```","title":"Real3"},{"location":"reference/lightning_base_types/real3x2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M20 : real ``` lang=cpp, name=Lightning var M20 : Real # M21 : real ``` lang=cpp, name=Lightning var M21 : Real # Methods # Get : real2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real2 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real3x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real3x2() ``` # Real3x2 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real3x2(p0 : Real) ``` # Real3x2 : Void constructor Name Type Description m00 real m01 real m10 real m11 real m20 real m21 real ``` lang=cpp, name=Lightning function Real3x2(m00 : Real, m01 : Real, m10 : Real, m11 : Real, m20 : Real, m21 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real2) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real3x2"},{"location":"reference/lightning_base_types/real3x3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M02 : real ``` lang=cpp, name=Lightning var M02 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M12 : real ``` lang=cpp, name=Lightning var M12 : Real # M20 : real ``` lang=cpp, name=Lightning var M20 : Real # M21 : real ``` lang=cpp, name=Lightning var M21 : Real # M22 : real ``` lang=cpp, name=Lightning var M22 : Real # Methods # Get : real3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real3 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real3x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real3x3() ``` # Real3x3 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real3x3(p0 : Real) ``` # Real3x3 : Void constructor Name Type Description m00 real m01 real m02 real m10 real m11 real m12 real m20 real m21 real m22 real ``` lang=cpp, name=Lightning function Real3x3(m00 : Real, m01 : Real, m02 : Real, m10 : Real, m11 : Real, m12 : Real, m20 : Real, m21 : Real, m22 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real3) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real3x3"},{"location":"reference/lightning_base_types/real3x4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M02 : real ``` lang=cpp, name=Lightning var M02 : Real # M03 : real ``` lang=cpp, name=Lightning var M03 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M12 : real ``` lang=cpp, name=Lightning var M12 : Real # M13 : real ``` lang=cpp, name=Lightning var M13 : Real # M20 : real ``` lang=cpp, name=Lightning var M20 : Real # M21 : real ``` lang=cpp, name=Lightning var M21 : Real # M22 : real ``` lang=cpp, name=Lightning var M22 : Real # M23 : real ``` lang=cpp, name=Lightning var M23 : Real # Methods # Get : real4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real4 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real3x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real3x4() ``` # Real3x4 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real3x4(p0 : Real) ``` # Real3x4 : Void constructor Name Type Description m00 real m01 real m02 real m03 real m10 real m11 real m12 real m13 real m20 real m21 real m22 real m23 real ``` lang=cpp, name=Lightning function Real3x4(m00 : Real, m01 : Real, m02 : Real, m03 : Real, m10 : Real, m11 : Real, m12 : Real, m13 : Real, m20 : Real, m21 : Real, m22 : Real, m23 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real4) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real3x4"},{"location":"reference/lightning_base_types/real4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero WAxis XAxis YAxis ZAxis Zero # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # NegativeMin : real4 read-only static The smallest (most negative) value that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeMin : Real4 # NegativeValueClosestToZero : real4 read-only static The negative value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var NegativeValueClosestToZero : Real4 # One : real4 read-only static The one vector (a vector containing all ones). ``` lang=cpp, name=Lightning var One : Real4 # PositiveMax : real4 read-only static The largest (most positive) value that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveMax : Real4 # PositiveValueClosestToZero : real4 read-only static The positive value closest to zero that can be represented by a Real. ``` lang=cpp, name=Lightning var PositiveValueClosestToZero : Real4 # WAxis : real4 read-only static ``` lang=cpp, name=Lightning var WAxis : Real4 # XAxis : real4 read-only static ``` lang=cpp, name=Lightning var XAxis : Real4 # YAxis : real4 read-only static ``` lang=cpp, name=Lightning var YAxis : Real4 # ZAxis : real4 read-only static ``` lang=cpp, name=Lightning var ZAxis : Real4 # Zero : real4 read-only static The zero vector (a vector containing all plasmaes). ``` lang=cpp, name=Lightning var Zero : Real4 # Methods # Get : real Name Type Description p0 integer ``` lang=cpp, name=Lightning function Get(p0 : Integer) : Real ``` # GetAxis : real4 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function GetAxis(p0 : Integer) : Real4 # Real4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real4() ``` # Real4 : Void constructor Name Type Description scalar real ``` lang=cpp, name=Lightning function Real4(scalar : Real) ``` # Real4 : Void constructor Name Type Description p0 real p1 real p2 real p3 real ``` lang=cpp, name=Lightning function Real4(p0 : Real, p1 : Real, p2 : Real, p3 : Real) ``` # Real4 : Void constructor Name Type Description p0 real p1 real p2 real2 ``` lang=cpp, name=Lightning function Real4(p0 : Real, p1 : Real, p2 : Real2) ``` # Real4 : Void constructor Name Type Description p0 real p1 real2 p2 real ``` lang=cpp, name=Lightning function Real4(p0 : Real, p1 : Real2, p2 : Real) ``` # Real4 : Void constructor Name Type Description p0 real p1 real3 ``` lang=cpp, name=Lightning function Real4(p0 : Real, p1 : Real3) ``` # Real4 : Void constructor Name Type Description p0 real2 p1 real p2 real ``` lang=cpp, name=Lightning function Real4(p0 : Real2, p1 : Real, p2 : Real) ``` # Real4 : Void constructor Name Type Description p0 real2 p1 real2 ``` lang=cpp, name=Lightning function Real4(p0 : Real2, p1 : Real2) ``` # Real4 : Void constructor Name Type Description p0 real3 p1 real ``` lang=cpp, name=Lightning function Real4(p0 : Real3, p1 : Real) ``` # Set : Void Name Type Description p0 integer p1 real ``` lang=cpp, name=Lightning function Set(p0 : Integer, p1 : Real) ```","title":"Real4"},{"location":"reference/lightning_base_types/real4x2/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 M30 M31 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M20 : real ``` lang=cpp, name=Lightning var M20 : Real # M21 : real ``` lang=cpp, name=Lightning var M21 : Real # M30 : real ``` lang=cpp, name=Lightning var M30 : Real # M31 : real ``` lang=cpp, name=Lightning var M31 : Real # Methods # Get : real2 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real2 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real4x2 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real4x2() ``` # Real4x2 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real4x2(p0 : Real) ``` # Real4x2 : Void constructor Name Type Description m00 real m01 real m10 real m11 real m20 real m21 real m30 real m31 real ``` lang=cpp, name=Lightning function Real4x2(m00 : Real, m01 : Real, m10 : Real, m11 : Real, m20 : Real, m21 : Real, m30 : Real, m31 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real2 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real2) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real4x2"},{"location":"reference/lightning_base_types/real4x3/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 M30 M31 M32 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M02 : real ``` lang=cpp, name=Lightning var M02 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M12 : real ``` lang=cpp, name=Lightning var M12 : Real # M20 : real ``` lang=cpp, name=Lightning var M20 : Real # M21 : real ``` lang=cpp, name=Lightning var M21 : Real # M22 : real ``` lang=cpp, name=Lightning var M22 : Real # M30 : real ``` lang=cpp, name=Lightning var M30 : Real # M31 : real ``` lang=cpp, name=Lightning var M31 : Real # M32 : real ``` lang=cpp, name=Lightning var M32 : Real # Methods # Get : real3 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real3 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real4x3 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real4x3() ``` # Real4x3 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real4x3(p0 : Real) ``` # Real4x3 : Void constructor Name Type Description m00 real m01 real m02 real m10 real m11 real m12 real m20 real m21 real m22 real m30 real m31 real m32 real ``` lang=cpp, name=Lightning function Real4x3(m00 : Real, m01 : Real, m02 : Real, m10 : Real, m11 : Real, m12 : Real, m20 : Real, m21 : Real, m22 : Real, m30 : Real, m31 : Real, m32 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real3 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real3) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real4x3"},{"location":"reference/lightning_base_types/real4x4/","text":"Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 M30 M31 M32 M33 # Properties # Count : integer read-only ``` lang=cpp, name=Lightning var Count : Integer # CountX : integer read-only ``` lang=cpp, name=Lightning var CountX : Integer # CountY : integer read-only ``` lang=cpp, name=Lightning var CountY : Integer # M00 : real ``` lang=cpp, name=Lightning var M00 : Real # M01 : real ``` lang=cpp, name=Lightning var M01 : Real # M02 : real ``` lang=cpp, name=Lightning var M02 : Real # M03 : real ``` lang=cpp, name=Lightning var M03 : Real # M10 : real ``` lang=cpp, name=Lightning var M10 : Real # M11 : real ``` lang=cpp, name=Lightning var M11 : Real # M12 : real ``` lang=cpp, name=Lightning var M12 : Real # M13 : real ``` lang=cpp, name=Lightning var M13 : Real # M20 : real ``` lang=cpp, name=Lightning var M20 : Real # M21 : real ``` lang=cpp, name=Lightning var M21 : Real # M22 : real ``` lang=cpp, name=Lightning var M22 : Real # M23 : real ``` lang=cpp, name=Lightning var M23 : Real # M30 : real ``` lang=cpp, name=Lightning var M30 : Real # M31 : real ``` lang=cpp, name=Lightning var M31 : Real # M32 : real ``` lang=cpp, name=Lightning var M32 : Real # M33 : real ``` lang=cpp, name=Lightning var M33 : Real # Methods # Get : real4 Name Type Description y integer ``` lang=cpp, name=Lightning function Get(y : Integer) : Real4 ``` # Get : real Name Type Description y integer x integer ``` lang=cpp, name=Lightning function Get(y : Integer, x : Integer) : Real ``` # GetByIndex : real Name Type Description index integer ``` lang=cpp, name=Lightning function GetByIndex(index : Integer) : Real ``` # Real4x4 : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Real4x4() ``` # Real4x4 : Void constructor Name Type Description p0 real ``` lang=cpp, name=Lightning function Real4x4(p0 : Real) ``` # Real4x4 : Void constructor Name Type Description m00 real m01 real m02 real m03 real m10 real m11 real m12 real m13 real m20 real m21 real m22 real m23 real m30 real m31 real m32 real m33 real ``` lang=cpp, name=Lightning function Real4x4(m00 : Real, m01 : Real, m02 : Real, m03 : Real, m10 : Real, m11 : Real, m12 : Real, m13 : Real, m20 : Real, m21 : Real, m22 : Real, m23 : Real, m30 : Real, m31 : Real, m32 : Real, m33 : Real) ``` # Set : Void Name Type Description y integer x integer value real ``` lang=cpp, name=Lightning function Set(y : Integer, x : Integer, value : Real) ``` # Set : Void Name Type Description y integer value real4 ``` lang=cpp, name=Lightning function Set(y : Integer, value : Real4) ``` # SetByIndex : Void Name Type Description index integer value real ``` lang=cpp, name=Lightning function SetByIndex(index : Integer, value : Real) ```","title":"Real4x4"},{"location":"reference/lightning_base_types/reflectionobject/","text":"Core Methods Properties Base Classes Derived Classes member type variable # Properties # Methods","title":"Reflectionobject"},{"location":"reference/lightning_base_types/rune/","text":"Core Methods Properties Base Classes Derived Classes Constructor Value # Properties # Value : integer ``` lang=cpp, name=Lightning var Value : Integer # Methods # Rune : Void constructor Name Type Description ``` lang=cpp, name=Lightning function Rune() ``` # Rune : Void constructor Name Type Description value integer ``` lang=cpp, name=Lightning function Rune(value : Integer) ```","title":"Rune"},{"location":"reference/lightning_base_types/runeiterator/","text":"Core Methods Properties Base Classes Derived Classes Decrement All Equals ByteIndex Increment Current MoveNext IsNotEmpty Constructor OriginalString # Properties # All : runeiterator read-only ``` lang=cpp, name=Lightning var All : RuneIterator # ByteIndex : integer read-only ``` lang=cpp, name=Lightning var ByteIndex : Integer # Current : rune read-only ``` lang=cpp, name=Lightning var Current : Rune # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # OriginalString : string read-only ``` lang=cpp, name=Lightning var OriginalString : String # Methods # Decrement : Void Name Type Description ``` lang=cpp, name=Lightning function Decrement() ``` # Equals : boolean Name Type Description p0 runeiterator ``` lang=cpp, name=Lightning function Equals(p0 : RuneIterator) : Boolean ``` # Increment : Void Name Type Description ``` lang=cpp, name=Lightning function Increment() ``` # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # RuneIterator : Void constructor Name Type Description ``` lang=cpp, name=Lightning function RuneIterator() ```","title":"Runeiterator"},{"location":"reference/lightning_base_types/streamcapabilities/","text":"Core Methods Properties Base Classes Derived Classes GetCount enum None Read Seek SetCount Write # Properties # GetCount : streamcapabilities read-only static ``` lang=cpp, name=Lightning var GetCount : StreamCapabilities # None : streamcapabilities read-only static ``` lang=cpp, name=Lightning var None : StreamCapabilities # Read : streamcapabilities read-only static ``` lang=cpp, name=Lightning var Read : StreamCapabilities # Seek : streamcapabilities read-only static ``` lang=cpp, name=Lightning var Seek : StreamCapabilities # SetCount : streamcapabilities read-only static ``` lang=cpp, name=Lightning var SetCount : StreamCapabilities # Write : streamcapabilities read-only static ``` lang=cpp, name=Lightning var Write : StreamCapabilities # Methods","title":"Streamcapabilities"},{"location":"reference/lightning_base_types/streamorigin/","text":"Core Methods Properties Base Classes Derived Classes Current enum End Start # Properties # Current : streamorigin read-only static ``` lang=cpp, name=Lightning var Current : StreamOrigin # End : streamorigin read-only static ``` lang=cpp, name=Lightning var End : StreamOrigin # Start : streamorigin read-only static ``` lang=cpp, name=Lightning var Start : StreamOrigin # Methods","title":"Streamorigin"},{"location":"reference/lightning_base_types/string/","text":"Core Methods Properties Base Classes Derived Classes Compare All CompareTo Begin ComputeRuneCount ByteCount Concatenate Count Contains Empty EndsWith End FindFirstOf IsNotEmpty FindLastOf FindRangeExclusive FindRangeInclusive FormatC FromRune Get IsNullOrEmpty IsNullOrWhitespace Join Replace RuneIteratorFromByteIndex RuneIteratorFromRuneIndex Split StartsWith SubString SubStringBytes SubStringFromRuneIndices ToLower ToUpper Trim TrimEnd TrimStart # Properties # All : stringrange read-only Converts the string into a string range. ``` lang=cpp, name=Lightning var All : StringRange # Begin : runeiterator read-only Returns the RuneIterator at the start of this string. ``` lang=cpp, name=Lightning var Begin : RuneIterator # ByteCount : integer read-only Returns the number of bytes in the string. ``` lang=cpp, name=Lightning var ByteCount : Integer # Count : integer read-only Returns the number of bytes in the string. ``` lang=cpp, name=Lightning var Count : Integer # Empty : boolean read-only Returns true if the string is emtpy. ``` lang=cpp, name=Lightning var Empty : Boolean # End : runeiterator read-only Returns the RuneIterator at the end (one past the last Rune) of this string. ``` lang=cpp, name=Lightning var End : RuneIterator # IsNotEmpty : boolean read-only Returns true if the string is not empty. ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # Compare : integer static Compares the two strings and returns an integer to denote their relative sort order. |Name|Type|Description| |---|---|---| |left| string | | |right| string | | lang=cpp, name=Lightning function Compare(left : String, right : String) : Integer # CompareTo : integer Compares this string to the given string and returns an integer to denote their relative sort order. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function CompareTo(p0 : StringRange) : Integer # ComputeRuneCount : integer Compute the number of runes in the string. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ComputeRuneCount() : Integer # Concatenate : string static Combines the two strings into a new string. |Name|Type|Description| |---|---|---| |p0| string | | |p1| string | | lang=cpp, name=Lightning function Concatenate(p0 : String, p1 : String) : String # Concatenate : string static Combines the two string ranges into a new string. |Name|Type|Description| |---|---|---| |p0| stringrange | | |p1| stringrange | | lang=cpp, name=Lightning function Concatenate(p0 : StringRange, p1 : StringRange) : String # Contains : boolean Returns if the string Contains the specified substring. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Contains(p0 : StringRange) : Boolean # EndsWith : boolean Returns if the string ends with the specified substring. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function EndsWith(p0 : StringRange) : Boolean # FindFirstOf : stringrange Returns a StringRange that Contains the first occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function FindFirstOf(p0 : StringRange) : StringRange # FindLastOf : stringrange Returns a StringRange that Contains the last occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function FindLastOf(p0 : StringRange) : StringRange # FindRangeExclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring excludes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange| stringrange | | |endRange| stringrange | | lang=cpp, name=Lightning function FindRangeExclusive(startRange : StringRange, endRange : StringRange) : StringRange # FindRangeInclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring includes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange| stringrange | | |endRange| stringrange | | lang=cpp, name=Lightning function FindRangeInclusive(startRange : StringRange, endRange : StringRange) : StringRange # FormatC : string static Name Type Description format string p1 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T p8 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T, p8 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T p8 T p9 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T, p8 : T, p9 : T) : String ``` # FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T p8 T p9 T p10 T ``` lang=cpp, name=Lightning function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T, p8 : T, p9 : T, p10 : T) : String ``` # FromRune : string static Constructs a string from the utf-8 code point of a rune. |Name|Type|Description| |---|---|---| |p0| integer | | lang=cpp, name=Lightning function FromRune(p0 : Integer) : String # FromRune : string static Constructs a string from a rune. |Name|Type|Description| |---|---|---| |p0| rune | | lang=cpp, name=Lightning function FromRune(p0 : Rune) : String # Get : rune String operator Get is deprecated. To iterate through a String use a StringRange (.All) or StringIterator (.Begin). |Name|Type|Description| |---|---|---| |index| integer | | lang=cpp, name=Lightning function Get(index : Integer) : Rune # IsNullOrEmpty : boolean static Returns if the given string is null or empty. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function IsNullOrEmpty(p0 : StringRange) : Boolean # IsNullOrWhitespace : boolean static Returns if the given string is null, empty, or all whitespace. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function IsNullOrWhitespace(p0 : StringRange) : Boolean # Join : string static Concatenates the given strings with the given separator string. |Name|Type|Description| |---|---|---| |separator| stringrange | | |value0| stringrange | | |value1| stringrange | | lang=cpp, name=Lightning function Join(separator : StringRange, value0 : StringRange, value1 : StringRange) : String # Join : string static Concatenates the given strings with the given separator string. |Name|Type|Description| |---|---|---| |separator| stringrange | | |value0| stringrange | | |value1| stringrange | | |value2| stringrange | | lang=cpp, name=Lightning function Join(separator : StringRange, value0 : StringRange, value1 : StringRange, value2 : StringRange) : String # Join : string static Concatenates the given strings with the given separator string. |Name|Type|Description| |---|---|---| |separator| stringrange | | |value0| stringrange | | |value1| stringrange | | |value2| stringrange | | |value3| stringrange | | lang=cpp, name=Lightning function Join(separator : StringRange, value0 : StringRange, value1 : StringRange, value2 : StringRange, value3 : StringRange) : String # Replace : string Returns a new string with all occurances of a substrings replaced with another substring. |Name|Type|Description| |---|---|---| |oldValue| stringrange | | |newValue| stringrange | | lang=cpp, name=Lightning function Replace(oldValue : StringRange, newValue : StringRange) : String # RuneIteratorFromByteIndex : runeiterator Finds the iterator from a byte index. WARNING: Strings are UTF8 and constructing an iterator from bytes indices can make an iterator in the middle of a rune. |Name|Type|Description| |---|---|---| |byteIndex| integer | | lang=cpp, name=Lightning function RuneIteratorFromByteIndex(byteIndex : Integer) : RuneIterator # RuneIteratorFromRuneIndex : runeiterator Finds the iterator from a rune index. WARNING: this may be slow as finding an iterator from rune index requires a linear search. |Name|Type|Description| |---|---|---| |runeIndex| integer | | lang=cpp, name=Lightning function RuneIteratorFromRuneIndex(runeIndex : Integer) : RuneIterator # Split : stringsplitrange Splits the string, according to the separator string, into a range of substrings. |Name|Type|Description| |---|---|---| |separator| stringrange | | lang=cpp, name=Lightning function Split(separator : StringRange) : StringSplitRange # StartsWith : boolean Returns if the string starts with the specified substring. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function StartsWith(p0 : StringRange) : Boolean # SubString : string Name Type Description start runeiterator end runeiterator ``` lang=cpp, name=Lightning function SubString(start : RuneIterator, end : RuneIterator) : String ``` # SubStringBytes : stringrange Constructs a substring based upon a number of bytes. WARNING: strings are UTF8 so indexing by bytes could produce unexpected results on non-ascii strings. |Name|Type|Description| |---|---|---| |startByteIndex| integer | | |lengthInBytes| integer | | lang=cpp, name=Lightning function SubStringBytes(startByteIndex : Integer, lengthInBytes : Integer) : StringRange # SubStringFromRuneIndices : string Creates a substring from start and end indices. WARNING: this may be slow as finding an index for a UTF8 string requires a linear search. |Name|Type|Description| |---|---|---| |startIndex| integer | | |endIndex| integer | | lang=cpp, name=Lightning function SubStringFromRuneIndices(startIndex : Integer, endIndex : Integer) : String # ToLower : string Returns a copy of the string that has been converted to lowercase. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToLower() : String # ToUpper : string Returns a copy of the string that has been converted to uppercase. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToUpper() : String # Trim : stringrange Trims all leading and trailing whitespace. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Trim() : StringRange # TrimEnd : stringrange Trims all trailing whitespace. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TrimEnd() : StringRange # TrimStart : stringrange Trims all leading whitespace. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TrimStart() : StringRange","title":"String"},{"location":"reference/lightning_base_types/stringbuilder/","text":"Core Methods Properties Base Classes Derived Classes Clear Constructor ToString Write WriteLine # Properties # Methods # Clear : Void Name Type Description ``` lang=cpp, name=Lightning function Clear() ``` # StringBuilder : Void constructor Name Type Description ``` lang=cpp, name=Lightning function StringBuilder() ``` # ToString : string Name Type Description ``` lang=cpp, name=Lightning function ToString() : String ``` # Write : Void Name Type Description p0 T ``` lang=cpp, name=Lightning function Write(p0 : T) ``` # WriteLine : Void Name Type Description ``` lang=cpp, name=Lightning function WriteLine() ``` # WriteLine : Void Name Type Description p0 T ``` lang=cpp, name=Lightning function WriteLine(p0 : T) ```","title":"Stringbuilder"},{"location":"reference/lightning_base_types/stringrange/","text":"Core Methods Properties Base Classes Derived Classes Compare All CompareTo Begin Contains Current EndsWith Empty FindFirstOf End FindLastOf IsNotEmpty FindRangeExclusive OriginalString FindRangeInclusive MoveNext Replace RuneIteratorFromByteIndex RuneIteratorFromRuneIndex Split StartsWith Constructor SubString SubStringBytes ToLower ToString ToUpper Trim TrimEnd TrimStart # Properties # All : stringrange read-only ``` lang=cpp, name=Lightning var All : StringRange # Begin : runeiterator read-only Returns the RuneIterator at the start of this range. ``` lang=cpp, name=Lightning var Begin : RuneIterator # Current : rune read-only ``` lang=cpp, name=Lightning var Current : Rune # Empty : boolean read-only ``` lang=cpp, name=Lightning var Empty : Boolean # End : runeiterator read-only Returns the RuneIterator at the end (one past the last Rune) of this range. ``` lang=cpp, name=Lightning var End : RuneIterator # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # OriginalString : string read-only Returns the entire string that this range was constructed from. ``` lang=cpp, name=Lightning var OriginalString : String # Methods # Compare : integer static Compares the two string ranges and returns an integer to denote their relative sort order. |Name|Type|Description| |---|---|---| |left| stringrange | | |right| stringrange | | lang=cpp, name=Lightning function Compare(left : StringRange, right : StringRange) : Integer # CompareTo : integer Returns if this string range is equal to the given range. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function CompareTo(p0 : StringRange) : Integer # Contains : boolean Returns if the string Contains the specified substring. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function Contains(p0 : StringRange) : Boolean # EndsWith : boolean Returns if the string ends with the specified substring. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function EndsWith(p0 : StringRange) : Boolean # FindFirstOf : stringrange Returns a StringRange that Contains the first occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function FindFirstOf(p0 : StringRange) : StringRange # FindLastOf : stringrange Returns a StringRange that Contains the last occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function FindLastOf(p0 : StringRange) : StringRange # FindRangeExclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring excludes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange| stringrange | | |endRange| stringrange | | lang=cpp, name=Lightning function FindRangeExclusive(startRange : StringRange, endRange : StringRange) : StringRange # FindRangeInclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring includes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange| stringrange | | |endRange| stringrange | | lang=cpp, name=Lightning function FindRangeInclusive(startRange : StringRange, endRange : StringRange) : StringRange # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ``` # Replace : string Returns a new string with all occurances of a substrings replaced with another substring. |Name|Type|Description| |---|---|---| |oldValue| stringrange | | |newValue| stringrange | | lang=cpp, name=Lightning function Replace(oldValue : StringRange, newValue : StringRange) : String # RuneIteratorFromByteIndex : runeiterator Finds the iterator from a byte index. WARNING: Strings are UTF8 and constructing an iterator from bytes indices can make an iterator in the middle of a rune. |Name|Type|Description| |---|---|---| |byteIndex| integer | | lang=cpp, name=Lightning function RuneIteratorFromByteIndex(byteIndex : Integer) : RuneIterator # RuneIteratorFromRuneIndex : runeiterator Finds the iterator from a rune index (the 'character' index). WARNING: this may be slow as finding an iterator from rune index requires a linear search. |Name|Type|Description| |---|---|---| |runeIndex| integer | | lang=cpp, name=Lightning function RuneIteratorFromRuneIndex(runeIndex : Integer) : RuneIterator # Split : stringsplitrange Splits the string, according to the separator string, into a range of substrings. |Name|Type|Description| |---|---|---| |separator| stringrange | | lang=cpp, name=Lightning function Split(separator : StringRange) : StringSplitRange # StartsWith : boolean Returns if the string ends with the specified substring. |Name|Type|Description| |---|---|---| |p0| stringrange | | lang=cpp, name=Lightning function StartsWith(p0 : StringRange) : Boolean # StringRange : Void constructor Name Type Description ``` lang=cpp, name=Lightning function StringRange() ``` # SubString : stringrange Constructs a StringRange from the given begin and end iterators. |Name|Type|Description| |---|---|---| |begin| runeiterator | | |end| runeiterator | | lang=cpp, name=Lightning function SubString(begin : RuneIterator, end : RuneIterator) : StringRange # SubStringBytes : stringrange Constructs a substring based upon a number of bytes. WARNING: strings are UTF8 so indexing by bytes could produce unexpected results on non-ascii strings. |Name|Type|Description| |---|---|---| |startByteIndex| integer | | |lengthInBytes| integer | | lang=cpp, name=Lightning function SubStringBytes(startByteIndex : Integer, lengthInBytes : Integer) : StringRange # ToLower : string Returns a copy of the string that has been converted to lowercase. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToLower() : String # ToString : string Returns a new string of the current range. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToString() : String # ToUpper : string Returns a copy of the string that has been converted to uppercase. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function ToUpper() : String # Trim : stringrange Trims all leading and trailing whitespace. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function Trim() : StringRange # TrimEnd : stringrange Trims all trailing whitespace. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TrimEnd() : StringRange # TrimStart : stringrange Trims all leading whitespace. |Name|Type|Description| |---|---|---| lang=cpp, name=Lightning function TrimStart() : StringRange","title":"Stringrange"},{"location":"reference/lightning_base_types/stringsplitrange/","text":"Core Methods Properties Base Classes Derived Classes MoveNext All Current IsNotEmpty # Properties # All : stringsplitrange read-only ``` lang=cpp, name=Lightning var All : StringSplitRange # Current : stringrange read-only ``` lang=cpp, name=Lightning var Current : StringRange # IsNotEmpty : boolean read-only ``` lang=cpp, name=Lightning var IsNotEmpty : Boolean # Methods # MoveNext : Void Name Type Description ``` lang=cpp, name=Lightning function MoveNext() ```","title":"Stringsplitrange"},{"location":"reference/lightning_base_types/type/","text":"Core Methods Properties Base Classes Derived Classes IsA IsAny reflectionobject anytype IsCastableTo IsDelegate boundtype IsRawCastableTo IsEnum delegatetype IsEnumOrFlags indirectiontype IsFlags IsHandle IsValue Library Name # Properties # IsAny : boolean read-only ``` lang=cpp, name=Lightning var IsAny : Boolean # IsDelegate : boolean read-only ``` lang=cpp, name=Lightning var IsDelegate : Boolean # IsEnum : boolean read-only ``` lang=cpp, name=Lightning var IsEnum : Boolean # IsEnumOrFlags : boolean read-only ``` lang=cpp, name=Lightning var IsEnumOrFlags : Boolean # IsFlags : boolean read-only ``` lang=cpp, name=Lightning var IsFlags : Boolean # IsHandle : boolean read-only ``` lang=cpp, name=Lightning var IsHandle : Boolean # IsValue : boolean read-only ``` lang=cpp, name=Lightning var IsValue : Boolean # Library : library read-only ``` lang=cpp, name=Lightning var Library : Library # Name : string read-only ``` lang=cpp, name=Lightning var Name : String # Methods # IsA : boolean Name Type Description baseType type ``` lang=cpp, name=Lightning function IsA(baseType : Type) : Boolean ``` # IsCastableTo : boolean Name Type Description toType type ``` lang=cpp, name=Lightning function IsCastableTo(toType : Type) : Boolean ``` # IsRawCastableTo : boolean Name Type Description toType type ``` lang=cpp, name=Lightning function IsRawCastableTo(toType : Type) : Boolean ```","title":"Type"},{"location":"reference/lightning_base_types/utf8encoding/","text":"Core Methods Properties Base Classes Derived Classes iencoding # Properties # Methods","title":"Utf8encoding"},{"location":"reference/lightning_base_types/variable/","text":"Core Methods Properties Base Classes Derived Classes reflectionobject # Properties # Methods","title":"Variable"},{"location":"reference/lightning_base_types/void/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Void"},{"location":"reference/lightning_base_types/wrapper/","text":"Core Methods Properties Base Classes Derived Classes # Properties # Methods","title":"Wrapper"},{"location":"reference/lightning_base_types/zerorune/","text":"# Properties # Methods","title":"Properties"},{"location":"reference/lightning_base_types/zilchlibrary/","text":"# Properties # Methods","title":"Properties"},{"location":"source_docs/","text":"","title":"Index"},{"location":"source_docs/components/","text":"Component Example The following example guides you through making a component in C++ and exposing it to Plasma so that it can be added to a Cog, serialized, and interact with other components. The bare minimum requirements for making a component are as follows: - You must publicly inherit from Component - You must use the PlasmaDeclareType macro within the public section of the class - You must implement the InitializeMeta function and bind the base Component class - Our macros currently expect the component to be within the Plasma namespace Within the CustomComponent.hpp header file: # pragma once namespace Plasma { class CustomComponent : public Component { public: PlasmaDeclareType(CustomComponent); static void InitializeMeta(MetaType* meta); }; } It is our coding style to not tab in the namespace. We also generally rely upon all compilers supporing #pragma once (though you can use include guards if you wish). Within the CustomComponent.cpp file: # include \"Precompiled.hpp\" #include \"CustomComponent.hpp\" namespace Plasma { PlasmaDefineType(CustomComponent); void CustomComponent::InitializeMeta(MetaType* meta) { BindBase(Component); BindSetup(SetupMode::DefaultSerialization); } } The inclusion of Precompiled.hpp is only required if your project is using precompiled headers. All projects within Plasma have this option enabled. The PlasmaDeclareType macro within the hpp file must be matched by PlasmaDefineType in the cpp file. These macros create a reflection MetaType for your class so that we can use it within script, create it via a factory, and display it in a property grid. For more information on meta binding, visit the meta_binding section. InitializeMeta is called once when your component's MetaType gets initialized. BindBase tells your type that it inherits from the Component class. The BindSetup call with DefaultSerialization lets the engine know that when we create your component from a factory we'll immediately set all your member variables to their default values via the SerializeNameDefault macro (see Serialization below). Last but not least, we must register our component with the factory and ensure that all the meta/reflection information is also initialized. This is done with one simple macro call to RegisterComponent(CustomComponent); . This call should be made within your project's initialization area. For example in the Engine project you would add RegisterComponent within Engine\\Initialization.cpp . The easiest way to find where to initialize a component within a particular project is to look for another component defined within that project and then find its RegisterComponent(X) call. Component Interface Within the component there are a few virtual functions which can be overridden. Serialize which is responsible for saving and loading your component Initialize which will be run once upon your component being added or loaded (after Serialize ) OnAllObjectsCreated which is run after all objects within a context have had Initialize called upon them For example, when loading a level Or when creating an archetype (all objects within that archetype) DebugDraw will be called when your object is selected (use the gDebugDrawer interface) OnDestroy which will be called when your component is removed or the object is being destructed Be very careful with this event, as there are many unsafe things you can do here Accessing another component can be unsafe Accessing another object (such as a child) Creating an object here, etc Add the following code to CustomComponent.hpp right after InitializeMeta : // These functions are in the order they will be invoked: void Serialize(Serializer& stream) override; void Initialize(CogInitializer& initializer) override; void OnAllObjectsCreated(CogInitializer& initializer) override; void DebugDraw() override; void OnDestroy(uint flags) override; You may implement these functions as you see fit. Empty implementations are OK, and they do NOT need to invoke the base class version of the function. The following includes some common example implementations of the above functions: void CustomComponent::InitializeMeta(MetaType* meta) { BindBase(Component); BindSetup(SetupMode::DefaultSerialization); // This means we require the component Transform // before our component can be added // This also guarantees that it is safe to hold onto mTransform BindDependency(Transform); BindMemberProperty(mLives); BindMemberEnumProperty(ButtonState, mState); // If we had a GetSize and SetSize... BindGetSetProperty(Size); // Binding resources currently requires both Get/Set functions // For example, if we had a GetFace and SetFace which took a Material... BindGetSetResourceProperty(Material, Face); // These methods will be callable by script BindMethod(Speak); } void CustomComponent::Serialize(Serializer& stream) { // Our serialization handles both directions (saving and loading) SerializeNameDefault(mLives, 9); SerializeEnumName(ButtonState, mState); SerializeResourceName(mFace, MaterialManager); } void CustomComponent::Initialize(CogInitializer& initializer) { // You might grab another component on your object // Remember that component could not have Initialize called on it // if it were added AFTER your component (see Dependencies) mTransform = GetOwner()->has(Transform); } void CustomComponent::OnAllObjectsCreated(CogInitializer& initializer) { // Find another object within the space (everything should be created by here) Cog* player = GetSpace()->FindObjectByName(\"Player\"); } void CustomComponent::DebugDraw() { // Draw a red sphere at our position gDebugDrawer->Add(Debug::Sphere(mTransform->GetWorldTranslation(), 0.5f).Color(Color::Red)); } void CustomComponent::OnDestroy(uint flags) { // Disconnect ourselves from any lists we've been added to } Last but not least, if you would like your component to be automatically documented by doxygen, you must use tripple slashes /// for comments above any classes, functions, properties, or members you want to be documented. The file header that doxygen requires should look something like: *///////////////////////////////////////////////////////////////////////////* /// /// \\file CustomComponent.hpp /// /// Authors: Your Name /// *///////////////////////////////////////////////////////////////////////////* Remember to also put this header in your cpp file and rename .hpp to .cpp","title":"Component Example"},{"location":"source_docs/components/#component-example","text":"The following example guides you through making a component in C++ and exposing it to Plasma so that it can be added to a Cog, serialized, and interact with other components. The bare minimum requirements for making a component are as follows: - You must publicly inherit from Component - You must use the PlasmaDeclareType macro within the public section of the class - You must implement the InitializeMeta function and bind the base Component class - Our macros currently expect the component to be within the Plasma namespace Within the CustomComponent.hpp header file: # pragma once namespace Plasma { class CustomComponent : public Component { public: PlasmaDeclareType(CustomComponent); static void InitializeMeta(MetaType* meta); }; } It is our coding style to not tab in the namespace. We also generally rely upon all compilers supporing #pragma once (though you can use include guards if you wish). Within the CustomComponent.cpp file: # include \"Precompiled.hpp\" #include \"CustomComponent.hpp\" namespace Plasma { PlasmaDefineType(CustomComponent); void CustomComponent::InitializeMeta(MetaType* meta) { BindBase(Component); BindSetup(SetupMode::DefaultSerialization); } } The inclusion of Precompiled.hpp is only required if your project is using precompiled headers. All projects within Plasma have this option enabled. The PlasmaDeclareType macro within the hpp file must be matched by PlasmaDefineType in the cpp file. These macros create a reflection MetaType for your class so that we can use it within script, create it via a factory, and display it in a property grid. For more information on meta binding, visit the meta_binding section. InitializeMeta is called once when your component's MetaType gets initialized. BindBase tells your type that it inherits from the Component class. The BindSetup call with DefaultSerialization lets the engine know that when we create your component from a factory we'll immediately set all your member variables to their default values via the SerializeNameDefault macro (see Serialization below). Last but not least, we must register our component with the factory and ensure that all the meta/reflection information is also initialized. This is done with one simple macro call to RegisterComponent(CustomComponent); . This call should be made within your project's initialization area. For example in the Engine project you would add RegisterComponent within Engine\\Initialization.cpp . The easiest way to find where to initialize a component within a particular project is to look for another component defined within that project and then find its RegisterComponent(X) call.","title":"Component Example"},{"location":"source_docs/components/#component-interface","text":"Within the component there are a few virtual functions which can be overridden. Serialize which is responsible for saving and loading your component Initialize which will be run once upon your component being added or loaded (after Serialize ) OnAllObjectsCreated which is run after all objects within a context have had Initialize called upon them For example, when loading a level Or when creating an archetype (all objects within that archetype) DebugDraw will be called when your object is selected (use the gDebugDrawer interface) OnDestroy which will be called when your component is removed or the object is being destructed Be very careful with this event, as there are many unsafe things you can do here Accessing another component can be unsafe Accessing another object (such as a child) Creating an object here, etc Add the following code to CustomComponent.hpp right after InitializeMeta : // These functions are in the order they will be invoked: void Serialize(Serializer& stream) override; void Initialize(CogInitializer& initializer) override; void OnAllObjectsCreated(CogInitializer& initializer) override; void DebugDraw() override; void OnDestroy(uint flags) override; You may implement these functions as you see fit. Empty implementations are OK, and they do NOT need to invoke the base class version of the function. The following includes some common example implementations of the above functions: void CustomComponent::InitializeMeta(MetaType* meta) { BindBase(Component); BindSetup(SetupMode::DefaultSerialization); // This means we require the component Transform // before our component can be added // This also guarantees that it is safe to hold onto mTransform BindDependency(Transform); BindMemberProperty(mLives); BindMemberEnumProperty(ButtonState, mState); // If we had a GetSize and SetSize... BindGetSetProperty(Size); // Binding resources currently requires both Get/Set functions // For example, if we had a GetFace and SetFace which took a Material... BindGetSetResourceProperty(Material, Face); // These methods will be callable by script BindMethod(Speak); } void CustomComponent::Serialize(Serializer& stream) { // Our serialization handles both directions (saving and loading) SerializeNameDefault(mLives, 9); SerializeEnumName(ButtonState, mState); SerializeResourceName(mFace, MaterialManager); } void CustomComponent::Initialize(CogInitializer& initializer) { // You might grab another component on your object // Remember that component could not have Initialize called on it // if it were added AFTER your component (see Dependencies) mTransform = GetOwner()->has(Transform); } void CustomComponent::OnAllObjectsCreated(CogInitializer& initializer) { // Find another object within the space (everything should be created by here) Cog* player = GetSpace()->FindObjectByName(\"Player\"); } void CustomComponent::DebugDraw() { // Draw a red sphere at our position gDebugDrawer->Add(Debug::Sphere(mTransform->GetWorldTranslation(), 0.5f).Color(Color::Red)); } void CustomComponent::OnDestroy(uint flags) { // Disconnect ourselves from any lists we've been added to } Last but not least, if you would like your component to be automatically documented by doxygen, you must use tripple slashes /// for comments above any classes, functions, properties, or members you want to be documented. The file header that doxygen requires should look something like: *///////////////////////////////////////////////////////////////////////////* /// /// \\file CustomComponent.hpp /// /// Authors: Your Name /// *///////////////////////////////////////////////////////////////////////////* Remember to also put this header in your cpp file and rename .hpp to .cpp","title":"Component Interface"},{"location":"source_docs/custom_event_names/","text":"Custom Event Names We start by making a externed string in our header file: namespace Plasma { namespace Events { DeclareEvent(FlagCaptured); } } And within the cpp file we must define the string: namespace Plasma { namespace Events { DefineEvent(FlagCaptured); } } By placing the event within the Events namespace, we can conveniently access any events name via Events::FlagCaptured . Custom Event Types To create an event type that we can send ( this is not required ) we can make a new class that inherits from Event : class FlagEvent : public Event { public: PlasmaDeclareType(FlagEvent); static void InitializeMeta(MetaType* meta); // Any data you wish to put here }; Notice that this class uses the PlasmaDeclareType macro. This means that it is important that we use the counterpart PlasmaDefineType within the cpp, and that we must absolutely be sure to call BindBase on Event as well as InitializeMetaOfType(FlagEvent) elsewhere in the initialization portion of our code. See meta_binding for more details. PlasmaDefineType(FlagEvent); void FlagEvent::InitializeMeta(MetaType* meta) { BindBase(Event); // Any members we want bound to script } Sending / Receiving Events Sending an event is generally: FlagEvent toSend; target->GetDispatcher()->Dispatch(Events::FlagCaptured, &toSend); The target in this case is whoever we want to send the event on. In some places we have helper functions like DispatchEvent to make this more convenient (such as on component): FlagEvent toSend; DispatchEvent(Events::FlagCaptured, &toSend); When making an event connection so we can receive an event you may use: Plasma::Connect(target, Events::FlagCaptured, this, &self_type::OnFlagCaptured); The target in this case is an object that is going to have that event sent to it. We pass in this because we want to listen for the event. The type self_type is automatically declared on our class by PlasmaDeclareType . The &self_type::OnFlagCaptured is C++ syntax for getting a member function pointer. Technically Plasma::Connect can connect any two objects (it doesn't even have to be yourself), however since your own object is most common, we have a macro to simplify this: ConnectThisTo(target, Events::FlagCaptured, OnFlagCaptured); Event Dispatcher/Receiver In order to send events we must have an EventDispatcher , and in order to receive events we must have an EventReceiver . To make life simple, most classes can just inherit from EventObject which contains both of these and has all the basic functions on it. Note that Cog itself is actually an EventObject as are many other classes in the engine. WARNING: Component is not an EventObject , however it redirects its EventDispatcher and EventReceiver to the owning Cog . This means that if you send an event to a particular component it actually just sends to the entire Cog . Similarly, if you listen for an event on a component, you are actually listening to the event on the entire Cog . All events in Plasma are sent and received by string names. We are able to keep this calls very efficient because we implemented our own String class with the following features: Strings are immutable and cannot be changed after they are created We pre-compute the hash and string length of every string we create Strings are reference counted (passing by value does not require allocation) Our HashMap is specifically optimized to make String lookup efficient Many event systems will pass multiple arguments and invoke functions directly: void MyCallback(float frameTime, int frameNumber, World* world); We chose not to do this pattern because it breaks user's code easily if we need to add/remove/change the parameters in any ways. To mitigate this we chose to use a base class Event for the event data. All events sent must publicly inherit from Event . Note that you are not required to create a new derived class in order to send an event. Events are automatically disconnected if either the sender or receiver is destructed.","title":"Custom Event Names"},{"location":"source_docs/custom_event_names/#custom-event-names","text":"We start by making a externed string in our header file: namespace Plasma { namespace Events { DeclareEvent(FlagCaptured); } } And within the cpp file we must define the string: namespace Plasma { namespace Events { DefineEvent(FlagCaptured); } } By placing the event within the Events namespace, we can conveniently access any events name via Events::FlagCaptured .","title":"Custom Event Names"},{"location":"source_docs/custom_event_names/#custom-event-types","text":"To create an event type that we can send ( this is not required ) we can make a new class that inherits from Event : class FlagEvent : public Event { public: PlasmaDeclareType(FlagEvent); static void InitializeMeta(MetaType* meta); // Any data you wish to put here }; Notice that this class uses the PlasmaDeclareType macro. This means that it is important that we use the counterpart PlasmaDefineType within the cpp, and that we must absolutely be sure to call BindBase on Event as well as InitializeMetaOfType(FlagEvent) elsewhere in the initialization portion of our code. See meta_binding for more details. PlasmaDefineType(FlagEvent); void FlagEvent::InitializeMeta(MetaType* meta) { BindBase(Event); // Any members we want bound to script }","title":"Custom Event Types"},{"location":"source_docs/custom_event_names/#sending-receiving-events","text":"Sending an event is generally: FlagEvent toSend; target->GetDispatcher()->Dispatch(Events::FlagCaptured, &toSend); The target in this case is whoever we want to send the event on. In some places we have helper functions like DispatchEvent to make this more convenient (such as on component): FlagEvent toSend; DispatchEvent(Events::FlagCaptured, &toSend); When making an event connection so we can receive an event you may use: Plasma::Connect(target, Events::FlagCaptured, this, &self_type::OnFlagCaptured); The target in this case is an object that is going to have that event sent to it. We pass in this because we want to listen for the event. The type self_type is automatically declared on our class by PlasmaDeclareType . The &self_type::OnFlagCaptured is C++ syntax for getting a member function pointer. Technically Plasma::Connect can connect any two objects (it doesn't even have to be yourself), however since your own object is most common, we have a macro to simplify this: ConnectThisTo(target, Events::FlagCaptured, OnFlagCaptured);","title":"Sending / Receiving Events"},{"location":"source_docs/custom_event_names/#event-dispatcherreceiver","text":"In order to send events we must have an EventDispatcher , and in order to receive events we must have an EventReceiver . To make life simple, most classes can just inherit from EventObject which contains both of these and has all the basic functions on it. Note that Cog itself is actually an EventObject as are many other classes in the engine. WARNING: Component is not an EventObject , however it redirects its EventDispatcher and EventReceiver to the owning Cog . This means that if you send an event to a particular component it actually just sends to the entire Cog . Similarly, if you listen for an event on a component, you are actually listening to the event on the entire Cog . All events in Plasma are sent and received by string names. We are able to keep this calls very efficient because we implemented our own String class with the following features: Strings are immutable and cannot be changed after they are created We pre-compute the hash and string length of every string we create Strings are reference counted (passing by value does not require allocation) Our HashMap is specifically optimized to make String lookup efficient Many event systems will pass multiple arguments and invoke functions directly: void MyCallback(float frameTime, int frameNumber, World* world); We chose not to do this pattern because it breaks user's code easily if we need to add/remove/change the parameters in any ways. To mitigate this we chose to use a base class Event for the event data. All events sent must publicly inherit from Event . Note that you are not required to create a new derived class in order to send an event. Events are automatically disconnected if either the sender or receiver is destructed.","title":"Event Dispatcher/Receiver"},{"location":"source_docs/editor/","text":"Editor The editor is created once and manages: All windows and docking (done through the base MultiDock class) The current level(s) being edited All running game sessions Selection Operation queue (undo/redo) Commands Tools Project loading Why we restart editor when loading projects (meta flush) Commands Requires documentation Commands from Data Commands are loaded from the Data\\Commands.data file in the Plasma repository. These commands are then bound in C++ to specific functions on the editor. Cog Commands CogCommands are just Cogs that are marked as a command object, and when the command is invoked, the 'ExecuteEvent' event will be sent on the cog. This allows for users to create custom commands without learning a new system. They use what they're used to and just respond to a different event. The command Cogs are all created in a single Space (named \"CommandSpace\") that lives under the editors game session. There are two ways a CogCommand can be created: A Component with the [Command] attribute with the attribute parameter 'autoCommand' set to true. An Archetype with tag \"Command\". Command Context This gives commands more information about the circumstances they were invoked in, such as which viewport has focus when the command is invoked. Command 'Active' state Used for Tools and toggle-able commands. Example: Tools have Commands that enable them, so when the tool is selected, that command is now considered 'Active' until another tool is selected. This allows the IconButton in the Ui to display that the tool is active. Gizmos Requires documentation Basic Gizmos Requires documentation Tools Requires documentation Events Connect to this.Owner for all events. They will all be sent directly to the tool when the tool is selected. Events.ToolActivate - Sent when the tool has been selected Events.ToolDeactivate - Sent when the tool has been de-selected Events.ToolDraw - Sent every frame to debug draw Events::MouseDown Events::MouseMove Events::MouseUpdate Events::LeftMouseDown Events::LeftMouseUp Events::DoubleClick Events::RightMouseDown Events::RightMouseUp Events::MiddleMouseDown Events::MouseScroll Events::KeyDown Events::KeyUp Operations Requires documentation Custom Tools Requires documentation Viewports Requires documentation EditorViewport Requires documentation GameViewport Requires documentation Notifications Requires documentation Windows Text Editor Requires documentation Main Property Grid Requires documentation Resource Library Requires documentation Object View Requires documentation Console Requires documentation Tools Window Requires documentation Resource Editors Requires documentation Downloads Requires documentation Automation Stress Test Coming soon Animator Requires documentation Rich Animation Requires documentation Fbx -> RichAnimation issues Animation Editor AnimationEditorData Controls Requires documentation Track View Requires documentation Scrubber Requires documentation Graph Requires documentation Dope Sheet Requires documentation Controls Requires documentation","title":"Editor"},{"location":"source_docs/editor/#editor","text":"The editor is created once and manages: All windows and docking (done through the base MultiDock class) The current level(s) being edited All running game sessions Selection Operation queue (undo/redo) Commands Tools","title":"Editor"},{"location":"source_docs/editor/#project-loading","text":"Why we restart editor when loading projects (meta flush)","title":"Project loading"},{"location":"source_docs/editor/#commands","text":"Requires documentation","title":"Commands"},{"location":"source_docs/editor/#commands-from-data","text":"Commands are loaded from the Data\\Commands.data file in the Plasma repository. These commands are then bound in C++ to specific functions on the editor.","title":"Commands from Data"},{"location":"source_docs/editor/#cog-commands","text":"CogCommands are just Cogs that are marked as a command object, and when the command is invoked, the 'ExecuteEvent' event will be sent on the cog. This allows for users to create custom commands without learning a new system. They use what they're used to and just respond to a different event. The command Cogs are all created in a single Space (named \"CommandSpace\") that lives under the editors game session. There are two ways a CogCommand can be created: A Component with the [Command] attribute with the attribute parameter 'autoCommand' set to true. An Archetype with tag \"Command\".","title":"Cog Commands"},{"location":"source_docs/editor/#command-context","text":"This gives commands more information about the circumstances they were invoked in, such as which viewport has focus when the command is invoked.","title":"Command Context"},{"location":"source_docs/editor/#command-active-state","text":"Used for Tools and toggle-able commands. Example: Tools have Commands that enable them, so when the tool is selected, that command is now considered 'Active' until another tool is selected. This allows the IconButton in the Ui to display that the tool is active.","title":"Command 'Active' state"},{"location":"source_docs/editor/#gizmos","text":"Requires documentation","title":"Gizmos"},{"location":"source_docs/editor/#basic-gizmos","text":"Requires documentation","title":"Basic Gizmos"},{"location":"source_docs/editor/#tools","text":"Requires documentation","title":"Tools"},{"location":"source_docs/editor/#events","text":"Connect to this.Owner for all events. They will all be sent directly to the tool when the tool is selected. Events.ToolActivate - Sent when the tool has been selected Events.ToolDeactivate - Sent when the tool has been de-selected Events.ToolDraw - Sent every frame to debug draw Events::MouseDown Events::MouseMove Events::MouseUpdate Events::LeftMouseDown Events::LeftMouseUp Events::DoubleClick Events::RightMouseDown Events::RightMouseUp Events::MiddleMouseDown Events::MouseScroll Events::KeyDown Events::KeyUp","title":"Events"},{"location":"source_docs/editor/#operations","text":"Requires documentation","title":"Operations"},{"location":"source_docs/editor/#custom-tools","text":"Requires documentation","title":"Custom Tools"},{"location":"source_docs/editor/#viewports","text":"Requires documentation","title":"Viewports"},{"location":"source_docs/editor/#editorviewport","text":"Requires documentation","title":"EditorViewport"},{"location":"source_docs/editor/#gameviewport","text":"Requires documentation","title":"GameViewport"},{"location":"source_docs/editor/#notifications","text":"Requires documentation","title":"Notifications"},{"location":"source_docs/editor/#windows","text":"","title":"Windows"},{"location":"source_docs/editor/#text-editor","text":"Requires documentation","title":"Text Editor"},{"location":"source_docs/editor/#main-property-grid","text":"Requires documentation","title":"Main Property Grid"},{"location":"source_docs/editor/#resource-library","text":"Requires documentation","title":"Resource Library"},{"location":"source_docs/editor/#object-view","text":"Requires documentation","title":"Object View"},{"location":"source_docs/editor/#console","text":"Requires documentation","title":"Console"},{"location":"source_docs/editor/#tools-window","text":"Requires documentation","title":"Tools Window"},{"location":"source_docs/editor/#resource-editors","text":"Requires documentation","title":"Resource Editors"},{"location":"source_docs/editor/#downloads","text":"Requires documentation","title":"Downloads"},{"location":"source_docs/editor/#automation","text":"Stress Test Coming soon","title":"Automation"},{"location":"source_docs/editor/#animator","text":"Requires documentation","title":"Animator"},{"location":"source_docs/editor/#rich-animation","text":"Requires documentation Fbx -> RichAnimation issues","title":"Rich Animation"},{"location":"source_docs/editor/#animation-editor","text":"AnimationEditorData","title":"Animation Editor"},{"location":"source_docs/editor/#controls","text":"Requires documentation","title":"Controls"},{"location":"source_docs/editor/#track-view","text":"Requires documentation","title":"Track View"},{"location":"source_docs/editor/#scrubber","text":"Requires documentation","title":"Scrubber"},{"location":"source_docs/editor/#graph","text":"Requires documentation","title":"Graph"},{"location":"source_docs/editor/#dope-sheet","text":"Requires documentation","title":"Dope Sheet"},{"location":"source_docs/editor/#controls_1","text":"Requires documentation","title":"Controls"},{"location":"source_docs/engine/","text":"Engine custom_mark10 digraph G { node [shape=rectangle, fontsize=10, height=0, fontname=Verdana]; edge [fontsize=10, fontname=Verdana]; \"Engine\" -> \"Systems\" [label=\"owns\"]; \"Systems\" -> \"ShellSystem\"; \"Systems\" -> \"TimeSystem\"; \"Systems\" -> \"PhysicsSystem\"; \"Systems\" -> \"GraphicsSystem...\"; \"Engine\" -> \"Game Sessions\" [label=\"owns\"]; \"Game Sessions\" -> \"Spaces\" [label=\"owns\"]; \"Spaces\" -> \"Cogs\" [label=\"owns\"]; \"Spaces\" -> \"LevelSettings\" [label=\"own\"]; \"Game Sessions\" -> \"Editor GameSession\"; \"Game Sessions\" -> \"Game1 GameSession...\"; \"Editor\" -> \"Editor GameSession\" [label=\"uses\"]; \"Editor GameSession\" -> \"Editor Spaces\" [label=\"uses\"]; \"Editor Spaces\" -> \"Tools (Cogs)\" [label=\"uses\"]; \"Editor Spaces\" -> \"Commands (Cogs)\" [label=\"uses\"]; } custom_mark10 Philosophy The driving philosophy behind Plasma has generally been to re-use as much code as possible in different locations. This is the reason we use component based design. Its much easier to share code by adding components then it is in an inheritance model. Plasma also maintains its WYSIWYG style by reusing code between the editor and game-play. All components that we write in C++ generally have to acknowledge that they can be used in both editor and game, which is an advantage since they can display the best data to the editor (such as a Microphone component debug drawing its virtual ears). Because it is difficult to trust the user to write code that works perfectly in both editor and game, by default we 'proxy' their Lightning components in the editor. The proxy is basically a fake object that looks exactly like their object, but does not run their code (all the same properties). We do expose the ability for users to make their scripts run in editor if they would like. Useful Libraries Behind the scenes at the core of Plamsa is the Meta system, which exposes methods and members of C++ objects to both the GUI and Lightning. To maximise code reuse, we rely heavily upon the property grid GUI. The property grid automatically generates GUI based on the members of an object (either from C++ or from Lightning). The property grid is also built to handle component based design (adding and removing components at its core). By using the property grid, users don't have to create custom GUIs for every type of object/component/tool they add to the engine. Having said that, sometimes it is advantageous to write custom UI, such as in the case of the Animator tool which requires time-lines and key-frames. With the Meta system, we can query for type information such as how many members a type has and what their names are, how many methods and what parameters they take, etc. We also have a serialization system that serializes out to our own format (though it is somewhat similar to JSON). We maximise code reuse by using bi-directional serialization, which means we use a single function to both save and load an object, instead of writing two separate functions. We also support serialization from Meta, which is the quickest way to save and load all of an objects properties. In the future, we may switch to serialization being entirely from Meta, because it would simplify some of our paths and reuse more code. Almost everything in Plasma is written from scratch (with the exceptions of a few minor libraries such as libpng, zlib, freetype, etc). These libraries dive deeply into the specifies of file formats and unit test them very well, so we opted to use these libraries where they make sense. Aside from that, everything including the physics, graphics, scripting, networking, and even eventually the sound engine will be written by our team. Engine Classes Engine The Engine class is created once (allocated and stored into gEngine). Calling Run on the engine starts the main loop, and it will continue running until Terminate is called. The Engine invokes the Update function every frame, which walks through all the Systems that were added to the engine in the WinMain/Startup function. Many of our objects in Plasma use delayed destruction (such as Cog) which means when we call Destroy on them, they are marked for deletion and added to a list to be deleted later. The Engine deletes these objects upon its Update every frame. The Engine is also responsible for pumping events that come from other threads in its Update. System A System is effectively a component that gets added to the Engine. Examples include the PhysicsEngine, SoundSystem, etc. The SoundSystem is a particularly good example of a system because it has one time initialization and destruction logic, such as starting up the mixing thread. Moreover, the SoundSystem must be updated every frame to receive threaded notifications from the mix sound thread. Some Systems, such as the TimeSystem and the PhysicsEngine mostly manage updating space components such as the TimeSpace and PhysicsSpace. By updating them when we update each system, we ensure that all spaces have their LogicUpdate run, then all spaces have their physics updated. Note that order of the Systems is very important to reduce input lag. Cog The Cog is our base composition class to which components can be added. Space and GameSession both inherit from Cog. Cogs are typically created via the Factory (gFactory) which handles looking up types by name and then creating them (including components). Cogs use delayed destruction, which means they don't instantly get deleted upon calling Destroy, but rather get destroyed at the beginning of the next frame. Component Component is our base class for all components. Cog contains an ArrayMap of components (mapped by type id for quick typed lookup). We generally only allow there to be one component of a particular type per Cog. Components are mostly WYSIWYG in the editor, in that the actual components we code up in C++ are exactly the same ones running in the editor. The only major difference is that the editor is generally paused which stops physics and other time based systems from running. Proxy Components Proxy components are a special class of components that pretend to look like another component by duplicating a component's meta. The proxy component is a property bag (map of strings to variants) and can store anything. Proxy components are useful because they don't run any code in the editor. All script components are proxied when they are added in the editor, but in the actual game they are substituted for the actual component. Engine Components Requires documentation Transform Object Link Area Game Session The GameSession manages all created Spaces, and is effectively an instance of a running 'game'. Every time you press F5 in the editor or run a standalone exported project, a GameSession is created. If you press Ctrl+F5, multiple GameSessions will be ran at the same time, which is useful for networking tests. GameSession inherits from Cog and can therefore have components (including LightningScripts) attached to it. The GameSession gets events sent on it, such as GameStarted where you can create spaces and load levels. The editor has a GameSession that you can edit and add components to (which will be used in the game). You can also attach [RunInEditor] scripts to the editor GameSession. The GameSession will destroy all child Spaces when it is destroyed. Space Spaces are one of the main features that sets Plasma apart from other engines. A Space contains a collection of Cogs (game objects). Each Space is independent of another Space. For example, you can have a physics object at (0,0,0) in one space, and a physics object at (0,0,0) in another space and the two objects will not interact or collide. We've found that Spaces are a great way to do UI, because you can run a separate space from your game that has UI objects in it. In many other game engines, the UI is either something entirely special, or you have to parent objects to your Camera which is cumbersome when you want to change cameras. Spaces can be given a name and are always created through the GameSession (which owns the Spaces). Named spaces can be found via the GameSession's FindSpaceByName. Because Space also inherits from Cog, you can add components and scripts to it. Although you can just create objects in a Space, the primary usage case is calling LoadLevel, which loads a collection of objects into the Space. The first time LoadLevel is called it is instantaneous (right after the call, all the objects are created). The subsequent times LoadLevel is called on the same space, it will be delayed by one frame. This is to avoid the issue of two objects existing at the same time with the same names and so on due to delayed destruction. Users will typically either listen to the LoadLevel event to perform level logic, or they will always create new spaces and call LoadLevel only on new spaces to ensure it is always instantaneous. Level Settings The LevelSettings object is actually part of the Level resource (just another object) but is worth mentioning in the context of the Space. The LevelSettings should always be the first Cog in the Space's list, and is therefore guaranteed to be initialized before any other object. Moreover, many built in components use the LevelSettings object as a way to define global effects for the entire level. For example, I can add a ForceEffect to the LevelSettings and then all objects in the current level will get that force applied. This isn't built in or special behavior of the LevelSettings, but rather the PhysicsEngine looks for any force effects first on the Cogs, then on the LevelSettings, and then on the Space. This is a common pattern. LevelSettings is also very core to writing user logic, so we put that property on both Space and Cog. You can directly access LevelSettings by doing 'this.LevelSettings' instead of trying to find it by name. Factory The factory (PL::gFactory) is responsible for constructing a type from a serialzied name such as a Cog, Space, or any components like Transform. Currently, the factory mostly only handles Cog related types, however our Meta can also be used as a factory. CogInitializer The CogInitializer is a type passed to each cog that is being initialized. When we create Cogs, we could be creating multiple, ie loading Cogs from a level, loading an Archetype which has a hierarchy with children, etc. Multiple Cogs loaded at the same time is known as a serialization context (we commonly refer to it as 'all objects within the context'). The CogInitializer stores a bunch of data that is useful to each cog being created, for example the parent GameSession or Space it is being created within. We also send the AllObjectsInitialized event on the CogInitializer once the entire initialization phase is completed for all objects within the context. Handles Cogs use a safe handle system that allows us to look up a cog by id and version: a pattern also called 'slot map'. The CogId class encompasses the id and version (two integers). CogId can implicitly convert to a Cog and will be null if the object no longer exists. We originally used to directly store Cog in many places, but we found that it was almost always a bad idea to assume the object still existed (dangling pointers). The user can delete objects, spaces can be unloaded, actions can delete objects, etc. We now almost always store references to objects in C++ as CogIds. We do work with Cog* on the stack because we know that with delayed destruction, the objects WILL NOT be deleted until the beginning of the next frame. Moreover, in script all references to Cogs are actually CogIds just to keep scripts safe. As a side note, whenever we pass around MetaHandles to Cogs, we're essentially just stuffing a CogId into the MetaHandleData. Archetype Archetypes are a data resource that stores a serialized Cog. Archetypes can be referenced within a Level and can also be created and loaded into a space. The advantage of Archetypes is that they allow instancing the same object in multiple places (sharing) and when the Archetype definition is changed in editor, all instances of that Archetype change. Archetypes are stored as text serialization, however we cache them using binary serialization so that subsequent creation of the same Archetype is very fast. This cache must be dumped any time a change to script is made (such as the order of members) because the binary serialization is linear: members are directly read in the order they are saved in. When an Archetype is uploaded in a Level in the editor, we run special code to update all live instances of that Archetype in the same level. When an Archetype is modified it gets a special flag that says it is locally modified within that level, meaning the object is basically copied into the level and is not instanced. Hierarchy Cog Hierarchies allow for any Cogs to be parented to other Cogs. When a parent Cog is destroyed, all of its children are destroyed, and so on. It is up to the components to give meaning to parenting. For example, Transform knows that when it gets childed to another Transform, it will act as a relative object and concatenate matricies. Physics Colliders and RigidBodies also have special behavior for childed objects, such as multiple collision volumes for a single object. Hierarchy uses an intrusive list to maintain the list of children and the hierarchy link is on the Cog itself. Initialization Order of Cogs Related to hierarchies is the initialization order of Cogs. Cogs are initialized from first to last object in the object view, and from parent to child. This is why LevelSettings is the first object to be initialized. The order of initialization is important because scripts may rely on this order. Moreover, we found that if script components were initialized in the same phase as C++ components, then they were often able to access data before it was fully initialized and crash the engine. This lead to separating script initialize into its own phase. Though it sounds obnoxious, we actually have effectively 4 phases of initialization. The first is calling Initialize on every component in C++. In the Initialize phase, we can only assume that other components that are above ours have been Initialized. Specifically we can rely on our component's dependencies being initialized. Then we invoke OnAllObjectsCreated on every C++ component, a phase where we know all components have been Initialized. Note that we must run ALL Initializes first and then ALL OnAllObjectsCreated in order for them to actually be correct. After that, we run ScriptInitialize on all script components, therefore we know all C++ components are fully initialized. Lastly, we send the AllObjectsInitialized event on CogInitializer which anyone can listen to. CogPath In the beginning of Plasma we needed a way to refer to other objects by id, and this id would have to persist through serialization (data saved to disk). This was useful if we wanted one object to point at another, eg a following script, and then we could save that link in the level. This problem is easily solvable if both objects you are linking are contained within the same file (two objects in a level, two objects in a single archetype, etc). However, once the objects were split apart into different files the problem becomes nearly impossible to solve properly. This case was especially common when a user would make a Zombie script and then use the Cog id's to point at the Player. As soon as the Zombie was uploaded to its own archetype, it would lose its own reference to the Player because the Zombie file by itself could no longer properly refer to the Player saved in the level. Many other popular editors exhibit this same behavior, but we deemed it undesirable. CogPaths were a partial solution to this problem. By using the names of objects and the hierarchy order, we gave the users a unique way to identify which object they were referring to. CogPaths also combine using the id so that they can best try to save, load, and continue pointing at the same object you originally picked without losing a reference. CogPaths use string lookups to find children Cogs, and special operators to find parents, children by index, children by archetype name, etc. The syntax of CogPaths also allows the user to find objects in different named spaces, which is very useful for UI. Events Plasma uses an event system at its core which allows any class to send and receive events. An event is basically just a callback (function pointer) plus an event data structure with all the relevant information to the event that occurred. For example, you can listen for the KeyDown event on the global Keyboard object, which tells you what key was pressed, as well as other helpful features such as if Ctrl, Shift, or Alt were pressed too. The event system is critical to the performance of Plasma because it discourages writing poll-based logic. Having a bunch of objects that update every frame and check to see if a key gets pressed is generally much less efficient than having a single object getting updated (the Keyboard) that then calls into everyone when a key gets pressed. Moreover, events allow for some level of dynamic dispatch. You can send an event to anyone and they may or may not handle it (think of it like a message). I can do a ray-cast and send the Open event to the first object I hit, which may do nothing, or it may open a door or a chest. Events can also be forwarded or bubbled up / down a hierarchy, which is very useful for UI. The common class that everyone inherits from to automatically get event handling is the EventObject class. Engine Events Requires documentation Systems There are many different Systems that we add to the engine. One of the more important ones it the TimeSystem. The TimeSystem has a intrusive linked list of all TimeSpace components (which are components that get added to each Space). When the TimeSystem updates, we compute the amount of time passed since the last frame, and then we walk through and update each TimeSpace. The TimeSpace update will dispatch critical events such as LogicUpdate, FrameUpdate, etc. Many different components (including user scripts) rely on LogicUpdate being sent on the space. Actions Requires documentation Job System Requires documentation Project Requires documentation Object Store Requires documentation Resources Requires documentation Engine Resources Requires documentation Archetype Level TextResource SampleCurve Paths ResourceTable DocumentResource Animations Requires documentation Animation Property Track Event Track Rich Animation See Editor Rich Animation Animation Editor See Editor Section Animation Graph Events: Animation Nodes: Pose Node Basic Node Direct Blend Node Cross Blend Node Selective Node Chain Node N-blend Node Graph Visualization Simple Animation Requires documentation Input / Shell System Requires documentation Tweakables Requires documentation","title":"Engine"},{"location":"source_docs/engine/#engine","text":"custom_mark10 digraph G { node [shape=rectangle, fontsize=10, height=0, fontname=Verdana]; edge [fontsize=10, fontname=Verdana]; \"Engine\" -> \"Systems\" [label=\"owns\"]; \"Systems\" -> \"ShellSystem\"; \"Systems\" -> \"TimeSystem\"; \"Systems\" -> \"PhysicsSystem\"; \"Systems\" -> \"GraphicsSystem...\"; \"Engine\" -> \"Game Sessions\" [label=\"owns\"]; \"Game Sessions\" -> \"Spaces\" [label=\"owns\"]; \"Spaces\" -> \"Cogs\" [label=\"owns\"]; \"Spaces\" -> \"LevelSettings\" [label=\"own\"]; \"Game Sessions\" -> \"Editor GameSession\"; \"Game Sessions\" -> \"Game1 GameSession...\"; \"Editor\" -> \"Editor GameSession\" [label=\"uses\"]; \"Editor GameSession\" -> \"Editor Spaces\" [label=\"uses\"]; \"Editor Spaces\" -> \"Tools (Cogs)\" [label=\"uses\"]; \"Editor Spaces\" -> \"Commands (Cogs)\" [label=\"uses\"]; } custom_mark10","title":"Engine"},{"location":"source_docs/engine/#philosophy","text":"The driving philosophy behind Plasma has generally been to re-use as much code as possible in different locations. This is the reason we use component based design. Its much easier to share code by adding components then it is in an inheritance model. Plasma also maintains its WYSIWYG style by reusing code between the editor and game-play. All components that we write in C++ generally have to acknowledge that they can be used in both editor and game, which is an advantage since they can display the best data to the editor (such as a Microphone component debug drawing its virtual ears). Because it is difficult to trust the user to write code that works perfectly in both editor and game, by default we 'proxy' their Lightning components in the editor. The proxy is basically a fake object that looks exactly like their object, but does not run their code (all the same properties). We do expose the ability for users to make their scripts run in editor if they would like.","title":"Philosophy"},{"location":"source_docs/engine/#useful-libraries","text":"Behind the scenes at the core of Plamsa is the Meta system, which exposes methods and members of C++ objects to both the GUI and Lightning. To maximise code reuse, we rely heavily upon the property grid GUI. The property grid automatically generates GUI based on the members of an object (either from C++ or from Lightning). The property grid is also built to handle component based design (adding and removing components at its core). By using the property grid, users don't have to create custom GUIs for every type of object/component/tool they add to the engine. Having said that, sometimes it is advantageous to write custom UI, such as in the case of the Animator tool which requires time-lines and key-frames. With the Meta system, we can query for type information such as how many members a type has and what their names are, how many methods and what parameters they take, etc. We also have a serialization system that serializes out to our own format (though it is somewhat similar to JSON). We maximise code reuse by using bi-directional serialization, which means we use a single function to both save and load an object, instead of writing two separate functions. We also support serialization from Meta, which is the quickest way to save and load all of an objects properties. In the future, we may switch to serialization being entirely from Meta, because it would simplify some of our paths and reuse more code. Almost everything in Plasma is written from scratch (with the exceptions of a few minor libraries such as libpng, zlib, freetype, etc). These libraries dive deeply into the specifies of file formats and unit test them very well, so we opted to use these libraries where they make sense. Aside from that, everything including the physics, graphics, scripting, networking, and even eventually the sound engine will be written by our team.","title":"Useful Libraries"},{"location":"source_docs/engine/#engine-classes","text":"","title":"Engine Classes"},{"location":"source_docs/engine/#engine_1","text":"The Engine class is created once (allocated and stored into gEngine). Calling Run on the engine starts the main loop, and it will continue running until Terminate is called. The Engine invokes the Update function every frame, which walks through all the Systems that were added to the engine in the WinMain/Startup function. Many of our objects in Plasma use delayed destruction (such as Cog) which means when we call Destroy on them, they are marked for deletion and added to a list to be deleted later. The Engine deletes these objects upon its Update every frame. The Engine is also responsible for pumping events that come from other threads in its Update.","title":"Engine"},{"location":"source_docs/engine/#system","text":"A System is effectively a component that gets added to the Engine. Examples include the PhysicsEngine, SoundSystem, etc. The SoundSystem is a particularly good example of a system because it has one time initialization and destruction logic, such as starting up the mixing thread. Moreover, the SoundSystem must be updated every frame to receive threaded notifications from the mix sound thread. Some Systems, such as the TimeSystem and the PhysicsEngine mostly manage updating space components such as the TimeSpace and PhysicsSpace. By updating them when we update each system, we ensure that all spaces have their LogicUpdate run, then all spaces have their physics updated. Note that order of the Systems is very important to reduce input lag.","title":"System"},{"location":"source_docs/engine/#cog","text":"The Cog is our base composition class to which components can be added. Space and GameSession both inherit from Cog. Cogs are typically created via the Factory (gFactory) which handles looking up types by name and then creating them (including components). Cogs use delayed destruction, which means they don't instantly get deleted upon calling Destroy, but rather get destroyed at the beginning of the next frame.","title":"Cog"},{"location":"source_docs/engine/#component","text":"Component is our base class for all components. Cog contains an ArrayMap of components (mapped by type id for quick typed lookup). We generally only allow there to be one component of a particular type per Cog. Components are mostly WYSIWYG in the editor, in that the actual components we code up in C++ are exactly the same ones running in the editor. The only major difference is that the editor is generally paused which stops physics and other time based systems from running.","title":"Component"},{"location":"source_docs/engine/#proxy-components","text":"Proxy components are a special class of components that pretend to look like another component by duplicating a component's meta. The proxy component is a property bag (map of strings to variants) and can store anything. Proxy components are useful because they don't run any code in the editor. All script components are proxied when they are added in the editor, but in the actual game they are substituted for the actual component.","title":"Proxy Components"},{"location":"source_docs/engine/#engine-components","text":"Requires documentation Transform Object Link Area","title":"Engine Components"},{"location":"source_docs/engine/#game-session","text":"The GameSession manages all created Spaces, and is effectively an instance of a running 'game'. Every time you press F5 in the editor or run a standalone exported project, a GameSession is created. If you press Ctrl+F5, multiple GameSessions will be ran at the same time, which is useful for networking tests. GameSession inherits from Cog and can therefore have components (including LightningScripts) attached to it. The GameSession gets events sent on it, such as GameStarted where you can create spaces and load levels. The editor has a GameSession that you can edit and add components to (which will be used in the game). You can also attach [RunInEditor] scripts to the editor GameSession. The GameSession will destroy all child Spaces when it is destroyed.","title":"Game Session"},{"location":"source_docs/engine/#space","text":"Spaces are one of the main features that sets Plasma apart from other engines. A Space contains a collection of Cogs (game objects). Each Space is independent of another Space. For example, you can have a physics object at (0,0,0) in one space, and a physics object at (0,0,0) in another space and the two objects will not interact or collide. We've found that Spaces are a great way to do UI, because you can run a separate space from your game that has UI objects in it. In many other game engines, the UI is either something entirely special, or you have to parent objects to your Camera which is cumbersome when you want to change cameras. Spaces can be given a name and are always created through the GameSession (which owns the Spaces). Named spaces can be found via the GameSession's FindSpaceByName. Because Space also inherits from Cog, you can add components and scripts to it. Although you can just create objects in a Space, the primary usage case is calling LoadLevel, which loads a collection of objects into the Space. The first time LoadLevel is called it is instantaneous (right after the call, all the objects are created). The subsequent times LoadLevel is called on the same space, it will be delayed by one frame. This is to avoid the issue of two objects existing at the same time with the same names and so on due to delayed destruction. Users will typically either listen to the LoadLevel event to perform level logic, or they will always create new spaces and call LoadLevel only on new spaces to ensure it is always instantaneous.","title":"Space"},{"location":"source_docs/engine/#level-settings","text":"The LevelSettings object is actually part of the Level resource (just another object) but is worth mentioning in the context of the Space. The LevelSettings should always be the first Cog in the Space's list, and is therefore guaranteed to be initialized before any other object. Moreover, many built in components use the LevelSettings object as a way to define global effects for the entire level. For example, I can add a ForceEffect to the LevelSettings and then all objects in the current level will get that force applied. This isn't built in or special behavior of the LevelSettings, but rather the PhysicsEngine looks for any force effects first on the Cogs, then on the LevelSettings, and then on the Space. This is a common pattern. LevelSettings is also very core to writing user logic, so we put that property on both Space and Cog. You can directly access LevelSettings by doing 'this.LevelSettings' instead of trying to find it by name.","title":"Level Settings"},{"location":"source_docs/engine/#factory","text":"The factory (PL::gFactory) is responsible for constructing a type from a serialzied name such as a Cog, Space, or any components like Transform. Currently, the factory mostly only handles Cog related types, however our Meta can also be used as a factory.","title":"Factory"},{"location":"source_docs/engine/#coginitializer","text":"The CogInitializer is a type passed to each cog that is being initialized. When we create Cogs, we could be creating multiple, ie loading Cogs from a level, loading an Archetype which has a hierarchy with children, etc. Multiple Cogs loaded at the same time is known as a serialization context (we commonly refer to it as 'all objects within the context'). The CogInitializer stores a bunch of data that is useful to each cog being created, for example the parent GameSession or Space it is being created within. We also send the AllObjectsInitialized event on the CogInitializer once the entire initialization phase is completed for all objects within the context.","title":"CogInitializer"},{"location":"source_docs/engine/#handles","text":"Cogs use a safe handle system that allows us to look up a cog by id and version: a pattern also called 'slot map'. The CogId class encompasses the id and version (two integers). CogId can implicitly convert to a Cog and will be null if the object no longer exists. We originally used to directly store Cog in many places, but we found that it was almost always a bad idea to assume the object still existed (dangling pointers). The user can delete objects, spaces can be unloaded, actions can delete objects, etc. We now almost always store references to objects in C++ as CogIds. We do work with Cog* on the stack because we know that with delayed destruction, the objects WILL NOT be deleted until the beginning of the next frame. Moreover, in script all references to Cogs are actually CogIds just to keep scripts safe. As a side note, whenever we pass around MetaHandles to Cogs, we're essentially just stuffing a CogId into the MetaHandleData.","title":"Handles"},{"location":"source_docs/engine/#archetype","text":"Archetypes are a data resource that stores a serialized Cog. Archetypes can be referenced within a Level and can also be created and loaded into a space. The advantage of Archetypes is that they allow instancing the same object in multiple places (sharing) and when the Archetype definition is changed in editor, all instances of that Archetype change. Archetypes are stored as text serialization, however we cache them using binary serialization so that subsequent creation of the same Archetype is very fast. This cache must be dumped any time a change to script is made (such as the order of members) because the binary serialization is linear: members are directly read in the order they are saved in. When an Archetype is uploaded in a Level in the editor, we run special code to update all live instances of that Archetype in the same level. When an Archetype is modified it gets a special flag that says it is locally modified within that level, meaning the object is basically copied into the level and is not instanced.","title":"Archetype"},{"location":"source_docs/engine/#hierarchy","text":"Cog Hierarchies allow for any Cogs to be parented to other Cogs. When a parent Cog is destroyed, all of its children are destroyed, and so on. It is up to the components to give meaning to parenting. For example, Transform knows that when it gets childed to another Transform, it will act as a relative object and concatenate matricies. Physics Colliders and RigidBodies also have special behavior for childed objects, such as multiple collision volumes for a single object. Hierarchy uses an intrusive list to maintain the list of children and the hierarchy link is on the Cog itself.","title":"Hierarchy"},{"location":"source_docs/engine/#initialization-order-of-cogs","text":"Related to hierarchies is the initialization order of Cogs. Cogs are initialized from first to last object in the object view, and from parent to child. This is why LevelSettings is the first object to be initialized. The order of initialization is important because scripts may rely on this order. Moreover, we found that if script components were initialized in the same phase as C++ components, then they were often able to access data before it was fully initialized and crash the engine. This lead to separating script initialize into its own phase. Though it sounds obnoxious, we actually have effectively 4 phases of initialization. The first is calling Initialize on every component in C++. In the Initialize phase, we can only assume that other components that are above ours have been Initialized. Specifically we can rely on our component's dependencies being initialized. Then we invoke OnAllObjectsCreated on every C++ component, a phase where we know all components have been Initialized. Note that we must run ALL Initializes first and then ALL OnAllObjectsCreated in order for them to actually be correct. After that, we run ScriptInitialize on all script components, therefore we know all C++ components are fully initialized. Lastly, we send the AllObjectsInitialized event on CogInitializer which anyone can listen to.","title":"Initialization Order of Cogs"},{"location":"source_docs/engine/#cogpath","text":"In the beginning of Plasma we needed a way to refer to other objects by id, and this id would have to persist through serialization (data saved to disk). This was useful if we wanted one object to point at another, eg a following script, and then we could save that link in the level. This problem is easily solvable if both objects you are linking are contained within the same file (two objects in a level, two objects in a single archetype, etc). However, once the objects were split apart into different files the problem becomes nearly impossible to solve properly. This case was especially common when a user would make a Zombie script and then use the Cog id's to point at the Player. As soon as the Zombie was uploaded to its own archetype, it would lose its own reference to the Player because the Zombie file by itself could no longer properly refer to the Player saved in the level. Many other popular editors exhibit this same behavior, but we deemed it undesirable. CogPaths were a partial solution to this problem. By using the names of objects and the hierarchy order, we gave the users a unique way to identify which object they were referring to. CogPaths also combine using the id so that they can best try to save, load, and continue pointing at the same object you originally picked without losing a reference. CogPaths use string lookups to find children Cogs, and special operators to find parents, children by index, children by archetype name, etc. The syntax of CogPaths also allows the user to find objects in different named spaces, which is very useful for UI.","title":"CogPath"},{"location":"source_docs/engine/#events","text":"Plasma uses an event system at its core which allows any class to send and receive events. An event is basically just a callback (function pointer) plus an event data structure with all the relevant information to the event that occurred. For example, you can listen for the KeyDown event on the global Keyboard object, which tells you what key was pressed, as well as other helpful features such as if Ctrl, Shift, or Alt were pressed too. The event system is critical to the performance of Plasma because it discourages writing poll-based logic. Having a bunch of objects that update every frame and check to see if a key gets pressed is generally much less efficient than having a single object getting updated (the Keyboard) that then calls into everyone when a key gets pressed. Moreover, events allow for some level of dynamic dispatch. You can send an event to anyone and they may or may not handle it (think of it like a message). I can do a ray-cast and send the Open event to the first object I hit, which may do nothing, or it may open a door or a chest. Events can also be forwarded or bubbled up / down a hierarchy, which is very useful for UI. The common class that everyone inherits from to automatically get event handling is the EventObject class.","title":"Events"},{"location":"source_docs/engine/#engine-events","text":"Requires documentation","title":"Engine Events"},{"location":"source_docs/engine/#systems","text":"There are many different Systems that we add to the engine. One of the more important ones it the TimeSystem. The TimeSystem has a intrusive linked list of all TimeSpace components (which are components that get added to each Space). When the TimeSystem updates, we compute the amount of time passed since the last frame, and then we walk through and update each TimeSpace. The TimeSpace update will dispatch critical events such as LogicUpdate, FrameUpdate, etc. Many different components (including user scripts) rely on LogicUpdate being sent on the space.","title":"Systems"},{"location":"source_docs/engine/#actions","text":"Requires documentation","title":"Actions"},{"location":"source_docs/engine/#job-system","text":"Requires documentation","title":"Job System"},{"location":"source_docs/engine/#project","text":"Requires documentation","title":"Project"},{"location":"source_docs/engine/#object-store","text":"Requires documentation","title":"Object Store"},{"location":"source_docs/engine/#resources","text":"Requires documentation","title":"Resources"},{"location":"source_docs/engine/#engine-resources","text":"Requires documentation Archetype Level TextResource SampleCurve Paths ResourceTable DocumentResource","title":"Engine Resources"},{"location":"source_docs/engine/#animations","text":"Requires documentation","title":"Animations"},{"location":"source_docs/engine/#animation","text":"Property Track Event Track","title":"Animation"},{"location":"source_docs/engine/#rich-animation","text":"See Editor Rich Animation","title":"Rich Animation"},{"location":"source_docs/engine/#animation-editor","text":"See Editor Section","title":"Animation Editor"},{"location":"source_docs/engine/#animation-graph","text":"Events: Animation Nodes: Pose Node Basic Node Direct Blend Node Cross Blend Node Selective Node Chain Node N-blend Node","title":"Animation Graph"},{"location":"source_docs/engine/#graph-visualization","text":"","title":"Graph Visualization"},{"location":"source_docs/engine/#simple-animation","text":"Requires documentation","title":"Simple Animation"},{"location":"source_docs/engine/#input-shell-system","text":"Requires documentation","title":"Input / Shell System"},{"location":"source_docs/engine/#tweakables","text":"Requires documentation","title":"Tweakables"},{"location":"source_docs/enums/","text":"One problem in C++ is that there is no way to get a stringified name for each value within an enum. This makes it difficult to display enumeration options in a property grid or bind them to script. To solve this problem, we use a DeclareEnum# macro that we generate (where # is how many values the enum has): DeclareEnum3(State, Idle, Patrol, Dead); In the above example, we have created an enum with the name State and 3 values: Idle , Patrol , and Dead . In C++ this is roughly equivalent to: namespace State { enum Enum { Idle = 0, Patrol = 1, Dead = 2 }; } Enum and is wrapped within a namespace. This is because we thought it was beneficial to always refer to an enum via its name, eg State::Idle instead of creating a global constant Idle . This also means that if you wish to use the type of the enum you must do State::Enum . We also have another type which is State::Type that is simply just an unsigned integer which is convenient for accepting flags in C++. If you wish to bind a data member on a class that is an enum, you can use BindMemberEnumProperty . There are other variations that may require getters/setters, such as BindGetSetEnumProperty , BindGetEnumProperty , and BindCustomGetSetEnumProperty . Internally, these macros are mostly the same as their normal bind data member or property counterparts, however each of them invokes the macro BindEnum at the beginning. BindEnum creates the reflection MetaType for that enum (once only). For more information see meta_binding .","title":"Enums"},{"location":"source_docs/getting_started/","text":"Getting Started Before diving into the Plasma Source, it is important to become familiar with Plasma itself as a game engine. Please visit getting_started . Requirements Windows 7 or higher Visual Studio 2019 Node.JS Building To build the engine you will need to run the following: git submodule update --init --recursive npm install node index.js cmake --builder=\"Visual Studio 16 2019\" Custom Components Requires documentation Dependencies Serialization Meta Binding Editor vs Game Creating a Space and Cog Requires documentation Custom Resources Requires documentation Data resources Complex / binary resources Meta Binding Requires documentation Serialization Requires documentation Tools Requires documentation Commands Requires documentation Resource Editors Requires documentation Gizmos Requires documentation Debug Draw Requires documentation Selection","title":"Getting Started"},{"location":"source_docs/getting_started/#getting-started","text":"Before diving into the Plasma Source, it is important to become familiar with Plasma itself as a game engine. Please visit getting_started .","title":"Getting Started"},{"location":"source_docs/getting_started/#requirements","text":"Windows 7 or higher Visual Studio 2019 Node.JS","title":"Requirements"},{"location":"source_docs/getting_started/#building","text":"To build the engine you will need to run the following: git submodule update --init --recursive npm install node index.js cmake --builder=\"Visual Studio 16 2019\"","title":"Building"},{"location":"source_docs/getting_started/#custom-components","text":"Requires documentation Dependencies Serialization Meta Binding Editor vs Game","title":"Custom Components"},{"location":"source_docs/getting_started/#creating-a-space-and-cog","text":"Requires documentation","title":"Creating a Space and Cog"},{"location":"source_docs/getting_started/#custom-resources","text":"Requires documentation Data resources Complex / binary resources","title":"Custom Resources"},{"location":"source_docs/getting_started/#meta-binding","text":"Requires documentation","title":"Meta Binding"},{"location":"source_docs/getting_started/#serialization","text":"Requires documentation","title":"Serialization"},{"location":"source_docs/getting_started/#tools","text":"Requires documentation","title":"Tools"},{"location":"source_docs/getting_started/#commands","text":"Requires documentation","title":"Commands"},{"location":"source_docs/getting_started/#resource-editors","text":"Requires documentation","title":"Resource Editors"},{"location":"source_docs/getting_started/#gizmos","text":"Requires documentation","title":"Gizmos"},{"location":"source_docs/getting_started/#debug-draw","text":"Requires documentation Selection","title":"Debug Draw"},{"location":"source_docs/meta_binding/","text":"Meta Binding Many other languages have a concept known as reflection which lets you look up information about classes and functions written in that same language. For example, you can look up how many members a class has, or what the type of a member named \"Lives\" is. C++ lacks this feature however we are able to build our own version of it in language which we call Meta . We use a collection of complex templates and macros to simplify this process.","title":"Meta Binding"},{"location":"source_docs/meta_binding/#meta-binding","text":"Many other languages have a concept known as reflection which lets you look up information about classes and functions written in that same language. For example, you can look up how many members a class has, or what the type of a member named \"Lives\" is. C++ lacks this feature however we are able to build our own version of it in language which we call Meta . We use a collection of complex templates and macros to simplify this process.","title":"Meta Binding"},{"location":"source_docs/plasma_code/","text":"Plasma Code General Principles Simplify Organized by what it does Embrace change Minimize dependencies Encapsulate what varies Readability is very important Core Engine Features Component base engine Game object management Serialization system Data driven object construction Reflection system for editing, scripting, and messaging Signal/Event system Math library Platform independence Resource system Error handling Physical Code Structure Engine is divided into separate libraries that are separate projects. Libraries are organized in order from the most foundational (containers, math, etc.), to the engine (graphics, physics, etc.) to custom game code (game logic, scripts, etc.). Each higher level layer only depends on more fundamental layers. Fundamental Libraries Base libraries have no dependencies used by all other libraries. Essentially extensions to C++. Common - Core C++ library including Containers, Assertion, and Memory management. Custom container solution optimized for games Custom assertion system ErrorIf(expr, \"msg\") Memory support custom Pools, Heaps, and Stacks Math - Floating point vector math library including matrices, vectors, and quaternions. General Libraries Used by all core systems and other tools. Serialization - Library for saving and loading data in JSON, text, and binary. Resource - Resource management and building. MetaLibrary - Reflection system used for property binding (PropertyGrid) and Event Connections. Geometric Libraries Used by all core systems and other tools (such as exporters). Intersection - Low level shape Intersection library used by physics primarily. Broad Phase - Spatial partitioning library used by graphics, physics, and AI for scene management and frustum culling. Platform Libraries Used for platform independence. All platform dependent code is located here. Platform - Contains platform dependent functions for file access and threading. WindowsPlatform - Right now the only working platform library. Others to be added in the future. Engine Libraries Base for communication between systems and defines core components shared between systems. Contains the core which updates all systems. Other Engine elements Time management Base Components Connection System Animation system System Libraries Core Systems - Run the major simulation systems of the game engine. Graphics - Hardware accelerated graphics rendering. Physics - Constraint based dynamics engine. Sound- Hardware accelerated sound engine. Extensions Additional code that is not required for the core engine to run. Widget - UI System used by editor. Editor - Editor code and logic. On certain platforms, an extension may not be needed (the editor on a game console) or for a particular game (car physics in a puzzle game). Rather than bloat the core, these are optional. Game Object System Game Objects (Cogs) To create an object either use the ObjectSpace component or the Factory. Cogs must be created from archetypes which are strings in the form of \"filename.data\" Cogs must be created in a space. Except for a space object itself Components The game object composition class (Cog) is a collection of components provided by the different systems. Every component class inherits from a base component class and has reference/pointer to its owning composition. When the game object composition is destroyed, it destroys all of its components. Creating A Cog Archetype* shipArchetype = ArchetypeManager::Find(\"Ship\"); Cog* cog = space->Create(shipArchetype) 'has' Operator Used to get components from compositions by type name. It is type safe and will return NULL or a valid component. Model* model = cog->has(Model); if(model) { model->SetColor(Vec4(0,1,0,1)); } Handles / CogId The engine uses handles to safely refer to Cogs. CogIds do not keep the object alive. CogIds must be checked for NULL. Once a CogId is checked it is safe to use that object for the rest of the frame. void SomeFunction(CogId target) { if(Cog* cog = target) { if(Transform* transform = cog->has(Transform)) { transform->SetTranslation(Vec3(0,10,0)); } } } also works on CogIds void SomeFunction(CogId target) { if(Transform* transform = target.has(Transform)) { transform->SetTranslation(Vec3(0,10,0)); } } Meta Data Engine has a C++ Meta Object Reflection System. A Meta Object provides a map of member functions, member properties, and member objects. Used for property viewing/editing, reflection, and many editor features. Used for scripting engine to bind C++ functions. Binding Binding is done by a static member function called InitializeMeta() on a class. The function is called when the class is registered or when InitializeMetaOfType is called. All the binding functions are Macros to make binding easy and compact. Meta Data Contents Properties A Getter and Setter function for field or data member. From the outside just a data member but setting may have side effects. Used for editing on the property grid. Example Position, HP, Color, etc. Methods Member functions on objects. Used for event connections, scripting, and simple commands. Example OpenDoor, PlayAnimation, Spawn, Unlock etc. Dependencies For components, what other components MUST be present for a component to function. Used to provide safe component addition and removal in the editor. Also, documents relationships between components. Events A list of events that can be dispatched on this object. Used by the editor to form connections. Component Interfaces Multiple Components may provide the same interface functionality and it does not make sense to have more that one. Examples: Collider, Joints, etc Editor enforces only one component that has a particular interface. For example only one collider component (like BoxColllider) can be present. void ComponentExample::InitializeMeta(MetaClass* meta) { // Must have transform BindDependency(Transform); // Bind shield strength member variable BindMemberProperty(mShieldStrength); // Bind the member function ActivateShield() BindMethod(ActivateShield); // This object can send the event ShieldDown BindEvent(ShieldDown, GameEvent); // This class implements the ShieldProvider interface BindInterface(ShieldProvider); } Bind Member vs Property BindMemberProperty Binds any member variable of a class. Used for quick binding (no get and set function). BindGetSetProperty Binds getter and setter function to act as a property. Allows programmable behavior (for example fetching a resource or updating position) Expects the getter and setter to be named Get'PropertyName' and Set'PropertyName' Other Special Properties Enumerations Enums automatically make a pull down on a the property grid. Must be declared with DeclareEnum macro. Range Properties Displays a slider on the property grid. Resource Properties Automatically uses the resource system to display a list of resources. Serialization Converting an object to and from a file, buffer, network, server, etc. Normally moving from a runtime object to a file or buffer and back. AKA saving and loading. Save and load levels, copy and paste, all of data file loading, including many resources. If data needs to be loaded from a file it goes through the serialization. Example Serialization Code class ComponentExample { public: float mHitPoints; Vec3 mDirection; }; void ComponentExample::Serialize(Serializer& stream) { // Expands to stream.SerializeFieldDefault(\"mHitPoints\", mHitPoints, 100.0f) // and we implicitly remove the 'm' in the data file SerializeNameDefault(mHitPoints, 100.0f); SerializeNameDefault(mDirection, Vec3::cXAxis); } Example Serialization Result ComponentExample = { float HitPoints = 20, vec3 Direction = [1,0,0] } Data File Types Text Human readable basic JSON like format. You can view an object Text by copying it to the clipboard. Binary Optimized binary format, compact and fast to load used for caching. Splitting Saving and Loading The save function handles both saving and loading to reduce the amount of code. Splitting saving and loading can be done based on the serialization direction. Versioning is also handled by the system for text files. Object Serialization Phases Construct the object Constructed - Object has been built from the factory but is not active. Serialization and data setting The object is serialized and then data attributes are adjusted. Initialize the object Object really comes into existence using all the serialized data. Object is destroyed Special Serialization To be serialized, Enums must be declared with DeclareEnum. Resources also have specialized serialization. Serialization of Cogs When a cog is serialized, it uses the data file to find the components it needs. All components are registered to the factory. The factory looks up components by string, constructs them, and then serializes them. When all components are created and serialized the composition is initialized. Initialization Component Initialization Do not do anything in a component constructor except initialize values. All the real work is done in Initialize. Get pointers to other components Add component to various system Watch out for order of initialization Dependant components are initialized first. Example Initialization Code void GraphicsComponent::Initialize(CogInitializer& init) { // Getting other components mTransform = GetOwner()->has(Transform); // Adding to the graphics space (or maybe system) GraphicsSpace* graphics = GetSpace()->has(GraphicsSpace); graphics->AddModel(this); }; Events Events are used to communicate between Systems, Game Objects, and Spaces. This is a listener pattern similar to signal/slots, flash events, or delegates from C#. An object connects to a target object, then listens for a particular event to be dispatched Calls the specified function on listening object Connect Connect(targetObject, Events::EventName, receivingObject, &ObjectType::FuncName); For example, the object that is involved in a collision event will have a function called when the event occurs and are constant strings. Usually this is the class doing the connection is a member function pointer othat will be called when the event fires. Connecting Example Code void GraphicsComponent::Initialize(CogInitializer& init) { // ConnectToThis expands to Connect(target, event, this, &classname::function) // Connect to our own Cog ConnectToThis(GetOwner(), Events::VisibilityChanged, OnVisibilityChanged); // We want to be updated every frame (regardless of being paused)... ConnectToThis(GetSpace(), Events::FrameUpdate, OnFrameUpdate); } Declaring Events Creates a constant string used to hook up events. Prevents allocation of multiple string objects. Makes it easy to hook up events. Event Objects When an event occurs an event object is sent. All event objects inherit from the base Event object. Many events use the same event object For example most mouse events (Move, Click, etc) send the event object MouseEvent This makes it easy to refactor and add new data without changing a lot of code. Connection Connections are cleaned up automatically when either object destroyed. Example Event Connections void ComponentExample::Initialize(CogInitializer& init) { ConnectToSelf(GetOwner(), Events::CollisionStarted, OnCollisionStarted); } void ComponentExample::OnCollisionStarted(CollsionEvent* event) { event->OtherObject->Destroy(); } Container Library A game oriented replacement for STL. Most of the same containers. Mostly the same interface. Several key game oriented features. C++ stl Equivalents std::vector -> Array std::unordered_map -> HashMap std::unordered_set -> HashSet No std::map (use HashMap) No std::list (use InList) Intrusively Linked List Intrusive containers are useful for efficiency Most heavily used container besides Array. The next and previous pointers are stored on the object itself. Ranges Containers use ranges in place of iterators for most moving in a container. Ranges are more secure and easier to work with than iterators. int Sum(Array<int>& values) { int total = 0; for(Array<int>::range r = values.all(); !r.empty(); r.popFront()) { total += r.front(); } return total; } int Sum(Array<int>& values) { int total = 0; forRange(int a, values.all()) { total += a; } return total; } String vs std::string std::string suffers from trying to be everything to everyone and is often large Greatly improves hashing, indexing, equality, and string passing Game engines mostly just pass strings around and index with them so immutable strings are ideal Working with Strings Strings are immutable so they can not be modified so how do you change them? Assign a new string! For large amount of string appending use StringBuilder StringRange Essentially replace const char* Internally two pointers to begin and end. Safer faster and easier to work with than null terminated string. Contents are always immutable. C style strings should effectively never be used. Memory and Allocations STL allocators are very complicated to use. Engine containers use a simplified version of allocators that is faster, more flexible, and easier to use. The allocator itself is not templated and can be virtual. Each container has a instance of an allocator. These work with the memory system to track all allocations. Benefits Containers optimized for POD types. Designed to do minimal code generation Shallow function calls to increase performance Easy to read and understand (stl tends to be obfuscated) Intrusive containers Supports aligned data types Supports object sharing and memory pooling to prevent fragmentation Controled memory useage / containers do not allocate memory before it is needed. Include Structure Engine uses pragma once instead of inclusion guards (clearer, faster, and support by all needed compilers) All include statements start from one of the roots (Systems or Utility) Examples: \"Graphics/Model.hpp\" \"Containers/Array.hpp\" It works on all platforms Engine used precompiled headers for all projects. Asserts Engine uses a custom assert system Does not use the usual assert syntax Primary function is ErrorIf(expression) Also has printf functionality ErrorIf(pointer == NULL, \"Could not find object named %s\", objectName.c_str()) Exceptions are not used","title":"Plasma Code"},{"location":"source_docs/plasma_code/#plasma-code","text":"","title":"Plasma Code"},{"location":"source_docs/plasma_code/#general-principles","text":"Simplify Organized by what it does Embrace change Minimize dependencies Encapsulate what varies Readability is very important","title":"General Principles"},{"location":"source_docs/plasma_code/#core-engine-features","text":"Component base engine Game object management Serialization system Data driven object construction Reflection system for editing, scripting, and messaging Signal/Event system Math library Platform independence Resource system Error handling","title":"Core Engine Features"},{"location":"source_docs/plasma_code/#physical-code-structure","text":"Engine is divided into separate libraries that are separate projects. Libraries are organized in order from the most foundational (containers, math, etc.), to the engine (graphics, physics, etc.) to custom game code (game logic, scripts, etc.). Each higher level layer only depends on more fundamental layers.","title":"Physical Code Structure"},{"location":"source_docs/plasma_code/#fundamental-libraries","text":"Base libraries have no dependencies used by all other libraries. Essentially extensions to C++. Common - Core C++ library including Containers, Assertion, and Memory management. Custom container solution optimized for games Custom assertion system ErrorIf(expr, \"msg\") Memory support custom Pools, Heaps, and Stacks Math - Floating point vector math library including matrices, vectors, and quaternions.","title":"Fundamental Libraries"},{"location":"source_docs/plasma_code/#general-libraries","text":"Used by all core systems and other tools. Serialization - Library for saving and loading data in JSON, text, and binary. Resource - Resource management and building. MetaLibrary - Reflection system used for property binding (PropertyGrid) and Event Connections.","title":"General Libraries"},{"location":"source_docs/plasma_code/#geometric-libraries","text":"Used by all core systems and other tools (such as exporters). Intersection - Low level shape Intersection library used by physics primarily. Broad Phase - Spatial partitioning library used by graphics, physics, and AI for scene management and frustum culling.","title":"Geometric Libraries"},{"location":"source_docs/plasma_code/#platform-libraries","text":"Used for platform independence. All platform dependent code is located here. Platform - Contains platform dependent functions for file access and threading. WindowsPlatform - Right now the only working platform library. Others to be added in the future.","title":"Platform Libraries"},{"location":"source_docs/plasma_code/#engine-libraries","text":"Base for communication between systems and defines core components shared between systems. Contains the core which updates all systems. Other Engine elements Time management Base Components Connection System Animation system","title":"Engine Libraries"},{"location":"source_docs/plasma_code/#system-libraries","text":"Core Systems - Run the major simulation systems of the game engine. Graphics - Hardware accelerated graphics rendering. Physics - Constraint based dynamics engine. Sound- Hardware accelerated sound engine.","title":"System Libraries"},{"location":"source_docs/plasma_code/#extensions","text":"Additional code that is not required for the core engine to run. Widget - UI System used by editor. Editor - Editor code and logic. On certain platforms, an extension may not be needed (the editor on a game console) or for a particular game (car physics in a puzzle game). Rather than bloat the core, these are optional.","title":"Extensions"},{"location":"source_docs/plasma_code/#game-object-system","text":"","title":"Game Object System"},{"location":"source_docs/plasma_code/#game-objects-cogs","text":"To create an object either use the ObjectSpace component or the Factory. Cogs must be created from archetypes which are strings in the form of \"filename.data\" Cogs must be created in a space. Except for a space object itself","title":"Game Objects (Cogs)"},{"location":"source_docs/plasma_code/#components","text":"The game object composition class (Cog) is a collection of components provided by the different systems. Every component class inherits from a base component class and has reference/pointer to its owning composition. When the game object composition is destroyed, it destroys all of its components.","title":"Components"},{"location":"source_docs/plasma_code/#creating-a-cog","text":"Archetype* shipArchetype = ArchetypeManager::Find(\"Ship\"); Cog* cog = space->Create(shipArchetype)","title":"Creating A Cog"},{"location":"source_docs/plasma_code/#has-operator","text":"Used to get components from compositions by type name. It is type safe and will return NULL or a valid component. Model* model = cog->has(Model); if(model) { model->SetColor(Vec4(0,1,0,1)); }","title":"'has' Operator"},{"location":"source_docs/plasma_code/#handles-cogid","text":"The engine uses handles to safely refer to Cogs. CogIds do not keep the object alive. CogIds must be checked for NULL. Once a CogId is checked it is safe to use that object for the rest of the frame. void SomeFunction(CogId target) { if(Cog* cog = target) { if(Transform* transform = cog->has(Transform)) { transform->SetTranslation(Vec3(0,10,0)); } } } also works on CogIds void SomeFunction(CogId target) { if(Transform* transform = target.has(Transform)) { transform->SetTranslation(Vec3(0,10,0)); } }","title":"Handles / CogId"},{"location":"source_docs/plasma_code/#meta-data","text":"Engine has a C++ Meta Object Reflection System. A Meta Object provides a map of member functions, member properties, and member objects. Used for property viewing/editing, reflection, and many editor features. Used for scripting engine to bind C++ functions.","title":"Meta Data"},{"location":"source_docs/plasma_code/#binding","text":"Binding is done by a static member function called InitializeMeta() on a class. The function is called when the class is registered or when InitializeMetaOfType is called. All the binding functions are Macros to make binding easy and compact.","title":"Binding"},{"location":"source_docs/plasma_code/#meta-data-contents","text":"Properties A Getter and Setter function for field or data member. From the outside just a data member but setting may have side effects. Used for editing on the property grid. Example Position, HP, Color, etc. Methods Member functions on objects. Used for event connections, scripting, and simple commands. Example OpenDoor, PlayAnimation, Spawn, Unlock etc. Dependencies For components, what other components MUST be present for a component to function. Used to provide safe component addition and removal in the editor. Also, documents relationships between components. Events A list of events that can be dispatched on this object. Used by the editor to form connections.","title":"Meta Data Contents"},{"location":"source_docs/plasma_code/#component-interfaces","text":"Multiple Components may provide the same interface functionality and it does not make sense to have more that one. Examples: Collider, Joints, etc Editor enforces only one component that has a particular interface. For example only one collider component (like BoxColllider) can be present. void ComponentExample::InitializeMeta(MetaClass* meta) { // Must have transform BindDependency(Transform); // Bind shield strength member variable BindMemberProperty(mShieldStrength); // Bind the member function ActivateShield() BindMethod(ActivateShield); // This object can send the event ShieldDown BindEvent(ShieldDown, GameEvent); // This class implements the ShieldProvider interface BindInterface(ShieldProvider); }","title":"Component Interfaces"},{"location":"source_docs/plasma_code/#bind-member-vs-property","text":"BindMemberProperty Binds any member variable of a class. Used for quick binding (no get and set function). BindGetSetProperty Binds getter and setter function to act as a property. Allows programmable behavior (for example fetching a resource or updating position) Expects the getter and setter to be named Get'PropertyName' and Set'PropertyName'","title":"Bind Member vs Property"},{"location":"source_docs/plasma_code/#other-special-properties","text":"Enumerations Enums automatically make a pull down on a the property grid. Must be declared with DeclareEnum macro. Range Properties Displays a slider on the property grid. Resource Properties Automatically uses the resource system to display a list of resources.","title":"Other Special Properties"},{"location":"source_docs/plasma_code/#serialization","text":"Converting an object to and from a file, buffer, network, server, etc. Normally moving from a runtime object to a file or buffer and back. AKA saving and loading. Save and load levels, copy and paste, all of data file loading, including many resources. If data needs to be loaded from a file it goes through the serialization.","title":"Serialization"},{"location":"source_docs/plasma_code/#example-serialization-code","text":"class ComponentExample { public: float mHitPoints; Vec3 mDirection; }; void ComponentExample::Serialize(Serializer& stream) { // Expands to stream.SerializeFieldDefault(\"mHitPoints\", mHitPoints, 100.0f) // and we implicitly remove the 'm' in the data file SerializeNameDefault(mHitPoints, 100.0f); SerializeNameDefault(mDirection, Vec3::cXAxis); }","title":"Example Serialization Code"},{"location":"source_docs/plasma_code/#example-serialization-result","text":"ComponentExample = { float HitPoints = 20, vec3 Direction = [1,0,0] }","title":"Example Serialization Result"},{"location":"source_docs/plasma_code/#data-file-types","text":"Text Human readable basic JSON like format. You can view an object Text by copying it to the clipboard. Binary Optimized binary format, compact and fast to load used for caching.","title":"Data File Types"},{"location":"source_docs/plasma_code/#splitting-saving-and-loading","text":"The save function handles both saving and loading to reduce the amount of code. Splitting saving and loading can be done based on the serialization direction. Versioning is also handled by the system for text files.","title":"Splitting Saving and Loading"},{"location":"source_docs/plasma_code/#object-serialization-phases","text":"Construct the object Constructed - Object has been built from the factory but is not active. Serialization and data setting The object is serialized and then data attributes are adjusted. Initialize the object Object really comes into existence using all the serialized data. Object is destroyed","title":"Object Serialization Phases"},{"location":"source_docs/plasma_code/#special-serialization","text":"To be serialized, Enums must be declared with DeclareEnum. Resources also have specialized serialization.","title":"Special Serialization"},{"location":"source_docs/plasma_code/#serialization-of-cogs","text":"When a cog is serialized, it uses the data file to find the components it needs. All components are registered to the factory. The factory looks up components by string, constructs them, and then serializes them. When all components are created and serialized the composition is initialized.","title":"Serialization of Cogs"},{"location":"source_docs/plasma_code/#initialization","text":"","title":"Initialization"},{"location":"source_docs/plasma_code/#component-initialization","text":"Do not do anything in a component constructor except initialize values. All the real work is done in Initialize. Get pointers to other components Add component to various system Watch out for order of initialization Dependant components are initialized first.","title":"Component Initialization"},{"location":"source_docs/plasma_code/#example-initialization-code","text":"void GraphicsComponent::Initialize(CogInitializer& init) { // Getting other components mTransform = GetOwner()->has(Transform); // Adding to the graphics space (or maybe system) GraphicsSpace* graphics = GetSpace()->has(GraphicsSpace); graphics->AddModel(this); };","title":"Example Initialization Code"},{"location":"source_docs/plasma_code/#events","text":"Events are used to communicate between Systems, Game Objects, and Spaces. This is a listener pattern similar to signal/slots, flash events, or delegates from C#. An object connects to a target object, then listens for a particular event to be dispatched Calls the specified function on listening object","title":"Events"},{"location":"source_docs/plasma_code/#connect","text":"Connect(targetObject, Events::EventName, receivingObject, &ObjectType::FuncName); For example, the object that is involved in a collision event will have a function called when the event occurs and are constant strings. Usually this is the class doing the connection is a member function pointer othat will be called when the event fires.","title":"Connect"},{"location":"source_docs/plasma_code/#connecting-example-code","text":"void GraphicsComponent::Initialize(CogInitializer& init) { // ConnectToThis expands to Connect(target, event, this, &classname::function) // Connect to our own Cog ConnectToThis(GetOwner(), Events::VisibilityChanged, OnVisibilityChanged); // We want to be updated every frame (regardless of being paused)... ConnectToThis(GetSpace(), Events::FrameUpdate, OnFrameUpdate); }","title":"Connecting Example Code"},{"location":"source_docs/plasma_code/#declaring-events","text":"Creates a constant string used to hook up events. Prevents allocation of multiple string objects. Makes it easy to hook up events.","title":"Declaring Events"},{"location":"source_docs/plasma_code/#event-objects","text":"When an event occurs an event object is sent. All event objects inherit from the base Event object. Many events use the same event object For example most mouse events (Move, Click, etc) send the event object MouseEvent This makes it easy to refactor and add new data without changing a lot of code.","title":"Event Objects"},{"location":"source_docs/plasma_code/#connection","text":"Connections are cleaned up automatically when either object destroyed.","title":"Connection"},{"location":"source_docs/plasma_code/#example-event-connections","text":"void ComponentExample::Initialize(CogInitializer& init) { ConnectToSelf(GetOwner(), Events::CollisionStarted, OnCollisionStarted); } void ComponentExample::OnCollisionStarted(CollsionEvent* event) { event->OtherObject->Destroy(); }","title":"Example Event Connections"},{"location":"source_docs/plasma_code/#container-library","text":"A game oriented replacement for STL. Most of the same containers. Mostly the same interface. Several key game oriented features.","title":"Container Library"},{"location":"source_docs/plasma_code/#c-stl-equivalents","text":"std::vector -> Array std::unordered_map -> HashMap std::unordered_set -> HashSet No std::map (use HashMap) No std::list (use InList)","title":"C++ stl Equivalents"},{"location":"source_docs/plasma_code/#intrusively-linked-list","text":"Intrusive containers are useful for efficiency Most heavily used container besides Array. The next and previous pointers are stored on the object itself.","title":"Intrusively Linked List"},{"location":"source_docs/plasma_code/#ranges","text":"Containers use ranges in place of iterators for most moving in a container. Ranges are more secure and easier to work with than iterators. int Sum(Array<int>& values) { int total = 0; for(Array<int>::range r = values.all(); !r.empty(); r.popFront()) { total += r.front(); } return total; } int Sum(Array<int>& values) { int total = 0; forRange(int a, values.all()) { total += a; } return total; }","title":"Ranges"},{"location":"source_docs/plasma_code/#string-vs-stdstring","text":"std::string suffers from trying to be everything to everyone and is often large Greatly improves hashing, indexing, equality, and string passing Game engines mostly just pass strings around and index with them so immutable strings are ideal","title":"String vs std::string"},{"location":"source_docs/plasma_code/#working-with-strings","text":"Strings are immutable so they can not be modified so how do you change them? Assign a new string! For large amount of string appending use StringBuilder","title":"Working with Strings"},{"location":"source_docs/plasma_code/#stringrange","text":"Essentially replace const char* Internally two pointers to begin and end. Safer faster and easier to work with than null terminated string. Contents are always immutable. C style strings should effectively never be used.","title":"StringRange"},{"location":"source_docs/plasma_code/#memory-and-allocations","text":"STL allocators are very complicated to use. Engine containers use a simplified version of allocators that is faster, more flexible, and easier to use. The allocator itself is not templated and can be virtual. Each container has a instance of an allocator. These work with the memory system to track all allocations.","title":"Memory and Allocations"},{"location":"source_docs/plasma_code/#benefits","text":"Containers optimized for POD types. Designed to do minimal code generation Shallow function calls to increase performance Easy to read and understand (stl tends to be obfuscated) Intrusive containers Supports aligned data types Supports object sharing and memory pooling to prevent fragmentation Controled memory useage / containers do not allocate memory before it is needed.","title":"Benefits"},{"location":"source_docs/plasma_code/#include-structure","text":"Engine uses pragma once instead of inclusion guards (clearer, faster, and support by all needed compilers) All include statements start from one of the roots (Systems or Utility) Examples: \"Graphics/Model.hpp\" \"Containers/Array.hpp\" It works on all platforms Engine used precompiled headers for all projects.","title":"Include Structure"},{"location":"source_docs/plasma_code/#asserts","text":"Engine uses a custom assert system Does not use the usual assert syntax Primary function is ErrorIf(expression) Also has printf functionality ErrorIf(pointer == NULL, \"Could not find object named %s\", objectName.c_str()) Exceptions are not used","title":"Asserts"},{"location":"source_docs/plasma_overview/","text":"Plasma Overview The Engine is divided into Systems that are updated every frame. Game objects, called Cogs, are a composition of Components provided by the systems. Game objects are created from data files by the Factory and placed in Spaces (aka worlds). Objects communicate through Events and through direct access to other objects. Component Based Engine The game object composition class (Cog) is a collection of components provided by the different systems. The components provide units of functionality for the composition. A component can be data, behavior, and/or a link to a system. When the game object composition is destroyed, it destroys all of its components. Dynamic Composition All compositions are composed dynamically No \"Main Camera\", \"Floor\", or \"Ball\" class is defined in C++. Compositions come from data files The files \"MainCamera.data\", \"Floor.data\", and \"Ball.data\" define which components the composition uses and the data those components need. So objects can be built at runtime by designers! Example Compositions Sample Cog Data File Cog = { Transform = { float[] Translation = [ 8.5, 10, 1 ] , float[] Scale = [ 1, 1, 1 ] , float[] Rotation = [ 0, 0, 0.0, 1 ] , }, Model = { string MaterialName = \"Caution\" , string MeshName = \"Cube\" , }, } Core Engine Components Transform - Position, Rotation, and Scale. Timeline - Animation of properties and events. Hierarchy - Component used to place objects in directed acyclic graphs (trees). Common System Components Defined by different systems (PhysicsSystem, GraphicsSystem, etc) Collider - Defines the shape of the object and provides collision with other objects. Rigid Body - Allows the object to move around and rotate in physics. Model - Draws a 3d mesh at the transforms location. Component Dependencies Components can depend on other components (or interfaces) in the composition. Components register their dependencies and look up their dependencies when they are created. The editor enforces the dependencies to prevent the creation of bad compositions. Example Dependencies Many components (model, collider, camera, etc.) depend on the Transform component for position, rotation, and scale. The Camera Controller depends on the Camera component. The Light Cookie component (used to apply a light stencil) depends on the Light component. Spaces The engine can support multiple \"worlds\" or Spaces. Spaces are game objects compositions with components corresponding to the different systems (PhysicsSpace, GraphicsSpace, SoundSpace). Used by the editor and for level chunks. Spaces in Practice Usually two spaces \"UI\" and \"EditorWorld\". Sometimes a \"PreviewSpace\" is used to preview game objects. When the game is played from the editor it creates a separate space so the \"EditorWorld\" is not affected. There is no global world object. All game objects have a reference/pointer back to their current space. Data Systems and Archetypes Game objects are created from data files by the Factory, which uses the serialization system to read the data. Game object data files are Archetypes (aka prefabs or templates). Archetypes are normally created and modified in the editor. This is how designers create game objects. Archetypes in the Editor An individual game object is created in the editor by selecting an archetype and placing it. If that archetype is modified, any placed game object with that archetype will be modified when the changed archetype is uploaded. If desired, the archetype link to a specific game object can be broken, so that changes to the archetype will not affect that object. Events Events are used to communicate between Systems, Game Objects, and Spaces. This is a listener pattern (similar to signal/slots, flash events, or delegates from C#). An object connects to a target object, then listens for a particular event to be dispatched (which will call the specified function on listening object). Elements of Events EventId - The event Id is a string that identifies the event. Event Object - The event class is the data sent in the event. The same event class may be used for multiple events. The Dispatcher - Object the event occurred on. The Listener - Object that listens for the event. Connection - Contains references to both objects and the bound function to call on the listener. An object can connect to itself. Event Bubbling When an event occurs it can Bubble to classes above it in the hierarchy. This is very important for UI objects. Example: A hand bone on a character gets hit. The event is bubbled up to the root bone and then to the character game object, where an AI component is listening (and responds by deciding to run away). Event Examples When a button is pressed it dispatches a \"Pressed\" event of type MouseEvent. ObjectB (the menu) receives the event and opens a window. When ObjectA collides it sends out a \"ContactStarted\" event of type CollisionEvent. ObjectB receives the event and plays a sound at the collision's location. Resources Shared objects that are used by game objects. Most have to be processed by the resource system, and some are just simple data files. Examples: Materials, Meshes, Textures, Sounds, and Archetypes. A Resource is requested from the ResourceSystem through its name (in the editor) or through its ResourceId (in code). Resource Libraries A collection of resources organized however users of the editor wish. Libraries are stored in a shared folder on a computer that the engine is installed on and can be shared by different projects. Users of the editor decide which libraries they need for their project, while the editor handles loading the resources in each library automatically. Resource Library Types SourceLibrary - the raw unprocessed version of the resources (.psd, .maya, .fbx, .wav, etc) ProcessedLibrary - the processed version of the resources ready to be loaded. These are different for different platforms. Resource Packages Each Space automatically generates a ResourcePackage that includes all the Resources it uses, regardless of which libraries those resources are in. A given level could consist of multiple Spaces, each with its own Resource Package (useful for streaming). Resources are intelligently cached by the engine, so you do not have to worry about duplicating resources in different packages. Custom Resource Packages Custom Resource Packages can be created in the editor, where exact resources from any library can be specified. This is normally done when game objects or resources are dynamically created in C++ code (which means the automatically generated resource packages don't know about them).","title":"Plasma Overview"},{"location":"source_docs/plasma_overview/#plasma-overview","text":"The Engine is divided into Systems that are updated every frame. Game objects, called Cogs, are a composition of Components provided by the systems. Game objects are created from data files by the Factory and placed in Spaces (aka worlds). Objects communicate through Events and through direct access to other objects.","title":"Plasma Overview"},{"location":"source_docs/plasma_overview/#component-based-engine","text":"The game object composition class (Cog) is a collection of components provided by the different systems. The components provide units of functionality for the composition. A component can be data, behavior, and/or a link to a system. When the game object composition is destroyed, it destroys all of its components.","title":"Component Based Engine"},{"location":"source_docs/plasma_overview/#dynamic-composition","text":"All compositions are composed dynamically No \"Main Camera\", \"Floor\", or \"Ball\" class is defined in C++. Compositions come from data files The files \"MainCamera.data\", \"Floor.data\", and \"Ball.data\" define which components the composition uses and the data those components need. So objects can be built at runtime by designers!","title":"Dynamic Composition"},{"location":"source_docs/plasma_overview/#example-compositions","text":"","title":"Example Compositions"},{"location":"source_docs/plasma_overview/#sample-cog-data-file","text":"Cog = { Transform = { float[] Translation = [ 8.5, 10, 1 ] , float[] Scale = [ 1, 1, 1 ] , float[] Rotation = [ 0, 0, 0.0, 1 ] , }, Model = { string MaterialName = \"Caution\" , string MeshName = \"Cube\" , }, }","title":"Sample Cog Data File"},{"location":"source_docs/plasma_overview/#core-engine-components","text":"Transform - Position, Rotation, and Scale. Timeline - Animation of properties and events. Hierarchy - Component used to place objects in directed acyclic graphs (trees).","title":"Core Engine Components"},{"location":"source_docs/plasma_overview/#common-system-components","text":"Defined by different systems (PhysicsSystem, GraphicsSystem, etc) Collider - Defines the shape of the object and provides collision with other objects. Rigid Body - Allows the object to move around and rotate in physics. Model - Draws a 3d mesh at the transforms location.","title":"Common System Components"},{"location":"source_docs/plasma_overview/#component-dependencies","text":"Components can depend on other components (or interfaces) in the composition. Components register their dependencies and look up their dependencies when they are created. The editor enforces the dependencies to prevent the creation of bad compositions.","title":"Component Dependencies"},{"location":"source_docs/plasma_overview/#example-dependencies","text":"Many components (model, collider, camera, etc.) depend on the Transform component for position, rotation, and scale. The Camera Controller depends on the Camera component. The Light Cookie component (used to apply a light stencil) depends on the Light component.","title":"Example Dependencies"},{"location":"source_docs/plasma_overview/#spaces","text":"The engine can support multiple \"worlds\" or Spaces. Spaces are game objects compositions with components corresponding to the different systems (PhysicsSpace, GraphicsSpace, SoundSpace). Used by the editor and for level chunks.","title":"Spaces"},{"location":"source_docs/plasma_overview/#spaces-in-practice","text":"Usually two spaces \"UI\" and \"EditorWorld\". Sometimes a \"PreviewSpace\" is used to preview game objects. When the game is played from the editor it creates a separate space so the \"EditorWorld\" is not affected. There is no global world object. All game objects have a reference/pointer back to their current space.","title":"Spaces in Practice"},{"location":"source_docs/plasma_overview/#data-systems-and-archetypes","text":"Game objects are created from data files by the Factory, which uses the serialization system to read the data. Game object data files are Archetypes (aka prefabs or templates). Archetypes are normally created and modified in the editor. This is how designers create game objects.","title":"Data Systems and Archetypes"},{"location":"source_docs/plasma_overview/#archetypes-in-the-editor","text":"An individual game object is created in the editor by selecting an archetype and placing it. If that archetype is modified, any placed game object with that archetype will be modified when the changed archetype is uploaded. If desired, the archetype link to a specific game object can be broken, so that changes to the archetype will not affect that object.","title":"Archetypes in the Editor"},{"location":"source_docs/plasma_overview/#events","text":"Events are used to communicate between Systems, Game Objects, and Spaces. This is a listener pattern (similar to signal/slots, flash events, or delegates from C#). An object connects to a target object, then listens for a particular event to be dispatched (which will call the specified function on listening object).","title":"Events"},{"location":"source_docs/plasma_overview/#elements-of-events","text":"EventId - The event Id is a string that identifies the event. Event Object - The event class is the data sent in the event. The same event class may be used for multiple events. The Dispatcher - Object the event occurred on. The Listener - Object that listens for the event. Connection - Contains references to both objects and the bound function to call on the listener. An object can connect to itself.","title":"Elements of Events"},{"location":"source_docs/plasma_overview/#event-bubbling","text":"When an event occurs it can Bubble to classes above it in the hierarchy. This is very important for UI objects. Example: A hand bone on a character gets hit. The event is bubbled up to the root bone and then to the character game object, where an AI component is listening (and responds by deciding to run away).","title":"Event Bubbling"},{"location":"source_docs/plasma_overview/#event-examples","text":"When a button is pressed it dispatches a \"Pressed\" event of type MouseEvent. ObjectB (the menu) receives the event and opens a window. When ObjectA collides it sends out a \"ContactStarted\" event of type CollisionEvent. ObjectB receives the event and plays a sound at the collision's location.","title":"Event Examples"},{"location":"source_docs/plasma_overview/#resources","text":"Shared objects that are used by game objects. Most have to be processed by the resource system, and some are just simple data files. Examples: Materials, Meshes, Textures, Sounds, and Archetypes. A Resource is requested from the ResourceSystem through its name (in the editor) or through its ResourceId (in code).","title":"Resources"},{"location":"source_docs/plasma_overview/#resource-libraries","text":"A collection of resources organized however users of the editor wish. Libraries are stored in a shared folder on a computer that the engine is installed on and can be shared by different projects. Users of the editor decide which libraries they need for their project, while the editor handles loading the resources in each library automatically.","title":"Resource Libraries"},{"location":"source_docs/plasma_overview/#resource-library-types","text":"SourceLibrary - the raw unprocessed version of the resources (.psd, .maya, .fbx, .wav, etc) ProcessedLibrary - the processed version of the resources ready to be loaded. These are different for different platforms.","title":"Resource Library Types"},{"location":"source_docs/plasma_overview/#resource-packages","text":"Each Space automatically generates a ResourcePackage that includes all the Resources it uses, regardless of which libraries those resources are in. A given level could consist of multiple Spaces, each with its own Resource Package (useful for streaming). Resources are intelligently cached by the engine, so you do not have to worry about duplicating resources in different packages.","title":"Resource Packages"},{"location":"source_docs/plasma_overview/#custom-resource-packages","text":"Custom Resource Packages can be created in the editor, where exact resources from any library can be specified. This is normally done when game objects or resources are dynamically created in C++ code (which means the automatically generated resource packages don't know about them).","title":"Custom Resource Packages"},{"location":"source_docs/platform/","text":"Platform This section is important for anyone doing cross platform work The Platform library provides file IO, threading, timers, sockets, and other common operating system primitives. Platform by itself is mostly a collection of headers (interface only) with a PIMPL style pattern to hide the implementation of each primitive. In specific it provides: File Read/write stream, seeking, etc File Path Concatenation of paths and helpers with OS specific / or \\ File System Iteration over directories/files, file existence, delete / move files, etc Floating Point Control Turning on or off processor specific float extensions Process Execution of an external process with stdin/out hooks (not via the sell) Socket Thread Thread Synchronization Mutex, Critical Section, Semaphore, Events, etc Timer Highest resolution timer supported by the OS External Library Loading (.dll, .so) Crash Handler Directory Watcher Project Layout Some code exists within Platform where we determined it was similar enough on most operating systems (e.g. Berkeley sockets). We have separate projects for each operating system, e.g. WindowsPlatform, PosixPlatform, etc. These platforms implement each primitive interface to the best of their ability. The reason we chose to use separate implementation projects was to avoid the explosion of #if/#endif. Any code that is considered 'helper' code that would be exactly the same among all platforms can be directly implemented in Platform. The PosixPlatform is ideally usable among Unix like platforms with minor #ifdef modifications (Linux, OsX, iOS, Android). The EmptyPlatform is ideally a stub that can be copied onto brand new platforms (with all functions stubbed out to do nothing) just to get code up and running quickly. Private Implementation One particular point of interest is the PlasmaDeclarePrivateData macros inside of PrivateImplementation.hpp. Typically the PIMPL pattern is implemented via a pointer on the class to a forward declared private data structure. This pattern typically requires allocation of some sort. To avoid allocation, we instead created a byte buffer on each primitive that is sized to the largest size of all platforms we implement. PlasmaDeclarePrivateData will create this buffer, and other macros allow us easy access to the buffer. Static asserts are used to ensure that the buffer will never be too small for the contents placed within it. Though this pattern does avoid allocation, we may in the future opt for a more classic PIMPL pattern to allow objects to vary more widely in size and just for ease of use. Shell Library Platform differs from the Shell library (e.g. WindowsShell or any other platform Shell) in two ways. Platform does not rely on virtual functions for its abstraction, and it separates the interface from implementation via header and cpp files. The Shell library uses an abstract base class with virtual functions that get overridden for the current platform. Moreover, the Shell also may not exist such as when running from a console or server. In the future, the Shell may change to be more like the Platform library. How To Extend Platform Any time a new primitive needs to be implemented that touches OS specific code, it is often best done in Platform. The simplest approach to add a new primitive is to copy the Thread or File header, clear them out, and start from there. Go into EmptyPlatform and copy either the Thread or File cpp, and stub it out to match the hpp interface. From there, copy it into WindowsPlatform, PosixPlatform, and any other platforms. Be sure to adjust 'PlasmaDeclarePrivateData' on the header to account for enough space for all the private data. Global functions are useful for quick helpers (such as getting the OS user-name, where no primitive needs to be allocated and stored). Another consideration is what errors we return from the OS when using primitives. In the beginning we either opted to ignore errors (asserting when they would happen) or to return bools. This proved to be insufficient because often we needed to give feedback to the user. For example, we attempt to open a file in their game's Content directory, but it fails due to security permissions. The assert would catch this on developer computers only because asserts are stripped in Release mode. These situations typically happen in the wild, and not on developer machines. A bool would at least give us information as to why it failed, but that's not enough for the user to correct a situation. The best approach was to use the 'Status' object. is basically a standardized way for us to return pseudo exceptions without using exception handling. We generally take the Status object by reference as the first parameter, and we set it to either success or failure with an error message provided by the OS. Callers can easily check status for failure, as well as print messages to the console or do popups in the GUI. In the future, all primitives will be moved to status (status may also get an option to automatically assert on failure, just to give more control to the caller).","title":"Adding Platforms"},{"location":"source_docs/platform/#platform","text":"This section is important for anyone doing cross platform work The Platform library provides file IO, threading, timers, sockets, and other common operating system primitives. Platform by itself is mostly a collection of headers (interface only) with a PIMPL style pattern to hide the implementation of each primitive. In specific it provides: File Read/write stream, seeking, etc File Path Concatenation of paths and helpers with OS specific / or \\ File System Iteration over directories/files, file existence, delete / move files, etc Floating Point Control Turning on or off processor specific float extensions Process Execution of an external process with stdin/out hooks (not via the sell) Socket Thread Thread Synchronization Mutex, Critical Section, Semaphore, Events, etc Timer Highest resolution timer supported by the OS External Library Loading (.dll, .so) Crash Handler Directory Watcher","title":"Platform"},{"location":"source_docs/platform/#project-layout","text":"Some code exists within Platform where we determined it was similar enough on most operating systems (e.g. Berkeley sockets). We have separate projects for each operating system, e.g. WindowsPlatform, PosixPlatform, etc. These platforms implement each primitive interface to the best of their ability. The reason we chose to use separate implementation projects was to avoid the explosion of #if/#endif. Any code that is considered 'helper' code that would be exactly the same among all platforms can be directly implemented in Platform. The PosixPlatform is ideally usable among Unix like platforms with minor #ifdef modifications (Linux, OsX, iOS, Android). The EmptyPlatform is ideally a stub that can be copied onto brand new platforms (with all functions stubbed out to do nothing) just to get code up and running quickly.","title":"Project Layout"},{"location":"source_docs/platform/#private-implementation","text":"One particular point of interest is the PlasmaDeclarePrivateData macros inside of PrivateImplementation.hpp. Typically the PIMPL pattern is implemented via a pointer on the class to a forward declared private data structure. This pattern typically requires allocation of some sort. To avoid allocation, we instead created a byte buffer on each primitive that is sized to the largest size of all platforms we implement. PlasmaDeclarePrivateData will create this buffer, and other macros allow us easy access to the buffer. Static asserts are used to ensure that the buffer will never be too small for the contents placed within it. Though this pattern does avoid allocation, we may in the future opt for a more classic PIMPL pattern to allow objects to vary more widely in size and just for ease of use.","title":"Private Implementation"},{"location":"source_docs/platform/#shell-library","text":"Platform differs from the Shell library (e.g. WindowsShell or any other platform Shell) in two ways. Platform does not rely on virtual functions for its abstraction, and it separates the interface from implementation via header and cpp files. The Shell library uses an abstract base class with virtual functions that get overridden for the current platform. Moreover, the Shell also may not exist such as when running from a console or server. In the future, the Shell may change to be more like the Platform library.","title":"Shell Library"},{"location":"source_docs/platform/#how-to-extend-platform","text":"Any time a new primitive needs to be implemented that touches OS specific code, it is often best done in Platform. The simplest approach to add a new primitive is to copy the Thread or File header, clear them out, and start from there. Go into EmptyPlatform and copy either the Thread or File cpp, and stub it out to match the hpp interface. From there, copy it into WindowsPlatform, PosixPlatform, and any other platforms. Be sure to adjust 'PlasmaDeclarePrivateData' on the header to account for enough space for all the private data. Global functions are useful for quick helpers (such as getting the OS user-name, where no primitive needs to be allocated and stored). Another consideration is what errors we return from the OS when using primitives. In the beginning we either opted to ignore errors (asserting when they would happen) or to return bools. This proved to be insufficient because often we needed to give feedback to the user. For example, we attempt to open a file in their game's Content directory, but it fails due to security permissions. The assert would catch this on developer computers only because asserts are stripped in Release mode. These situations typically happen in the wild, and not on developer machines. A bool would at least give us information as to why it failed, but that's not enough for the user to correct a situation. The best approach was to use the 'Status' object. is basically a standardized way for us to return pseudo exceptions without using exception handling. We generally take the Status object by reference as the first parameter, and we set it to either success or failure with an error message provided by the OS. Callers can easily check status for failure, as well as print messages to the console or do popups in the GUI. In the future, all primitives will be moved to status (status may also get an option to automatically assert on failure, just to give more control to the caller).","title":"How To Extend Platform"},{"location":"source_docs/widgets/","text":"Needs docs...","title":"Widgets"}]}